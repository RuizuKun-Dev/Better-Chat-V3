<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Workspace" referent="RBXac63c8824c114db99fadecb26b2b83ba">
		<Properties>
			<bool name="AllowThirdPartySales">false</bool>
			<token name="AnimationWeightedBlendFix">0</token>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<token name="ClientAnimatorThrottling">0</token>
			<string name="CollisionGroups">Default^0^-1</string>
			<Ref name="CurrentCamera">RBXa32775fc6ed842429a36f481addaa5a4</Ref>
			<double name="DistributedGameTime">0</double>
			<bool name="ExplicitAutoJoints">true</bool>
			<float name="FallenPartsDestroyHeight">-500</float>
			<Vector3 name="GlobalWind">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
			</Vector3>
			<float name="Gravity">196.199997</float>
			<token name="HumanoidOnlySetCollisionsOnStateChange">0</token>
			<token name="InterpolationThrottling">0</token>
			<token name="LevelOfDetail">0</token>
			<token name="MeshPartHeadsAndAccessories">0</token>
			<CoordinateFrame name="ModelMeshCFrame">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
			<Vector3 name="ModelMeshSize">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
			</Vector3>
			<string name="Name">Workspace</string>
			<bool name="NeedsPivotMigration">false</bool>
			<token name="PhysicsSteppingMethod">0</token>
			<Ref name="PrimaryPart">null</Ref>
			<token name="ReplicateInstanceDestroySetting">0</token>
			<token name="Retargeting">0</token>
			<token name="SignalBehavior">0</token>
			<int64 name="SourceAssetId">-1</int64>
			<token name="StreamOutBehavior">0</token>
			<bool name="StreamingEnabled">false</bool>
			<int name="StreamingMinRadius">64</int>
			<token name="StreamingPauseMode">0</token>
			<int name="StreamingTargetRadius">1024</int>
			<BinaryString name="Tags"></BinaryString>
			<bool name="TerrainWeldsFixed">true</bool>
			<bool name="TouchesUseCollisionGroups">false</bool>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300019cc4</UniqueId>
			<OptionalCoordinateFrame name="WorldPivotData">
				<CFrame>
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CFrame>
			</OptionalCoordinateFrame>
		</Properties>
		<Item class="Camera" referent="RBXa32775fc6ed842429a36f481addaa5a4">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<CoordinateFrame name="CFrame">
					<X>-6.21141815</X>
					<Y>4.97723103</Y>
					<Z>-5.94044638</Z>
					<R00>-0.69116658</R00>
					<R01>0.312730491</R01>
					<R02>-0.651527822</R02>
					<R10>-1.49011612e-08</R10>
					<R11>0.901524723</R11>
					<R12>0.432727814</R12>
					<R20>0.722695589</R20>
					<R21>0.299087018</R21>
					<R22>-0.623103678</R22>
				</CoordinateFrame>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<float name="FieldOfView">70</float>
				<token name="FieldOfViewMode">0</token>
				<CoordinateFrame name="Focus">
					<X>-1.56493378</X>
					<Y>1.89115715</Y>
					<Z>-1.49667358</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="HeadLocked">true</bool>
				<float name="HeadScale">1</float>
				<string name="Name">Camera</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b783</UniqueId>
			</Properties>
		</Item>
		<Item class="Part" referent="RBXfc1638dcb7194c52a37f2da53835faa6">
			<Properties>
				<bool name="Anchored">true</bool>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>-8</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<bool name="CanQuery">true</bool>
				<bool name="CanTouch">true</bool>
				<bool name="CastShadow">true</bool>
				<int name="CollisionGroupId">0</int>
				<Color3uint8 name="Color3uint8">4284177243</Color3uint8>
				<PhysicalProperties name="CustomPhysicalProperties">
					<CustomPhysics>false</CustomPhysics>
				</PhysicalProperties>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<bool name="Massless">false</bool>
				<token name="Material">256</token>
				<string name="MaterialVariantSerialized"></string>
				<string name="Name">Baseplate</string>
				<CoordinateFrame name="PivotOffset">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<int name="RootPriority">0</int>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b788</UniqueId>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">0</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>2048</X>
					<Y>16</Y>
					<Z>2048</Z>
				</Vector3>
			</Properties>
			<Item class="Texture" referent="RBXa62bd0c1c4734ee09caec4909515b444">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<token name="Face">1</token>
					<string name="Name">Texture</string>
					<float name="OffsetStudsU">0</float>
					<float name="OffsetStudsV">0</float>
					<int64 name="SourceAssetId">-1</int64>
					<float name="StudsPerTileU">8</float>
					<float name="StudsPerTileV">8</float>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>rbxassetid://6372755229</url></Content>
					<float name="Transparency">0.800000012</float>
					<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b792</UniqueId>
					<int name="ZIndex">1</int>
				</Properties>
			</Item>
		</Item>
		<Item class="Terrain" referent="RBX9c62ec4b4e0c420eb50d084f4d18ec68">
			<Properties>
				<token name="AcquisitionMethod">0</token>
				<bool name="Anchored">true</bool>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">4</token>
				<token name="BottomSurfaceInput">0</token>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<bool name="CanQuery">true</bool>
				<bool name="CanTouch">true</bool>
				<bool name="CastShadow">true</bool>
				<int name="CollisionGroupId">0</int>
				<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
				<PhysicalProperties name="CustomPhysicalProperties">
					<CustomPhysics>false</CustomPhysics>
				</PhysicalProperties>
				<bool name="Decoration">true</bool>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<bool name="Massless">false</bool>
				<token name="Material">256</token>
				<BinaryString name="MaterialColors"><![CDATA[AAAAAAAAan8/P39rf2Y/ilY+j35fi21PZmxvZbDqw8faiVpHOi4kHh4lZlw76JxKc3trhHta
gcLgc4RKxr21zq2UlJSM]]></BinaryString>
				<string name="MaterialVariantSerialized"></string>
				<string name="Name">Terrain</string>
				<BinaryString name="PhysicsGrid">AgMAAAAAAAAAAAAAAAA=</BinaryString>
				<CoordinateFrame name="PivotOffset">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<int name="RootPriority">0</int>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<BinaryString name="SmoothGrid">AQU=</BinaryString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">3</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b790</UniqueId>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<Color3 name="WaterColor">
					<R>0.0470588282</R>
					<G>0.329411775</G>
					<B>0.360784322</B>
				</Color3>
				<float name="WaterReflectance">1</float>
				<float name="WaterTransparency">0.300000012</float>
				<float name="WaterWaveSize">0.150000006</float>
				<float name="WaterWaveSpeed">10</float>
				<Vector3 name="size">
					<X>2044</X>
					<Y>252</Y>
					<Z>2044</Z>
				</Vector3>
			</Properties>
		</Item>
		<Item class="SpawnLocation" referent="RBX5cf54876d41f465b84ba56bcfc421ce6">
			<Properties>
				<bool name="AllowTeamChangeOnTouch">false</bool>
				<bool name="Anchored">true</bool>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>0.5</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<bool name="CanQuery">true</bool>
				<bool name="CanTouch">true</bool>
				<bool name="CastShadow">true</bool>
				<int name="CollisionGroupId">0</int>
				<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
				<PhysicalProperties name="CustomPhysicalProperties">
					<CustomPhysics>false</CustomPhysics>
				</PhysicalProperties>
				<int name="Duration">0</int>
				<bool name="Enabled">true</bool>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">false</bool>
				<bool name="Massless">false</bool>
				<token name="Material">256</token>
				<string name="MaterialVariantSerialized"></string>
				<string name="Name">SpawnLocation</string>
				<bool name="Neutral">true</bool>
				<CoordinateFrame name="PivotOffset">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<int name="RootPriority">0</int>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<int name="TeamColor">194</int>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b78a</UniqueId>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">1</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>12</X>
					<Y>1</Y>
					<Z>12</Z>
				</Vector3>
			</Properties>
			<Item class="Decal" referent="RBXc0bd2b91580d4b4fb632743cb02387e0">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Color3 name="Color3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<token name="Face">1</token>
					<string name="Name">Decal</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>rbxasset://textures/SpawnLocation.png</url></Content>
					<float name="Transparency">0</float>
					<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b785</UniqueId>
					<int name="ZIndex">1</int>
				</Properties>
			</Item>
		</Item>
	</Item>
	<Item class="SoundService" referent="RBXdd7d5b6897994226b43f5e6cb2f1bd58">
		<Properties>
			<token name="AmbientReverb">0</token>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<float name="DistanceFactor">3.32999992</float>
			<float name="DopplerScale">1</float>
			<string name="Name">SoundService</string>
			<bool name="RespectFilteringEnabled">true</bool>
			<float name="RolloffScale">1</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b565</UniqueId>
		</Properties>
	</Item>
	<Item class="NonReplicatedCSGDictionaryService" referent="RBXafad26d3df1f4b5eb45bc7ac78b2765c">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">NonReplicatedCSGDictionaryService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b571</UniqueId>
		</Properties>
	</Item>
	<Item class="CSGDictionaryService" referent="RBX2f1cd285dc57403bbbcc07142d1bac72">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CSGDictionaryService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b572</UniqueId>
		</Properties>
	</Item>
	<Item class="Chat" referent="RBX044a73e84b5b4bd1884820a860a215fe">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="BubbleChatEnabled">true</bool>
			<bool name="LoadDefaultChat">false</bool>
			<string name="Name">Chat</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b577</UniqueId>
		</Properties>
	</Item>
	<Item class="TimerService" referent="RBX7d4b984bb1664a20abf474fad65d76bd">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b578</UniqueId>
		</Properties>
	</Item>
	<Item class="Players" referent="RBXe5c86aa88e604a64bebd7b572818af41">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="CharacterAutoLoads">true</bool>
			<int name="MaxPlayersInternal">30</int>
			<string name="Name">Players</string>
			<int name="PreferredPlayersInternal">30</int>
			<float name="RespawnTime">3</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b57a</UniqueId>
		</Properties>
	</Item>
	<Item class="ReplicatedFirst" referent="RBX2d318bc37b9b421ca961e98772af9a3c">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ReplicatedFirst</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b57e</UniqueId>
		</Properties>
	</Item>
	<Item class="TweenService" referent="RBX17322a2d741f4217be2411e71665e198">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">TweenService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b580</UniqueId>
		</Properties>
	</Item>
	<Item class="MaterialService" referent="RBX59d3db7987f14392925fac50a9844654">
		<Properties>
			<string name="AsphaltName">Asphalt</string>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="BasaltName">Basalt</string>
			<Ref name="Brick">null</Ref>
			<string name="BrickName">Brick</string>
			<Ref name="Cobblestone">null</Ref>
			<string name="CobblestoneName">Cobblestone</string>
			<Ref name="Concrete">null</Ref>
			<string name="ConcreteName">Concrete</string>
			<Ref name="CorrodedMetal">null</Ref>
			<string name="CorrodedMetalName">CorrodedMetal</string>
			<string name="CrackedLavaName">CrackedLava</string>
			<Ref name="DiamondPlate">null</Ref>
			<string name="DiamondPlateName">DiamondPlate</string>
			<Ref name="Fabric">null</Ref>
			<string name="FabricName">Fabric</string>
			<Ref name="Foil">null</Ref>
			<string name="FoilName">Foil</string>
			<string name="GlacierName">Glacier</string>
			<Ref name="Granite">null</Ref>
			<string name="GraniteName">Granite</string>
			<Ref name="Grass">null</Ref>
			<string name="GrassName">Grass</string>
			<string name="GroundName">Ground</string>
			<Ref name="Ice">null</Ref>
			<string name="IceName">Ice</string>
			<string name="LeafyGrassName">LeafyGrass</string>
			<string name="LimestoneName">Limestone</string>
			<Ref name="Marble">null</Ref>
			<string name="MarbleName">Marble</string>
			<Ref name="Metal">null</Ref>
			<string name="MetalName">Metal</string>
			<string name="MudName">Mud</string>
			<string name="Name">MaterialService</string>
			<string name="PavementName">Pavement</string>
			<Ref name="Pebble">null</Ref>
			<string name="PebbleName">Pebble</string>
			<Ref name="Plastic">null</Ref>
			<string name="PlasticName">Plastic</string>
			<string name="RockName">Rock</string>
			<string name="SaltName">Salt</string>
			<Ref name="Sand">null</Ref>
			<string name="SandName">Sand</string>
			<string name="SandstoneName">Sandstone</string>
			<Ref name="Slate">null</Ref>
			<string name="SlateName">Slate</string>
			<Ref name="SmoothPlastic">null</Ref>
			<string name="SmoothPlasticName">SmoothPlastic</string>
			<string name="SnowName">Snow</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<Ref name="TerrainAsphalt">null</Ref>
			<Ref name="TerrainBasalt">null</Ref>
			<Ref name="TerrainBrick">null</Ref>
			<Ref name="TerrainCobblestone">null</Ref>
			<Ref name="TerrainConcrete">null</Ref>
			<Ref name="TerrainCrackedLava">null</Ref>
			<Ref name="TerrainGlacier">null</Ref>
			<Ref name="TerrainGrass">null</Ref>
			<Ref name="TerrainGround">null</Ref>
			<Ref name="TerrainIce">null</Ref>
			<Ref name="TerrainLeafyGrass">null</Ref>
			<Ref name="TerrainLimestone">null</Ref>
			<Ref name="TerrainMud">null</Ref>
			<Ref name="TerrainPavement">null</Ref>
			<Ref name="TerrainRock">null</Ref>
			<Ref name="TerrainSalt">null</Ref>
			<Ref name="TerrainSand">null</Ref>
			<Ref name="TerrainSandstone">null</Ref>
			<Ref name="TerrainSlate">null</Ref>
			<Ref name="TerrainSnow">null</Ref>
			<Ref name="TerrainWoodPlanks">null</Ref>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b581</UniqueId>
			<bool name="Use2022Materials">false</bool>
			<Ref name="Wood">null</Ref>
			<string name="WoodName">Wood</string>
			<Ref name="WoodPlanks">null</Ref>
			<string name="WoodPlanksName">WoodPlanks</string>
		</Properties>
	</Item>
	<Item class="TextChatService" referent="RBX0cd1ccb56d4742998da86307463b4214">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<token name="ChatVersion">0</token>
			<bool name="CreateDefaultCommands">true</bool>
			<bool name="CreateDefaultTextChannels">true</bool>
			<string name="Name">TextChatService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b582</UniqueId>
		</Properties>
		<Item class="ChatWindowConfiguration" referent="RBXbed01b58c334426bb6600a9f568fa28b">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="Enabled">true</bool>
				<string name="Name">ChatWindowConfiguration</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b795</UniqueId>
			</Properties>
		</Item>
		<Item class="ChatInputBarConfiguration" referent="RBXe558b780f78f4365861838e92a8a9abb">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="Enabled">true</bool>
				<string name="Name">ChatInputBarConfiguration</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<Ref name="TargetTextChannel">null</Ref>
				<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b796</UniqueId>
			</Properties>
		</Item>
	</Item>
	<Item class="PermissionsService" referent="RBX85dea64b37d046cf96213dba848489e0">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">PermissionsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b586</UniqueId>
		</Properties>
	</Item>
	<Item class="PlayerEmulatorService" referent="RBX7f6e9766d35f4ddab8b3a878b073a5ea">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="CustomPoliciesEnabled">false</bool>
			<string name="EmulatedCountryCode"></string>
			<string name="EmulatedGameLocale"></string>
			<string name="Name">PlayerEmulatorService</string>
			<bool name="PlayerEmulationEnabled">false</bool>
			<BinaryString name="SerializedEmulatedPolicyInfo"></BinaryString>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b588</UniqueId>
		</Properties>
	</Item>
	<Item class="StudioData" referent="RBX92fa675b12764996ae034a3563fdcc7c">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<int64 name="CommitInflightAuthorId">0</int64>
			<string name="CommitInflightGuid"></string>
			<int name="CommitInflightPlaceVersion">0</int>
			<bool name="EnableScriptCollabByDefaultOnLoad">false</bool>
			<string name="Name">StudioData</string>
			<int64 name="SourceAssetId">-1</int64>
			<int64 name="SrcPlaceId">6531585849</int64>
			<int64 name="SrcUniverseId">2448884957</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b58a</UniqueId>
		</Properties>
	</Item>
	<Item class="StarterPlayer" referent="RBX423dade2661749e6933c99e034bd3fa0">
		<Properties>
			<bool name="AllowCustomAnimations">true</bool>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="AutoJumpEnabled">true</bool>
			<float name="CameraMaxZoomDistance">128</float>
			<float name="CameraMinZoomDistance">0.5</float>
			<token name="CameraMode">0</token>
			<float name="CharacterJumpHeight">7.19999981</float>
			<float name="CharacterJumpPower">50</float>
			<float name="CharacterMaxSlopeAngle">89</float>
			<bool name="CharacterUseJumpPower">false</bool>
			<float name="CharacterWalkSpeed">16</float>
			<token name="DevCameraOcclusionMode">0</token>
			<token name="DevComputerCameraMovementMode">0</token>
			<token name="DevComputerMovementMode">0</token>
			<token name="DevTouchCameraMovementMode">0</token>
			<token name="DevTouchMovementMode">0</token>
			<bool name="EnableMouseLockOption">true</bool>
			<int64 name="GameSettingsAssetIDFace">0</int64>
			<int64 name="GameSettingsAssetIDHead">0</int64>
			<int64 name="GameSettingsAssetIDLeftArm">0</int64>
			<int64 name="GameSettingsAssetIDLeftLeg">0</int64>
			<int64 name="GameSettingsAssetIDPants">0</int64>
			<int64 name="GameSettingsAssetIDRightArm">0</int64>
			<int64 name="GameSettingsAssetIDRightLeg">0</int64>
			<int64 name="GameSettingsAssetIDShirt">0</int64>
			<int64 name="GameSettingsAssetIDTeeShirt">0</int64>
			<int64 name="GameSettingsAssetIDTorso">0</int64>
			<token name="GameSettingsAvatar">1</token>
			<token name="GameSettingsR15Collision">0</token>
			<NumberRange name="GameSettingsScaleRangeBodyType">0 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeHead">0.95 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeHeight">0.9 1.05 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeProportion">0 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeWidth">0.7 1 </NumberRange>
			<float name="HealthDisplayDistance">100</float>
			<bool name="LoadCharacterAppearance">true</bool>
			<token name="LoadCharacterLayeredClothing">0</token>
			<string name="Name">StarterPlayer</string>
			<float name="NameDisplayDistance">100</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b58b</UniqueId>
			<bool name="UserEmotesEnabled">true</bool>
		</Properties>
		<Item class="StarterPlayerScripts" referent="RBX38c5d5fbb7324ac8a62f74b9d898b695">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">StarterPlayerScripts</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b78c</UniqueId>
			</Properties>
		</Item>
		<Item class="StarterCharacterScripts" referent="RBX76735bfbb3eb4be5b8e343c53817d57a">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">StarterCharacterScripts</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b78b</UniqueId>
			</Properties>
		</Item>
	</Item>
	<Item class="StarterPack" referent="RBX97aca79ffe594edc9260c9fe1bbc0254">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">StarterPack</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b58c</UniqueId>
		</Properties>
	</Item>
	<Item class="StarterGui" referent="RBX5b5bbd4ac7b341758e87e00309606a6c">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">StarterGui</string>
			<bool name="ResetPlayerGuiOnSpawn">true</bool>
			<token name="ScreenOrientation">4</token>
			<bool name="ShowDevelopmentGui">true</bool>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b58d</UniqueId>
			<token name="VirtualCursorMode">0</token>
		</Properties>
	</Item>
	<Item class="LocalizationService" referent="RBX0b6a5476f9c7422caab20af5024e6885">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">LocalizationService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b58f</UniqueId>
		</Properties>
	</Item>
	<Item class="TeleportService" referent="RBX6e663b288e1d4fc3870addf16e55f30f">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Teleport Service</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b593</UniqueId>
		</Properties>
	</Item>
	<Item class="CollectionService" referent="RBX5405e3e06eba443da0d3ac383d4bc801">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CollectionService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b595</UniqueId>
		</Properties>
	</Item>
	<Item class="PhysicsService" referent="RBX897d3737bcc641d1895a44216f0d718d">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">PhysicsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b596</UniqueId>
		</Properties>
	</Item>
	<Item class="Geometry" referent="RBX11f33e107f9d4df692c12d4743f4985e">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Geometry</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b598</UniqueId>
		</Properties>
	</Item>
	<Item class="InsertService" referent="RBX99a6af8b2c4347cb8f7de006a7a032ae">
		<Properties>
			<bool name="AllowClientInsertModels">false</bool>
			<bool name="AllowInsertFreeModels">false</bool>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">InsertService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b59a</UniqueId>
		</Properties>
		<Item class="StringValue" referent="RBXadb470d771e44b2c92088041d5fbd68d">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">InsertionHash</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b78d</UniqueId>
				<string name="Value">{ecf018e8-9bdf-4fb8-8afd-aacb78ed532a}</string>
			</Properties>
		</Item>
	</Item>
	<Item class="GamePassService" referent="RBX8e35501221f94123a588448994b26860">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">GamePassService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b59b</UniqueId>
		</Properties>
	</Item>
	<Item class="Debris" referent="RBX0efaebe1551e40319eb0be790e34ae1f">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<int name="MaxItems">1000</int>
			<string name="Name">Debris</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b59c</UniqueId>
		</Properties>
	</Item>
	<Item class="CookiesService" referent="RBX04c75c0c2fdd4d22961bdcc41b5f79bd">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CookiesService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b59d</UniqueId>
		</Properties>
	</Item>
	<Item class="VRService" referent="RBX7def0e21201049cf86850ae279fd5410">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">VRService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b5a7</UniqueId>
		</Properties>
	</Item>
	<Item class="ContextActionService" referent="RBX45df96b459c14ab680d1c8487143ae83">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ContextActionService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b5a9</UniqueId>
		</Properties>
	</Item>
	<Item class="ScriptService" referent="RBX58e844c6767d49e5b01ae46e33aa13ea">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b5ab</UniqueId>
		</Properties>
	</Item>
	<Item class="AssetService" referent="RBXf9074bbb6b914ef4b5885eaa4b88eaef">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">AssetService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b5ac</UniqueId>
		</Properties>
	</Item>
	<Item class="TouchInputService" referent="RBXc7f79233cab74d37b2057beb167b8164">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">TouchInputService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b5ad</UniqueId>
		</Properties>
	</Item>
	<Item class="AnalyticsService" referent="RBX7d5340f777a5471982c25ec9d9ce93e2">
		<Properties>
			<string name="ApiKey"></string>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">AnalyticsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b5b0</UniqueId>
		</Properties>
		<Item class="ModuleScript" referent="RBXaf928ff8b42e4ca297f07acb4737eae6">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">RobloxLSP_Settings</string>
				<string name="ScriptGuid">{4E92D598-D3E2-427E-9681-5C1B2A83B4D0}</string>
				<ProtectedString name="Source"><![CDATA[return {
	port = 27843,
	startAutomatically = false,
	exclude = {
		-- game:GetService("Workspace")
	}
}]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30002523d</UniqueId>
			</Properties>
		</Item>
	</Item>
	<Item class="Selection" referent="RBX00ce5b4334f34c94a3fd420545d66160">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Selection</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b5b3</UniqueId>
		</Properties>
	</Item>
	<Item class="ServerScriptService" referent="RBX343f1bb468b547bca3c22b18ea412f2f">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="LoadStringEnabled">false</bool>
			<string name="Name">ServerScriptService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b5b5</UniqueId>
		</Properties>
		<Item class="Folder" referent="RBX10b7a34d98f74c069566e5f8aa256cf5">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">BetterChat V3</string>
				<int64 name="SourceAssetId">9376009942</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ba2</UniqueId>
			</Properties>
			<Item class="ModuleScript" referent="RBXf870ade0cadc44e7b1999b281f879365">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Config</string>
					<string name="ScriptGuid">{C4EBFB52-D200-47B2-9A6E-4765FDC44C67}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	  ____       _   _                _____ _           _    __      ______  
	 |  _ \     | | | |              / ____| |         | |   \ \    / /___ \ 
	 | |_) | ___| |_| |_ ___ _ __   | |    | |__   __ _| |_   \ \  / /  __) |
	 |  _ < / _ \ __| __/ _ \ '__|  | |    | '_ \ / _` | __|   \ \/ /  |__ < 
	 | |_) |  __/ |_| ||  __/ |     | |____| | | | (_| | |_     \  /   ___) |
	 |____/ \___|\__|\__\___|_|      \_____|_| |_|\__,_|\__|     \/   |____/ 
	                                                                         	
	Welcome to BetterChat v3! It's going to be a fun ride for this chat system, and I can't
	wait for this to finally be public. This system has taken me so long because of some of
	school and stress, but once it's here it should be amazing.
	
	- @Jumpathy (4/2/22)
]]

return {
	Permissions = {
		Ranks = { 
			--[[
				Ranks are like permissions for the chat, we can assign things 
				like editing message access to them if you don't want regular users
				to have those. They're not admin-commands, I've just named them in this
				manner to understand more effectively.
			--]]

			[1] = "Guest", --> Rank ID 1 will automatically be assigned to each user (the config below can determine their final permission level)
			[2] = "VIP",
			[3] = "Admin",
			[4] = "Owner" --> Automatically assigned to the group creator or game creator
		},
		Users = {
			[1] = "Admin" --> Roblox -> Admin rank
		},
		Groups = {
			[1200769] = { --> Roblox admins get the admin rank automatically
				[71] = "Admin"
			}
		},
		Gamepasses = {
			[0] = "VIP" --> Gamepass 0 --> VIP rank
		},
		RobloxPremium = "VIP"
	},
	ChatTags = {
		MaxAmountTags = 10, --> Maximum amount of tags one user can have
		Users = {
			["Roblox"] = { --> Assign Roblox a red 'Owner' tag
				{
					Text = "Owner",
					Color = Color3.fromRGB(255,0,0)
				}
			}
		},
		Ranks = {
			[4] = { --> Assign the owner of the game with the chat a yellow owner tag
				{	
					Text = "Owner",
					Color = Color3.fromRGB(255,255,0),
					Priority = 5 --> If you have a max amount of tags and one user goes over it, the tags with the lowest priority will be removed first.
				}
			}
		}
	},
	TextColors = {
		Ranks = {
			[4] = Color3.fromRGB(255,255,0) --> Assign the owner role a golden text color
		},
		Users = {
			["Roblox"] = Color3.fromRGB(255,0,0) --> Assign Roblox a red chat color
		}
	},
	NameColors = {
		Ranks = {
			[4] = Color3.fromRGB(255,255,0) --> Assign the owner of the game with a yellow name color
		},
		Users = {
			["Roblox"] = Color3.fromRGB(255,0,0) --> Assign Roblox a red username
		}
	},
	UI = {
		ChatSizes = {
			Phone = UDim2.new(0.5,0,0.5,24); --> Chat size on phone
			Tablet = UDim2.new(0.4,0,0.3,24); --> Chat size on tablet
			Desktop = UDim2.new(0.3,0,0.25,24); --> Chat size on desktop
		},
		Fonts = {
			Chatbar = Enum.Font.Gotham, --> Chatbar font
			TextFont = Enum.Font.GothamSemibold --> Every other text's font in the chat
		},
		Colors = {
			SystemPrefixColor = Color3.fromRGB(253,80,111) --> Color of the prefix used for [Team] / [From: user]
		},
		ChatWindowVisible = true, --> Is it just the chatbar visible?
		ChannelBarEnabled = true, --> Channel navigation bar at the top of the chat
		SeparateChatbarFromMenu = true, --> Do separate the chat bar from the main UI?
		Resizable = true, --> Can the user resize their chat?
		Rounding = 8, --> UI roundness in px
		BaseTextSize = 16, --> Base text size for the UI
		CornerPosition = "TopLeft" --> Chat corner position (BottomRight, TopLeft, TopRight, BottomLeft)
	},
	User = {
		ChangeDisplayNameColorWhenAttributeChanged = true, --> If you change their DisplayName at run time, will it also automatically update their name color?
		NameColors = { --> Default name colors
			Color3.fromRGB(253,41,67), --> Red
			Color3.fromRGB(1,162,255), --> Blue
			Color3.fromRGB(1,236,111), --> Green
			Color3.fromRGB(174,81,202), --> Purple
			Color3.fromRGB(255,154,76), --> Orange
			Color3.fromRGB(255,211,50), --> Yellow
			Color3.fromRGB(255,205,221), --> Pink
			Color3.fromRGB(255,234,183) --> Beige
		},
		SaveData = { --> Data saving for the options menu (uses ProfileService internally)
			Enabled = true, --> Enable data-saving for these? (Better user-experience if enabled)
			Advanced = { --> Recommend not changing if you don't know what you're doing.
				DatastoreName = "BetterChatV3Data" --> Changing this can reset any existing user data for the chat until you change it back
			}
		}
	},
	DisplayNames = {
		Enabled = true, --> Are player display names enabled (attribute for the player still works but it's not set initially)
	},
	Teams = {
		TeamColorPriority = true, --> Does team color override their natural chat color?
		TeamChat = true, --> Team chat?
	},
	Notifiers = {
		FriendJoinNotifier = true, --> Notify the user when their friend joins the game?
		TeamChangeNotifier = true, --> Notify the user when their team is changed?
		BlockedUserNotifier = true, --> Place a system message in the chat when a user is blocked?
	},
	Messages = {
		FilterProcessingCharacter = "_", --> What messages are replaced with before being properly filtered and distributed (whilst pending)
		IncludeIcon = true,	--> Display a player thumbnail next to their username in the chat
		UseViewportForIcon = false, --> Use a viewport frame for this? (Helpful for Roleplay games where your avatar isn't the same as it normally would be)
		MaximumLength = 200, --> Maximum allowed message length
		DisallowedWhitespace = {"\n","\r","\t","\v","\f"}, --> Filter these characters out of the messages to prevent breaking the chat
		ChannelMessageLimit = 100, --> Max amount of messages displayed in a channel at one time
		QuickChat = true, --> Quick chat system enabled?
		Cooldown = { --> This is the chat's antispam system.
			ExpireTimePeriod = 15, --> Maximum message cooldown length
			NumberMessageAllowed = 7 --> Maximum messages allowed in a pre-defined time period
		},
		Private = {
			WhispersEnabled = true --> Private messaging between users
		},
		Extra = {
			Editable = "Guest", --> Permission needed to edit messages by right clicking / clicking the text (leaves an '(edited)' stamp)
			MarkdownEnabled = "Guest", --> Permission needed to use markdown format, eg: **bold**
			ReplyEnabled = "Guest", --> Permission needed to reply to a message
			MentionEnabled = "Guest", --> Permission needed to mention another user in the chat
			MeCommand = "Guest" --> Permission needed to use the /me command
		},
	},
	BubbleChat = {
		Enabled = true, --> Custom bubble chat enabled state (setting to false will default to the regular bubble chat which can be turned off in the properties of game.Chat)
		Config = {
			TypingIndicator = true, --> Some dots to indicate you're typing
			EasingStyle = Enum.EasingStyle.Bounce, --> The chat bubble's tween style
			Length = 0.16, --> The length per tween in the UI
			MaxMessages = 4, --> The max amount of bubble chat messages above one user's head at once
			FadeoutTime = 10, --> Message fading time
			TextSize = 16, --> This is the chat bubble's text size.
			Padding = 8, --> Padding in offset on each side of the message.
			BubbleFont = Enum.Font.GothamSemibold, --> The chat bubble's primary font.
			TypingIndicatorColor = Color3.fromRGB(255,255,255), --> Player typing indicator color.
			BubbleBackgroundColor = Color3.fromRGB(20,20,20), --> The chat bubble's background color.
			BubbleTextColor = Color3.fromRGB(255,255,255), --> The chat bubble's text color.
			Roundness = 8, --> The chat bubble's roundness in pixels
		}
	},
	SettingsMenu = { --> Settings for the chat's interface
		Enabled = true, --> Do you want it to be enabled?
		ApiEnabledAndUIDisabled = false, --> Do you want to just enable the settings API for the client & disable the UI so you can design your own?
		TopbarButton = {
			Enabled = true, --> If it's enabled, do you want a topbar button for it? If not, you can use "/settings" to open the menu.
			Icon = "rbxassetid://8654540235" --> If you use the topbar button, what icon?
		}
	}
}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ba5</UniqueId>
				</Properties>
				<Item class="Script" referent="RBXfd0b292a15f94a07b73acbec8eb9a752">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Loader</string>
						<string name="ScriptGuid">{A59F569D-A924-49B1-A0D9-46F4D9A37FF7}</string>
						<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: loader.lua
-- Description: Better chat loader

local inDevelopment = false
local configuration = require(script.Parent)
local toRequire = inDevelopment and  game:GetService("ServerScriptService"):WaitForChild("MainModule") or 9375790695
local addons = script.Parent.Parent:WaitForChild("Addons")

require(toRequire)(configuration,addons)]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ba8</UniqueId>
					</Properties>
				</Item>
			</Item>
			<Item class="Camera" referent="RBX606be401465f4f44875d618f391d26eb">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<CoordinateFrame name="CFrame">
						<X>80.488678</X>
						<Y>32.1000175</Y>
						<Z>334.24646</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<Ref name="CameraSubject">RBX08cf63a007f742b293199dfbfdc959ac</Ref>
					<token name="CameraType">0</token>
					<float name="FieldOfView">70</float>
					<token name="FieldOfViewMode">0</token>
					<CoordinateFrame name="Focus">
						<X>80.488678</X>
						<Y>32.1000175</Y>
						<Z>331.24646</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="HeadLocked">true</bool>
					<float name="HeadScale">1</float>
					<string name="Name">ThumbnailCamera</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b9c</UniqueId>
				</Properties>
				<Item class="Part" referent="RBX08cf63a007f742b293199dfbfdc959ac">
					<Properties>
						<bool name="Anchored">true</bool>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<float name="BackParamA">-0.5</float>
						<float name="BackParamB">0.5</float>
						<token name="BackSurface">0</token>
						<token name="BackSurfaceInput">0</token>
						<float name="BottomParamA">-0.5</float>
						<float name="BottomParamB">0.5</float>
						<token name="BottomSurface">0</token>
						<token name="BottomSurfaceInput">0</token>
						<CoordinateFrame name="CFrame">
							<X>-1.56493378</X>
							<Y>1.89115715</Y>
							<Z>-1.49667358</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<bool name="CanCollide">false</bool>
						<bool name="CanQuery">true</bool>
						<bool name="CanTouch">true</bool>
						<bool name="CastShadow">true</bool>
						<int name="CollisionGroupId">0</int>
						<Color3uint8 name="Color3uint8">4279308561</Color3uint8>
						<PhysicalProperties name="CustomPhysicalProperties">
							<CustomPhysics>false</CustomPhysics>
						</PhysicalProperties>
						<float name="FrontParamA">-0.5</float>
						<float name="FrontParamB">0.5</float>
						<token name="FrontSurface">0</token>
						<token name="FrontSurfaceInput">0</token>
						<float name="LeftParamA">-0.5</float>
						<float name="LeftParamB">0.5</float>
						<token name="LeftSurface">0</token>
						<token name="LeftSurfaceInput">0</token>
						<bool name="Locked">false</bool>
						<bool name="Massless">false</bool>
						<token name="Material">1088</token>
						<string name="MaterialVariantSerialized"></string>
						<string name="Name">Part</string>
						<CoordinateFrame name="PivotOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<float name="Reflectance">0</float>
						<float name="RightParamA">-0.5</float>
						<float name="RightParamB">0.5</float>
						<token name="RightSurface">0</token>
						<token name="RightSurfaceInput">0</token>
						<int name="RootPriority">0</int>
						<Vector3 name="RotVelocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<float name="TopParamA">-0.5</float>
						<float name="TopParamB">0.5</float>
						<token name="TopSurface">0</token>
						<token name="TopSurfaceInput">0</token>
						<float name="Transparency">0</float>
						<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ba6</UniqueId>
						<Vector3 name="Velocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<token name="formFactorRaw">3</token>
						<token name="shape">1</token>
						<Vector3 name="size">
							<X>4.19999981</X>
							<Y>4.19999981</Y>
							<Z>0.200000003</Z>
						</Vector3>
					</Properties>
					<Item class="PointLight" referent="RBX00f15abee10e4cdab5ae0eab2f0fe668">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<float name="Brightness">3</float>
							<Color3 name="Color">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<bool name="Enabled">true</bool>
							<string name="Name">PointLight</string>
							<float name="Range">10</float>
							<bool name="Shadows">false</bool>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ba7</UniqueId>
						</Properties>
					</Item>
					<Item class="Decal" referent="RBX25ce690d1024406bb706d67557813eea">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Color3 name="Color3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<token name="Face">2</token>
							<string name="Name">OriginalBack</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>rbxassetid://9375661735</url></Content>
							<float name="Transparency">0</float>
							<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ba1</UniqueId>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
			</Item>
			<Item class="Configuration" referent="RBX24f0c7b1d9ef4a8ca57d8ffc11990235">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">Addons</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b9d</UniqueId>
				</Properties>
				<Item class="Folder" referent="RBXfcf3ce59b8534c708c6d8b4587c4fe01">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">Server</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ba3</UniqueId>
					</Properties>
				</Item>
				<Item class="Folder" referent="RBXc27398808504494ab174bd3f82c144a8">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">Client</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ba4</UniqueId>
					</Properties>
					<Item class="Configuration" referent="RBX875726f204b3432d964334c54f302548">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<string name="Name">Autofills</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b9e</UniqueId>
						</Properties>
					</Item>
					<Item class="Configuration" referent="RBXb0949781fc72450182a67f000837c981">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<string name="Name">Commands</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b9f</UniqueId>
						</Properties>
					</Item>
					<Item class="Configuration" referent="RBXa45fb297f38947b587a7b80feb354884">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<string name="Name">Plugins</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ba0</UniqueId>
						</Properties>
					</Item>
				</Item>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBX9f9dd0b53f6e46699fa1641f03c7c24e">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">MainModule</string>
				<string name="ScriptGuid">{1A49C113-AD06-4653-81BB-814881CD093B}</string>
				<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: chat.lua
-- Description: Chat system init

return function(config,addons)
	addons.Parent.Parent = game:GetService("ServerScriptService")
	
	local messageEditingPermissions = config.Messages.Extra.Editable
	local replyEnabled = config.Messages.Extra.ReplyEnabled
	local mentioningEnabled = config.Messages.Extra.MentionEnabled

	local displayNamesEnabled = config.DisplayNames.Enabled
	local teamsOverride = config.Teams.TeamColorPriority
	local teamChatEnabled = config.Teams.TeamChat

	local players = game:GetService("Players")
	local replicatedStorage = game:GetService("ReplicatedStorage")
	local teams = game:GetService("Teams")
	local chatService = game:GetService("Chat")
	local textService = game:GetService("TextService")
	local constructors

	local profileService = require(script:WaitForChild("core"):WaitForChild("services"):WaitForChild("profile"))(config,function()
		return constructors
	end)

	local sharedFolder = script:WaitForChild("shared")
	local network = require(sharedFolder:WaitForChild("network"))
	local signal = require(sharedFolder:WaitForChild("signal"))
	
	sharedFolder.Name = "betterchat_shared"
	sharedFolder.Parent = replicatedStorage
	addons:WaitForChild("Client").Parent = sharedFolder:WaitForChild("addons")

	local serverAddons = addons:WaitForChild("Server");
	serverAddons.Parent = script:WaitForChild("core")
	serverAddons.Name = "plugins"
	
	local core = script:WaitForChild("core")
	local classes = core:WaitForChild("constructors")

	local rateLimit = require(core:WaitForChild("rateLimit"))(config)
	local util = require(core:WaitForChild("utility"))(config)
	local permission = require(core:WaitForChild("permission"))(config)

	local cooldowns = {}
	local speakers = {}

	local fetchChannels = function(speaker)
		local channels = speaker.channels
		local names = {}
		for _,channel in pairs(channels) do
			table.insert(names,channel.name)
		end
		return names
	end

	local services = {}

	constructors = {
		speaker = require(classes:WaitForChild("speaker"))(network,fetchChannels,signal),
		channel = require(classes:WaitForChild("channel"))(network,config,signal),
		message = require(classes:WaitForChild("message"))(util,config,messageEditingPermissions,permission),
		profileService = profileService,
		network = network,
		signal = signal
	}
	
	local api = require(core:WaitForChild("api"))(constructors)
	constructors.speaker:setup(constructors.channel)
	constructors.channel:setup(constructors.speaker,constructors.message)

	network:newEvent("receiveMessage")
	network:newEvent("receiveMessageCreation")
	network:newEvent("receiveChannelUpdate")
	network:newEvent("receiveMuteUpdate")

	local defaultChannel = constructors.channel.new("Main",true)

	local connections = {}
	local teamIds = {}

	local link = function(conns,connection)
		table.insert(conns,connection)
	end

	local getById = function(id)
		for _,plr in pairs(players:GetPlayers()) do
			if(math.abs(plr.UserId) == id) then
				return plr
			end
		end
	end

	local getTeamId = function(team)
		if(teamIds[team]) then
			return teamIds[team]
		else
			teamIds[team] = "team_" .. util:newGuid()
			return teamIds[team]
		end
	end

	local workshop = function(message)
		return message
	end

	local onPlayer = function(player)
		local name,display = player.Name,(displayNamesEnabled and player.DisplayName or player.Name)
		local _,speaker = constructors.speaker.new(name,player)
		local list = {}
		connections[player] = list
		player:SetAttribute("DisplayName",display)
		player:SetAttribute("DisplayNameColor",util:getNameColor(display))
		player:SetAttribute("NameColor",util:getNameColor(name))
		player:SetAttribute("ChatColor",Color3.fromRGB(255,255,255))
		player:SetAttribute("UseTeamColor",teamsOverride)
		player:SetAttribute("Muted",false)
		
		if(config.User.ChangeDisplayNameColorWhenAttributeChanged) then
			link(list,player:GetAttributeChangedSignal("DisplayName"):Connect(function()
				player:SetAttribute("DisplayNameColor",util:getNameColor(player:GetAttribute("DisplayName")))
			end))
			link(list,player:GetAttributeChangedSignal("Muted"):Connect(function()
				speaker:updateMuteStatus(player:GetAttribute("Muted"))
			end))
		end
		if(teamChatEnabled) then
			local lastTeam
			link(list,player.Changed:Connect(function()
				pcall(function()
					if(player.Team ~= nil and (not player.Neutral)) then
						lastTeam = player.Team
						local teamId = getTeamId(player.Team)
						local chatChannel = constructors.channel:getByName(teamId)
						if(not chatChannel) then
							local _,new = constructors.channel.new(teamId,false)
							new:registerMessageProcess("on_create",function(message)
								message.data.isTeam = true
							end)
							chatChannel = new
						end
						chatChannel:addSpeaker(speakers[player])
					elseif(lastTeam) then
						local teamId = getTeamId(lastTeam)
						lastTeam = nil
						if(table.find(fetchChannels(speakers[player]),teamId)) then
							local chatChannel = constructors.channel:getByName(teamId)
							chatChannel:removeSpeaker(speakers[player])
						end
					end
				end)
			end))
		end
		speakers[player] = speaker
		cooldowns[player] = rateLimit:createCooldown(player.UserId)
		permission:get(player.UserId)
		util:verifyChatInstalled(player)
	end
	
	-- Plugins
	
	local onPlugin = function(module)
		require(module)(api)
	end
	serverAddons.ChildAdded:Connect(onPlugin)
	for _,pluginModule in pairs(serverAddons:GetChildren()) do
		task.spawn(onPlugin,pluginModule)
	end

	-- Remotes:

	local failed_payload = {messages = {}}
	
	network:newFunction("getChannelsIn",function(player)
		return fetchChannels(speakers[player])
	end)

	network:newFunction("requestHistory",function(player,channel)
		if(type(channel) == "string") then
			local channel = constructors.channel:getByName(channel)
			if(channel) then
				return channel:getHistoryForSpeaker(speakers[player]) or failed_payload
			else
				return failed_payload
			end
		else
			return failed_payload
		end
	end)

	network:newFunction("requestConfig",function()
		return config
	end)

	network:newFunction("requestMessage",function(player,message,channel,extraData)
		if(type(message) == "string" and type(channel) == "string" and #message:gsub(" ","") >= 1) then
			if(util:getSendability(message)) then
				message = workshop(message)
				local speaker = speakers[player]
				if(speaker.muted) then
					return false,true,{"GameChat_ChatChannel_MutedInChannel"}
				end

				--------- Team chat logic: ---------

				if(extraData and extraData.team and teamChatEnabled) then
					if(player.Team == extraData.team) then
						channel =  getTeamId(extraData.team)
					end
				end

				--------- Whisper logic:  ---------

				-- Flow: Extract IDs from whisper channel -> get players -> create channel if it doesn't exist
				-- -> continue to regular

				if(config.Messages.Private.WhispersEnabled) then
					if(channel:sub(1,8) == "whisper_") then
						local list = channel:split("_")
						local count = 0
						local ids = {math.abs(list[2] and tonumber(list[2]) or 0),math.abs(list[3] and tonumber(list[3]) or 0)}
						table.sort(ids)
						local name = "whisper_" .. table.concat(ids,"_")
						for key,id in pairs(ids) do
							if(getById(id) ~= nil) then
								ids[key] = getById(id)
								count += 1
							end
						end
						if(count == 2 and (ids[1] ~= ids[2])) then -- make sure both users are valid and ensure they're not whispering to themselves
							local chatChannel = constructors.channel:getByName(name)
							if(not chatChannel) then
								local _,new = constructors.channel.new(name,false)
								chatChannel = new
								chatChannel:registerMessageProcess("on_create",function(message)
									message.data.isWhisper = true
									message.data.from_user = message.senderId
								end)
								local removing
								removing = players.PlayerRemoving:Connect(function(p)
									for _,plr in pairs(ids) do
										if(p == plr) then
											chatChannel:Destroy()
											removing:Disconnect()
											break
										end
									end
								end)
							end
							for _,plr in pairs(ids) do
								chatChannel:addSpeaker(speakers[plr])
							end
						end
					end
				end

				--------- Reply logic: ---------
				-- Flow: Check if message exists -> Check if message channel exists ->
				-- check if the user can talk in that channel -> check their cooldown -> send message

				if(channel:sub(1,6) == "reply_" and (permission:canUse(replyEnabled,player.UserId))) then
					local replyTo = tonumber(channel:sub(7,#channel))
					if(replyTo) then
						local existing = constructors.message:getById(replyTo)
						if(existing) then
							local channelFrom = existing.data.channelFrom
							local chatChannel = constructors.channel:getByName(channelFrom)
							if(chatChannel and chatChannel:canSpeakerTalk(speaker)) then
								local userCooldown = cooldowns[player]
								if(userCooldown:canSend()) then
									userCooldown:log()
									message = util:fixWhitespace(message)
									if(#message >= 1) then
										speaker:say(channelFrom,message,existing)
										return true
									end
								else
									return false,true,{"GameChat_ChatFloodDetector_MessageDisplaySeconds",userCooldown:getCooldown()}
								end
							else
								return false
							end
						else
							return false
						end
					else
						return false
					end
				end

				--------- Regular message logic: ---------
				-- Flow: Check if channel exists -> check if the user can talk in that channel -> check their cooldown -> send message

				local chatChannel = constructors.channel:getByName(channel)
				if(chatChannel and chatChannel:canSpeakerTalk(speaker)) then
					local userCooldown = cooldowns[player]
					if(userCooldown:canSend()) then
						userCooldown:log()
						message = util:fixWhitespace(message)
						if(#message >= 1) then
							speaker:say(channel,message)
							return true
						else
							return false
						end
					else
						return false,true,{"GameChat_ChatFloodDetector_MessageDisplaySeconds",userCooldown:getCooldown()}
					end
				else
					return false
				end
			else
				return false
			end
		else
			return false
		end
	end)

	network:newEvent("editMessage",function(player,id,channel,new)
		if(permission:canUse(messageEditingPermissions,player.UserId)) then -- dw ya boi got sanity checks
			if(type(new) == "string" and type(channel) == "string" and #new:gsub(" ","") >= 1) then
				if(util:getSendability(new)) then
					local chatChannel = constructors.channel:getByName(channel)
					local speaker = speakers[player]
					if(chatChannel and chatChannel:canSpeakerTalk(speaker)) then
						local existing = chatChannel:getMessageById(id)
						if(existing and existing.senderId == player.UserId) then
							local userCooldown = cooldowns[player]
							if(userCooldown:canSend() and #new >= 1) then
								new = workshop(new)
								userCooldown:log()
								chatChannel:editMessage(id,new)
							end
						end
					end
				end
			end
		end
	end)

	if(config.BubbleChat.Enabled and config.BubbleChat.Config.TypingIndicator) then
		-- replicate typing indicator status
		network:newEvent("typingIndicator",function(player,hasTypingIndicator)
			if(type(hasTypingIndicator) == "boolean") then
				network:fireClients("typingIndicator","all",player,hasTypingIndicator)
			end
		end)
	end

	-- Config-saving:
	
	local availableOptions = {
		BubbleChat = {
			["Enabled"] = true,
			["AnimationStyle"] = true,
			["EasingStyle"] = true,
			["FadeoutTime"] = true,
			["Font"] = true
		},
		UI = {
			Resizable = true,
			Roundness = true,
			TextSize = true
		}
	}
	
	local allowed = {"number","string","boolean"}
	network:newFunction("writeConfig",function(player,location,configName,configValue)
		if(location ~= "QuickChats") then
			if(availableOptions[location]) then
				local option = availableOptions[location][configName]
				if(option ~= nil) then
					if(table.find(allowed,typeof(configValue))) then
						if(type(configValue) == "string") then
							configValue = configValue:sub(1,35)
						elseif(type(configValue) == "number") then
							configValue = math.floor(configValue)
						end
						local success,profile = profileService:get(player)
						if(success) then
							profile.config = profile.config or {}
							profile.config[location] = profile.config[location] or {}
							profile.config[location][configName] = configValue
							return true
						end
					end
				end
			end
		else
			local filter = function(text,player)
				local success,response = pcall(function()
					return chatService:FilterStringAsync(text,player,player)
				end)
				if(not success) then
					return("Failed to filter")
				else
					return(response)
				end
			end
			
			local place = math.clamp((tonumber(configName) or 0),1,20)
			local value = filter(tostring(configValue):sub(1,config.Messages.MaximumLength),player)
			
			local success,profile = profileService:get(player)
			if(success) then
				profile.config = profile.config or {}
				profile.config[location] = profile.config[location] or {}
				profile.config[location][place] = value
				return value
			end
		end
		return false
	end)

	network:newFunction("fetchUserConfig",function(player)
		local success,profile = profileService:get(player)
		if(success) then
			return profile.config or {}
		end
	end)

	-- Data-saving:

	if(config.User.SaveData.Enabled) then
		profileService.new(config.User.SaveData.Advanced.DatastoreName)
	end
	
	-- Client
	
	local client = script:WaitForChild("client")
	client.Name = "betterChatClient"
	client.Parent = game:GetService("StarterPlayer"):WaitForChild("StarterPlayerScripts")
	
	-- Player connections:

	players.PlayerAdded:Connect(onPlayer)
	for _,player in pairs(players:GetPlayers()) do
		task.spawn(onPlayer,player)
	end

	players.PlayerRemoving:Connect(function(player)
		local speaker = constructors.speaker:getByName(player.Name)
		if(speaker ~= nil) then
			speaker:Destroy()
			local list = connections[player]
			for k,conn in pairs(list) do
				conn:Disconnect()
				table.remove(list,k)
			end
			connections[player] = nil
			speakers[player] = nil
			rateLimit:unlink(player.UserId)
		end
	end)
end]]></ProtectedString>
				<int64 name="SourceAssetId">9375790695</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a42</UniqueId>
			</Properties>
			<Item class="Folder" referent="RBXd39daacb5a8e4467838af75fe91ce41c">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">core</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259a2</UniqueId>
				</Properties>
				<Item class="ModuleScript" referent="RBX67421072975c40d0af0a3dd3e23ef468">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">utility</string>
						<string name="ScriptGuid">{E57392EE-48F0-493A-B6B9-D37BB28D0A52}</string>
						<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: utility.lua
-- Description: Utility functions
-- Credit: @Xsitsu (base code for some functions)

return function(config)
	local extract = require(script:WaitForChild("extract"))
	local httpService = game:GetService("HttpService")
	
	local maxMessageLength = config.Messages.MaximumLength
	local maxBytes = 6
	local utility = {}

	local nameColors = config.User.NameColors
	local getNameValue = function(name)
		local value = 0
		local nameLength = string.len(name)
		for i = 1,nameLength do
			local charValue = string.byte(name:sub(i,i))
			local reverseIndex = nameLength - i + 1
			if(nameLength % 2 == 1) then
				reverseIndex -= 1
			end
			if(reverseIndex % 4 >= 2) then
				charValue = -charValue
			end
			value += charValue
		end
		return value
	end

	function utility:getNameColor(name)
		return nameColors[((getNameValue(name)) % #nameColors) + 1]
	end

	function utility:getSendability(message)
		if((not(string.len(message) > maxMessageLength * maxBytes))) then
			if((not(utf8.len(message) == nil))) then
				if(not(utf8.len(utf8.nfcnormalize(message)) > maxMessageLength)) then
					return(true)
				end
			end
		end
		return(false)
	end

	function utility:fixWhitespace(message)
		local disallowedWhitespace = config.Messages.DisallowedWhitespace
		for _,character in pairs(disallowedWhitespace) do
			if(character == "\t") then
				message = message:gsub(character,string.char(32))
			else
				message = message:gsub(character,"")
			end
		end
		message = message:gsub("\n","")
		message = message:gsub("[ ]+"," ")
		if(message:sub(1,1) == " ") then
			local endAt = 0
			for i = 1,#message do
				endAt = i
				if(message:sub(i,i) ~= " ") then
					break
				end
			end
			message = message:sub(endAt,#message)
		end
		return message
	end
	
	function utility:constructViewportDescription(character)
		local humanoid = character:FindFirstChildOfClass("Humanoid")
		if(humanoid) then
			return extract(humanoid:GetAppliedDescription())
		end
	end
	
	function utility:newGuid()
		return httpService:GenerateGUID(false):gsub("-","")
	end
	
	function utility:verifyChatInstalled(player)
		local source = script:WaitForChild("chatInstaller"):Clone()
		local house = Instance.new("ScreenGui")
		house.Name = "betterChatInstaller"
		house.ResetOnSpawn = false
		source.Parent = house
		house.Parent = player.PlayerGui
	end
	
	return utility
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a43</UniqueId>
					</Properties>
					<Item class="ModuleScript" referent="RBX26b9a85376404b6b9558281282af872e">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">extract</string>
							<string name="ScriptGuid">{11DFA325-FB0F-41D1-8397-07C07B105D2A}</string>
							<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: extract.lua
-- Description: Extract humanoid description to a table

local propertiesToExtract = {
	"Archivable",
	"BackAccessory",
	"BodyTypeScale",
	"ClimbAnimation",
	"DepthScale",
	"Face",
	"FaceAccessory",
	"FallAnimation",
	"FrontAccessory",
	"GraphicTShirt",
	"HairAccessory",
	"HatAccessory",
	"Head",
	"HeadColor",
	"HeadScale",
	"HeightScale",
	"IdleAnimation",
	"JumpAnimation",
	"LeftArm",
	"LeftArmColor",
	"LeftLeg",
	"LeftLegColor",
	"NeckAccessory",
	"Pants",
	"ProportionScale",
	"RightArm",
	"RightArmColor",
	"RightLeg",
	"RightLegColor",
	"RunAnimation",
	"Shirt",
	"ShouldersAccessory",
	"SwimAnimation",
	"Torso",
	"TorsoColor",
	"WaistAccessory",
	"WalkAnimation",
	"WidthScale"
}

return function(description)
	local extracted = {}
	for _,property in pairs(propertiesToExtract) do
		extracted[property] = description[property]
	end
	return extracted
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a44</UniqueId>
						</Properties>
					</Item>
					<Item class="LocalScript" referent="RBX24e36e49e5854946b12bb95a9cbe7cc2">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="Disabled">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">chatInstaller</string>
							<string name="ScriptGuid">{B9609C4D-5E7F-48EB-9185-E781005AAF90}</string>
							<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: chatInstaller.lua
-- Description: Verify chat installation on clientside

local player = game:GetService("Players").LocalPlayer
local holder = game:GetService("StarterPlayer").StarterPlayerScripts
local scripts = player.PlayerScripts

if(not scripts:FindFirstChild("betterChatClient")) then
	holder:WaitForChild("betterChatClient").Parent = scripts
end

task.wait()
script.Parent:Destroy()]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a31</UniqueId>
						</Properties>
					</Item>
				</Item>
				<Item class="Folder" referent="RBXacdb950e12c3449cb2b2d74d9638b69e">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">constructors</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259a3</UniqueId>
					</Properties>
					<Item class="ModuleScript" referent="RBX48109c1557714f859793f04706277641">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">speaker</string>
							<string name="ScriptGuid">{456BD9CB-C140-4A6F-BEFE-CEAA68C4FF72}</string>
							<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: speaker.lua
-- Description: Speaker objects manager

return function(network,fetch,signal)
	local speakerModule = {}
	speakerModule.internal = {}
	speakerModule.internal.speakers = {}
	speakerModule.speakerAdded = signal.new()
	speakerModule.speakerRemoved = signal.new()
	
	local speakersList = speakerModule.internal.speakers
	local channel

	function speakerModule.new(name,player)
		if(speakersList[name] ~= nil) then
			warn(("[Better Chat]: Speaker '%s' already exists."):format(name))
			return false
		end
		
		local speaker = {}
		speaker.name = name
		speaker.channels = {}
		speaker.isPlayer = (player ~= nil)
		speaker.id = (speaker.isPlayer and player.UserId or nil)
		speaker.player = player
		speaker.muted = false
		speaker.icon = ""
		speaker.events = {
			channelUpdated = signal.new(),
			muteUpdate = signal.new(),
			chatted = signal.new()
		}
		
		if(player) then
			speaker.events.channelUpdated:Connect(function()
				network:fireClients("receiveChannelUpdate",{player},fetch(speaker))
			end)
			speaker.events.muteUpdate:Connect(function()
				network:fireClients("receiveMuteUpdate",{player},speaker.muted)
			end)
		end
		
		function speaker:unmute()
			speaker.muted = false
			speaker.events.muteUpdate:Fire(false)
		end
		
		function speaker:mute()
			speaker.muted = true
			speaker.events.muteUpdate:Fire(true)
		end
		
		function speaker:updateMuteStatus(state)
			speaker.muted = state
			speaker.events.muteUpdate:Fire(state)
		end
		
		function speaker:addToChannel(channelName)
			channel:getByName(channelName):addSpeaker(speaker)
		end
		
		function speaker:removeFromChannel(channelName)
			channel:getByName(channelName):removeSpeaker(speaker)
		end
		
		function speaker:setIcon(icon)
			speaker.icon = icon
		end
		
		function speaker:say(channelName,message,existing)
			local toSendIn = channel:getByName(channelName)
			if(not toSendIn:canSpeakerTalk(speaker)) then
				warn(("%s cannot talk in channel '%s'"):format(speaker.name,channelName))
				return
			end
			local object = toSendIn:sendMessage(speaker,message,existing)
			speaker.events.chatted:Fire(message,object)
			return object
		end
		
		function speaker:Destroy()
			for _,channel in pairs(speaker.channels) do
				pcall(function()
					channel:removeSpeaker(speaker)
				end)
			end
			for _,event in pairs(speaker.events) do
				event:DisconnectAll()
			end
			speakersList[name] = nil
			speakerModule.speakerRemoved:Fire(name)
		end

		speakersList[name] = speaker
		channel:findAutojoinForSpeaker(speaker)
		speakerModule.speakerAdded:Fire(speaker)

		return true,speaker
	end
	
	function speakerModule:getByName(name)
		return speakersList[name]
	end

	function speakerModule:getById(id)
		for _,speaker in pairs(speakersList) do
			if(speaker.id == id) then
				return speaker
			end
		end
	end

	function speakerModule:getSpeakers()
		return speakersList
	end

	function speakerModule:setup(module)
		channel = module
	end

	return speakerModule
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a45</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX7b6d89c330b24551b6806dc9d98adaf5">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">channel</string>
							<string name="ScriptGuid">{06BC4646-D51E-4CD1-948E-360158953C06}</string>
							<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: channel.lua
-- Description: Channel objects manager

local chatService = game:GetService("Chat")
local players = game:GetService("Players")

return function(network,config,signal)
	local channelModule = {}
	channelModule.internal = {}
	channelModule.internal.channels = {}

	local channelsList = channelModule.internal.channels
	local messagesLimit = config.Messages.ChannelMessageLimit
	local speaker
	local messages

	local shallowCopy = function(original)
		local copy = {}
		for key,value in pairs(original) do
			copy[key] = value
		end
		return copy
	end

	-- check out the sick networking I had a stroke trying to write :skull:

	local canCommunicate = function(senderId,userId)
		local canCommunicate = false
		if(senderId ~= nil) then
			local success,chat = pcall(function()
				return chatService:CanUsersChatAsync(senderId,userId)
			end)
			if(success) then
				canCommunicate = chat
			end
		end
		return canCommunicate
	end

	local getFilteredMessage = function(object,speaker)
		local messageOwner = object.sender
		local filterObject = object.filtered
		if(((not object.data.isPlayer) or canCommunicate(messageOwner.UserId,speaker.player.UserId))) then
			local messageContent = filterObject:GetChatForUserAsync(not object.data.isPlayer and "" or speaker.player.UserId)
			local copiedData = shallowCopy(object.data)
			copiedData.message = messageContent
			return copiedData
		end
	end

	local replicateMessage = function(channel,object)
		local messageOwner = object.sender
		for _,speaker in pairs(channel.speakers) do
			task.spawn(function()
				if(speaker.player ~= nil) then 
					if(((not object.data.isPlayer) or canCommunicate(messageOwner.UserId,speaker.player.UserId))) then
						local toSend = getFilteredMessage(object,speaker)
						if(toSend.replyingTo ~= nil) then
							toSend.replyingTo = getFilteredMessage(toSend.replyingTo,speaker)
							if(not toSend.replyingTo) then -- failed to communicate
								return
							end
						end
						network:fireClients("receiveMessage",{speaker.player},{messages = {toSend},is_singular = true})
					end
				end
			end)
		end
	end

	local replicateRawMessage = function(channel,object)
		for _,speaker in pairs(channel.speakers) do
			task.spawn(function()
				if(speaker.player ~= nil) then
					network:fireClients("receiveMessage",{speaker.player},{messages = {object},is_singular = true})
				end
			end)
		end
	end

	local replicateEditedMessage = function(channel,object)
		local messageOwner = object.sender
		for _,speaker in pairs(channel.speakers) do
			task.spawn(function()
				if(speaker.player ~= nil and (object.data.isPlayer)) then 
					if(canCommunicate(messageOwner.UserId,speaker.player.UserId)) then
						local toSend = getFilteredMessage(object,speaker)
						if(toSend.replyingTo ~= nil) then
							toSend.replyingTo = getFilteredMessage(toSend.replyingTo,speaker)
							if(not toSend.replyingTo) then -- failed to communicate
								return
							end
						end
						network:fireClients("editMessage",{speaker.player},toSend)
					end
				elseif(not object.data.isPlayer and (speaker.player ~= nil)) then
					local toSend = getFilteredMessage(object,speaker)
					if(toSend.replyingTo ~= nil) then
						toSend.replyingTo = getFilteredMessage(toSend.replyingTo,speaker)
						if(not toSend.replyingTo) then -- failed to communicate
							return
						end
					end
					network:fireClients("editMessage",{speaker.player},toSend)
				end
			end)
		end
	end

	local replicateUnfilteredMessage = function(channel,object)
		local messageOwner = object.sender
		for _,speaker in pairs(channel.speakers) do
			task.spawn(function()
				if(speaker.player ~= nil) then 
					if((not object.data.isPlayer) or canCommunicate(messageOwner.UserId,speaker.player.UserId)) then
						local toSend = shallowCopy(object.data)
						toSend.message = string.rep("_",toSend.length)
						if(toSend.replyingTo ~= nil) then
							toSend.replyingTo = getFilteredMessage(toSend.replyingTo,speaker)
							if(not toSend.replyingTo) then -- failed to communicate
								return
							end
						end
						network:fireClients("receiveMessageCreation",{speaker.player},{messages = {toSend},is_singular = true})
					end
				end
			end)
		end
	end

	local fetchChannelHistoryForSpeaker = function(channel,speaker)
		-- Flow: Loop through channel history -> ensure message sender is still in game -> 
		-- see if it's a reply and see if the original message owner is still in-game -> add to history
		local receive = {messages = {}}
		for _,object in pairs(channel.history) do
			if(speaker.player ~= nil) then 
				local canSeeMessage = false
				if(object.data.isPlayer) then
					if(object.senderId ~= nil) then
						if(players:GetPlayerByUserId(object.senderId)) then
							canSeeMessage = canCommunicate(object.senderId,speaker.player.UserId)
						end
					end
				else
					canSeeMessage = true
				end
				if(canSeeMessage) then
					local toSend = getFilteredMessage(object,speaker)
					local checkThreadReplies = function()
						if(toSend.replyingTo ~= nil) then
							if(not players:GetPlayerByUserId(toSend.replyingTo.sender and toSend.replyingTo.sender.UserId or 0)) then
								if(toSend.replyingTo.isPlayer) then
									return -- message doesnt exist
								end
							end
							toSend.replyingTo = getFilteredMessage(toSend.replyingTo,speaker)
							if(not toSend.replyingTo) then -- failed to communicate
								return
							end
						end
					end
					checkThreadReplies()
					table.insert(receive.messages,1,toSend)
				end
			else
				table.insert(receive.messages,1,object)
			end
		end
		return receive
	end

	function channelModule.new(name,autojoin)
		if(channelsList[name] ~= nil) then
			warn(("[Better Chat]: Channel '%s' already exists."):format(name))
			return false
		end
		local channel = {}
		channel.name = name
		channel.autoJoin = autojoin
		channel.speakers = {}
		channel.history = {}
		channel.messageProcessing = {}
		channel.messageCount = 0
		channel.events = {
			chatted = signal.new(),
			speakerAdded = signal.new(),
			speakerRemoved = signal.new()
		}

		function channel:Destroy()
			channelsList[name] = nil
			for _,speaker in pairs(channel.speakers) do
				speaker.channels[name] = nil
				speaker.events.channelUpdated:Fire()
			end
			for _,event in pairs(channel.events) do
				event:DisconnectAll()
			end
			for k,v in pairs(channel) do
				channel[k] = nil
			end
		end

		function channel:registerMessageProcess(name,callback)
			table.insert(channel.messageProcessing,{
				name = name,
				callback = callback
			})
		end

		function channel:unregisterMessageProcess(name)
			for key,processData in pairs(channel.messageProcessing) do
				if(processData.name == name) then
					table.remove(channel.messageProcessing,key)
					break
				end
			end
		end

		function channel:canSpeakerTalk(speaker)
			return(table.find(channel.speakers,speaker) ~= nil)
		end

		function channel:addSpeaker(speaker)
			if(not table.find(channel.speakers,speaker)) then
				table.insert(channel.speakers,speaker)
				speaker.channels[name] = channel
				speaker.events.channelUpdated:Fire()
				channel.events.speakerAdded:Fire(speaker)
			end
		end

		function channel:removeSpeaker(speaker)
			local key = table.find(channel.speakers,speaker)
			if(key) then
				table.remove(channel.speakers,key)
				speaker.channels[name] = nil
				speaker.events.channelUpdated:Fire()
				channel.events.speakerRemoved:Fire(speaker.name)
			end
		end

		local callbacks = {
			onFiltered = function(object)
				replicateMessage(channel,object)
			end,
			onCreated = function(object)
				replicateUnfilteredMessage(channel,object)
			end,
			processMessage = function(object,isFiltered)
				for _,process in pairs(channel.messageProcessing) do
					process.callback(object)
				end
			end,
		}

		function channel:sendMessage(speaker,message,replyTo)
			local object = messages.new(message,speaker,name,replyTo,callbacks)
			channel.messageCount += 1
			table.insert(channel.history,1,object)
			if(#channel.history > messagesLimit) then
				table.remove(channel.history,#channel.history)
			end
			channel.events.chatted:Fire(object)
			return object
		end

		function channel:editMessage(id,new)
			for _,message in pairs(channel.history) do
				if(message.data.id == id) then
					messages.edit(message,new)
					replicateEditedMessage(channel,message)
					break
				end
			end
		end

		function channel:getMessageById(id)
			for _,message in pairs(channel.history) do
				if(message.data.id == id) then
					return message
				end
			end
		end

		function channel:getHistoryForSpeaker(speaker)
			if(channel:canSpeakerTalk(speaker)) then
				return fetchChannelHistoryForSpeaker(channel,speaker)
			end
		end

		channelsList[name] = channel
		for _,speaker in pairs(speaker:getSpeakers()) do
			channelModule:findAutojoinForSpeaker(speaker)
		end
		return true,channel
	end

	function channelModule:getByName(name)
		return channelsList[name]
	end

	function channelModule:findAutojoinForSpeaker(speaker)
		for _,channel in pairs(channelsList) do
			if(channel.autoJoin) then
				channel:addSpeaker(speaker)
			end
		end
	end

	function channelModule:setup(speakerModule,messageModule)
		speaker = speakerModule
		messages = messageModule
	end

	return channelModule
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a46</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX302f55c8e8af41028725f9da111fecc9">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">message</string>
							<string name="ScriptGuid">{D2B99E10-E11F-4B2B-832D-F8DE1BEA7396}</string>
							<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: message.lua
-- Description: Message object wrapper

return function(utility,config,messageEditingEnabled,permission)
	local message = {}
	local filter = require(script:WaitForChild("filter"))(config)
	local httpService = game:GetService("HttpService")
	local ids = 0
	local messages = {}
	
	local get = function(speaker,property,callback)
		if(speaker.player) then
			if(property ~= "TeamColor") then
				return speaker.player:GetAttribute(property)
			elseif(speaker.player:GetAttribute("UseTeamColor")) then
				return(speaker.player.Team ~= nil and speaker.player.TeamColor.Color)
			end
		else
			return callback(speaker,property)
		end
	end
	
	local getExtraData = function(speaker,propertyName)
		if(propertyName == "DisplayName") then
			return speaker.name
		end
	end
	
	local getChatColor = function(speaker,propertyName)
		return speaker.chatColor or Color3.fromRGB(255,255,255)
	end
	
	local getNameColor = function(speaker,propertyName)
		return utility:getNameColor(speaker.name)
	end
	
	local returnTrue = function()
		return true
	end
	
	local returnNil = function()
		return nil
	end
	
	local getViewportFrom = function(player)
		if(player and config.Messages.UseViewportForIcon and player.Character and config.Messages.IncludeIcon) then
			return utility:constructViewportDescription(player.Character)
		end
	end
	
	local no = function() end
	local blank = {onCreated = no, processMessage = no, onFiltered = no}
	
	function message.new(text,speaker,channel,replyTo,callbacks,isBroadcast)
		ids += 1
		local messageId = ids
		local canUseMeCommand = (speaker.player and permission:canUse(config.Messages.Extra.MeCommand,speaker.player.UserId))
		local senderId = speaker.player and speaker.player.UserId or speaker.id
		local viewport = getViewportFrom(speaker.player)
		
		local object = {
			data = {
				isPlayer = (speaker.player ~= nil),
				guid = httpService:GenerateGUID(false),
				replyingTo = replyTo,
				length = string.len(text),
				displayName = get(speaker,"DisplayName",getExtraData),
				displayNameColor = get(speaker,"DisplayNameColor",getNameColor),
				nameColor = get(speaker,"NameColor",getNameColor),
				name = speaker.name,
				teamPriority = get(speaker,"UseTeamColor",returnTrue),
				teamColor = get(speaker,"TeamColor",returnNil),
				filteredSuccessfully = false,
				class = replyTo and "reply" or "regular",
				player = speaker.player,
				viewportData = viewport,
				id = messageId,
				channelFrom = channel,
				editingEnabled = speaker.player and permission:canUse(messageEditingEnabled,speaker.player.UserId),
				senderId = senderId,
				requiredToReply = (speaker.player and permission:tonumber(config.Messages.Extra.ReplyEnabled)) or 0,
				userPermission = (speaker.player and permission:get(speaker.player.UserId)) or 0,
				markdownEnabled = (speaker.player and permission:canUse(config.Messages.Extra.MarkdownEnabled,speaker.player.UserId)) or 0,
				mentioningEnabled = (speaker.player and permission:canUse(config.Messages.Extra.MentionEnabled,speaker.player.UserId)) or 0,
				isMeCommand = false,
				tags = (speaker.player and permission:getUserTags(speaker.player)),
				chatColor = get(speaker,"ChatColor",getChatColor)
			},
			filtered = nil,
			sender = speaker.player,
			senderId = senderId,
			message = text
		}
		if(not viewport and (config.Messages.IncludeIcon and not object.data.player)) then
			object.data.imageId = speaker.icon
		end
		if(canUseMeCommand) then
			object.data.isMeCommand = text:sub(1,3) == "/me"
		end
		callbacks = callbacks or blank
		messages[messageId] = object
		callbacks.processMessage(object,false)
		callbacks.onCreated(object)
		local success,filterObj = filter.new(object.message,speaker.player,isBroadcast)
		object.filtered = filterObj
		object.data.filteredSuccessfully = success
		callbacks.onFiltered(object)
		callbacks.processMessage(object,true)
		return messages[messageId]
	end
	
	function message.edit(message,newText)
		if(not message.data.edits) then
			message.data.edits = 0
			message.originalFilter = message
		end
		if(message.data.isMeCommand) then
			newText = "/me " .. newText
		end
		local success,filterObj = filter.new(newText,message.sender)
		message.filtered = filterObj
		message.data.filteredSuccessfully = success
		message.data.edits += 1
	end
	
	function message:getById(id)
		return messages[id]
	end
	
	return message
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a47</UniqueId>
						</Properties>
						<Item class="ModuleScript" referent="RBXec82039637514f429313aa1d9b539f6d">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">filter</string>
								<string name="ScriptGuid">{F157F6D3-32D6-4212-AE74-59D4E2B3ED8B}</string>
								<ProtectedString name="Source"><![CDATA[-- DANGER: DO NOT MODIFY THIS IF YOU DON'T KNOW WHAT YOU'RE DOING. YOUR GAME CAN GET BANNED.

-- Author: @Jumpathy
-- Name: filter.lua
-- Description: Chat filtering

return function(config)
	local filter = {}
	local chatService = game:GetService("Chat")
	local textService = game:GetService("TextService")
	local runService = game:GetService("RunService")
	local failedCharacter = config.Messages.FilterProcessingCharacter

	local handleFilterError = function(result)
		warn("[Better chat]: Internal error whilst filtering chat",result)
	end

	local psuedoFrom = function(message)
		return {
			GetChatForUserAsync = function()
				return message
			end
		}
	end

	function filter.new(message,player,isBroadcast)
		if(not isBroadcast) then
			if(runService:IsStudio()) then
				task.wait(0.1) --> simulate latency
			end
			if(player ~= nil) then
				local success,result = pcall(function()
					return textService:FilterStringAsync(message,player.UserId)
				end)
				if(success) then
					return true,result
				elseif(not success) then
					handleFilterError(result)
					return false,psuedoFrom(string.rep(failedCharacter,#message))
				end
			elseif(not player) then
				return true,psuedoFrom(message)
			end
		else
			local success,response = pcall(function()
				return chatService:FilterStringForBroadcast(message,player)
			end)
			if(success) then
				return true,response
			else
				handleFilterError(response)
				return false,string.rep(failedCharacter,#message)
			end
		end
	end

	return filter
end]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a48</UniqueId>
							</Properties>
						</Item>
					</Item>
				</Item>
				<Item class="ModuleScript" referent="RBXdcda847f91f64006a990f6729b7b440e">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">rateLimit</string>
						<string name="ScriptGuid">{9B14DD03-B508-4A8D-AD24-A97E9454D8FE}</string>
						<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: rateLimit.lua
-- Description: Rate limiting for sending chat messages
-- Credit: @Xsitsu (base code)

return function(config)
	local rateLimit = {
		cooldowns = {}
	}

	local numberMessagesAllowed = config.Messages.Cooldown.NumberMessageAllowed
	local expireTimePeriod = config.Messages.Cooldown.ExpireTimePeriod
	
	function rateLimit:unlink(userId)
		rateLimit.cooldowns[userId] = nil
	end
	
	function rateLimit:createCooldown(userId)
		rateLimit.cooldowns[userId] = {}
		local flood_detection = rateLimit.cooldowns[userId]
		local return_functions = {}

		local purge_expired = function()
			local currentTick = tick()
			while(#flood_detection > 0 and flood_detection[1] < currentTick) do
				table.remove(flood_detection,1)
			end
		end

		function return_functions:log()
			purge_expired()
			if(#flood_detection < numberMessagesAllowed) then
				table.insert(flood_detection,tick() + expireTimePeriod)
			end
		end

		function return_functions:canSend()
			purge_expired()
			if(#flood_detection < numberMessagesAllowed) then
				return true
			else
				return false,math.ceil(flood_detection[1] - tick())
			end
		end
		
		function return_functions:getCooldown()
			return math.floor(({return_functions:canSend()})[2])
		end

		return return_functions
	end

	return rateLimit
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a49</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX39348b83dd5246e986379959d539e8c4">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">permission</string>
						<string name="ScriptGuid">{0E88C7CF-582A-4042-BCCE-7E13792F2C1A}</string>
						<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: permission.lua
-- Description: Ranks :sunglo:

local groupService = game:GetService("GroupService")
local players = game:GetService("Players")
local cache = require(script:WaitForChild("cache"))

local groupDataCache = cache.new(function(id)
	return groupService:GetGroupInfoAsync(id)
end)

local groupsIn = cache.new(function(userId)
	local data,ret = groupService:GetGroupsAsync(userId),{}
	for _,group in pairs(data) do
		ret[group.Id] = group
	end
	return ret
end)

local getGameOwner = function()
	if(game.CreatorType == Enum.CreatorType.Group) then
		return groupDataCache.fetch(game.CreatorId)["Owner"]["Id"]
	else
		return game.CreatorId
	end
end

return function(config)
	local permission = {}
	local hasGamepass = require(script:WaitForChild("marketplace"))(permission)

	local gameOwner = getGameOwner()
	local configuration = config.Permissions
	local ranks = configuration.Ranks
	local groups = configuration.Groups
	local passes = configuration.Gamepasses
	local maxTags = config.ChatTags.MaxAmountTags or math.huge

	local highestRank = 0
	for rank,name in pairs(ranks) do
		if(rank > highestRank) then
			highestRank = rank
		end
	end

	local hasGroups = false
	for _,group in pairs(groups) do
		hasGroups = true
		break
	end

	local get = function(name)
		for key,val in pairs(ranks) do
			if(val == name) then
				return key
			end
		end
	end

	local permissionToNumber = function(perm)
		return((type(perm) == "number" and perm or get(perm)))
	end

	local getGroupPermission = function(userId)
		if(hasGroups) then
			local userGroups = groupsIn.fetch(userId)
			local max
			for groupId,data in pairs(userGroups) do
				if(not groups[groupId]) then
					userGroups[groupId] = nil
				else
					local currentMax
					for rank,toAssign in pairs(groups[groupId]) do
						if(data.Rank >= rank) then
							currentMax = permissionToNumber(toAssign)
						end
					end
					if((currentMax or -1) > (max or 0)) then
						max = currentMax
					end
				end
			end
			return max
		else
			return {}
		end
	end

	local getPassPerms = function(userId)
		local max
		for gamepassId,assign in pairs(passes) do
			if(hasGamepass(userId,gamepassId)) then
				local currentMax = permissionToNumber(assign)
				if(currentMax > (max or 0)) then
					max = currentMax
				end
			end
		end
		return max
	end

	local getUserPerms = function(userId)
		return permissionToNumber(configuration.Users[userId])
	end

	function permission:get(userId)
		local player = players:GetPlayerByUserId(userId)
		local hasPremium = (player and (player.MembershipType == Enum.MembershipType.Premium) or false)
		local highestPermissionViaGroup = getGroupPermission(userId)
		local highestPermissionViaPass = getPassPerms(userId)
		local highestPermissionViaUser = getUserPerms(userId)
		local premiumPermission = permissionToNumber(configuration.RobloxPremium)
		local toSort = {1}
		
		if(userId == gameOwner) then
			table.insert(toSort,highestRank)
		elseif(highestPermissionViaGroup) then
			table.insert(toSort,highestPermissionViaGroup)
		end
		if(hasPremium) then
			table.insert(toSort,premiumPermission)
		end
		if(highestPermissionViaUser) then
			table.insert(toSort,highestPermissionViaUser)
		end
		table.sort(toSort)
		local toReturn = toSort[#toSort] or 0
		toSort = nil
		if(player) then
			if(player:GetAttribute("Permission") ~= toReturn) then
				permission:setNameColor(player,toReturn)
				permission:setTextColor(player,toReturn)
			end
			player:SetAttribute("Permission",toReturn)
		end
		return toReturn
	end

	function permission:canUse(flag,id)
		return(permission:get(id) >= (permissionToNumber(flag) or (highestRank + 1)))
	end

	function permission:tonumber(flag)
		return permissionToNumber(flag) or (highestRank + 1)
	end
	
	function permission:getUserTags(player)
		local rank,tags = permission:get(player.UserId),{}
		local toSearch = config.ChatTags.Users[player.Name] or config.ChatTags.Users[player.UserId]
		for _,tag in pairs(toSearch or {}) do
			table.insert(tags,{
				text = tag.Text,
				color = tag.Color,
				priority = tag.Priority or 3
			})
		end
		for cr,list in pairs(config.ChatTags.Ranks) do
			if(rank >= cr) then
				for _,tag in pairs(config.ChatTags.Ranks[cr]) do
					table.insert(tags,{
						text = tag.Text,
						color = tag.Color,
						priority = tag.Priority or 3
					})
				end
			end
		end
		table.sort(tags,function(a,b)
			return(a.priority > b.priority)
		end)
		if(#tags > maxTags) then
			--[[
						local names = {}
			local toKeep = {}
			local newTagsList = {}
			for _,tag in pairs(tags) do
				table.insert(names,tag.text)
				toKeep[tag.text] = tag
			end
			table.sort(names)
			]]
			local newTagsList = {}
			for i = 1,maxTags do
				table.insert(newTagsList,tags[i])
			end
			tags = newTagsList
		end
		return tags
	end
	
	function permission:setTextColor(player,rank)
		local color = config.TextColors or {["Ranks"] = {},["Users"] = {}}
		local rankColor,userColor = color["Ranks"][rank],(color.Users[player.Name] or color.Users[player.UserId])
		if(userColor) then
			player:SetAttribute("ChatColor",userColor)
		elseif(rankColor) then
			player:SetAttribute("ChatColor",rankColor)
		end
	end
	
	local setColor = function(player,color)
		player:SetAttribute("NameColor",color)
		player:SetAttribute("DisplayNameColor",color)
	end

	function permission:setNameColor(player,rank)
		local rankColor,userColor = config.NameColors.Ranks[rank],(config.NameColors.Users[player.Name] or config.NameColors.Users[player.UserId])
		if(rankColor) then
			setColor(player,rankColor)
		elseif(userColor) then
			setColor(player,userColor)
		end
	end

	return permission
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a4a</UniqueId>
					</Properties>
					<Item class="ModuleScript" referent="RBXd2a2cec669154c2293d9b8470295e3a6">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">cache</string>
							<string name="ScriptGuid">{ABFFAA4A-F746-48AA-9E11-CD551BBB9827}</string>
							<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: cache.lua
-- Description: Caching system

local cache = {}

function cache.new(callback)
	local newCache = {internal = {}}

	function newCache.fetch(id,...)
		if(not newCache.internal[id]) then
			newCache.internal[id] = callback(id,...)
		end
		return newCache.internal[id]
	end

	return newCache
end

return cache]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a4b</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX1d1035d690304050a57cebb20567c88b">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">marketplace</string>
							<string name="ScriptGuid">{0E12EF13-7704-469E-8776-7F2EECAE64F4}</string>
							<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: marketplace.lua
-- Description: Marketplace-ish functions for permission module

return function(module)
	local marketplaceService = game:GetService("MarketplaceService")
	local ownedPasses = {}

	marketplaceService.PromptGamePassPurchaseFinished:Connect(function(player,id,wasPurchased)
		if(wasPurchased) then
			ownedPasses[player.UserId] = ownedPasses[player.UserId] or {}
			ownedPasses[player.UserId][id] = true
			module:get(player.UserId)
		end
	end)

	return function(userId,passId)
		local data = ownedPasses[userId] or {}
		if(not data[passId] and (passId >= 1)) then
			local success,result = pcall(function()
				return marketplaceService:UserOwnsGamePassAsync(userId,passId)
			end)
			if(success) then
				data[passId] = result
				return result
			else
				warn("[Failed to fetch gamepass ownership status,",result,"]")
				return false
			end
		else
			return data[passId]
		end
	end
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a4c</UniqueId>
						</Properties>
					</Item>
				</Item>
				<Item class="Folder" referent="RBX5f965f1247f0450e9ffeb196299d065e">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">services</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259a4</UniqueId>
					</Properties>
					<Item class="ModuleScript" referent="RBX97b2c60e934c4284a8e5cd9b054ccf23">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">profile</string>
							<string name="ScriptGuid">{AE450F65-23D3-4498-936D-54699874592D}</string>
							<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: profile.lua
-- Description: User profiles using ProfileService (used for group chat saves and stuff like that)
-- Credit: @loleris - ProfileService (https://devforum.roblox.com/t/save-your-player-data-with-profileservice-datastore-module/667805)

return function(config,cb)
	local constructors
	local profiles,pending,initialized = {raw = {}},{},false
	local profileService = require(script:WaitForChild("profileService"))
	local players = game:GetService("Players")

	local handleRelease = function(player)
		player:Kick("[Data could not be loaded]")
	end

	function profiles:get(player)
		if(initialized) then
			if(not profiles.raw[player]) then
				local event = Instance.new("BindableEvent")
				task.delay(0,function()
					local running = coroutine.running()
					pending[player] = pending[player] or {}
					table.insert(pending[player],running)
					coroutine.yield()
					event:Fire()
				end)
				event.Event:Wait()
				event:Destroy()
			end
			local current = profiles.raw[player]
			return (current and true or false),(current and current["Data"] or nil)
		else
			return true,{}
		end
	end

	function profiles.new(name)
		initialized = true
		local profileStore = profileService.GetProfileStore(name,{})
		local playerAdded = function(player)
			local profile = profileStore:LoadProfileAsync("pl-"..tostring(player.UserId))
			if(profile ~= nil) then
				profile:AddUserId(player.UserId)
				profile:Reconcile()
				profile:ListenToRelease(function()
					profiles.raw[player] = nil
					handleRelease(player)
				end)
				if(player:GetFullName() ~= player.Name) then
					profiles.raw[player] = profile
					constructors = constructors or cb()
					for _,group in pairs(profile.Data.groups or {}) do
						constructors.group.createChannelObject(group.name,group.id)
					end
				else
					profile:Release()
				end
			else
				handleRelease(player)
			end
			if(pending[player]) then
				for _,thread in pairs(pending[player]) do
					coroutine.resume(thread)
				end
				pending[player] = nil
			end
		end

		local disconnectProfile = function(player)
			if(profiles.raw[player] ~= nil) then
				profiles.raw[player]:Release()
			end
		end

		players.PlayerRemoving:Connect(disconnectProfile)
		players.PlayerAdded:Connect(playerAdded)
		for _,player in pairs(players:GetPlayers()) do
			task.spawn(playerAdded,player)
		end
	end

	return profiles
end]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a4d</UniqueId>
						</Properties>
						<Item class="ModuleScript" referent="RBX933e214977884f49b1b2a5776032c723">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">profileService</string>
								<string name="ScriptGuid">{A9D118BC-34D8-4D8D-92A3-4F82199E3C49}</string>
								<ProtectedString name="Source"><![CDATA[-- local Madwork = _G.Madwork
--[[
{Madwork}

-[ProfileService]---------------------------------------
	(STANDALONE VERSION)
	DataStore profiles - universal session-locked savable table API
	
	Official documentation:
		https://madstudioroblox.github.io/ProfileService/

	DevForum discussion:
		https://devforum.roblox.com/t/ProfileService/667805
	
	WARNINGS FOR "Profile.Data" VALUES:
	 	! Do not create numeric tables with gaps - attempting to replicate such tables will result in an error;
		! Do not create mixed tables (some values indexed by number and others by string key), as only
		     the data indexed by number will be replicated.
		! Do not index tables by anything other than numbers and strings.
		! Do not reference Roblox Instances
		! Do not reference userdata (Vector3, Color3, CFrame...) - Serialize userdata before referencing
		! Do not reference functions
		
	WARNING: Calling ProfileStore:LoadProfileAsync() with a "profile_key" which wasn't released in the SAME SESSION will result
		in an error! If you want to "ProfileStore:LoadProfileAsync()" instead of using the already loaded profile, :Release()
		the old Profile object.
		
	Members:
	
		ProfileService.ServiceLocked         [bool]
		
		ProfileService.IssueSignal           [ScriptSignal] (error_message, profile_store_name, profile_key)
		ProfileService.CorruptionSignal      [ScriptSignal] (profile_store_name, profile_key)
		ProfileService.CriticalStateSignal   [ScriptSignal] (is_critical_state)
	
	Functions:
	
		ProfileService.GetProfileStore(profile_store_index, profile_template) --> [ProfileStore]
			profile_store_index   [string] -- DataStore name
			OR
			profile_store_index   [table]: -- Allows the developer to define more GlobalDataStore variables
				{
					Name = "StoreName", -- [string] -- DataStore name
					-- Optional arguments:
					Scope = "StoreScope", -- [string] -- DataStore scope
				}
			profile_template      [table] -- Profiles will default to given table (hard-copy) when no data was saved previously

		ProfileService.IsLive() --> [bool] -- (CAN YIELD!!!)
			-- Returns true if ProfileService is connected to live Roblox DataStores
				
	Members [ProfileStore]:
	
		ProfileStore.Mock   [ProfileStore] -- Reflection of ProfileStore methods, but the methods will use a mock DataStore
		
	Methods [ProfileStore]:
	
		ProfileStore:LoadProfileAsync(profile_key, not_released_handler) --> [Profile] or nil -- not_released_handler(place_id, game_job_id)
			profile_key            [string] -- DataStore key
			not_released_handler   nil or []: -- Defaults to "ForceLoad"
				[string] "ForceLoad" -- Force loads profile on first call
				OR
				[string] "Steal" -- Steals the profile ignoring it's session lock
				OR
				[function] (place_id, game_job_id) --> [string] "Repeat", "Cancel", "ForceLoad" or "Steal"
					place_id      [number] or nil
					game_job_id   [string] or nil

				-- not_released_handler [function] will be triggered in cases where the profile is not released by a session. This
				--	function may yield for as long as desirable and must return one of three string values:

						["Repeat"] - ProfileService will repeat the profile loading proccess and may trigger the release handler again
						["Cancel"] - ProfileStore:LoadProfileAsync() will immediately return nil
						["ForceLoad"] - ProfileService will repeat the profile loading call, but will return Profile object afterwards
							and release the profile for another session that has loaded the profile
						["Steal"] - The profile will usually be loaded immediately, ignoring an existing remote session lock and applying
							a session lock for this session.

		ProfileStore:GlobalUpdateProfileAsync(profile_key, update_handler) --> [GlobalUpdates] or nil
			-- Returns GlobalUpdates object if update was successful, otherwise returns nil
			profile_key      [string] -- DataStore key
			update_handler   [function] (global_updates [GlobalUpdates])
			
		ProfileStore:ViewProfileAsync(profile_key, version) --> [Profile] or nil
			-- Reads profile without requesting a session lock; Data will not be saved and profile doesn't need to be released
			profile_key   [string] -- DataStore key
			version       nil or [string] -- DataStore key version

		ProfileStore:ProfileVersionQuery(profile_key, sort_direction, min_date, max_date) --> [ProfileVersionQuery]
			profile_key      [string]
			sort_direction   nil or [Enum.SortDirection]
			min_date         nil or [DateTime]
			max_date         nil or [DateTime]
			
		ProfileStore:WipeProfileAsync(profile_key) --> is_wipe_successful [bool]
			-- Completely wipes out profile data from the DataStore / mock DataStore with no way to recover it.
						
		* Parameter description for "ProfileStore:GlobalUpdateProfileAsync()":
		
			profile_key      [string] -- DataStore key
			update_handler   [function] (GlobalUpdates) -- This function gains access to GlobalUpdates object methods
				(update_handler can't yield)

	Methods [ProfileVersionQuery]:

		ProfileVersionQuery:NextAsync() --> [Profile] or nil -- (Yields)
			-- Returned profile has the same rules as profile returned by :ViewProfileAsync()
		
	Members [Profile]:
	
		Profile.Data              [table] -- Writable table that gets saved automatically and once the profile is released
		Profile.MetaData          [table] (Read-only) -- Information about this profile
		
			Profile.MetaData.ProfileCreateTime   [number] (Read-only) -- os.time() timestamp of profile creation
			Profile.MetaData.SessionLoadCount    [number] (Read-only) -- Amount of times the profile was loaded
			Profile.MetaData.ActiveSession       [table] (Read-only) {place_id, game_job_id} / nil -- Set to a session link if a
				game session is currently having this profile loaded; nil if released
			Profile.MetaData.MetaTags            [table] {["tag_name"] = tag_value, ...} -- Saved and auto-saved just like Profile.Data
			Profile.MetaData.MetaTagsLatest      [table] (Read-only) -- Latest version of MetaData.MetaTags that was definetly saved to DataStore
				(You can use Profile.MetaData.MetaTagsLatest for product purchase save confirmation, but create a system to clear old tags after
				they pile up)

		Profile.MetaTagsUpdated   [ScriptSignal] (meta_tags_latest) -- Fires after every auto-save, after
			--	Profile.MetaData.MetaTagsLatest has been updated with the version that's guaranteed to be saved;
			--  .MetaTagsUpdated will fire regardless of whether .MetaTagsLatest changed after update;
			--	.MetaTagsUpdated may fire after the Profile is released - changes to Profile.Data are not saved
			--	after release.

		Profile.RobloxMetaData    [table] -- Writable table that gets saved automatically and once the profile is released
		Profile.UserIds           [table] -- (Read-only) -- {user_id [number], ...} -- User ids associated with this profile

		Profile.KeyInfo           [DataStoreKeyInfo]
		Profile.KeyInfoUpdated    [ScriptSignal] (key_info [DataStoreKeyInfo])
		
		Profile.GlobalUpdates     [GlobalUpdates]
		
	Methods [Profile]:
	
		-- SAFE METHODS - Will not error after profile expires:
		Profile:IsActive() --> [bool] -- Returns true while the profile is active and can be written to
			
		Profile:GetMetaTag(tag_name) --> value [any]
			tag_name   [string]
		
		Profile:Reconcile() -- Fills in missing (nil) [string_key] = [value] pairs to the Profile.Data structure
		
		Profile:ListenToRelease(listener) --> [ScriptConnection] (place_id / nil, game_job_id / nil)
			-- WARNING: Profiles can be released externally if another session force-loads
			--	this profile - use :ListenToRelease() to handle player leaving cleanup.
			
		Profile:Release() -- Call after the session has finished working with this profile
			e.g., after the player leaves (Profile object will become expired) (Does not yield)

		Profile:ListenToHopReady(listener) --> [ScriptConnection] () -- Passed listener will be executed after the releasing UpdateAsync call finishes;
			--	Wrap universe teleport requests with this method AFTER releasing the profile to improve session lock sharing between universe places;
			--  :ListenToHopReady() will usually call the listener in around a second, but may ocassionally take up to 7 seconds when a release happens
			--	next to an auto-update in regular usage scenarios.

		Profile:AddUserId(user_id) -- Associates user_id with profile (GDPR compliance)
			user_id   [number]

		Profile:RemoveUserId(user_id) -- Unassociates user_id with profile (safe function)
			user_id   [number]

		Profile:Identify() --> [string] -- Returns a string containing DataStore name, scope and key; Used for debug;
			-- Example return: "[Store:"GameData";Scope:"Live";Key:"Player_2312310"]"
		
		Profile:SetMetaTag(tag_name, value) -- Equivalent of Profile.MetaData.MetaTags[tag_name] = value
			tag_name   [string]
			value      [any]
		
		Profile:Save() -- Call to quickly progress global update state or to speed up save validation processes (Does not yield)

		-- VIEW-MODE ONLY:

		Profile:ClearGlobalUpdates() -- Clears all global updates data from a profile payload

		Profile:OverwriteAsync() -- (Yields) Saves the profile payload to the DataStore and removes the session lock
		
	Methods [GlobalUpdates]:
	
	-- ALWAYS PUBLIC:
		GlobalUpdates:GetActiveUpdates() --> [table] {{update_id, update_data [table]}, ...}
		GlobalUpdates:GetLockedUpdates() --> [table] {{update_id, update_data [table]}, ...}
		
	-- ONLY WHEN FROM "Profile.GlobalUpdates":
		GlobalUpdates:ListenToNewActiveUpdate(listener) --> [ScriptConnection] (update_id, update_data)
			update_data   [table]
		GlobalUpdates:ListenToNewLockedUpdate(listener) --> [ScriptConnection] (update_id, update_data)
			update_data   [table]
		GlobalUpdates:LockActiveUpdate(update_id)  -- WARNING: will error after profile expires
		GlobalUpdates:ClearLockedUpdate(update_id) -- WARNING: will error after profile expires
		
	-- EXPOSED TO "update_handler" DURING ProfileStore:GlobalUpdateProfileAsync() CALL
		GlobalUpdates:AddActiveUpdate(update_data)
			update_data   [table]
		GlobalUpdates:ChangeActiveUpdate(update_id, update_data)
			update_data   [table]
		GlobalUpdates:ClearActiveUpdate(update_id)
		
--]]

local SETTINGS = {

	AutoSaveProfiles = 30, -- Seconds (This value may vary - ProfileService will split the auto save load evenly in the given time)
	RobloxWriteCooldown = 7, -- Seconds between successive DataStore calls for the same key
	ForceLoadMaxSteps = 8, -- Steps taken before ForceLoad request steals the active session for a profile
	AssumeDeadSessionLock = 30 * 60, -- (seconds) If a profile hasn't been updated for 30 minutes, assume the session lock is dead
		-- As of writing, os.time() is not completely reliable, so we can only assume session locks are dead after a significant amount of time.
	
	IssueCountForCriticalState = 5, -- Issues to collect to announce critical state
	IssueLast = 120, -- Seconds
	CriticalStateLast = 120, -- Seconds
	
	MetaTagsUpdatedValues = { -- Technical stuff - do not alter
		ProfileCreateTime = true,
		SessionLoadCount = true,
		ActiveSession = true,
		ForceLoadSession = true,
		LastUpdate = true,
	},
	
}

local Madwork -- Standalone Madwork reference for portable version of ProfileService
do

	local MadworkScriptSignal = {}

	local FreeRunnerThread = nil
	
	local function AcquireRunnerThreadAndCallEventHandler(fn, ...)
		local acquired_runner_thread = FreeRunnerThread
		FreeRunnerThread = nil
		fn(...)
		FreeRunnerThread = acquired_runner_thread
	end
	
	local function RunEventHandlerInFreeThread(...)
		AcquireRunnerThreadAndCallEventHandler(...)
		while true do
			AcquireRunnerThreadAndCallEventHandler(coroutine.yield())
		end
	end
	
	-- ScriptConnection object:

	local ScriptConnection = {
		--[[
			_listener = listener,
			_script_signal = script_signal,
			_disconnect_listener = disconnect_listener,
			_disconnect_param = disconnect_param,
			
			_next = next_script_connection,
			_is_connected = is_connected,
		--]]
	}
	ScriptConnection.__index = ScriptConnection

	function ScriptConnection:Disconnect()

		if self._is_connected == false then
			return
		end

		self._is_connected = false
		self._script_signal._listener_count -= 1

		if self._script_signal._head == self then
			self._script_signal._head = self._next
		else
			local prev = self._script_signal._head
			while prev ~= nil and prev._next ~= self do
				prev = prev._next
			end
			if prev ~= nil then
				prev._next = self._next
			end
		end

		if self._disconnect_listener ~= nil then
			if not FreeRunnerThread then
				FreeRunnerThread = coroutine.create(RunEventHandlerInFreeThread)
			end
			task.spawn(FreeRunnerThread, self._disconnect_listener, self._disconnect_param)
			self._disconnect_listener = nil
		end

	end
	
	-- ScriptSignal object:

	local ScriptSignal = {
		--[[
			_head = nil,
			_listener_count = 0,
		--]]
	}
	ScriptSignal.__index = ScriptSignal

	function ScriptSignal:Connect(listener, disconnect_listener, disconnect_param) --> [ScriptConnection]

		local script_connection = {
			_listener = listener,
			_script_signal = self,
			_disconnect_listener = disconnect_listener,
			_disconnect_param = disconnect_param,

			_next = self._head,
			_is_connected = true,
		}
		setmetatable(script_connection, ScriptConnection)

		self._head = script_connection
		self._listener_count += 1

		return script_connection

	end

	function ScriptSignal:GetListenerCount() --> [number]
		return self._listener_count
	end

	function ScriptSignal:Fire(...)
		local item = self._head
		while item ~= nil do
			if item._is_connected == true then
				if not FreeRunnerThread then
					FreeRunnerThread = coroutine.create(RunEventHandlerInFreeThread)
				end
				task.spawn(FreeRunnerThread, item._listener, ...)
			end
			item = item._next
		end
	end

	function ScriptSignal:FireUntil(continue_callback, ...)
		local item = self._head
		while item ~= nil do
			if item._is_connected == true then
				item._listener(...)
				if continue_callback() ~= true then
					return
				end
			end
			item = item._next
		end
	end

	function MadworkScriptSignal.NewScriptSignal() --> [ScriptSignal]
		return {
			_head = nil,
			_listener_count = 0,
			Connect = ScriptSignal.Connect,
			GetListenerCount = ScriptSignal.GetListenerCount,
			Fire = ScriptSignal.Fire,
			FireUntil = ScriptSignal.FireUntil,
		}
	end

	-- Madwork framework namespace:
	
	Madwork = {
		NewScriptSignal = MadworkScriptSignal.NewScriptSignal,
		ConnectToOnClose = function(task, run_in_studio_mode)
			if game:GetService("RunService"):IsStudio() == false or run_in_studio_mode == true then
				game:BindToClose(task)
			end
		end,
	}

end

----- Service Table -----

local ProfileService = {

	ServiceLocked = false, -- Set to true once the server is shutting down

	IssueSignal = Madwork.NewScriptSignal(), -- (error_message, profile_store_name, profile_key) -- Fired when a DataStore API call throws an error
	CorruptionSignal = Madwork.NewScriptSignal(), -- (profile_store_name, profile_key) -- Fired when DataStore key returns a value that has
	-- all or some of it's profile components set to invalid data types. E.g., accidentally setting Profile.Data to a noon table value

	CriticalState = false, -- Set to true while DataStore service is throwing too many errors
	CriticalStateSignal = Madwork.NewScriptSignal(), -- (is_critical_state) -- Fired when CriticalState is set to true
	-- (You may alert players with this, or set up analytics)

	ServiceIssueCount = 0,

	_active_profile_stores = {}, -- {profile_store, ...}

	_auto_save_list = {}, -- {profile, ...} -- loaded profile table which will be circularly auto-saved

	_issue_queue = {}, -- [table] {issue_time, ...}
	_critical_state_start = 0, -- [number] 0 = no critical state / os.clock() = critical state start

	-- Debug:
	_mock_data_store = {},
	_user_mock_data_store = {},

	_use_mock_data_store = false,

}

--[[
	Saved profile structure:
	
	DataStoreProfile = {
		Data = {},
		MetaData = {
			ProfileCreateTime = 0,
			SessionLoadCount = 0,
			ActiveSession = {place_id, game_job_id} / nil,
			ForceLoadSession = {place_id, game_job_id} / nil,
			MetaTags = {},
			LastUpdate = 0, -- os.time()
		},
		RobloxMetaData = {},
		UserIds = {},
		GlobalUpdates = {
			update_index,
			{
				{update_id, version_id, update_locked, update_data},
				...
			}
		},
	}
	
	OR
	
	DataStoreProfile = {
		GlobalUpdates = {
			update_index,
			{
				{update_id, version_id, update_locked, update_data},
				...
			}
		},
	}
--]]

----- Private Variables -----

local ActiveProfileStores = ProfileService._active_profile_stores
local AutoSaveList = ProfileService._auto_save_list
local IssueQueue = ProfileService._issue_queue

local DataStoreService = game:GetService("DataStoreService")
local RunService = game:GetService("RunService")

local PlaceId = game.PlaceId
local JobId = game.JobId

local AutoSaveIndex = 1 -- Next profile to auto save
local LastAutoSave = os.clock()

local LoadIndex = 0

local ActiveProfileLoadJobs = 0 -- Number of active threads that are loading in profiles
local ActiveProfileSaveJobs = 0 -- Number of active threads that are saving profiles

local CriticalStateStart = 0 -- os.clock()

local IsStudio = RunService:IsStudio()
local IsLiveCheckActive = false

local UseMockDataStore = false
local MockDataStore = ProfileService._mock_data_store -- Mock data store used when API access is disabled

local UserMockDataStore = ProfileService._user_mock_data_store -- Separate mock data store accessed via ProfileStore.Mock
local UseMockTag = {}

local CustomWriteQueue = {
	--[[
		[store] = {
			[key] = {
				LastWrite = os.clock(),
				Queue = {callback, ...},
				CleanupJob = nil,
			},
			...
		},
		...
	--]]
}

----- Utils -----

local function DeepCopyTable(t)
	local copy = {}
	for key, value in pairs(t) do
		if type(value) == "table" then
			copy[key] = DeepCopyTable(value)
		else
			copy[key] = value
		end
	end
	return copy
end

local function ReconcileTable(target, template)
	for k, v in pairs(template) do
		if type(k) == "string" then -- Only string keys will be reconciled
			if target[k] == nil then
				if type(v) == "table" then
					target[k] = DeepCopyTable(v)
				else
					target[k] = v
				end
			elseif type(target[k]) == "table" and type(v) == "table" then
				ReconcileTable(target[k], v)
			end
		end
	end
end

----- Private functions -----

local function IdentifyProfile(store_name, store_scope, key)
	return string.format(
		"[Store:\"%s\";%sKey:\"%s\"]",
		store_name,
		store_scope ~= nil and string.format("Scope:\"%s\";", store_scope) or "",
		key
	)
end

local function CustomWriteQueueCleanup(store, key)
	if CustomWriteQueue[store] ~= nil then
		CustomWriteQueue[store][key] = nil
		if next(CustomWriteQueue[store]) == nil then
			CustomWriteQueue[store] = nil
		end
	end
end

local function CustomWriteQueueMarkForCleanup(store, key)
	if CustomWriteQueue[store] ~= nil then
		if CustomWriteQueue[store][key] ~= nil then

			local queue_data = CustomWriteQueue[store][key]
			local queue = queue_data.Queue

			if queue_data.CleanupJob == nil then

				queue_data.CleanupJob = RunService.Heartbeat:Connect(function()
					if os.clock() - queue_data.LastWrite > SETTINGS.RobloxWriteCooldown and #queue == 0 then
						queue_data.CleanupJob:Disconnect()
						CustomWriteQueueCleanup(store, key)
					end
				end)

			end

		elseif next(CustomWriteQueue[store]) == nil then
			CustomWriteQueue[store] = nil
		end
	end
end

local function CustomWriteQueueAsync(callback, store, key) --> ... -- Passed return from callback

	if CustomWriteQueue[store] == nil then
		CustomWriteQueue[store] = {}
	end
	if CustomWriteQueue[store][key] == nil then
		CustomWriteQueue[store][key] = {LastWrite = 0, Queue = {}, CleanupJob = nil}
	end

	local queue_data = CustomWriteQueue[store][key]
	local queue = queue_data.Queue

	-- Cleanup job:

	if queue_data.CleanupJob ~= nil then
		queue_data.CleanupJob:Disconnect()
		queue_data.CleanupJob = nil
	end

	-- Queue logic:

	if os.clock() - queue_data.LastWrite > SETTINGS.RobloxWriteCooldown and #queue == 0 then
		queue_data.LastWrite = os.clock()
		return callback()
	else
		table.insert(queue, callback)
		while true do
			if os.clock() - queue_data.LastWrite > SETTINGS.RobloxWriteCooldown and queue[1] == callback then
				table.remove(queue, 1)
				queue_data.LastWrite = os.clock()
				return callback()
			end
			task.wait()
		end
	end

end

local function IsCustomWriteQueueEmptyFor(store, key) --> is_empty [bool]
	local lookup = CustomWriteQueue[store]
	if lookup ~= nil then
		lookup = lookup[key]
		return lookup == nil or #lookup.Queue == 0
	end
	return true
end

local function WaitForLiveAccessCheck() -- This function was created to prevent the ProfileService module yielding execution when required
	while IsLiveCheckActive == true do
		task.wait()
	end
end

local function WaitForPendingProfileStore(profile_store)
	while profile_store._is_pending == true do
		task.wait()
	end
end

local function RegisterIssue(error_message, store_name, store_scope, profile_key) -- Called when a DataStore API call errors
	warn("[ProfileService]: DataStore API error " .. IdentifyProfile(store_name, store_scope, profile_key) .. " - \"" .. tostring(error_message) .. "\"")
	table.insert(IssueQueue, os.clock()) -- Adding issue time to queue
	ProfileService.IssueSignal:Fire(tostring(error_message), store_name, profile_key)
end

local function RegisterCorruption(store_name, store_scope, profile_key) -- Called when a corrupted profile is loaded
	warn("[ProfileService]: Resolved profile corruption " .. IdentifyProfile(store_name, store_scope, profile_key))
	ProfileService.CorruptionSignal:Fire(store_name, profile_key)
end

local function NewMockDataStoreKeyInfo(params)

	local version_id_string = tostring(params.VersionId or 0)
	local meta_data = params.MetaData or {}
	local user_ids = params.UserIds or {}

	return {
		CreatedTime = params.CreatedTime,
		UpdatedTime = params.UpdatedTime,
		Version = string.rep("0", 16) .. "."
			.. string.rep("0", 10 - string.len(version_id_string)) .. version_id_string
			.. "." .. string.rep("0", 16) .. "." .. "01",

		GetMetadata = function()
			return DeepCopyTable(meta_data)
		end,

		GetUserIds = function()
			return DeepCopyTable(user_ids)
		end,
	}

end

local function MockUpdateAsync(mock_data_store, profile_store_name, key, transform_function, is_get_call) --> loaded_data, key_info

	local profile_store = mock_data_store[profile_store_name]

	if profile_store == nil then
		profile_store = {}
		mock_data_store[profile_store_name] = profile_store
	end

	local epoch_time = math.floor(os.time() * 1000)
	local mock_entry = profile_store[key]
	local mock_entry_was_nil = false

	if mock_entry == nil then
		mock_entry_was_nil = true
		if is_get_call ~= true then
			mock_entry = {
				Data = nil,
				CreatedTime = epoch_time,
				UpdatedTime = epoch_time,
				VersionId = 0,
				UserIds = {},
				MetaData = {},
			}
			profile_store[key] = mock_entry
		end
	end

	local mock_key_info = mock_entry_was_nil == false and NewMockDataStoreKeyInfo(mock_entry) or nil

	local transform, user_ids, roblox_meta_data = transform_function(mock_entry and mock_entry.Data, mock_key_info)

	if transform == nil then
		return nil
	else
		if mock_entry ~= nil and is_get_call ~= true then
			mock_entry.Data = transform
			mock_entry.UserIds = DeepCopyTable(user_ids or {})
			mock_entry.MetaData = DeepCopyTable(roblox_meta_data or {})
			mock_entry.VersionId += 1
			mock_entry.UpdatedTime = epoch_time
		end

		return DeepCopyTable(transform), mock_entry ~= nil and NewMockDataStoreKeyInfo(mock_entry) or nil
	end

end

local function IsThisSession(session_tag)
	return session_tag[1] == PlaceId and session_tag[2] == JobId
end

--[[
update_settings = {
	ExistingProfileHandle = function(latest_data),
	MissingProfileHandle = function(latest_data),
	EditProfile = function(lastest_data),
}
--]]
local function StandardProfileUpdateAsyncDataStore(profile_store, profile_key, update_settings, is_user_mock, is_get_call, version) --> loaded_data, key_info
	local loaded_data, key_info
	local success, error_message = pcall(function()
		local transform_function = function(latest_data)

			local missing_profile = false
			local data_corrupted = false
			local global_updates_data = {0, {}}

			if latest_data == nil then
				missing_profile = true
			elseif type(latest_data) ~= "table" then
				missing_profile = true
				data_corrupted = true
			end

			if type(latest_data) == "table" then
				-- Case #1: Profile was loaded
				if type(latest_data.Data) == "table"
					and type(latest_data.MetaData) == "table"
					and type(latest_data.GlobalUpdates) == "table" then

					latest_data.WasCorrupted = false -- Must be set to false if set previously
					global_updates_data = latest_data.GlobalUpdates
					if update_settings.ExistingProfileHandle ~= nil then
						update_settings.ExistingProfileHandle(latest_data)
					end
					-- Case #2: Profile was not loaded but GlobalUpdate data exists
				elseif latest_data.Data == nil
					and latest_data.MetaData == nil
					and type(latest_data.GlobalUpdates) == "table" then

					latest_data.WasCorrupted = false -- Must be set to false if set previously
					global_updates_data = latest_data.GlobalUpdates or global_updates_data
					missing_profile = true
				else
					missing_profile = true
					data_corrupted = true
				end
			end

			-- Case #3: Profile was not created or corrupted and no GlobalUpdate data exists
			if missing_profile == true then
				latest_data = {
					-- Data = nil,
					-- MetaData = nil,
					GlobalUpdates = global_updates_data,
				}
				if update_settings.MissingProfileHandle ~= nil then
					update_settings.MissingProfileHandle(latest_data)
				end
			end

			-- Editing profile:
			if update_settings.EditProfile ~= nil then
				update_settings.EditProfile(latest_data)
			end

			-- Data corruption handling (Silently override with empty profile) (Also run Case #1)
			if data_corrupted == true then
				latest_data.WasCorrupted = true -- Temporary tag that will be removed on first save
			end

			return latest_data, latest_data.UserIds, latest_data.RobloxMetaData
		end
		if is_user_mock == true then -- Used when the profile is accessed through ProfileStore.Mock
			loaded_data, key_info = MockUpdateAsync(UserMockDataStore, profile_store._profile_store_lookup, profile_key, transform_function, is_get_call)
			task.wait() -- Simulate API call yield
		elseif UseMockDataStore == true then -- Used when API access is disabled
			loaded_data, key_info = MockUpdateAsync(MockDataStore, profile_store._profile_store_lookup, profile_key, transform_function, is_get_call)
			task.wait() -- Simulate API call yield
		else
			loaded_data, key_info = CustomWriteQueueAsync(
				function() -- Callback
					if is_get_call == true then
						local get_data, get_key_info
						if version ~= nil then
							local success, error_message = pcall(function()
								get_data, get_key_info = profile_store._global_data_store:GetVersionAsync(profile_key, version)
							end)
							if success == false and type(error_message) == "string" and string.find(error_message, "not valid") ~= nil then
								warn("[ProfileService]: Passed version argument is not valid; Traceback:\n" .. debug.traceback())
							end
						else
							get_data, get_key_info = profile_store._global_data_store:GetAsync(profile_key)
						end
						get_data = transform_function(get_data)
						return get_data, get_key_info
					else
						return profile_store._global_data_store:UpdateAsync(profile_key, transform_function)
					end
				end,
				profile_store._profile_store_lookup, -- Store
				profile_key -- Key
			)
		end
	end)
	if success == true and type(loaded_data) == "table" then
		-- Corruption handling:
		if loaded_data.WasCorrupted == true and is_get_call ~= true then
			RegisterCorruption(
				profile_store._profile_store_name,
				profile_store._profile_store_scope,
				profile_key
			)
		end
		-- Return loaded_data:
		return loaded_data, key_info
	else
		RegisterIssue(
			(error_message ~= nil) and error_message or "Undefined error",
			profile_store._profile_store_name,
			profile_store._profile_store_scope,
			profile_key
		)
		-- Return nothing:
		return nil
	end
end

local function RemoveProfileFromAutoSave(profile)
	local auto_save_index = table.find(AutoSaveList, profile)
	if auto_save_index ~= nil then
		table.remove(AutoSaveList, auto_save_index)
		if auto_save_index < AutoSaveIndex then
			AutoSaveIndex = AutoSaveIndex - 1 -- Table contents were moved left before AutoSaveIndex so move AutoSaveIndex left as well
		end
		if AutoSaveList[AutoSaveIndex] == nil then -- AutoSaveIndex was at the end of the AutoSaveList - reset to 1
			AutoSaveIndex = 1
		end
	end
end

local function AddProfileToAutoSave(profile) -- Notice: Makes sure this profile isn't auto-saved too soon
	-- Add at AutoSaveIndex and move AutoSaveIndex right:
	table.insert(AutoSaveList, AutoSaveIndex, profile)
	if #AutoSaveList > 1 then
		AutoSaveIndex = AutoSaveIndex + 1
	elseif #AutoSaveList == 1 then
		-- First profile created - make sure it doesn't get immediately auto saved:
		LastAutoSave = os.clock()
	end
end

local function ReleaseProfileInternally(profile)
	-- 1) Remove profile object from ProfileService references: --
	-- Clear reference in ProfileStore:
	local profile_store = profile._profile_store
	local loaded_profiles = profile._is_user_mock == true and profile_store._mock_loaded_profiles or profile_store._loaded_profiles
	loaded_profiles[profile._profile_key] = nil
	if next(profile_store._loaded_profiles) == nil and next(profile_store._mock_loaded_profiles) == nil then -- ProfileStore has turned inactive
		local index = table.find(ActiveProfileStores, profile_store)
		if index ~= nil then
			table.remove(ActiveProfileStores, index)
		end
	end
	-- Clear auto update reference:
	RemoveProfileFromAutoSave(profile)
	-- 2) Trigger release listeners: --
	local place_id
	local game_job_id
	local active_session = profile.MetaData.ActiveSession
	if active_session ~= nil then
		place_id = active_session[1]
		game_job_id = active_session[2]
	end
	profile._release_listeners:Fire(place_id, game_job_id)
end

local function CheckForNewGlobalUpdates(profile, old_global_updates_data, new_global_updates_data)
	local global_updates_object = profile.GlobalUpdates -- [GlobalUpdates]
	local pending_update_lock = global_updates_object._pending_update_lock -- {update_id, ...}
	local pending_update_clear = global_updates_object._pending_update_clear -- {update_id, ...}
	-- "old_" or "new_" global_updates_data = {update_index, {{update_id, version_id, update_locked, update_data}, ...}}
	for _, new_global_update in ipairs(new_global_updates_data[2]) do
		-- Find old global update with the same update_id:
		local old_global_update
		for _, global_update in ipairs(old_global_updates_data[2]) do
			if global_update[1] == new_global_update[1] then
				old_global_update = global_update
				break
			end
		end
		-- A global update is new when it didn't exist before or its version_id or update_locked state changed:
		local is_new = false
		if old_global_update == nil or new_global_update[2] > old_global_update[2] or new_global_update[3] ~= old_global_update[3] then
			is_new = true
		end
		if is_new == true then
			-- Active global updates:
			if new_global_update[3] == false then
				-- Check if update is not pending to be locked: (Preventing firing new active update listeners more than necessary)
				local is_pending_lock = false
				for _, update_id in ipairs(pending_update_lock) do
					if new_global_update[1] == update_id then
						is_pending_lock = true
						break
					end
				end
				if is_pending_lock == false then
					-- Trigger new active update listeners:
					global_updates_object._new_active_update_listeners:Fire(new_global_update[1], new_global_update[4])
				end
			end
			-- Locked global updates:
			if new_global_update[3] == true then
				-- Check if update is not pending to be cleared: (Preventing firing new locked update listeners after marking a locked update for clearing)
				local is_pending_clear = false
				for _, update_id in ipairs(pending_update_clear) do
					if new_global_update[1] == update_id then
						is_pending_clear = true
						break
					end
				end
				if is_pending_clear == false then
					-- Trigger new locked update listeners:

					global_updates_object._new_locked_update_listeners:FireUntil(
						function()
							-- Check if listener marked the update to be cleared:
							-- Normally there should be only one listener per profile for new locked global updates, but
							-- in case several listeners are connected we will not trigger more listeners after one listener
							-- marks the locked global update to be cleared.
							return table.find(pending_update_clear, new_global_update[1]) == nil
						end,
						new_global_update[1], new_global_update[4]
					)

				end
			end
		end
	end
end

local function SaveProfileAsync(profile, release_from_session, is_overwriting)
	if type(profile.Data) ~= "table" then
		RegisterCorruption(
			profile._profile_store._profile_store_name,
			profile._profile_store._profile_store_scope,
			profile._profile_key
		)
		error("[ProfileService]: PROFILE DATA CORRUPTED DURING RUNTIME! Profile: " .. profile:Identify())
	end
	if release_from_session == true and is_overwriting ~= true then
		ReleaseProfileInternally(profile)
	end
	ActiveProfileSaveJobs = ActiveProfileSaveJobs + 1
	local last_session_load_count = profile.MetaData.SessionLoadCount
	-- Compare "SessionLoadCount" when writing to profile to prevent a rare case of repeat last save when the profile is loaded on the same server again
	local repeat_save_flag = true -- Released Profile save calls have to repeat until they succeed
	while repeat_save_flag == true do
		if release_from_session ~= true then
			repeat_save_flag = false
		end
		local loaded_data, key_info = StandardProfileUpdateAsyncDataStore(
			profile._profile_store,
			profile._profile_key,
			{
				ExistingProfileHandle = nil,
				MissingProfileHandle = nil,
				EditProfile = function(latest_data)

					local session_owns_profile = false
					local force_load_pending = false

					if is_overwriting ~= true then
						-- 1) Check if this session still owns the profile: --
						local active_session = latest_data.MetaData.ActiveSession
						local force_load_session = latest_data.MetaData.ForceLoadSession
						local session_load_count = latest_data.MetaData.SessionLoadCount

						if type(active_session) == "table" then
							session_owns_profile = IsThisSession(active_session) and session_load_count == last_session_load_count
						end
						if type(force_load_session) == "table" then
							force_load_pending = not IsThisSession(force_load_session)
						end
					else
						session_owns_profile = true
					end

					if session_owns_profile == true then -- We may only edit the profile if this session has ownership of the profile

						if is_overwriting ~= true then
							-- 2) Manage global updates: --
							local latest_global_updates_data = latest_data.GlobalUpdates -- {update_index, {{update_id, version_id, update_locked, update_data}, ...}}
							local latest_global_updates_list = latest_global_updates_data[2]

							local global_updates_object = profile.GlobalUpdates -- [GlobalUpdates]
							local pending_update_lock = global_updates_object._pending_update_lock -- {update_id, ...}
							local pending_update_clear = global_updates_object._pending_update_clear -- {update_id, ...}
							-- Active update locking:
							for i = 1, #latest_global_updates_list do
								for _, lock_id in ipairs(pending_update_lock) do
									if latest_global_updates_list[i][1] == lock_id then
										latest_global_updates_list[i][3] = true
										break
									end
								end
							end
							-- Locked update clearing:
							for _, clear_id in ipairs(pending_update_clear) do
								for i = 1, #latest_global_updates_list do
									if latest_global_updates_list[i][1] == clear_id and latest_global_updates_list[i][3] == true then
										table.remove(latest_global_updates_list, i)
										break
									end
								end
							end
						end

						-- 3) Save profile data: --
						latest_data.Data = profile.Data
						latest_data.RobloxMetaData = profile.RobloxMetaData
						latest_data.UserIds = profile.UserIds

						if is_overwriting ~= true then
							latest_data.MetaData.MetaTags = profile.MetaData.MetaTags -- MetaData.MetaTags is the only actively savable component of MetaData
							latest_data.MetaData.LastUpdate = os.time()
							if release_from_session == true or force_load_pending == true then
								latest_data.MetaData.ActiveSession = nil
							end
						else
							latest_data.MetaData = profile.MetaData
							latest_data.MetaData.ActiveSession = nil
							latest_data.MetaData.ForceLoadSession = nil
							latest_data.GlobalUpdates = profile.GlobalUpdates._updates_latest
						end

					end
				end,
			},
			profile._is_user_mock
		)
		if loaded_data ~= nil and key_info ~= nil then
			if is_overwriting == true then
				break
			end
			repeat_save_flag = false
			-- 4) Set latest data in profile: --
			-- Updating DataStoreKeyInfo:
			profile.KeyInfo = key_info
			-- Setting global updates:
			local global_updates_object = profile.GlobalUpdates -- [GlobalUpdates]
			local old_global_updates_data = global_updates_object._updates_latest
			local new_global_updates_data = loaded_data.GlobalUpdates
			global_updates_object._updates_latest = new_global_updates_data
			-- Setting MetaData:
			local session_meta_data = profile.MetaData
			local latest_meta_data = loaded_data.MetaData
			for key in pairs(SETTINGS.MetaTagsUpdatedValues) do
				session_meta_data[key] = latest_meta_data[key]
			end
			session_meta_data.MetaTagsLatest = latest_meta_data.MetaTags
			-- 5) Check if session still owns the profile: --
			local active_session = loaded_data.MetaData.ActiveSession
			local session_load_count = loaded_data.MetaData.SessionLoadCount
			local session_owns_profile = false
			if type(active_session) == "table" then
				session_owns_profile = IsThisSession(active_session) and session_load_count == last_session_load_count
			end
			local is_active = profile:IsActive()
			if session_owns_profile == true then
				-- 6) Check for new global updates: --
				if is_active == true then -- Profile could've been released before the saving thread finished
					CheckForNewGlobalUpdates(profile, old_global_updates_data, new_global_updates_data)
				end
			else
				-- Session no longer owns the profile:
				-- 7) Release profile if it hasn't been released yet: --
				if is_active == true then
					ReleaseProfileInternally(profile)
				end
				-- Cleanup reference in custom write queue:
				CustomWriteQueueMarkForCleanup(profile._profile_store._profile_store_lookup, profile._profile_key)
				-- Hop ready listeners:
				if profile._hop_ready == false then
					profile._hop_ready = true
					profile._hop_ready_listeners:Fire()
				end
			end
			-- Signaling MetaTagsUpdated listeners after a possible external profile release was handled:
			profile.MetaTagsUpdated:Fire(profile.MetaData.MetaTagsLatest)
			-- Signaling KeyInfoUpdated listeners:
			profile.KeyInfoUpdated:Fire(key_info)
		elseif repeat_save_flag == true then
			task.wait() -- Prevent infinite loop in case DataStore API does not yield
		end
	end
	ActiveProfileSaveJobs = ActiveProfileSaveJobs - 1
end

----- Public functions -----

-- GlobalUpdates object:

local GlobalUpdates = {
	--[[
		_updates_latest = {}, -- [table] {update_index, {{update_id, version_id, update_locked, update_data}, ...}}
		_pending_update_lock = {update_id, ...} / nil, -- [table / nil]
		_pending_update_clear = {update_id, ...} / nil, -- [table / nil]
		
		_new_active_update_listeners = [ScriptSignal] / nil, -- [table / nil]
		_new_locked_update_listeners = [ScriptSignal] / nil, -- [table / nil]
		
		_profile = Profile / nil, -- [Profile / nil]
		
		_update_handler_mode = true / nil, -- [bool / nil]
	--]]
}
GlobalUpdates.__index = GlobalUpdates

-- ALWAYS PUBLIC:
function GlobalUpdates:GetActiveUpdates() --> [table] {{update_id, update_data}, ...}
	local query_list = {}
	for _, global_update in ipairs(self._updates_latest[2]) do
		if global_update[3] == false then
			local is_pending_lock = false
			if self._pending_update_lock ~= nil then
				for _, update_id in ipairs(self._pending_update_lock) do
					if global_update[1] == update_id then
						is_pending_lock = true -- Exclude global updates pending to be locked
						break
					end
				end
			end
			if is_pending_lock == false then
				table.insert(query_list, {global_update[1], global_update[4]})
			end
		end
	end
	return query_list
end

function GlobalUpdates:GetLockedUpdates() --> [table] {{update_id, update_data}, ...}
	local query_list = {}
	for _, global_update in ipairs(self._updates_latest[2]) do
		if global_update[3] == true then
			local is_pending_clear = false
			if self._pending_update_clear ~= nil then
				for _, update_id in ipairs(self._pending_update_clear) do
					if global_update[1] == update_id then
						is_pending_clear = true -- Exclude global updates pending to be cleared
						break
					end
				end
			end
			if is_pending_clear == false then
				table.insert(query_list, {global_update[1], global_update[4]})
			end
		end
	end
	return query_list
end

-- ONLY WHEN FROM "Profile.GlobalUpdates":
function GlobalUpdates:ListenToNewActiveUpdate(listener) --> [ScriptConnection] listener(update_id, update_data)
	if type(listener) ~= "function" then
		error("[ProfileService]: Only a function can be set as listener in GlobalUpdates:ListenToNewActiveUpdate()")
	end
	local profile = self._profile
	if self._update_handler_mode == true then
		error("[ProfileService]: Can't listen to new global updates in ProfileStore:GlobalUpdateProfileAsync()")
	elseif self._new_active_update_listeners == nil then
		error("[ProfileService]: Can't listen to new global updates in view mode")
	elseif profile:IsActive() == false then -- Check if profile is expired
		return { -- Do not connect listener if the profile is expired
			Disconnect = function() end,
		}
	end
	-- Connect listener:
	return self._new_active_update_listeners:Connect(listener)
end

function GlobalUpdates:ListenToNewLockedUpdate(listener) --> [ScriptConnection] listener(update_id, update_data)
	if type(listener) ~= "function" then
		error("[ProfileService]: Only a function can be set as listener in GlobalUpdates:ListenToNewLockedUpdate()")
	end
	local profile = self._profile
	if self._update_handler_mode == true then
		error("[ProfileService]: Can't listen to new global updates in ProfileStore:GlobalUpdateProfileAsync()")
	elseif self._new_locked_update_listeners == nil then
		error("[ProfileService]: Can't listen to new global updates in view mode")
	elseif profile:IsActive() == false then -- Check if profile is expired
		return { -- Do not connect listener if the profile is expired
			Disconnect = function() end,
		}
	end
	-- Connect listener:
	return self._new_locked_update_listeners:Connect(listener)
end

function GlobalUpdates:LockActiveUpdate(update_id)
	if type(update_id) ~= "number" then
		error("[ProfileService]: Invalid update_id")
	end
	local profile = self._profile
	if self._update_handler_mode == true then
		error("[ProfileService]: Can't lock active global updates in ProfileStore:GlobalUpdateProfileAsync()")
	elseif self._pending_update_lock == nil then
		error("[ProfileService]: Can't lock active global updates in view mode")
	elseif profile:IsActive() == false then -- Check if profile is expired
		error("[ProfileService]: PROFILE EXPIRED - Can't lock active global updates")
	end
	-- Check if global update exists with given update_id
	local global_update_exists = nil
	for _, global_update in ipairs(self._updates_latest[2]) do
		if global_update[1] == update_id then
			global_update_exists = global_update
			break
		end
	end
	if global_update_exists ~= nil then
		local is_pending_lock = false
		for _, lock_update_id in ipairs(self._pending_update_lock) do
			if update_id == lock_update_id then
				is_pending_lock = true -- Exclude global updates pending to be locked
				break
			end
		end
		if is_pending_lock == false and global_update_exists[3] == false then -- Avoid id duplicates in _pending_update_lock
			table.insert(self._pending_update_lock, update_id)
		end
	else
		error("[ProfileService]: Passed non-existant update_id")
	end
end

function GlobalUpdates:ClearLockedUpdate(update_id)
	if type(update_id) ~= "number" then
		error("[ProfileService]: Invalid update_id")
	end
	local profile = self._profile
	if self._update_handler_mode == true then
		error("[ProfileService]: Can't clear locked global updates in ProfileStore:GlobalUpdateProfileAsync()")
	elseif self._pending_update_clear == nil then
		error("[ProfileService]: Can't clear locked global updates in view mode")
	elseif profile:IsActive() == false then -- Check if profile is expired
		error("[ProfileService]: PROFILE EXPIRED - Can't clear locked global updates")
	end
	-- Check if global update exists with given update_id
	local global_update_exists = nil
	for _, global_update in ipairs(self._updates_latest[2]) do
		if global_update[1] == update_id then
			global_update_exists = global_update
			break
		end
	end
	if global_update_exists ~= nil then
		local is_pending_clear = false
		for _, clear_update_id in ipairs(self._pending_update_clear) do
			if update_id == clear_update_id then
				is_pending_clear = true -- Exclude global updates pending to be cleared
				break
			end
		end
		if is_pending_clear == false and global_update_exists[3] == true then -- Avoid id duplicates in _pending_update_clear
			table.insert(self._pending_update_clear, update_id)
		end
	else
		error("[ProfileService]: Passed non-existant update_id")
	end
end

-- EXPOSED TO "update_handler" DURING ProfileStore:GlobalUpdateProfileAsync() CALL
function GlobalUpdates:AddActiveUpdate(update_data)
	if type(update_data) ~= "table" then
		error("[ProfileService]: Invalid update_data")
	end
	if self._new_active_update_listeners ~= nil then
		error("[ProfileService]: Can't add active global updates in loaded Profile; Use ProfileStore:GlobalUpdateProfileAsync()")
	elseif self._update_handler_mode ~= true then
		error("[ProfileService]: Can't add active global updates in view mode; Use ProfileStore:GlobalUpdateProfileAsync()")
	end
	-- self._updates_latest = {}, -- [table] {update_index, {{update_id, version_id, update_locked, update_data}, ...}}
	local updates_latest = self._updates_latest
	local update_index = updates_latest[1] + 1 -- Incrementing global update index
	updates_latest[1] = update_index
	-- Add new active global update:
	table.insert(updates_latest[2], {update_index, 1, false, update_data})
end

function GlobalUpdates:ChangeActiveUpdate(update_id, update_data)
	if type(update_id) ~= "number" then
		error("[ProfileService]: Invalid update_id")
	end
	if type(update_data) ~= "table" then
		error("[ProfileService]: Invalid update_data")
	end
	if self._new_active_update_listeners ~= nil then
		error("[ProfileService]: Can't change active global updates in loaded Profile; Use ProfileStore:GlobalUpdateProfileAsync()")
	elseif self._update_handler_mode ~= true then
		error("[ProfileService]: Can't change active global updates in view mode; Use ProfileStore:GlobalUpdateProfileAsync()")
	end
	-- self._updates_latest = {}, -- [table] {update_index, {{update_id, version_id, update_locked, update_data}, ...}}
	local updates_latest = self._updates_latest
	local get_global_update = nil
	for _, global_update in ipairs(updates_latest[2]) do
		if update_id == global_update[1] then
			get_global_update = global_update
			break
		end
	end
	if get_global_update ~= nil then
		if get_global_update[3] == true then
			error("[ProfileService]: Can't change locked global update")
		end
		get_global_update[2] = get_global_update[2] + 1 -- Increment version id
		get_global_update[4] = update_data -- Set new global update data
	else
		error("[ProfileService]: Passed non-existant update_id")
	end
end

function GlobalUpdates:ClearActiveUpdate(update_id)
	if type(update_id) ~= "number" then
		error("[ProfileService]: Invalid update_id argument")
	end
	if self._new_active_update_listeners ~= nil then
		error("[ProfileService]: Can't clear active global updates in loaded Profile; Use ProfileStore:GlobalUpdateProfileAsync()")
	elseif self._update_handler_mode ~= true then
		error("[ProfileService]: Can't clear active global updates in view mode; Use ProfileStore:GlobalUpdateProfileAsync()")
	end
	-- self._updates_latest = {}, -- [table] {update_index, {{update_id, version_id, update_locked, update_data}, ...}}
	local updates_latest = self._updates_latest
	local get_global_update_index = nil
	local get_global_update = nil
	for index, global_update in ipairs(updates_latest[2]) do
		if update_id == global_update[1] then
			get_global_update_index = index
			get_global_update = global_update
			break
		end
	end
	if get_global_update ~= nil then
		if get_global_update[3] == true then
			error("[ProfileService]: Can't clear locked global update")
		end
		table.remove(updates_latest[2], get_global_update_index) -- Remove active global update
	else
		error("[ProfileService]: Passed non-existant update_id")
	end
end

-- Profile object:

local Profile = {
	--[[
		Data = {}, -- [table] -- Loaded once after ProfileStore:LoadProfileAsync() finishes
		MetaData = {}, -- [table] -- Updated with every auto-save
		GlobalUpdates = GlobalUpdates, -- [GlobalUpdates]
		
		_profile_store = ProfileStore, -- [ProfileStore]
		_profile_key = "", -- [string]
		
		_release_listeners = [ScriptSignal] / nil, -- [table / nil]
		_hop_ready_listeners = [ScriptSignal] / nil, -- [table / nil]
		_hop_ready = false,
		
		_view_mode = true / nil, -- [bool] or nil
		
		_load_timestamp = os.clock(),
		
		_is_user_mock = false, -- ProfileStore.Mock
		_mock_key_info = {},
	--]]
}
Profile.__index = Profile

function Profile:IsActive() --> [bool]
	local loaded_profiles = self._is_user_mock == true and self._profile_store._mock_loaded_profiles or self._profile_store._loaded_profiles
	return loaded_profiles[self._profile_key] == self
end

function Profile:GetMetaTag(tag_name) --> value
	local meta_data = self.MetaData
	if meta_data == nil then
		return nil
		-- error("[ProfileService]: This Profile hasn't been loaded before - MetaData not available")
	end
	return self.MetaData.MetaTags[tag_name]
end

function Profile:SetMetaTag(tag_name, value)
	if type(tag_name) ~= "string" then
		error("[ProfileService]: tag_name must be a string")
	elseif string.len(tag_name) == 0 then
		error("[ProfileService]: Invalid tag_name")
	end
	self.MetaData.MetaTags[tag_name] = value
end

function Profile:Reconcile()
	ReconcileTable(self.Data, self._profile_store._profile_template)
end

function Profile:ListenToRelease(listener) --> [ScriptConnection] (place_id / nil, game_job_id / nil)
	if type(listener) ~= "function" then
		error("[ProfileService]: Only a function can be set as listener in Profile:ListenToRelease()")
	end
	if self._view_mode == true then
		return {Disconnect = function() end}
	end
	if self:IsActive() == false then
		-- Call release listener immediately if profile is expired
		local place_id
		local game_job_id
		local active_session = self.MetaData.ActiveSession
		if active_session ~= nil then
			place_id = active_session[1]
			game_job_id = active_session[2]
		end
		listener(place_id, game_job_id)
		return {Disconnect = function() end}
	else
		return self._release_listeners:Connect(listener)
	end
end

function Profile:Save()
	if self._view_mode == true then
		error("[ProfileService]: Can't save Profile in view mode - Should you be calling :OverwriteAsync() instead?")
	end
	if self:IsActive() == false then
		warn("[ProfileService]: Attempted saving an inactive profile "
			.. self:Identify() .. "; Traceback:\n" .. debug.traceback())
		return
	end
	-- Reject save request if a save is already pending in the queue - this will prevent the user from
	--	unecessary API request spam which we could not meaningfully execute anyways!
	if IsCustomWriteQueueEmptyFor(self._profile_store._profile_store_lookup, self._profile_key) == true then
		-- We don't want auto save to trigger too soon after manual saving - this will reset the auto save timer:
		RemoveProfileFromAutoSave(self)
		AddProfileToAutoSave(self)
		-- Call save function in a new thread:
		task.spawn(SaveProfileAsync, self)
	end
end

function Profile:Release()
	if self._view_mode == true then
		return
	end
	if self:IsActive() == true then
		task.spawn(SaveProfileAsync, self, true) -- Call save function in a new thread with release_from_session = true
	end
end

function Profile:ListenToHopReady(listener) --> [ScriptConnection] ()
	if type(listener) ~= "function" then
		error("[ProfileService]: Only a function can be set as listener in Profile:ListenToHopReady()")
	end
	if self._view_mode == true then
		return {Disconnect = function() end}
	end
	if self._hop_ready == true then
		task.spawn(listener)
		return {Disconnect = function() end}
	else
		return self._hop_ready_listeners:Connect(listener)
	end
end

function Profile:AddUserId(user_id) -- Associates user_id with profile (GDPR compliance)

	if type(user_id) ~= "number" or user_id % 1 ~= 0 then
		warn("[ProfileService]: Invalid UserId argument for :AddUserId() ("
			.. tostring(user_id) .. "); Traceback:\n" .. debug.traceback())
		return
	end

	if user_id < 0 and self._is_user_mock ~= true and UseMockDataStore ~= true then
		return -- Avoid giving real Roblox APIs negative UserId's
	end

	if table.find(self.UserIds, user_id) == nil then
		table.insert(self.UserIds, user_id)
	end
	
end

function Profile:RemoveUserId(user_id) -- Unassociates user_id with profile (safe function)

	if type(user_id) ~= "number" or user_id % 1 ~= 0 then
		warn("[ProfileService]: Invalid UserId argument for :RemoveUserId() ("
			.. tostring(user_id) .. "); Traceback:\n" .. debug.traceback())
		return
	end
	
	local index = table.find(self.UserIds, user_id)

	if index ~= nil then
		table.remove(self.UserIds, index)
	end

end

function Profile:Identify() --> [string]
	return IdentifyProfile(
		self._profile_store._profile_store_name,
		self._profile_store._profile_store_scope,
		self._profile_key
	)
end

function Profile:ClearGlobalUpdates() -- Clears all global updates data from a profile payload

	if self._view_mode ~= true then
		error("[ProfileService]: :ClearGlobalUpdates() can only be used in view mode")
	end

	local global_updates_object = {
		_updates_latest = {0, {}},
		_profile = self,
	}
	setmetatable(global_updates_object, GlobalUpdates)

	self.GlobalUpdates = global_updates_object

end

function Profile:OverwriteAsync() -- Saves the profile to the DataStore and removes the session lock

	if self._view_mode ~= true then
		error("[ProfileService]: :OverwriteAsync() can only be used in view mode")
	end

	SaveProfileAsync(self, nil, true)

end

-- ProfileVersionQuery object:

local ProfileVersionQuery = {
	--[[
		_profile_store = profile_store,
		_profile_key = profile_key,
		_sort_direction = sort_direction,
		_min_date = min_date,
		_max_date = max_date,

		_query_pages = pages, -- [DataStoreVersionPages]
		_query_index = index, -- [number]
		_query_failure = false,

		_is_query_yielded = false,
		_query_queue = {},
	--]]
}
ProfileVersionQuery.__index = ProfileVersionQuery

function ProfileVersionQuery:_MoveQueue()
	while #self._query_queue > 0 do
		local queue_entry = table.remove(self._query_queue, 1)
		task.spawn(queue_entry)
		if self._is_query_yielded == true then
			break
		end
	end
end

function ProfileVersionQuery:NextAsync(_is_stacking) --> [Profile] or nil

	if self._profile_store == nil then
		return nil
	end

	local profile
	local is_finished = false

	local function query_job()

		if self._query_failure == true then
			is_finished = true
			return
		end

		-- First "next" call loads version pages:

		if self._query_pages == nil then

			self._is_query_yielded = true
			task.spawn(function()
				profile = self:NextAsync(true)
				is_finished = true
			end)
			
			local list_success, error_message = pcall(function()
				self._query_pages = self._profile_store._global_data_store:ListVersionsAsync(
					self._profile_key,
					self._sort_direction,
					self._min_date,
					self._max_date
				)
				self._query_index = 0
			end)

			if list_success == false or self._query_pages == nil then
				warn("[ProfileService]: Version query fail - " .. tostring(error_message))
				self._query_failure = true
			end

			self._is_query_yielded = false
			self:_MoveQueue()

			return

		end

		local current_page = self._query_pages:GetCurrentPage()
		local next_item = current_page[self._query_index + 1]

		-- No more entries:
		
		if self._query_pages.IsFinished == true and next_item == nil then
			is_finished = true
			return
		end

		-- Load next page when this page is over:

		if next_item == nil then

			self._is_query_yielded = true
			task.spawn(function()
				profile = self:NextAsync(true)
				is_finished = true
			end)

			local success = pcall(function()
				self._query_pages:AdvanceToNextPageAsync()
				self._query_index = 0
			end)

			if success == false or #self._query_pages:GetCurrentPage() == 0 then
				self._query_failure = true
			end

			self._is_query_yielded = false
			self:_MoveQueue()

			return

		end

		-- Next page item:

		self._query_index += 1
		profile = self._profile_store:ViewProfileAsync(self._profile_key, next_item.Version)
		is_finished = true

	end

	if self._is_query_yielded == false then
		query_job()
	else
		if _is_stacking == true then
			table.insert(self._query_queue, 1, query_job)
		else
			table.insert(self._query_queue, query_job)
		end
	end

	while is_finished == false do
		task.wait()
	end

	return profile

end

-- ProfileStore object:

local ProfileStore = {
	--[[
		Mock = {},
	
		_profile_store_name = "", -- [string] -- DataStore name
		_profile_store_scope = nil, -- [string] or [nil] -- DataStore scope
		_profile_store_lookup = "", -- [string] -- _profile_store_name .. "\0" .. (_profile_store_scope or "")
		
		_profile_template = {}, -- [table]
		_global_data_store = global_data_store, -- [GlobalDataStore] -- Object returned by DataStoreService:GetDataStore(_profile_store_name)
		
		_loaded_profiles = {[profile_key] = Profile, ...},
		_profile_load_jobs = {[profile_key] = {load_id, loaded_data}, ...},
		
		_mock_loaded_profiles = {[profile_key] = Profile, ...},
		_mock_profile_load_jobs = {[profile_key] = {load_id, loaded_data}, ...},
	--]]
}
ProfileStore.__index = ProfileStore

function ProfileStore:LoadProfileAsync(profile_key, not_released_handler, _use_mock) --> [Profile / nil] not_released_handler(place_id, game_job_id)

	not_released_handler = not_released_handler or "ForceLoad"

	if self._profile_template == nil then
		error("[ProfileService]: Profile template not set - ProfileStore:LoadProfileAsync() locked for this ProfileStore")
	end
	if type(profile_key) ~= "string" then
		error("[ProfileService]: profile_key must be a string")
	elseif string.len(profile_key) == 0 then
		error("[ProfileService]: Invalid profile_key")
	end
	if type(not_released_handler) ~= "function" and not_released_handler ~= "ForceLoad" and not_released_handler ~= "Steal" then
		error("[ProfileService]: Invalid not_released_handler")
	end

	if ProfileService.ServiceLocked == true then
		return nil
	end

	WaitForPendingProfileStore(self)

	local is_user_mock = _use_mock == UseMockTag

	-- Check if profile with profile_key isn't already loaded in this session:
	for _, profile_store in ipairs(ActiveProfileStores) do
		if profile_store._profile_store_lookup == self._profile_store_lookup then
			local loaded_profiles = is_user_mock == true and profile_store._mock_loaded_profiles or profile_store._loaded_profiles
			if loaded_profiles[profile_key] ~= nil then
				error("[ProfileService]: Profile " .. IdentifyProfile(self._profile_store_name, self._profile_store_scope, profile_key) .. " is already loaded in this session")
				-- Are you using Profile:Release() properly?
			end
		end
	end

	ActiveProfileLoadJobs = ActiveProfileLoadJobs + 1
	local force_load = not_released_handler == "ForceLoad"
	local force_load_steps = 0
	local request_force_load = force_load -- First step of ForceLoad
	local steal_session = false -- Second step of ForceLoad
	local aggressive_steal = not_released_handler == "Steal" -- Developer invoked steal
	while ProfileService.ServiceLocked == false do
		-- Load profile:
		-- SPECIAL CASE - If LoadProfileAsync is called for the same key before another LoadProfileAsync finishes,
		-- yoink the DataStore return for the new call. The older call will return nil. This would prevent very rare
		-- game breaking errors where a player rejoins the server super fast.
		local profile_load_jobs = is_user_mock == true and self._mock_profile_load_jobs or self._profile_load_jobs
		local loaded_data, key_info
		local load_id = LoadIndex + 1
		LoadIndex = load_id
		local profile_load_job = profile_load_jobs[profile_key] -- {load_id, {loaded_data, key_info} or nil}
		if profile_load_job ~= nil then
			profile_load_job[1] = load_id -- Yoink load job
			while profile_load_job[2] == nil do -- Wait for job to finish
				task.wait()
			end
			if profile_load_job[1] == load_id then -- Load job hasn't been double-yoinked
				loaded_data, key_info = table.unpack(profile_load_job[2])
				profile_load_jobs[profile_key] = nil
			else
				ActiveProfileLoadJobs = ActiveProfileLoadJobs - 1
				return nil
			end
		else
			profile_load_job = {load_id, nil}
			profile_load_jobs[profile_key] = profile_load_job
			profile_load_job[2] = table.pack(StandardProfileUpdateAsyncDataStore(
				self,
				profile_key,
				{
					ExistingProfileHandle = function(latest_data)
						if ProfileService.ServiceLocked == false then
							local active_session = latest_data.MetaData.ActiveSession
							local force_load_session = latest_data.MetaData.ForceLoadSession
							-- IsThisSession(active_session)
							if active_session == nil then
								latest_data.MetaData.ActiveSession = {PlaceId, JobId}
								latest_data.MetaData.ForceLoadSession = nil
							elseif type(active_session) == "table" then
								if IsThisSession(active_session) == false then
									local last_update = latest_data.MetaData.LastUpdate
									if last_update ~= nil then
										if os.time() - last_update > SETTINGS.AssumeDeadSessionLock then
											latest_data.MetaData.ActiveSession = {PlaceId, JobId}
											latest_data.MetaData.ForceLoadSession = nil
											return
										end
									end
									if steal_session == true or aggressive_steal == true then
										local force_load_uninterrupted = false
										if force_load_session ~= nil then
											force_load_uninterrupted = IsThisSession(force_load_session)
										end
										if force_load_uninterrupted == true or aggressive_steal == true then
											latest_data.MetaData.ActiveSession = {PlaceId, JobId}
											latest_data.MetaData.ForceLoadSession = nil
										end
									elseif request_force_load == true then
										latest_data.MetaData.ForceLoadSession = {PlaceId, JobId}
									end
								else
									latest_data.MetaData.ForceLoadSession = nil
								end
							end
						end
					end,
					MissingProfileHandle = function(latest_data)
						latest_data.Data = DeepCopyTable(self._profile_template)
						latest_data.MetaData = {
							ProfileCreateTime = os.time(),
							SessionLoadCount = 0,
							ActiveSession = {PlaceId, JobId},
							ForceLoadSession = nil,
							MetaTags = {},
						}
					end,
					EditProfile = function(latest_data)
						if ProfileService.ServiceLocked == false then
							local active_session = latest_data.MetaData.ActiveSession
							if active_session ~= nil and IsThisSession(active_session) == true then
								latest_data.MetaData.SessionLoadCount = latest_data.MetaData.SessionLoadCount + 1
								latest_data.MetaData.LastUpdate = os.time()
							end
						end
					end,
				},
				is_user_mock
			))
			if profile_load_job[1] == load_id then -- Load job hasn't been yoinked
				loaded_data, key_info = table.unpack(profile_load_job[2])
				profile_load_jobs[profile_key] = nil
			else
				ActiveProfileLoadJobs = ActiveProfileLoadJobs - 1
				return nil -- Load job yoinked
			end
		end
		-- Handle load_data:
		if loaded_data ~= nil and key_info ~= nil then
			local active_session = loaded_data.MetaData.ActiveSession
			if type(active_session) == "table" then
				if IsThisSession(active_session) == true then
					-- Special component in MetaTags:
					loaded_data.MetaData.MetaTagsLatest = DeepCopyTable(loaded_data.MetaData.MetaTags)
					-- Case #1: Profile is now taken by this session:
					-- Create Profile object:
					local global_updates_object = {
						_updates_latest = loaded_data.GlobalUpdates,
						_pending_update_lock = {},
						_pending_update_clear = {},

						_new_active_update_listeners = Madwork.NewScriptSignal(),
						_new_locked_update_listeners = Madwork.NewScriptSignal(),

						_profile = nil,
					}
					setmetatable(global_updates_object, GlobalUpdates)
					local profile = {
						Data = loaded_data.Data,
						MetaData = loaded_data.MetaData,
						MetaTagsUpdated = Madwork.NewScriptSignal(),

						RobloxMetaData = loaded_data.RobloxMetaData or {},
						UserIds = loaded_data.UserIds or {},
						KeyInfo = key_info,
						KeyInfoUpdated = Madwork.NewScriptSignal(),

						GlobalUpdates = global_updates_object,

						_profile_store = self,
						_profile_key = profile_key,

						_release_listeners = Madwork.NewScriptSignal(),
						_hop_ready_listeners = Madwork.NewScriptSignal(),
						_hop_ready = false,

						_load_timestamp = os.clock(),

						_is_user_mock = is_user_mock,
					}
					setmetatable(profile, Profile)
					global_updates_object._profile = profile
					-- Referencing Profile object in ProfileStore:
					if next(self._loaded_profiles) == nil and next(self._mock_loaded_profiles) == nil then -- ProfileStore object was inactive
						table.insert(ActiveProfileStores, self)
					end
					if is_user_mock == true then
						self._mock_loaded_profiles[profile_key] = profile
					else
						self._loaded_profiles[profile_key] = profile
					end
					-- Adding profile to AutoSaveList;
					AddProfileToAutoSave(profile)
					-- Special case - finished loading profile, but session is shutting down:
					if ProfileService.ServiceLocked == true then
						SaveProfileAsync(profile, true) -- Release profile and yield until the DataStore call is finished
						profile = nil -- nil will be returned by this call
					end
					-- Return Profile object:
					ActiveProfileLoadJobs = ActiveProfileLoadJobs - 1
					return profile
				else
					-- Case #2: Profile is taken by some other session:
					if force_load == true then
						local force_load_session = loaded_data.MetaData.ForceLoadSession
						local force_load_uninterrupted = false
						if force_load_session ~= nil then
							force_load_uninterrupted = IsThisSession(force_load_session)
						end
						if force_load_uninterrupted == true then
							if request_force_load == false then
								force_load_steps = force_load_steps + 1
								if force_load_steps == SETTINGS.ForceLoadMaxSteps then
									steal_session = true
								end
							end
							task.wait() -- Overload prevention
						else
							-- Another session tried to force load this profile:
							ActiveProfileLoadJobs = ActiveProfileLoadJobs - 1
							return nil
						end
						request_force_load = false -- Only request a force load once
					elseif aggressive_steal == true then
						task.wait() -- Overload prevention
					else
						local handler_result = not_released_handler(active_session[1], active_session[2])
						if handler_result == "Repeat" then
							task.wait() -- Overload prevention
						elseif handler_result == "Cancel" then
							ActiveProfileLoadJobs = ActiveProfileLoadJobs - 1
							return nil
						elseif handler_result == "ForceLoad" then
							force_load = true
							request_force_load = true
							task.wait() -- Overload prevention
						elseif handler_result == "Steal" then
							aggressive_steal = true
							task.wait() -- Overload prevention
						else
							error(
								"[ProfileService]: Invalid return from not_released_handler (\"" .. tostring(handler_result) .. "\")(" .. type(handler_result) .. ");" ..
									"\n" .. IdentifyProfile(self._profile_store_name, self._profile_store_scope, profile_key) ..
									" Traceback:\n" .. debug.traceback()
							)
						end
					end
				end
			else
				ActiveProfileLoadJobs = ActiveProfileLoadJobs - 1
				return nil -- In this scenario it is likely the ProfileService.ServiceLocked flag was raised
			end
		else
			task.wait() -- Overload prevention
		end
	end
	ActiveProfileLoadJobs = ActiveProfileLoadJobs - 1
	return nil -- If loop breaks return nothing
end

function ProfileStore:GlobalUpdateProfileAsync(profile_key, update_handler, _use_mock) --> [GlobalUpdates / nil] (update_handler(GlobalUpdates))
	if type(profile_key) ~= "string" or string.len(profile_key) == 0 then
		error("[ProfileService]: Invalid profile_key")
	end
	if type(update_handler) ~= "function" then
		error("[ProfileService]: Invalid update_handler")
	end

	if ProfileService.ServiceLocked == true then
		return nil
	end

	WaitForPendingProfileStore(self)

	while ProfileService.ServiceLocked == false do
		-- Updating profile:
		local loaded_data = StandardProfileUpdateAsyncDataStore(
			self,
			profile_key,
			{
				ExistingProfileHandle = nil,
				MissingProfileHandle = nil,
				EditProfile = function(latest_data)
					-- Running update_handler:
					local global_updates_object = {
						_updates_latest = latest_data.GlobalUpdates,
						_update_handler_mode = true,
					}
					setmetatable(global_updates_object, GlobalUpdates)
					update_handler(global_updates_object)
				end,
			},
			_use_mock == UseMockTag
		)
		CustomWriteQueueMarkForCleanup(self._profile_store_lookup, profile_key)
		-- Handling loaded_data:
		if loaded_data ~= nil then
			-- Return GlobalUpdates object (Update successful):
			local global_updates_object = {
				_updates_latest = loaded_data.GlobalUpdates,
			}
			setmetatable(global_updates_object, GlobalUpdates)
			return global_updates_object
		else
			task.wait() -- Overload prevention
		end
	end
	return nil -- Return nothing (Update unsuccessful)
end

function ProfileStore:ViewProfileAsync(profile_key, version, _use_mock) --> [Profile / nil]
	if type(profile_key) ~= "string" or string.len(profile_key) == 0 then
		error("[ProfileService]: Invalid profile_key")
	end

	if ProfileService.ServiceLocked == true then
		return nil
	end

	WaitForPendingProfileStore(self)

	if version ~= nil and (_use_mock == UseMockTag or UseMockDataStore == true) then
		return nil -- No version support in mock mode
	end

	while ProfileService.ServiceLocked == false do
		-- Load profile:
		local loaded_data, key_info = StandardProfileUpdateAsyncDataStore(
			self,
			profile_key,
			{
				ExistingProfileHandle = nil,
				MissingProfileHandle = function(latest_data)
					latest_data.Data = DeepCopyTable(self._profile_template)
					latest_data.MetaData = {
						ProfileCreateTime = os.time(),
						SessionLoadCount = 0,
						ActiveSession = nil,
						ForceLoadSession = nil,
						MetaTags = {},
					}
				end,
				EditProfile = nil,
			},
			_use_mock == UseMockTag,
			true, -- Use :GetAsync()
			version -- DataStore key version
		)
		CustomWriteQueueMarkForCleanup(self._profile_store_lookup, profile_key)
		-- Handle load_data:
		if loaded_data ~= nil then
			if key_info == nil then
				return nil -- Load was successful, but the key was empty - return no profile object
			end
			-- Create Profile object:
			local global_updates_object = {
				_updates_latest = loaded_data.GlobalUpdates, -- {0, {}}
				_profile = nil,
			}
			setmetatable(global_updates_object, GlobalUpdates)
			local profile = {
				Data = loaded_data.Data,
				MetaData = loaded_data.MetaData,
				MetaTagsUpdated = Madwork.NewScriptSignal(),

				RobloxMetaData = loaded_data.RobloxMetaData or {},
				UserIds = loaded_data.UserIds or {},
				KeyInfo = key_info,
				KeyInfoUpdated = Madwork.NewScriptSignal(),

				GlobalUpdates = global_updates_object,

				_profile_store = self,
				_profile_key = profile_key,

				_view_mode = true,

				_load_timestamp = os.clock(),
			}
			setmetatable(profile, Profile)
			global_updates_object._profile = profile
			-- Returning Profile object:
			return profile
		else
			task.wait() -- Overload prevention
		end
	end
	return nil -- If loop breaks return nothing
end

function ProfileStore:ProfileVersionQuery(profile_key, sort_direction, min_date, max_date, _use_mock) --> [ProfileVersionQuery]
	if type(profile_key) ~= "string" or string.len(profile_key) == 0 then
		error("[ProfileService]: Invalid profile_key")
	end

	if ProfileService.ServiceLocked == true then
		return setmetatable({}, ProfileVersionQuery) -- Silently fail :Next() requests
	end

	WaitForPendingProfileStore(self)

	if _use_mock == UseMockTag or UseMockDataStore == true then
		error("[ProfileService]: :ProfileVersionQuery() is not supported in mock mode")
	end

	-- Type check:
	if sort_direction ~= nil and (typeof(sort_direction) ~= "EnumItem"
		or sort_direction.EnumType ~= Enum.SortDirection) then
		error("[ProfileService]: Invalid sort_direction (" .. tostring(sort_direction) .. ")")
	end

	if min_date ~= nil and typeof(min_date) ~= "DateTime" and typeof(min_date) ~= "number" then
		error("[ProfileService]: Invalid min_date (" .. tostring(min_date) .. ")")
	end

	if max_date ~= nil and typeof(max_date) ~= "DateTime" and typeof(max_date) ~= "number" then
		error("[ProfileService]: Invalid max_date (" .. tostring(max_date) .. ")")
	end

	min_date = typeof(min_date) == "DateTime" and min_date.UnixTimestampMillis or min_date
	max_date = typeof(max_date) == "DateTime" and max_date.UnixTimestampMillis or max_date

	local profile_version_query = {
		_profile_store = self,
		_profile_key = profile_key,
		_sort_direction = sort_direction,
		_min_date = min_date,
		_max_date = max_date,

		_query_pages = nil,
		_query_index = 0,
		_query_failure = false,

		_is_query_yielded = false,
		_query_queue = {},
	}
	setmetatable(profile_version_query, ProfileVersionQuery)

	return profile_version_query

end

function ProfileStore:WipeProfileAsync(profile_key, _use_mock) --> is_wipe_successful [bool]
	if type(profile_key) ~= "string" or string.len(profile_key) == 0 then
		error("[ProfileService]: Invalid profile_key")
	end

	if ProfileService.ServiceLocked == true then
		return false
	end

	WaitForPendingProfileStore(self)

	local wipe_status = false

	if _use_mock == UseMockTag then -- Used when the profile is accessed through ProfileStore.Mock
		local mock_data_store = UserMockDataStore[self._profile_store_lookup]
		if mock_data_store ~= nil then
			mock_data_store[profile_key] = nil
		end
		wipe_status = true
		task.wait() -- Simulate API call yield
	elseif UseMockDataStore == true then -- Used when API access is disabled
		local mock_data_store = MockDataStore[self._profile_store_lookup]
		if mock_data_store ~= nil then
			mock_data_store[profile_key] = nil
		end
		wipe_status = true
		task.wait() -- Simulate API call yield
	else
		wipe_status = pcall(function()
			self._global_data_store:RemoveAsync(profile_key)
		end)
	end

	CustomWriteQueueMarkForCleanup(self._profile_store_lookup, profile_key)

	return wipe_status
end

-- New ProfileStore:

function ProfileService.GetProfileStore(profile_store_index, profile_template) --> [ProfileStore]

	local profile_store_name
	local profile_store_scope = nil

	-- Parsing profile_store_index:
	if type(profile_store_index) == "string" then
		-- profile_store_index as string:
		profile_store_name = profile_store_index
	elseif type(profile_store_index) == "table" then
		-- profile_store_index as table:
		profile_store_name = profile_store_index.Name
		profile_store_scope = profile_store_index.Scope
	else
		error("[ProfileService]: Invalid or missing profile_store_index")
	end

	-- Type checking:
	if profile_store_name == nil or type(profile_store_name) ~= "string" then
		error("[ProfileService]: Missing or invalid \"Name\" parameter")
	elseif string.len(profile_store_name) == 0 then
		error("[ProfileService]: ProfileStore name cannot be an empty string")
	end

	if profile_store_scope ~= nil and (type(profile_store_scope) ~= "string" or string.len(profile_store_scope) == 0) then
		error("[ProfileService]: Invalid \"Scope\" parameter")
	end

	if type(profile_template) ~= "table" then
		error("[ProfileService]: Invalid profile_template")
	end

	local profile_store
	profile_store = {
		Mock = {
			LoadProfileAsync = function(_, profile_key, not_released_handler)
				return profile_store:LoadProfileAsync(profile_key, not_released_handler, UseMockTag)
			end,
			GlobalUpdateProfileAsync = function(_, profile_key, update_handler)
				return profile_store:GlobalUpdateProfileAsync(profile_key, update_handler, UseMockTag)
			end,
			ViewProfileAsync = function(_, profile_key, version)
				return profile_store:ViewProfileAsync(profile_key, version, UseMockTag)
			end,
			FindProfileVersionAsync = function(_, profile_key, sort_direction, min_date, max_date)
				return profile_store:FindProfileVersionAsync(profile_key, sort_direction, min_date, max_date, UseMockTag)
			end,
			WipeProfileAsync = function(_, profile_key)
				return profile_store:WipeProfileAsync(profile_key, UseMockTag)
			end
		},

		_profile_store_name = profile_store_name,
		_profile_store_scope = profile_store_scope,
		_profile_store_lookup = profile_store_name .. "\0" .. (profile_store_scope or ""),

		_profile_template = profile_template,
		_global_data_store = nil,
		_loaded_profiles = {},
		_profile_load_jobs = {},
		_mock_loaded_profiles = {},
		_mock_profile_load_jobs = {},
		_is_pending = false,
	}
	setmetatable(profile_store, ProfileStore)

	local options = Instance.new("DataStoreOptions")
	options:SetExperimentalFeatures({v2 = true})

	if IsLiveCheckActive == true then
		profile_store._is_pending = true
		task.spawn(function()
			WaitForLiveAccessCheck()
			if UseMockDataStore == false then
				profile_store._global_data_store = DataStoreService:GetDataStore(profile_store_name, profile_store_scope, options)
			end
			profile_store._is_pending = false
		end)
	else
		if UseMockDataStore == false then
			profile_store._global_data_store = DataStoreService:GetDataStore(profile_store_name, profile_store_scope, options)
		end
	end

	return profile_store
end

function ProfileService.IsLive() --> [bool] -- (CAN YIELD!!!)

	WaitForLiveAccessCheck()

	return UseMockDataStore == false

end

----- Initialize -----

if IsStudio == true then
	IsLiveCheckActive = true
	task.spawn(function()
		local status, message = pcall(function()
			-- This will error if current instance has no Studio API access:
			DataStoreService:GetDataStore("____PS"):SetAsync("____PS", os.time())
		end)
		local no_internet_access = status == false and string.find(message, "ConnectFail", 1, true) ~= nil
		if no_internet_access == true then
			warn("[ProfileService]: No internet access - check your network connection")
		end
		if status == false and
			(string.find(message, "403", 1, true) ~= nil or -- Cannot write to DataStore from studio if API access is not enabled
				string.find(message, "must publish", 1, true) ~= nil or -- Game must be published to access live keys
				no_internet_access == true) then -- No internet access

			UseMockDataStore = true
			ProfileService._use_mock_data_store = true
			print("[ProfileService]: Roblox API services unavailable - data will not be saved")
		else
			--print("[ProfileService]: Roblox API services available - data will be saved")
		end
		IsLiveCheckActive = false
	end)
end

----- Connections -----

-- Auto saving and issue queue managing:
RunService.Heartbeat:Connect(function()
	-- 1) Auto saving: --
	local auto_save_list_length = #AutoSaveList
	if auto_save_list_length > 0 then
		local auto_save_index_speed = SETTINGS.AutoSaveProfiles / auto_save_list_length
		local os_clock = os.clock()
		while os_clock - LastAutoSave > auto_save_index_speed do
			LastAutoSave = LastAutoSave + auto_save_index_speed
			local profile = AutoSaveList[AutoSaveIndex]
			if os_clock - profile._load_timestamp < SETTINGS.AutoSaveProfiles then
				-- This profile is freshly loaded - auto-saving immediately after loading will cause a warning in the log:
				profile = nil
				for _ = 1, auto_save_list_length - 1 do
					-- Move auto save index to the right:
					AutoSaveIndex = AutoSaveIndex + 1
					if AutoSaveIndex > auto_save_list_length then
						AutoSaveIndex = 1
					end
					profile = AutoSaveList[AutoSaveIndex]
					if os_clock - profile._load_timestamp >= SETTINGS.AutoSaveProfiles then
						break
					else
						profile = nil
					end
				end
			end
			-- Move auto save index to the right:
			AutoSaveIndex = AutoSaveIndex + 1
			if AutoSaveIndex > auto_save_list_length then
				AutoSaveIndex = 1
			end
			-- Perform save call:
			if profile ~= nil then
				task.spawn(SaveProfileAsync, profile) -- Auto save profile in new thread
			end
		end
	end
	-- 2) Issue queue: --
	-- Critical state handling:
	if ProfileService.CriticalState == false then
		if #IssueQueue >= SETTINGS.IssueCountForCriticalState then
			ProfileService.CriticalState = true
			ProfileService.CriticalStateSignal:Fire(true)
			CriticalStateStart = os.clock()
			warn("[ProfileService]: Entered critical state")
		end
	else
		if #IssueQueue >= SETTINGS.IssueCountForCriticalState then
			CriticalStateStart = os.clock()
		elseif os.clock() - CriticalStateStart > SETTINGS.CriticalStateLast then
			ProfileService.CriticalState = false
			ProfileService.CriticalStateSignal:Fire(false)
			warn("[ProfileService]: Critical state ended")
		end
	end
	-- Issue queue:
	while true do
		local issue_time = IssueQueue[1]
		if issue_time == nil then
			break
		elseif os.clock() - issue_time > SETTINGS.IssueLast then
			table.remove(IssueQueue, 1)
		else
			break
		end
	end
end)

-- Release all loaded profiles when the server is shutting down:
task.spawn(function()
	WaitForLiveAccessCheck()
	Madwork.ConnectToOnClose(
		function()
			ProfileService.ServiceLocked = true
			-- 1) Release all active profiles: --
			-- Clone AutoSaveList to a new table because AutoSaveList changes when profiles are released:
			local on_close_save_job_count = 0
			local active_profiles = {}
			for index, profile in ipairs(AutoSaveList) do
				active_profiles[index] = profile
			end
			-- Release the profiles; Releasing profiles can trigger listeners that release other profiles, so check active state:
			for _, profile in ipairs(active_profiles) do
				if profile:IsActive() == true then
					on_close_save_job_count = on_close_save_job_count + 1
					task.spawn(function() -- Save profile on new thread
						SaveProfileAsync(profile, true)
						on_close_save_job_count = on_close_save_job_count - 1
					end)
				end
			end
			-- 2) Yield until all active profile jobs are finished: --
			while on_close_save_job_count > 0 or ActiveProfileLoadJobs > 0 or ActiveProfileSaveJobs > 0 do
				task.wait()
			end
			return -- We're done!
		end,
		UseMockDataStore == false -- Always run this OnClose task if using Roblox API services
	)
end)

return ProfileService]]></ProtectedString>
								<int64 name="SourceAssetId">5331689994</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a4e</UniqueId>
							</Properties>
						</Item>
					</Item>
				</Item>
				<Item class="ModuleScript" referent="RBX85ec96999f764b61acb962ff237777b8">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">api</string>
						<string name="ScriptGuid">{DD14D7EA-34DB-442A-9F0F-5C93492FCEB9}</string>
						<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: api.lua
-- Description: Better chat server API

return function(constructors)
	local api = {}
	
	api.channel = constructors.channel
	api.speaker = constructors.speaker
	api.network = constructors.network
	
	return api
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a4f</UniqueId>
					</Properties>
				</Item>
			</Item>
			<Item class="Folder" referent="RBX7abcf37d412a4e2c8755a99b7c9c090f">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">shared</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259a5</UniqueId>
				</Properties>
				<Item class="ModuleScript" referent="RBX1876daba0c624f4aa5c5d84e9ba7a022">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">network</string>
						<string name="ScriptGuid">{991FEFE8-61FC-45D3-A6FD-9477403ED096}</string>
						<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: network.lua
-- Description: Remote event wrapper for readability

local network = {};
local blank = function() end
local events = script.Parent:WaitForChild("events");

local new = function(class,name)
	local object = Instance.new(class);
	object.Parent = events;
	object.Name = name;
	return object;
end

local get = function(name)
	return events:WaitForChild(name,12)
end

-- Server:

function network:newEvent(name,callback)
	new("RemoteEvent",name).OnServerEvent:Connect(callback or blank);
end

function network:newFunction(name,callback)
	new("RemoteFunction",name).OnServerInvoke = callback or blank;
end

function network:fireClients(name,clients,...)
	local event = get(name);
	if(clients == "all") then
		event:FireAllClients(...);
	else
		for _,client in pairs(clients) do
			event:FireClient(client,...);
		end
	end
end

-- Client:

network.onClientEvent = function(name,callback)
	return get(name).OnClientEvent:Connect(callback);
end

function network:invoke(name,...)
	return get(name):InvokeServer(...);
end

function network:fire(name,...)
	get(name):FireServer(...);
end

return network;]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a50</UniqueId>
					</Properties>
				</Item>
				<Item class="Folder" referent="RBXf785a51325ce48a8be40c736449bbee5">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">events</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259a6</UniqueId>
					</Properties>
				</Item>
				<Item class="Folder" referent="RBX82a0bee2258043c086387eb6c4561463">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">addons</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259a7</UniqueId>
					</Properties>
				</Item>
				<Item class="Folder" referent="RBX1ebcc0d12b3d4d4a8a0f0251485a07f2">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">loading</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259a8</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX4c08821e5b2e4f86aaa2d22e7dea6487">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">signal</string>
						<string name="ScriptGuid">{0834AC28-7C77-4451-AE78-E484EA2597D0}</string>
						<ProtectedString name="Source"><![CDATA[--------------------------------------------------------------------------------
--               Batched Yield-Safe Signal Implementation                     --
-- This is a Signal class which has effectively identical behavior to a       --
-- normal RBXScriptSignal, with the only difference being a couple extra      --
-- stack frames at the bottom of the stack trace when an error is thrown.     --
-- This implementation caches runner coroutines, so the ability to yield in   --
-- the signal handlers comes at minimal extra cost over a naive signal        --
-- implementation that either always or never spawns a thread.                --
--                                                                            --
-- API:                                                                       --
--   local Signal = require(THIS MODULE)                                      --
--   local sig = Signal.new()                                                 --
--   local connection = sig:Connect(function(arg1, arg2, ...) ... end)        --
--   sig:Fire(arg1, arg2, ...)                                                --
--   connection:Disconnect()                                                  --
--   sig:DisconnectAll()                                                      --
--   local arg1, arg2, ... = sig:Wait()                                       --
--                                                                            --
-- Licence:                                                                   --
--   Licenced under the MIT licence.                                          --
--                                                                            --
-- Authors:                                                                   --
--   stravant - July 31st, 2021 - Created the file.                           --
--------------------------------------------------------------------------------

-- The currently idle thread to run the next handler on
local freeRunnerThread = nil

-- Function which acquires the currently idle handler runner thread, runs the
-- function fn on it, and then releases the thread, returning it to being the
-- currently idle one.
-- If there was a currently idle runner thread already, that's okay, that old
-- one will just get thrown and eventually GCed.
local function acquireRunnerThreadAndCallEventHandler(fn, ...)
	local acquiredRunnerThread = freeRunnerThread
	freeRunnerThread = nil
	fn(...)
	-- The handler finished running, this runner thread is free again.
	freeRunnerThread = acquiredRunnerThread
end

-- Coroutine runner that we create coroutines of. The coroutine can be 
-- repeatedly resumed with functions to run followed by the argument to run
-- them with.
local function runEventHandlerInFreeThread(...)
	acquireRunnerThreadAndCallEventHandler(...)
	while true do
		acquireRunnerThreadAndCallEventHandler(coroutine.yield())
	end
end

-- Connection class
local Connection = {}
Connection.__index = Connection

function Connection.new(signal, fn)
	return setmetatable({
		_connected = true,
		_signal = signal,
		_fn = fn,
		_next = false,
	}, Connection)
end

function Connection:Disconnect()
	assert(self._connected, "Can't disconnect a connection twice.", 2)
	self._connected = false

	-- Unhook the node, but DON'T clear it. That way any fire calls that are
	-- currently sitting on this node will be able to iterate forwards off of
	-- it, but any subsequent fire calls will not hit it, and it will be GCed
	-- when no more fire calls are sitting on it.
	if self._signal._handlerListHead == self then
		self._signal._handlerListHead = self._next
	else
		local prev = self._signal._handlerListHead
		while prev and prev._next ~= self do
			prev = prev._next
		end
		if prev then
			prev._next = self._next
		end
	end
end

-- Make Connection strict
setmetatable(Connection, {
	__index = function(tb, key)
		error(("Attempt to get Connection::%s (not a valid member)"):format(tostring(key)), 2)
	end,
	__newindex = function(tb, key, value)
		error(("Attempt to set Connection::%s (not a valid member)"):format(tostring(key)), 2)
	end
})

-- Signal class
local Signal = {}
Signal.__index = Signal

function Signal.new()
	return setmetatable({
		_handlerListHead = false,	
	}, Signal)
end

function Signal:Connect(fn)
	local connection = Connection.new(self, fn)
	if self._handlerListHead then
		connection._next = self._handlerListHead
		self._handlerListHead = connection
	else
		self._handlerListHead = connection
	end
	return connection
end

-- Disconnect all handlers. Since we use a linked list it suffices to clear the
-- reference to the head handler.
function Signal:DisconnectAll()
	self._handlerListHead = false
end

-- Signal:Fire(...) implemented by running the handler functions on the
-- coRunnerThread, and any time the resulting thread yielded without returning
-- to us, that means that it yielded to the Roblox scheduler and has been taken
-- over by Roblox scheduling, meaning we have to make a new coroutine runner.
function Signal:Fire(...)
	local item = self._handlerListHead
	while item do
		if item._connected then
			if not freeRunnerThread then
				freeRunnerThread = coroutine.create(runEventHandlerInFreeThread)
			end
			task.spawn(freeRunnerThread, item._fn, ...)
		end
		item = item._next
	end
end

-- Implement Signal:Wait() in terms of a temporary connection using
-- a Signal:Connect() which disconnects itself.
function Signal:Wait()
	local waitingCoroutine = coroutine.running()
	local cn;
	cn = self:Connect(function(...)
		cn:Disconnect()
		task.spawn(waitingCoroutine, ...)
	end)
	return coroutine.yield()
end

-- Make signal strict
setmetatable(Signal, {
	__index = function(tb, key)
		error(("Attempt to get Signal::%s (not a valid member)"):format(tostring(key)), 2)
	end,
	__newindex = function(tb, key, value)
		error(("Attempt to set Signal::%s (not a valid member)"):format(tostring(key)), 2)
	end
})

return Signal]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a51</UniqueId>
					</Properties>
				</Item>
			</Item>
			<Item class="Folder" referent="RBXe86297b5fc1f448f9e342ea86a52334d">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">client</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259a9</UniqueId>
				</Properties>
				<Item class="LocalScript" referent="RBX5b29b157b8054d53bf75f2ba521beea5">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">load</string>
						<string name="ScriptGuid">{3ED773E3-7028-45EF-A87D-FE8E8A57433D}</string>
						<ProtectedString name="Source"><![CDATA[--[[
                                                                                                                  
	                                                               ,,                                                 
	`7MM"""Yp,           mm     mm                     .g8"""bgd `7MM                 mm          `7MMF'   `7MF'      
	  MM    Yb           MM     MM                   .dP'     `M   MM                 MM            `MA     ,V        
	  MM    dP  .gP"Ya mmMMmm mmMMmm .gP"Ya `7Mb,od8 dM'       `   MMpMMMb.   ,6"Yb.mmMMmm           VM:   ,V pd""b.  
	  MM"""bg. ,M'   Yb  MM     MM  ,M'   Yb  MM' "' MM            MM    MM  8)   MM  MM              MM.  M'(O)  `8b 
	  MM    `Y 8M""""""  MM     MM  8M""""""  MM     MM.           MM    MM   ,pm9MM  MM              `MM A'      ,89 
	  MM    ,9 YM.    ,  MM     MM  YM.    ,  MM     `Mb.     ,'   MM    MM  8M   MM  MM               :MM     ""Yb. 
	.JMMmmmd9   `Mbmmd'  `Mbmo  `Mbmo`Mbmmd'.JMML.     `"bmmmd'  .JMML  JMML.`Moo9^Yo.`Mbmo             VF         88 
	                                                                                                         (O)  .M' 
	                                                                                                          bmmmd'  
	                                                                                                          
	Author: @Jumpathy
	Name: start.lua
	Description: Chat system init
	
	Note: I swear to god, nothing that I make that looks nice can have remotely nice-looking code
--]]

-- services:

local replicatedStorage = game:GetService("ReplicatedStorage")
local userInput = game:GetService("UserInputService")
local guiService = game:GetService("GuiService")
local runService = game:GetService("RunService")
local chatService = game:GetService("Chat")
local heartbeat = runService.Heartbeat

-- platform:

local scaleToOffset = function(size)
	local viewportSize = workspace.CurrentCamera.ViewportSize
	return(UDim2.fromOffset((viewportSize.X * size.X.Scale) + size.X.Offset,(viewportSize.Y * size.Y.Scale) + size.Y.Offset))
end

local platform = function()
	if(userInput.TouchEnabled) then
		return((workspace.CurrentCamera.ViewportSize.Y < 600) and "Phone" or "Tablet")
	else
		return(guiService:IsTenFootInterface() and "Console" or "Desktop")
	end
end

local currentPlatform = platform()
if(currentPlatform ~= "Console") then
	-- wait for server:

	local betterchat_shared = replicatedStorage:WaitForChild("betterchat_shared")
	local network = require(betterchat_shared:WaitForChild("network"))
	local addons = betterchat_shared:WaitForChild("addons"):WaitForChild("Client")
	local signal = require(betterchat_shared:WaitForChild("signal"))
	
	-- client:

	local container = script.Parent
	local modules = container:WaitForChild("modules")
	local core = modules:WaitForChild("core")

	local connections = require(core:WaitForChild("connections"))
	local privacy = require(modules:WaitForChild("privacy"))
	local bubbleChat = require(modules:WaitForChild("bubbleChat"))
	local settingsMenu = require(core:WaitForChild("settingsMenu"))
	
	local localPlayer = game:GetService("Players").LocalPlayer
	local playerGui = localPlayer.PlayerGui
	
	if(not privacy.chatDisabled) then

		-- change:
		
		local gui = script:WaitForChild("Chat"):Clone()
		gui.Parent = playerGui
		
		local container = gui:WaitForChild("Container")
		
		local chatbarContainer = container:WaitForChild("ChatBarContainer"):WaitForChild("Main")
		local chatbox = chatbarContainer:WaitForChild("Container"):WaitForChild("Box"):WaitForChild("Input")
		local environment = {
			utility = require(core:WaitForChild("utility")),
			localization = require(core:WaitForChild("localization"))(),
			richText = require(core:WaitForChild("formatting"):WaitForChild("richText")),
			connections = connections,
			network = network,
			config = network:invoke("requestConfig"),
			messages = {},
			main_ui = container,
			lastRefresh = tick(),
			gui = gui,
			container = container,
			addons = addons,
			signal = signal
		}

		-- channel bar:
		
		function environment:getTextSize()
			return chatbox.TextSize
		end
		
		local channelBarEnabled = environment.config.UI.ChannelBarEnabled
		if(channelBarEnabled) then
			container:WaitForChild("Channelbar").Visible = true
		end
		environment.channelBarUi = container.Channelbar:WaitForChild("Main"):WaitForChild("Container"):WaitForChild("Scroller")

		
		-- bubble:
		
		local label = Instance.new("TextLabel")
		label.RichText = true
		
		local getTextContent = function(text)
			label.Text = text
			return label.ContentText
		end
		environment.bubbleChatEnabled = false
		environment.bubbleChatConfig = environment.config.BubbleChat.Config
		
		if(environment.config.BubbleChat.Enabled) then
			bubbleChat.init(environment.config.BubbleChat,environment.network,environment)
			environment.bubbleChatEnabled = true
		elseif(chatService.BubbleChatEnabled) then
			network.onClientEvent("receiveMessage",function(data)
				if(data.is_singular) then
					local player = data.messages[1].player
					if(player and player.Character) then
						chatService:Chat(player.Character,getTextContent(environment.richText:markdown(data.messages[1]["message"])))
					end
				end
			end)
		end
		
		task.spawn(function()
			if(environment.config.SettingsMenu.Enabled) then
				-- settings menu:
				settingsMenu(environment)
			end
		end)
		
		-- util
		
		local message_senders
		
		task.spawn(function()
			local saveChat = gui:WaitForChild("SaveChat")
			local container = saveChat:WaitForChild("Container")
			local button = container:WaitForChild("Slot"):Clone()
			container.Slot:Destroy()

			local close = function()
				saveChat:TweenPosition(UDim2.fromScale(0.5,-1.5),Enum.EasingDirection.In,Enum.EasingStyle.Linear,0.25,true)
			end

			function environment:openSaveChat(message)
				saveChat.Position = UDim2.fromScale(0.5,-1.5)
				saveChat:TweenPosition(UDim2.fromScale(0.5,0.5),Enum.EasingDirection.In,Enum.EasingStyle.Linear,0.25,true)

				for _,child in pairs(container:GetChildren()) do
					if(child:IsA("TextButton")) then
						child:Destroy()
					end
				end

				for i = 1,20 do
					local option = button:Clone()
					option.Parent = container
					option.Text = ("Slot %s"):format(i)
					environment.utility:linkObjectSignals(option,{
						option.MouseButton1Click:Connect(function()
							task.spawn(function()
								environment:saveToSlot(i,message)
								message_senders.makeSm(("You can now say '/%s' to send that message again"):format(i))
							end)
							close()
						end)
					})
				end
			end

			saveChat:WaitForChild("Header"):WaitForChild("UI"):WaitForChild("Close").MouseButton1Click:Connect(close)
		end)
		
		-- prefixes internal:
		
		function environment:generateReplyCode(id)
			return("reply_"..id)
		end
		
		-- setup:
		
		local chatWindowVisible = environment.config.UI.ChatWindowVisible
		local chatSizes = environment.config.UI.ChatSizes
		local chatModules = require(core:WaitForChild("chat"))(environment)
		local chatbar = chatModules.chatbar:setup(chatbarContainer,chatbox)
		local chatWindow = chatModules.chatWindow:setup(container,chatbar)
		environment.chatWindowVisible = chatWindowVisible
		
		if(not chatWindowVisible) then
			container.ChatBarContainer.Position = UDim2.new(0,0,0,0)
			container.ChatBarContainer.AnchorPoint = Vector2.new(0,0)
			container.ChatWindow.Visible = false
		end

		-- scale:
		
		local baseSize = scaleToOffset(chatSizes[currentPlatform])
		local lastScale
		container.Size = baseSize

		workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(function()
			local key = tick()
			lastScale = key
			runService.Heartbeat:Wait()
			if(lastScale == key) then
				local newSize = scaleToOffset(chatSizes[currentPlatform])
				local sizeDiff = baseSize - newSize
				container.Size = (newSize + sizeDiff)
				baseSize = newSize
			end
		end)
	
		environment.utility.descendantOfClassAdded(gui,"UICorner",function(corner)
			local roundness = environment.config.UI.Rounding
			if(corner.Name ~= "Ignore") then
				corner.CornerRadius = UDim.new(0,roundness)
			end
		end)
		
		function environment:refreshRounding()
			local roundness = environment.config.UI.Rounding
			for _,object in pairs(gui:GetDescendants()) do
				if(object:IsA("UICorner") and object.Name ~= "Ignore") then
					object.CornerRadius = UDim.new(0,roundness)
				end
			end
		end
		
		-- text scale
		
		local ogTextSizes = {}
		local lastTextSize = environment.config.UI.BaseTextSize
		local base = lastTextSize
		
		local scale = function(obj,original)
			pcall(function()
				local difference = (lastTextSize - base)
				obj.TextSize = original + difference
			end)
		end
		
		function environment:setTextSize(new)
			lastTextSize = new
			for object,original in pairs(ogTextSizes) do
				task.spawn(scale,object,original)
			end
		end
		
		for _,obj in pairs(gui:GetDescendants()) do
			local success,hasTextSize = pcall(function()
				return obj["TextSize"]
			end)
			if(success and hasTextSize) then
				if(not ogTextSizes[obj]) then
					ogTextSizes[obj] = obj.TextSize
				end
			end
		end
		
		gui.DescendantAdded:Connect(function(obj)
			local success,hasTextSize = pcall(function()
				return obj["TextSize"]
			end)
			if(success and hasTextSize) then
				if(not ogTextSizes[obj]) then
					ogTextSizes[obj] = obj.TextSize
				end
			end
			scale(obj,ogTextSizes[obj])
		end)

		-- message:

		local messages = core:WaitForChild("messages")
		local queue = {}

		message_senders = {
			reply = require(messages:WaitForChild("reply"))(environment),
			system = require(messages:WaitForChild("system"))(environment,queue),
			default = require(messages:WaitForChild("default"))(environment),
			makeSm = function(message)
				return message_senders.system(
					unpack(environment.localization:produceSystemMessage(message))
				)
			end,
		}

		environment.message_senders = message_senders

		-- received:

		local scroller = environment.mainUi.scroller
		local realScroller = scroller.Parent
		local messageLimit = environment.config.Messages.ChannelMessageLimit

		local clearScroller = function()
			for k,v in pairs(queue) do
				table.remove(queue,k)
			end
			for _,child in pairs(scroller:GetChildren()) do
				if(child:IsA("Frame")) then
					child:Destroy()
				end
			end
		end
		
		local count = 0
		local currentChannel

		local onMessage = function(message)
			count += 1
			connections:Fire("ChatWindow","MessagesChanged",count)
		end

		local handleDeletionOfOldMessages = function()
			if(#queue > messageLimit) then
				local idx = #queue
				local obj = queue[idx]
				obj:Destroy()
				table.remove(queue,idx)
			end
		end
		
		function environment:sendSystemMessage(text)
			local object = message_senders.system("",text)
			table.insert(queue,1,object)
		end
		
		local getObject = function(data)
			if(data.class == "regular") then
				return message_senders.default(data)
			elseif(data.class == "whisper") then
				-- deprecated (refer to 'regular')
			elseif(data.class == "reply") then
				return message_senders.reply(data,queue)
			end
		end
		
		local onCreated = function(object,data,extra)
			environment.messages[data.id] = {
				object = object,
				data = data,
				extra = extra
			}
		end
		
		local mutelist = {}
		local canMuteSelf = true
		environment.mutelist = mutelist
		
		local createNewMessage = function(data) -- this function initiates every message ever sent :eyes:
			if(mutelist[data.senderId]) then
				return
			end
			local existingMessageById = environment.messages[data.id]
			if(existingMessageById) then
				if(data.class == "reply") then
					existingMessageById.extra.replace(data,queue)
				else
					local api = environment:checkThread(data.id)
					if(api) then
						api:editBaseMessage(data)
					end
					local currentKey = table.find(queue,existingMessageById.object)
					if(currentKey) then
						local object = getObject(data)
						onCreated(object,data)
						queue[currentKey] = object
						existingMessageById.object:Destroy()
					end
				end
			else
				local object,extra = getObject(data)
				onCreated(object,data,extra)
				table.insert(queue,1,object)
				onMessage(object)
			end
			handleDeletionOfOldMessages()
		end
		
		local muteKeys = {
			[false] = "GameChat_ChatMain_SpeakerHasBeenUnMuted",
			[true] = "GameChat_ChatMain_SpeakerHasBeenMuted",
			["failed"] = "GameChat_DoMuteCommand_CannotMuteSelf"
		}
		
		local announceMute = function(player,state)
			message_senders.makeSm(environment.localization:localize(muteKeys[state]):format(player.Name))
		end
		
		function environment:mute(player)
			if(localPlayer == player and (not canMuteSelf)) then
				message_senders.makeSm(environment.localization:localize(muteKeys["failed"]))
				return
			end
			mutelist[player.UserId] = true
			announceMute(player,true)
		end
		
		function environment:unmute(player)
			if(localPlayer == player and (not canMuteSelf)) then
				return
			end
			mutelist[player.UserId] = false
			announceMute(player,false)
		end
		
		local includeBeginningMessageAndScroll = function(id)
			local sm = message_senders.system(unpack(environment.localization:getWelcomeMessage(id)))
			table.insert(queue,sm)
			onMessage(sm)
			environment:checkScrollerPos(true,0)
		end
		
		local refreshHistory = function(channel)
			currentChannel = channel
			local received = network:invoke("requestHistory",channel)
			environment.lastRefresh = tick()
			local current = environment.lastRefresh
			environment.messages = {}
			environment.threads = {}
			heartbeat:Wait()
			clearScroller()
			local last = 0
			local key = 0
			for _,data in pairs(received.messages) do
				key += 1
				if(data.id ~= nil) then
					last = data.id
				end
				task.spawn(function()
					if(not data.replyingTo) then
						data.massMessageLoad = true
						createNewMessage(data)
					else
						data.massMessageLoad = true
						repeat
							runService.Heartbeat:Wait()
						until(environment.messages[data.replyingTo.id])
						if(environment.lastRefresh == current) then
							createNewMessage(data)
						end
					end
				end)
				-- chunking (makes loading much faster, as well as optimizations to only load the message function after the mouse hovers on it)
				if(key == 10) then
					task.wait()
					key = 0
				end
			end
			includeBeginningMessageAndScroll((last or 9999)+1)
		end
		
		local onMessageReceived = function(received) --> this message will handle every single message ever displayed in the chat, kinda crazy tbh
			for _,data in pairs(received.messages) do
				task.spawn(function()
					if(channelBarEnabled) then
						if(currentChannel == data.channelFrom) then
							createNewMessage(data)
						elseif(data.filteredSuccessfully) then
							environment:addNotificationToChannel(data.channelFrom)
						end
					else
						createNewMessage(data)
					end
				end)
			end
		end

		network.onClientEvent("receiveMessage",onMessageReceived)
		network.onClientEvent("receiveMessageCreation",onMessageReceived)
		network.onClientEvent("editMessage",createNewMessage)
		
		function environment:atBottom()
			return(realScroller.CanvasPosition.Y == realScroller.AbsoluteCanvasSize.Y - realScroller.AbsoluteSize.Y)
		end
		
		function environment:checkScrollerPos(bypass,len)
			if(realScroller.CanvasPosition.Y == realScroller.AbsoluteCanvasSize.Y - realScroller.AbsoluteSize.Y or bypass) then
				task.spawn(function()
					heartbeat:Wait()
					environment.utility:tween({realScroller,(len or 0.25),{
						["CanvasPosition"] = Vector2.new(0,realScroller.AbsoluteCanvasSize.Y)
					}})
				end)
			end
		end

		function environment:addMessageToQueue(message)
			onMessage(message)
			table.insert(queue,1,message)
			handleDeletionOfOldMessages()
		end

		refreshHistory("Main")
		function environment:fetchChannelHistory(channelName)
			environment.currentChannel = channelName
			refreshHistory(channelName)
		end
		
		-- core ui:

		local chatOpenState = true
		local locked = false
		
		local toggleChatState = function()
			if(locked) then
				return
			end
			connections:Fire("ChatWindow","VisibilityStateChanged",(not chatOpenState))
			chatOpenState = not chatOpenState
			container.Visible = chatOpenState
		end
		
		function environment:setChatLocked(state)
			locked = state
		end
		
		connections:Connect("ChatWindow","ToggleVisibility",toggleChatState)
		for i = 1,2 do
			toggleChatState()
		end
		
		connections:Connect("ChatWindow","CoreGuiEnabled",function(state)
			container.Visible = state
		end)
				
		-- notifiers
		
		local players = game:GetService("Players")
		local starterGui = game:GetService("StarterGui")
		local notifiers = environment.config.Notifiers
		
		if(notifiers.FriendJoinNotifier) then
			players.PlayerAdded:Connect(function(plr)
				if(plr:IsFriendsWith(localPlayer.UserId)) then
					message_senders.makeSm(environment.localization:localize("GameChat_FriendChatNotifier_JoinMessage"):format(plr.Name))
				end
			end)
		end
		
		if(notifiers.TeamChangeNotifier) then
			local changed = function(name)
				message_senders.makeSm(environment.localization:localize("GameChat_TeamChat_NowInTeam"):format(name))
			end
			localPlayer:GetPropertyChangedSignal("Team"):Connect(function()
				local teamName = localPlayer.Team and localPlayer.Team.Name or "Neutral"
				changed(teamName)
			end)
		end
		
		if(notifiers.BlockedUserNotifier) then
			local blockKeys = {
				["blocked"] = "GameChat_ChatMain_SpeakerHasBeenBlocked",
				["unblocked"] = "GameChat_ChatMain_SpeakerHasBeenUnBlocked"
			}
			
			local blockEvents = {
				["blocked"] = starterGui:GetCore("PlayerBlockedEvent"),
				["unblocked"] = starterGui:GetCore("PlayerUnblockedEvent")
			}
			
			for keyToTrigger,event in pairs(blockEvents) do
				event.Event:Connect(function(player)
					message_senders.makeSm(environment.localization:localize(blockKeys[keyToTrigger]):format(player.Name))
				end)
			end
		end
		
		-- custom commands
		
		environment.utility.childAdded(addons:WaitForChild("Commands"),function(command)
			command.Parent = core:WaitForChild("commands"):WaitForChild("list")
		end)
		
		-- plugins
		
		local api = require(core:WaitForChild("api"))(environment)
		environment.utility.childAdded(addons:FindFirstChild("Plugins") or Instance.new("Folder"),function(module)
			require(module)(api)
		end)
	end
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a32</UniqueId>
					</Properties>
					<Item class="ScreenGui" referent="RBX89a432cef1d74f6a9b25be2b4cb9da47">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<int name="DisplayOrder">2</int>
							<bool name="Enabled">true</bool>
							<bool name="IgnoreGuiInset">false</bool>
							<string name="Name">Chat</string>
							<bool name="ResetOnSpawn">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a9e</UniqueId>
							<token name="ZIndexBehavior">0</token>
						</Properties>
						<Item class="Frame" referent="RBXa6a98bb3b35949e68733b8926ada9fad">
							<Properties>
								<bool name="Active">false</bool>
								<Vector2 name="AnchorPoint">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<bool name="AutoLocalize">true</bool>
								<token name="AutomaticSize">0</token>
								<Color3 name="BackgroundColor3">
									<R>1</R>
									<G>1</G>
									<B>1</B>
								</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">
									<R>0.105882362</R>
									<G>0.164705887</G>
									<B>0.207843155</B>
								</Color3>
								<token name="BorderMode">0</token>
								<int name="BorderSizePixel">1</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<int name="LayoutOrder">0</int>
								<string name="Name">Container</string>
								<Ref name="NextSelectionDown">null</Ref>
								<Ref name="NextSelectionLeft">null</Ref>
								<Ref name="NextSelectionRight">null</Ref>
								<Ref name="NextSelectionUp">null</Ref>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>16</XO>
									<YS>0</YS>
									<YO>8</YO>
								</UDim2>
								<Ref name="RootLocalizationTable">null</Ref>
								<float name="Rotation">0</float>
								<bool name="Selectable">false</bool>
								<Ref name="SelectionImageObject">null</Ref>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>400</XO>
									<YS>0</YS>
									<YO>235</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<int64 name="SourceAssetId">-1</int64>
								<token name="Style">0</token>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259b5</UniqueId>
								<bool name="Visible">false</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="Frame" referent="RBXbdc17278d7c746708f5cba0d580507d0">
								<Properties>
									<bool name="Active">false</bool>
									<Vector2 name="AnchorPoint">
										<X>0</X>
										<Y>0</Y>
									</Vector2>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<bool name="AutoLocalize">true</bool>
									<token name="AutomaticSize">0</token>
									<Color3 name="BackgroundColor3">
										<R>1</R>
										<G>1</G>
										<B>1</B>
									</Color3>
									<float name="BackgroundTransparency">1</float>
									<Color3 name="BorderColor3">
										<R>0.105882362</R>
										<G>0.164705887</G>
										<B>0.207843155</B>
									</Color3>
									<token name="BorderMode">0</token>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<int name="LayoutOrder">0</int>
									<string name="Name">ChatWindow</string>
									<Ref name="NextSelectionDown">null</Ref>
									<Ref name="NextSelectionLeft">null</Ref>
									<Ref name="NextSelectionRight">null</Ref>
									<Ref name="NextSelectionUp">null</Ref>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<Ref name="RootLocalizationTable">null</Ref>
									<float name="Rotation">0</float>
									<bool name="Selectable">false</bool>
									<Ref name="SelectionImageObject">null</Ref>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>1</YS>
										<YO>-35</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<int64 name="SourceAssetId">-1</int64>
									<token name="Style">0</token>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259b6</UniqueId>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Frame" referent="RBXa410e9457ae64b979de74b91b8a28def">
									<Properties>
										<bool name="Active">false</bool>
										<Vector2 name="AnchorPoint">
											<X>0</X>
											<Y>0</Y>
										</Vector2>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<bool name="AutoLocalize">true</bool>
										<token name="AutomaticSize">0</token>
										<Color3 name="BackgroundColor3">
											<R>0</R>
											<G>0</G>
											<B>0</B>
										</Color3>
										<float name="BackgroundTransparency">0.75</float>
										<Color3 name="BorderColor3">
											<R>0.105882362</R>
											<G>0.164705887</G>
											<B>0.207843155</B>
										</Color3>
										<token name="BorderMode">0</token>
										<int name="BorderSizePixel">0</int>
										<bool name="ClipsDescendants">true</bool>
										<bool name="Draggable">false</bool>
										<int name="LayoutOrder">0</int>
										<string name="Name">Main</string>
										<Ref name="NextSelectionDown">null</Ref>
										<Ref name="NextSelectionLeft">null</Ref>
										<Ref name="NextSelectionRight">null</Ref>
										<Ref name="NextSelectionUp">null</Ref>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<Ref name="RootLocalizationTable">null</Ref>
										<float name="Rotation">0</float>
										<bool name="Selectable">false</bool>
										<Ref name="SelectionImageObject">null</Ref>
										<UDim2 name="Size">
											<XS>1</XS>
											<XO>0</XO>
											<YS>1</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<int64 name="SourceAssetId">-1</int64>
										<token name="Style">0</token>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259b7</UniqueId>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="UICorner" referent="RBX55e3143716f34da8ab6668f1abcf487a">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<UDim name="CornerRadius">
												<S>0</S>
												<O>8</O>
											</UDim>
											<string name="Name">UICorner</string>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ae6</UniqueId>
										</Properties>
									</Item>
									<Item class="ScrollingFrame" referent="RBX794dc3ece082447380d9c133e0897e3a">
										<Properties>
											<bool name="Active">false</bool>
											<Vector2 name="AnchorPoint">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticCanvasSize">2</token>
											<token name="AutomaticSize">0</token>
											<Color3 name="BackgroundColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">
												<R>0.105882362</R>
												<G>0.164705887</G>
												<B>0.207843155</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">0</int>
											<Content name="BottomImage"><url>rbxassetid://8082116996</url></Content>
											<Vector2 name="CanvasPosition">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<UDim2 name="CanvasSize">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<bool name="ClipsDescendants">true</bool>
											<bool name="Draggable">false</bool>
											<token name="ElasticBehavior">0</token>
											<token name="HorizontalScrollBarInset">0</token>
											<int name="LayoutOrder">0</int>
											<Content name="MidImage"><url>rbxassetid://7488333553</url></Content>
											<string name="Name">Scroller</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>5</XO>
												<YS>0</YS>
												<YO>5</YO>
											</UDim2>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<Color3 name="ScrollBarImageColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<float name="ScrollBarImageTransparency">0</float>
											<int name="ScrollBarThickness">0</int>
											<token name="ScrollingDirection">4</token>
											<bool name="ScrollingEnabled">true</bool>
											<bool name="Selectable">false</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>-15</XO>
												<YS>1</YS>
												<YO>-10</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<Content name="TopImage"><url>rbxassetid://8082122989</url></Content>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a9f</UniqueId>
											<token name="VerticalScrollBarInset">0</token>
											<token name="VerticalScrollBarPosition">0</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
										<Item class="Frame" referent="RBX2f80860b2b4e43c08dd4d7ea6a2cef0b">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">2</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<int name="LayoutOrder">0</int>
												<string name="Name">MessageContainer</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>-10</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259b8</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="UIListLayout" referent="RBX6b71a6ff1c2c413392aba6cd011e5a3b">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<token name="FillDirection">1</token>
													<token name="HorizontalAlignment">1</token>
													<string name="Name">UIListLayout</string>
													<UDim name="Padding">
														<S>0</S>
														<O>2</O>
													</UDim>
													<token name="SortOrder">2</token>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b24</UniqueId>
													<token name="VerticalAlignment">1</token>
												</Properties>
											</Item>
										</Item>
									</Item>
								</Item>
							</Item>
							<Item class="Frame" referent="RBXf8390f93fef9433f920cd187d75f2b82">
								<Properties>
									<bool name="Active">false</bool>
									<Vector2 name="AnchorPoint">
										<X>0</X>
										<Y>0</Y>
									</Vector2>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<bool name="AutoLocalize">true</bool>
									<token name="AutomaticSize">0</token>
									<Color3 name="BackgroundColor3">
										<R>1</R>
										<G>1</G>
										<B>1</B>
									</Color3>
									<float name="BackgroundTransparency">1</float>
									<Color3 name="BorderColor3">
										<R>0.105882362</R>
										<G>0.164705887</G>
										<B>0.207843155</B>
									</Color3>
									<token name="BorderMode">0</token>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<int name="LayoutOrder">0</int>
									<string name="Name">ChatBarContainer</string>
									<Ref name="NextSelectionDown">null</Ref>
									<Ref name="NextSelectionLeft">null</Ref>
									<Ref name="NextSelectionRight">null</Ref>
									<Ref name="NextSelectionUp">null</Ref>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>205</YO>
									</UDim2>
									<Ref name="RootLocalizationTable">null</Ref>
									<float name="Rotation">0</float>
									<bool name="Selectable">false</bool>
									<Ref name="SelectionImageObject">null</Ref>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>35</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<int64 name="SourceAssetId">-1</int64>
									<token name="Style">0</token>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259b9</UniqueId>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Frame" referent="RBXeffad038bfbe4f1eb35eed47e7fbceb5">
									<Properties>
										<bool name="Active">false</bool>
										<Vector2 name="AnchorPoint">
											<X>0</X>
											<Y>0</Y>
										</Vector2>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<bool name="AutoLocalize">true</bool>
										<token name="AutomaticSize">0</token>
										<Color3 name="BackgroundColor3">
											<R>1</R>
											<G>1</G>
											<B>1</B>
										</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">
											<R>0.105882362</R>
											<G>0.164705887</G>
											<B>0.207843155</B>
										</Color3>
										<token name="BorderMode">0</token>
										<int name="BorderSizePixel">0</int>
										<bool name="ClipsDescendants">false</bool>
										<bool name="Draggable">false</bool>
										<int name="LayoutOrder">0</int>
										<string name="Name">Main</string>
										<Ref name="NextSelectionDown">null</Ref>
										<Ref name="NextSelectionLeft">null</Ref>
										<Ref name="NextSelectionRight">null</Ref>
										<Ref name="NextSelectionUp">null</Ref>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<Ref name="RootLocalizationTable">null</Ref>
										<float name="Rotation">0</float>
										<bool name="Selectable">false</bool>
										<Ref name="SelectionImageObject">null</Ref>
										<UDim2 name="Size">
											<XS>1</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>35</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<int64 name="SourceAssetId">-1</int64>
										<token name="Style">0</token>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259ba</UniqueId>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Frame" referent="RBXc98ba407253842f7bdb36161698caea3">
										<Properties>
											<bool name="Active">false</bool>
											<Vector2 name="AnchorPoint">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticSize">0</token>
											<Color3 name="BackgroundColor3">
												<R>0</R>
												<G>0</G>
												<B>0</B>
											</Color3>
											<float name="BackgroundTransparency">0.75</float>
											<Color3 name="BorderColor3">
												<R>0.105882354</R>
												<G>0.164705887</G>
												<B>0.20784314</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">0</int>
											<bool name="ClipsDescendants">false</bool>
											<bool name="Draggable">false</bool>
											<int name="LayoutOrder">0</int>
											<string name="Name">Container</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<bool name="Selectable">false</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>0</XO>
												<YS>1</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<token name="Style">0</token>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259bb</UniqueId>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
										<Item class="UICorner" referent="RBX696c7d521d5642a8a2606292a2bd9118">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<UDim name="CornerRadius">
													<S>0</S>
													<O>8</O>
												</UDim>
												<string name="Name">UICorner</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ae7</UniqueId>
											</Properties>
										</Item>
										<Item class="Frame" referent="RBX6d770f7228184a7bbc6afc51ca8d0832">
											<Properties>
												<bool name="Active">true</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0.5</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="BackgroundTransparency">0</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">0</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<int name="LayoutOrder">0</int>
												<string name="Name">Box</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>5</XO>
													<YS>0.5</YS>
													<YO>0</YO>
												</UDim2>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>-40</XO>
													<YS>0</YS>
													<YO>25</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259bc</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="UICorner" referent="RBX21499a5c9c47499688d780f9829bd800">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<UDim name="CornerRadius">
														<S>0</S>
														<O>8</O>
													</UDim>
													<string name="Name">UICorner</string>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ae8</UniqueId>
												</Properties>
											</Item>
											<Item class="TextBox" referent="RBX8ed4b35b974f4681ad04aa29fcef296f">
												<Properties>
													<bool name="Active">true</bool>
													<Vector2 name="AnchorPoint">
														<X>0</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">1</int>
													<bool name="ClearTextOnFocus">false</bool>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<token name="Font">17</token>
													<Font name="FontFace"></Font>
													<int name="LayoutOrder">0</int>
													<float name="LineHeight">1</float>
													<int name="MaxVisibleGraphemes">-1</int>
													<bool name="MultiLine">false</bool>
													<string name="Name">Input</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<Color3 name="PlaceholderColor3">
														<R>0.313725501</R>
														<G>0.313725501</G>
														<B>0.313725501</B>
													</Color3>
													<string name="PlaceholderText">Click here or press &apos;/&apos; to chat.</string>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>5</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<bool name="RichText">false</bool>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">true</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<bool name="ShowNativeInput">true</bool>
													<UDim2 name="Size">
														<XS>1</XS>
														<XO>-10</XO>
														<YS>0</YS>
														<YO>14</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<string name="Text"></string>
													<Color3 name="TextColor3">
														<R>0.392156869</R>
														<G>0.392156869</G>
														<B>0.392156869</B>
													</Color3>
													<bool name="TextEditable">true</bool>
													<bool name="TextScaled">false</bool>
													<float name="TextSize">14</float>
													<Color3 name="TextStrokeColor3">
														<R>0</R>
														<G>0</G>
														<B>0</B>
													</Color3>
													<float name="TextStrokeTransparency">1</float>
													<float name="TextTransparency">0</float>
													<token name="TextTruncate">0</token>
													<bool name="TextWrapped">true</bool>
													<token name="TextXAlignment">0</token>
													<token name="TextYAlignment">0</token>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aa7</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">2</int>
												</Properties>
												<Item class="TextLabel" referent="RBXe7bdfc7ad9eb4152846fdaa414396dfb">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">0</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<token name="Font">18</token>
														<Font name="FontFace"></Font>
														<int name="LayoutOrder">0</int>
														<float name="LineHeight">1</float>
														<int name="MaxVisibleGraphemes">-1</int>
														<string name="Name">Bar</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<bool name="RichText">false</bool>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>1</XS>
															<XO>0</XO>
															<YS>1</YS>
															<YO>0</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<string name="Text"></string>
														<Color3 name="TextColor3">
															<R>0.392156869</R>
															<G>0.392156869</G>
															<B>0.392156869</B>
														</Color3>
														<bool name="TextScaled">false</bool>
														<float name="TextSize">14</float>
														<Color3 name="TextStrokeColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="TextStrokeTransparency">1</float>
														<float name="TextTransparency">0.5</float>
														<token name="TextTruncate">0</token>
														<bool name="TextWrapped">true</bool>
														<token name="TextXAlignment">0</token>
														<token name="TextYAlignment">1</token>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025acd</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">1</int>
													</Properties>
												</Item>
											</Item>
											<Item class="UIPadding" referent="RBXc4b26ccd8880437e9651c09cd9a35c7d">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<string name="Name">UIPadding</string>
													<UDim name="PaddingBottom">
														<S>0</S>
														<O>8</O>
													</UDim>
													<UDim name="PaddingLeft">
														<S>0</S>
														<O>0</O>
													</UDim>
													<UDim name="PaddingRight">
														<S>0</S>
														<O>0</O>
													</UDim>
													<UDim name="PaddingTop">
														<S>0</S>
														<O>8</O>
													</UDim>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b32</UniqueId>
												</Properties>
											</Item>
										</Item>
										<Item class="TextButton" referent="RBX546df85d173a45a390ff3ff22366f40a">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>1</X>
													<Y>0.5</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoButtonColor">true</bool>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>0.203921586</R>
													<G>0.203921586</G>
													<B>0.203921586</B>
												</Color3>
												<float name="BackgroundTransparency">0</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">0</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<token name="Font">0</token>
												<Font name="FontFace"></Font>
												<int name="LayoutOrder">0</int>
												<float name="LineHeight">1</float>
												<int name="MaxVisibleGraphemes">-1</int>
												<bool name="Modal">false</bool>
												<string name="Name">Resize</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>1</XS>
													<XO>-5</XO>
													<YS>0</YS>
													<YO>17</YO>
												</UDim2>
												<bool name="RichText">false</bool>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">false</bool>
												<bool name="Selected">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>0</XS>
													<XO>25</XO>
													<YS>0</YS>
													<YO>25</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<string name="Text"></string>
												<Color3 name="TextColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<bool name="TextScaled">false</bool>
												<float name="TextSize">8</float>
												<Color3 name="TextStrokeColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="TextStrokeTransparency">1</float>
												<float name="TextTransparency">0</float>
												<token name="TextTruncate">0</token>
												<bool name="TextWrapped">false</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ab0</UniqueId>
												<bool name="Visible">false</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="ImageLabel" referent="RBXe307888056e748939f06113b637df492">
												<Properties>
													<bool name="Active">true</bool>
													<Vector2 name="AnchorPoint">
														<X>0.5</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>0</R>
														<G>0</G>
														<B>0</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882354</R>
														<G>0.164705887</G>
														<B>0.20784314</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">0</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<Content name="Image"><url>rbxassetid://8571348189</url></Content>
													<Color3 name="ImageColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<Vector2 name="ImageRectOffset">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<Vector2 name="ImageRectSize">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<float name="ImageTransparency">0</float>
													<int name="LayoutOrder">0</int>
													<string name="Name">Icon</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0.5</XS>
														<XO>0</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<token name="ResampleMode">0</token>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<token name="ScaleType">0</token>
													<bool name="Selectable">true</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0.800000012</XS>
														<XO>0</XO>
														<YS>0.800000012</YS>
														<YO>0</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<Rect2D name="SliceCenter">
														<min>
															<X>0</X>
															<Y>0</Y>
														</min>
														<max>
															<X>0</X>
															<Y>0</Y>
														</max>
													</Rect2D>
													<float name="SliceScale">1</float>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UDim2 name="TileSize">
														<XS>1</XS>
														<XO>0</XO>
														<YS>1</YS>
														<YO>0</YO>
													</UDim2>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a14</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">1</int>
												</Properties>
												<Item class="UIAspectRatioConstraint" referent="RBXc0d35bda4cd74ea39602c745df1d0974">
													<Properties>
														<float name="AspectRatio">1</float>
														<token name="AspectType">0</token>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<token name="DominantAxis">0</token>
														<string name="Name">UIAspectRatioConstraint</string>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ae5</UniqueId>
													</Properties>
												</Item>
											</Item>
											<Item class="UICorner" referent="RBXa7c98a2cbfe4497b983d8ba469e1c11e">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<UDim name="CornerRadius">
														<S>0</S>
														<O>8</O>
													</UDim>
													<string name="Name">UICorner</string>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ae9</UniqueId>
												</Properties>
											</Item>
										</Item>
										<Item class="Frame" referent="RBX21d641d7b13a4ac9b25f70fb47a38bf4">
											<Properties>
												<bool name="Active">true</bool>
												<Vector2 name="AnchorPoint">
													<X>0.5</X>
													<Y>0.5</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<int name="LayoutOrder">0</int>
												<string name="Name">Container</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0.5</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>17</YO>
												</UDim2>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">true</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>-30</XO>
													<YS>0</YS>
													<YO>14</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259bd</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="TextButton" referent="RBXe5542ac12f5342ffa693655f7afc9607">
												<Properties>
													<bool name="Active">true</bool>
													<Vector2 name="AnchorPoint">
														<X>0</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoButtonColor">true</bool>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>0.992156863</R>
														<G>0.313725501</G>
														<B>0.435294122</B>
													</Color3>
													<float name="BackgroundTransparency">0</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">0</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<token name="Font">18</token>
													<Font name="FontFace"></Font>
													<int name="LayoutOrder">0</int>
													<float name="LineHeight">1</float>
													<int name="MaxVisibleGraphemes">-1</int>
													<bool name="Modal">false</bool>
													<string name="Name">Channel</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>-7</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<bool name="RichText">false</bool>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">true</bool>
													<bool name="Selected">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>20</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<token name="Style">0</token>
													<BinaryString name="Tags"></BinaryString>
													<string name="Text"></string>
													<Color3 name="TextColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<bool name="TextScaled">false</bool>
													<float name="TextSize">15</float>
													<Color3 name="TextStrokeColor3">
														<R>0</R>
														<G>0</G>
														<B>0</B>
													</Color3>
													<float name="TextStrokeTransparency">1</float>
													<float name="TextTransparency">0</float>
													<token name="TextTruncate">0</token>
													<bool name="TextWrapped">true</bool>
													<token name="TextXAlignment">2</token>
													<token name="TextYAlignment">1</token>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ab1</UniqueId>
													<bool name="Visible">false</bool>
													<int name="ZIndex">1</int>
												</Properties>
												<Item class="TextLabel" referent="RBX57e8fc151434428e8ad3f8df167df3e8">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0.5</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<token name="Font">18</token>
														<Font name="FontFace"></Font>
														<int name="LayoutOrder">0</int>
														<float name="LineHeight">1</float>
														<int name="MaxVisibleGraphemes">-1</int>
														<string name="Name">Label</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>5</XO>
															<YS>0.5</YS>
															<YO>0</YO>
														</UDim2>
														<bool name="RichText">false</bool>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>1</XS>
															<XO>0</XO>
															<YS>1</YS>
															<YO>0</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<string name="Text">test</string>
														<Color3 name="TextColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<bool name="TextScaled">false</bool>
														<float name="TextSize">14</float>
														<Color3 name="TextStrokeColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="TextStrokeTransparency">1</float>
														<float name="TextTransparency">0</float>
														<token name="TextTruncate">0</token>
														<bool name="TextWrapped">false</bool>
														<token name="TextXAlignment">2</token>
														<token name="TextYAlignment">1</token>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ace</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">1</int>
													</Properties>
												</Item>
												<Item class="UICorner" referent="RBX6878a5f1e88a4bb0938aa3b1b9ee84c6">
													<Properties>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<UDim name="CornerRadius">
															<S>0</S>
															<O>8</O>
														</UDim>
														<string name="Name">UICorner</string>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aea</UniqueId>
													</Properties>
												</Item>
												<Item class="ImageLabel" referent="RBXa064d840d6aa4d57acc1e467433522ec">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0.5</X>
															<Y>0.5</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<Content name="Image"><url>rbxassetid://8595302757</url></Content>
														<Color3 name="ImageColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<Vector2 name="ImageRectOffset">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<Vector2 name="ImageRectSize">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<float name="ImageTransparency">0</float>
														<int name="LayoutOrder">0</int>
														<string name="Name">ReplyIcon</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0.5</XS>
															<XO>0</XO>
															<YS>0.5</YS>
															<YO>0</YO>
														</UDim2>
														<token name="ResampleMode">0</token>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<token name="ScaleType">0</token>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0</XS>
															<XO>16</XO>
															<YS>0</YS>
															<YO>16</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<Rect2D name="SliceCenter">
															<min>
																<X>0</X>
																<Y>0</Y>
															</min>
															<max>
																<X>0</X>
																<Y>0</Y>
															</max>
														</Rect2D>
														<float name="SliceScale">1</float>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<UDim2 name="TileSize">
															<XS>1</XS>
															<XO>0</XO>
															<YS>1</YS>
															<YO>0</YO>
														</UDim2>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a15</UniqueId>
														<bool name="Visible">false</bool>
														<int name="ZIndex">5</int>
													</Properties>
												</Item>
											</Item>
										</Item>
									</Item>
									<Item class="Frame" referent="RBX5e7a5bc2d51146fe8e8fd4b42a02a980">
										<Properties>
											<bool name="Active">false</bool>
											<Vector2 name="AnchorPoint">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticSize">0</token>
											<Color3 name="BackgroundColor3">
												<R>0</R>
												<G>0</G>
												<B>0</B>
											</Color3>
											<float name="BackgroundTransparency">0.75</float>
											<Color3 name="BorderColor3">
												<R>0.105882362</R>
												<G>0.164705887</G>
												<B>0.207843155</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">0</int>
											<bool name="ClipsDescendants">false</bool>
											<bool name="Draggable">false</bool>
											<int name="LayoutOrder">0</int>
											<string name="Name">Autofill</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>0</XO>
												<YS>1</YS>
												<YO>5</YO>
											</UDim2>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<bool name="Selectable">false</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<token name="Style">0</token>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259be</UniqueId>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
										<Item class="UICorner" referent="RBX6b321c4052854d6d8624870a52846c78">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<UDim name="CornerRadius">
													<S>0</S>
													<O>8</O>
												</UDim>
												<string name="Name">Corner</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aeb</UniqueId>
											</Properties>
										</Item>
										<Item class="Frame" referent="RBX5115a721e63943e3ba8bf60559ecc869">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<int name="LayoutOrder">0</int>
												<string name="Name">Container</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>1</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259bf</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="ScrollingFrame" referent="RBX59acd784fd3d4ab581086a0b47e4c852">
												<Properties>
													<bool name="Active">true</bool>
													<Vector2 name="AnchorPoint">
														<X>0.5</X>
														<Y>0</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticCanvasSize">0</token>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">0</int>
													<Content name="BottomImage"><url>rbxassetid://8082116996</url></Content>
													<Vector2 name="CanvasPosition">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<UDim2 name="CanvasSize">
														<XS>0</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>0</YO>
													</UDim2>
													<bool name="ClipsDescendants">true</bool>
													<bool name="Draggable">false</bool>
													<token name="ElasticBehavior">0</token>
													<token name="HorizontalScrollBarInset">0</token>
													<int name="LayoutOrder">0</int>
													<Content name="MidImage"><url>rbxassetid://7488333553</url></Content>
													<string name="Name">Scroller</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0.5</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>4</YO>
													</UDim2>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<Color3 name="ScrollBarImageColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="ScrollBarImageTransparency">0</float>
													<int name="ScrollBarThickness">0</int>
													<token name="ScrollingDirection">4</token>
													<bool name="ScrollingEnabled">true</bool>
													<bool name="Selectable">true</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>1</XS>
														<XO>-10</XO>
														<YS>1</YS>
														<YO>0</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<Content name="TopImage"><url>rbxassetid://8082122989</url></Content>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aa0</UniqueId>
													<token name="VerticalScrollBarInset">0</token>
													<token name="VerticalScrollBarPosition">0</token>
													<bool name="Visible">true</bool>
													<int name="ZIndex">1</int>
												</Properties>
												<Item class="UIListLayout" referent="RBX3af0009750bb43c898df4bf9d941e74c">
													<Properties>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<token name="FillDirection">1</token>
														<token name="HorizontalAlignment">1</token>
														<string name="Name">Layout</string>
														<UDim name="Padding">
															<S>0</S>
															<O>2</O>
														</UDim>
														<token name="SortOrder">2</token>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b25</UniqueId>
														<token name="VerticalAlignment">0</token>
													</Properties>
												</Item>
											</Item>
										</Item>
									</Item>
								</Item>
							</Item>
							<Item class="Frame" referent="RBXf953bd5c93b844b78813d1f08d4bdb12">
								<Properties>
									<bool name="Active">false</bool>
									<Vector2 name="AnchorPoint">
										<X>0</X>
										<Y>0</Y>
									</Vector2>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<bool name="AutoLocalize">true</bool>
									<token name="AutomaticSize">0</token>
									<Color3 name="BackgroundColor3">
										<R>1</R>
										<G>1</G>
										<B>1</B>
									</Color3>
									<float name="BackgroundTransparency">1</float>
									<Color3 name="BorderColor3">
										<R>0.105882362</R>
										<G>0.164705887</G>
										<B>0.207843155</B>
									</Color3>
									<token name="BorderMode">0</token>
									<int name="BorderSizePixel">1</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<int name="LayoutOrder">0</int>
									<string name="Name">Zone</string>
									<Ref name="NextSelectionDown">null</Ref>
									<Ref name="NextSelectionLeft">null</Ref>
									<Ref name="NextSelectionRight">null</Ref>
									<Ref name="NextSelectionUp">null</Ref>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<Ref name="RootLocalizationTable">null</Ref>
									<float name="Rotation">0</float>
									<bool name="Selectable">false</bool>
									<Ref name="SelectionImageObject">null</Ref>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>1</YS>
										<YO>5</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<int64 name="SourceAssetId">-1</int64>
									<token name="Style">0</token>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259c0</UniqueId>
									<bool name="Visible">true</bool>
									<int name="ZIndex">3</int>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBX9fe31ba82da744b09d225b06fcfa1bf9">
								<Properties>
									<bool name="Active">false</bool>
									<Vector2 name="AnchorPoint">
										<X>0</X>
										<Y>0</Y>
									</Vector2>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<bool name="AutoLocalize">true</bool>
									<token name="AutomaticSize">0</token>
									<Color3 name="BackgroundColor3">
										<R>1</R>
										<G>1</G>
										<B>1</B>
									</Color3>
									<float name="BackgroundTransparency">1</float>
									<Color3 name="BorderColor3">
										<R>0.105882362</R>
										<G>0.164705887</G>
										<B>0.207843155</B>
									</Color3>
									<token name="BorderMode">0</token>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">true</bool>
									<bool name="Draggable">false</bool>
									<int name="LayoutOrder">0</int>
									<string name="Name">Channelbar</string>
									<Ref name="NextSelectionDown">null</Ref>
									<Ref name="NextSelectionLeft">null</Ref>
									<Ref name="NextSelectionRight">null</Ref>
									<Ref name="NextSelectionUp">null</Ref>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<Ref name="RootLocalizationTable">null</Ref>
									<float name="Rotation">0</float>
									<bool name="Selectable">false</bool>
									<Ref name="SelectionImageObject">null</Ref>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>35</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<int64 name="SourceAssetId">-1</int64>
									<token name="Style">0</token>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259c1</UniqueId>
									<bool name="Visible">false</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Frame" referent="RBX0274e4dc0c694e0bbbed61607689da69">
									<Properties>
										<bool name="Active">false</bool>
										<Vector2 name="AnchorPoint">
											<X>0</X>
											<Y>0</Y>
										</Vector2>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<bool name="AutoLocalize">true</bool>
										<token name="AutomaticSize">0</token>
										<Color3 name="BackgroundColor3">
											<R>1</R>
											<G>1</G>
											<B>1</B>
										</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">
											<R>0.105882362</R>
											<G>0.164705887</G>
											<B>0.207843155</B>
										</Color3>
										<token name="BorderMode">0</token>
										<int name="BorderSizePixel">0</int>
										<bool name="ClipsDescendants">false</bool>
										<bool name="Draggable">false</bool>
										<int name="LayoutOrder">0</int>
										<string name="Name">Main</string>
										<Ref name="NextSelectionDown">null</Ref>
										<Ref name="NextSelectionLeft">null</Ref>
										<Ref name="NextSelectionRight">null</Ref>
										<Ref name="NextSelectionUp">null</Ref>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<Ref name="RootLocalizationTable">null</Ref>
										<float name="Rotation">0</float>
										<bool name="Selectable">false</bool>
										<Ref name="SelectionImageObject">null</Ref>
										<UDim2 name="Size">
											<XS>1</XS>
											<XO>0</XO>
											<YS>1</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<int64 name="SourceAssetId">-1</int64>
										<token name="Style">0</token>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259c2</UniqueId>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="Frame" referent="RBXe432af521acc4e5ca96baf8ce6e17e07">
										<Properties>
											<bool name="Active">false</bool>
											<Vector2 name="AnchorPoint">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticSize">0</token>
											<Color3 name="BackgroundColor3">
												<R>0</R>
												<G>0</G>
												<B>0</B>
											</Color3>
											<float name="BackgroundTransparency">0.75</float>
											<Color3 name="BorderColor3">
												<R>0.105882362</R>
												<G>0.164705887</G>
												<B>0.207843155</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">0</int>
											<bool name="ClipsDescendants">false</bool>
											<bool name="Draggable">false</bool>
											<int name="LayoutOrder">0</int>
											<string name="Name">Container</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<bool name="Selectable">false</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>0</XO>
												<YS>1</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<token name="Style">0</token>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259c3</UniqueId>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
										<Item class="UICorner" referent="RBX3a9c03b4f30c4b0fb3c72d06dbe56006">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<UDim name="CornerRadius">
													<S>0</S>
													<O>8</O>
												</UDim>
												<string name="Name">UICorner</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aec</UniqueId>
											</Properties>
										</Item>
										<Item class="ScrollingFrame" referent="RBX85d880dc5fa946d7bcf275603b774492">
											<Properties>
												<bool name="Active">true</bool>
												<Vector2 name="AnchorPoint">
													<X>1</X>
													<Y>0.5</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticCanvasSize">1</token>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">0</int>
												<Content name="BottomImage"><url>rbxassetid://8082116996</url></Content>
												<Vector2 name="CanvasPosition">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<UDim2 name="CanvasSize">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="ClipsDescendants">true</bool>
												<bool name="Draggable">false</bool>
												<token name="ElasticBehavior">0</token>
												<token name="HorizontalScrollBarInset">0</token>
												<int name="LayoutOrder">0</int>
												<Content name="MidImage"><url>rbxassetid://7488333553</url></Content>
												<string name="Name">Scroller</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>1</XS>
													<XO>-5</XO>
													<YS>0.5</YS>
													<YO>0</YO>
												</UDim2>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<Color3 name="ScrollBarImageColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="ScrollBarImageTransparency">0</float>
												<int name="ScrollBarThickness">0</int>
												<token name="ScrollingDirection">4</token>
												<bool name="ScrollingEnabled">true</bool>
												<bool name="Selectable">true</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>-10</XO>
													<YS>1</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<Content name="TopImage"><url>rbxassetid://8082122989</url></Content>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aa1</UniqueId>
												<token name="VerticalScrollBarInset">0</token>
												<token name="VerticalScrollBarPosition">0</token>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="UIListLayout" referent="RBX6ebb4fda6276476ba74bc321ab5a7c2e">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<token name="FillDirection">0</token>
													<token name="HorizontalAlignment">1</token>
													<string name="Name">UIListLayout</string>
													<UDim name="Padding">
														<S>0</S>
														<O>5</O>
													</UDim>
													<token name="SortOrder">2</token>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b26</UniqueId>
													<token name="VerticalAlignment">0</token>
												</Properties>
											</Item>
										</Item>
									</Item>
								</Item>
							</Item>
						</Item>
						<Item class="Frame" referent="RBX8bde0ad358a64fc6acac597252e77c57">
							<Properties>
								<bool name="Active">false</bool>
								<Vector2 name="AnchorPoint">
									<X>0.5</X>
									<Y>0.5</Y>
								</Vector2>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<bool name="AutoLocalize">true</bool>
								<token name="AutomaticSize">0</token>
								<Color3 name="BackgroundColor3">
									<R>0</R>
									<G>0</G>
									<B>0</B>
								</Color3>
								<float name="BackgroundTransparency">0.5</float>
								<Color3 name="BorderColor3">
									<R>0.105882362</R>
									<G>0.164705887</G>
									<B>0.207843155</B>
								</Color3>
								<token name="BorderMode">0</token>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<int name="LayoutOrder">0</int>
								<string name="Name">Settings</string>
								<Ref name="NextSelectionDown">null</Ref>
								<Ref name="NextSelectionLeft">null</Ref>
								<Ref name="NextSelectionRight">null</Ref>
								<Ref name="NextSelectionUp">null</Ref>
								<UDim2 name="Position">
									<XS>0.5</XS>
									<XO>0</XO>
									<YS>-1.5</YS>
									<YO>0</YO>
								</UDim2>
								<Ref name="RootLocalizationTable">null</Ref>
								<float name="Rotation">0</float>
								<bool name="Selectable">false</bool>
								<Ref name="SelectionImageObject">null</Ref>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>325</XO>
									<YS>0</YS>
									<YO>300</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<int64 name="SourceAssetId">-1</int64>
								<token name="Style">0</token>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259c4</UniqueId>
								<bool name="Visible">true</bool>
								<int name="ZIndex">5</int>
							</Properties>
							<Item class="UICorner" referent="RBX53e5d771a8f1448db33fafb7d519b3ba">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<UDim name="CornerRadius">
										<S>0</S>
										<O>8</O>
									</UDim>
									<string name="Name">UICorner</string>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aed</UniqueId>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBXb839c19d9fa649a08939eb224a157efa">
								<Properties>
									<bool name="Active">false</bool>
									<Vector2 name="AnchorPoint">
										<X>0</X>
										<Y>0</Y>
									</Vector2>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<bool name="AutoLocalize">true</bool>
									<token name="AutomaticSize">0</token>
									<Color3 name="BackgroundColor3">
										<R>1</R>
										<G>1</G>
										<B>1</B>
									</Color3>
									<float name="BackgroundTransparency">1</float>
									<Color3 name="BorderColor3">
										<R>0.105882362</R>
										<G>0.164705887</G>
										<B>0.207843155</B>
									</Color3>
									<token name="BorderMode">0</token>
									<int name="BorderSizePixel">1</int>
									<bool name="ClipsDescendants">true</bool>
									<bool name="Draggable">false</bool>
									<int name="LayoutOrder">0</int>
									<string name="Name">Pages</string>
									<Ref name="NextSelectionDown">null</Ref>
									<Ref name="NextSelectionLeft">null</Ref>
									<Ref name="NextSelectionRight">null</Ref>
									<Ref name="NextSelectionUp">null</Ref>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<Ref name="RootLocalizationTable">null</Ref>
									<float name="Rotation">0</float>
									<bool name="Selectable">false</bool>
									<Ref name="SelectionImageObject">null</Ref>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>1</YS>
										<YO>0</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<int64 name="SourceAssetId">-1</int64>
									<token name="Style">0</token>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259c5</UniqueId>
									<bool name="Visible">true</bool>
									<int name="ZIndex">6</int>
								</Properties>
								<Item class="Frame" referent="RBX6efc19cf1cad478ab436b789ff01fba8">
									<Properties>
										<bool name="Active">false</bool>
										<Vector2 name="AnchorPoint">
											<X>0</X>
											<Y>0</Y>
										</Vector2>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<bool name="AutoLocalize">true</bool>
										<token name="AutomaticSize">0</token>
										<Color3 name="BackgroundColor3">
											<R>1</R>
											<G>1</G>
											<B>1</B>
										</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">
											<R>0.105882362</R>
											<G>0.164705887</G>
											<B>0.207843155</B>
										</Color3>
										<token name="BorderMode">0</token>
										<int name="BorderSizePixel">1</int>
										<bool name="ClipsDescendants">false</bool>
										<bool name="Draggable">false</bool>
										<int name="LayoutOrder">0</int>
										<string name="Name">Navigation</string>
										<Ref name="NextSelectionDown">null</Ref>
										<Ref name="NextSelectionLeft">null</Ref>
										<Ref name="NextSelectionRight">null</Ref>
										<Ref name="NextSelectionUp">null</Ref>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<Ref name="RootLocalizationTable">null</Ref>
										<float name="Rotation">0</float>
										<bool name="Selectable">false</bool>
										<Ref name="SelectionImageObject">null</Ref>
										<UDim2 name="Size">
											<XS>1</XS>
											<XO>0</XO>
											<YS>1</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<int64 name="SourceAssetId">-1</int64>
										<token name="Style">0</token>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259c6</UniqueId>
										<bool name="Visible">true</bool>
										<int name="ZIndex">6</int>
									</Properties>
									<Item class="Frame" referent="RBXc6191428c424432391f1c5daacafef13">
										<Properties>
											<bool name="Active">false</bool>
											<Vector2 name="AnchorPoint">
												<X>0.5</X>
												<Y>1</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticSize">0</token>
											<Color3 name="BackgroundColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">
												<R>0.105882362</R>
												<G>0.164705887</G>
												<B>0.207843155</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">1</int>
											<bool name="ClipsDescendants">false</bool>
											<bool name="Draggable">false</bool>
											<int name="LayoutOrder">0</int>
											<string name="Name">Content</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>0.5</XS>
												<XO>0</XO>
												<YS>1</YS>
												<YO>-10</YO>
											</UDim2>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<bool name="Selectable">false</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>-10</XO>
												<YS>1</YS>
												<YO>-50</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<token name="Style">0</token>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259c7</UniqueId>
											<bool name="Visible">true</bool>
											<int name="ZIndex">6</int>
										</Properties>
										<Item class="UIListLayout" referent="RBXb5e77f0fa3ef4bf99973d4560994efdd">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<token name="FillDirection">1</token>
												<token name="HorizontalAlignment">1</token>
												<string name="Name">UIListLayout</string>
												<UDim name="Padding">
													<S>0</S>
													<O>5</O>
												</UDim>
												<token name="SortOrder">2</token>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b27</UniqueId>
												<token name="VerticalAlignment">1</token>
											</Properties>
										</Item>
										<Item class="TextButton" referent="RBXba5f6d3f1c844bfd9794dc5eda52e9cb">
											<Properties>
												<bool name="Active">true</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoButtonColor">true</bool>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="BackgroundTransparency">0.300000012</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">0</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<token name="Font">18</token>
												<Font name="FontFace"></Font>
												<int name="LayoutOrder">0</int>
												<float name="LineHeight">1</float>
												<int name="MaxVisibleGraphemes">-1</int>
												<bool name="Modal">false</bool>
												<string name="Name">UI</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="RichText">false</bool>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">true</bool>
												<bool name="Selected">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>35</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<string name="Text">UI</string>
												<Color3 name="TextColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<bool name="TextScaled">false</bool>
												<float name="TextSize">20</float>
												<Color3 name="TextStrokeColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="TextStrokeTransparency">1</float>
												<float name="TextTransparency">0</float>
												<token name="TextTruncate">0</token>
												<bool name="TextWrapped">true</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ab2</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">6</int>
											</Properties>
											<Item class="UICorner" referent="RBXd18b0dcababf4610bc7a93059d90d563">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<UDim name="CornerRadius">
														<S>0</S>
														<O>8</O>
													</UDim>
													<string name="Name">UICorner</string>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aee</UniqueId>
												</Properties>
											</Item>
											<Item class="ImageLabel" referent="RBX6837fd170ceb433d90290bbd63eb6330">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>0.639215708</R>
														<G>0.635294139</G>
														<B>0.647058845</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">0</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<Content name="Image"><url>http://www.roblox.com/asset/?id=6035030081</url></Content>
													<Color3 name="ImageColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<Vector2 name="ImageRectOffset">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<Vector2 name="ImageRectSize">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<float name="ImageTransparency">0</float>
													<int name="LayoutOrder">0</int>
													<string name="Name">Icon</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>5</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<token name="ResampleMode">0</token>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<token name="ScaleType">0</token>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0</XS>
														<XO>25</XO>
														<YS>0</YS>
														<YO>25</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<Rect2D name="SliceCenter">
														<min>
															<X>0</X>
															<Y>0</Y>
														</min>
														<max>
															<X>0</X>
															<Y>0</Y>
														</max>
													</Rect2D>
													<float name="SliceScale">1</float>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UDim2 name="TileSize">
														<XS>1</XS>
														<XO>0</XO>
														<YS>1</YS>
														<YO>0</YO>
													</UDim2>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a16</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">7</int>
												</Properties>
											</Item>
										</Item>
										<Item class="TextButton" referent="RBX73d682e274e34b6ebdc3ab06a18fbeb3">
											<Properties>
												<bool name="Active">true</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoButtonColor">true</bool>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="BackgroundTransparency">0.300000012</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">0</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<token name="Font">18</token>
												<Font name="FontFace"></Font>
												<int name="LayoutOrder">0</int>
												<float name="LineHeight">1</float>
												<int name="MaxVisibleGraphemes">-1</int>
												<bool name="Modal">false</bool>
												<string name="Name">BubbleChat</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0.0327868834</XS>
													<XO>0</XO>
													<YS>0.0439999998</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="RichText">false</bool>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">true</bool>
												<bool name="Selected">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>35</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<string name="Text">Bubble Chat</string>
												<Color3 name="TextColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<bool name="TextScaled">false</bool>
												<float name="TextSize">20</float>
												<Color3 name="TextStrokeColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="TextStrokeTransparency">1</float>
												<float name="TextTransparency">0</float>
												<token name="TextTruncate">0</token>
												<bool name="TextWrapped">true</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ab3</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">6</int>
											</Properties>
											<Item class="UICorner" referent="RBXae7d96c9c25c44d8ba153ac47af47804">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<UDim name="CornerRadius">
														<S>0</S>
														<O>8</O>
													</UDim>
													<string name="Name">UICorner</string>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aef</UniqueId>
												</Properties>
											</Item>
											<Item class="ImageLabel" referent="RBX659226dfc17c4d3283ee955726ef11b7">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>0.639215708</R>
														<G>0.635294139</G>
														<B>0.647058845</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">0</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<Content name="Image"><url>rbxassetid://8678032944</url></Content>
													<Color3 name="ImageColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<Vector2 name="ImageRectOffset">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<Vector2 name="ImageRectSize">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<float name="ImageTransparency">0</float>
													<int name="LayoutOrder">0</int>
													<string name="Name">Icon</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>5</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<token name="ResampleMode">0</token>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<token name="ScaleType">0</token>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0</XS>
														<XO>25</XO>
														<YS>0</YS>
														<YO>25</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<Rect2D name="SliceCenter">
														<min>
															<X>0</X>
															<Y>0</Y>
														</min>
														<max>
															<X>0</X>
															<Y>0</Y>
														</max>
													</Rect2D>
													<float name="SliceScale">1</float>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UDim2 name="TileSize">
														<XS>1</XS>
														<XO>0</XO>
														<YS>1</YS>
														<YO>0</YO>
													</UDim2>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a17</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">7</int>
												</Properties>
											</Item>
										</Item>
										<Item class="TextButton" referent="RBX4766fbb9a4da4838b5f71d61e060a30f">
											<Properties>
												<bool name="Active">true</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoButtonColor">true</bool>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="BackgroundTransparency">0.300000012</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">0</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<token name="Font">18</token>
												<Font name="FontFace"></Font>
												<int name="LayoutOrder">2</int>
												<float name="LineHeight">1</float>
												<int name="MaxVisibleGraphemes">-1</int>
												<bool name="Modal">false</bool>
												<string name="Name">QuickChat</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="RichText">false</bool>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">true</bool>
												<bool name="Selected">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>35</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<string name="Text">Quick Chat</string>
												<Color3 name="TextColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<bool name="TextScaled">false</bool>
												<float name="TextSize">20</float>
												<Color3 name="TextStrokeColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="TextStrokeTransparency">1</float>
												<float name="TextTransparency">0</float>
												<token name="TextTruncate">0</token>
												<bool name="TextWrapped">true</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ab4</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">6</int>
											</Properties>
											<Item class="UICorner" referent="RBX874f2e34d8ed48e9849ed48a02512f4f">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<UDim name="CornerRadius">
														<S>0</S>
														<O>8</O>
													</UDim>
													<string name="Name">UICorner</string>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025af0</UniqueId>
												</Properties>
											</Item>
											<Item class="ImageLabel" referent="RBXad40b5ad5d0e49b9b86d2eca6f0ebe24">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>0.639215708</R>
														<G>0.635294139</G>
														<B>0.647058845</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">0</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<Content name="Image"><url>rbxassetid://6031243319</url></Content>
													<Color3 name="ImageColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<Vector2 name="ImageRectOffset">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<Vector2 name="ImageRectSize">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<float name="ImageTransparency">0</float>
													<int name="LayoutOrder">0</int>
													<string name="Name">Icon</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>5</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<token name="ResampleMode">0</token>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<token name="ScaleType">0</token>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0</XS>
														<XO>25</XO>
														<YS>0</YS>
														<YO>25</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<Rect2D name="SliceCenter">
														<min>
															<X>0</X>
															<Y>0</Y>
														</min>
														<max>
															<X>0</X>
															<Y>0</Y>
														</max>
													</Rect2D>
													<float name="SliceScale">1</float>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UDim2 name="TileSize">
														<XS>1</XS>
														<XO>0</XO>
														<YS>1</YS>
														<YO>0</YO>
													</UDim2>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a18</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">7</int>
												</Properties>
											</Item>
										</Item>
									</Item>
									<Item class="TextLabel" referent="RBX68fa3595daa84454bf21dd6a047ef335">
										<Properties>
											<bool name="Active">false</bool>
											<Vector2 name="AnchorPoint">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticSize">0</token>
											<Color3 name="BackgroundColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">
												<R>0.105882362</R>
												<G>0.164705887</G>
												<B>0.207843155</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">1</int>
											<bool name="ClipsDescendants">false</bool>
											<bool name="Draggable">false</bool>
											<token name="Font">18</token>
											<Font name="FontFace"></Font>
											<int name="LayoutOrder">0</int>
											<float name="LineHeight">1</float>
											<int name="MaxVisibleGraphemes">-1</int>
											<string name="Name">Title</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>5</YO>
											</UDim2>
											<bool name="RichText">false</bool>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<bool name="Selectable">false</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>30</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<string name="Text">BetterChat Settings</string>
											<Color3 name="TextColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<bool name="TextScaled">false</bool>
											<float name="TextSize">20</float>
											<Color3 name="TextStrokeColor3">
												<R>0</R>
												<G>0</G>
												<B>0</B>
											</Color3>
											<float name="TextStrokeTransparency">1</float>
											<float name="TextTransparency">0</float>
											<token name="TextTruncate">0</token>
											<bool name="TextWrapped">false</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025acf</UniqueId>
											<bool name="Visible">true</bool>
											<int name="ZIndex">6</int>
										</Properties>
										<Item class="TextButton" referent="RBX888131bae11d46c29f22a09d0cd62aea">
											<Properties>
												<bool name="Active">true</bool>
												<Vector2 name="AnchorPoint">
													<X>1</X>
													<Y>0.5</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoButtonColor">true</bool>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="BackgroundTransparency">0.300000012</float>
												<Color3 name="BorderColor3">
													<R>0.105882354</R>
													<G>0.164705887</G>
													<B>0.20784314</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">0</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<token name="Font">0</token>
												<Font name="FontFace"></Font>
												<int name="LayoutOrder">0</int>
												<float name="LineHeight">1</float>
												<int name="MaxVisibleGraphemes">-1</int>
												<bool name="Modal">false</bool>
												<string name="Name">Close</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>1</XS>
													<XO>-5</XO>
													<YS>0.5</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="RichText">false</bool>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">true</bool>
												<bool name="Selected">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>0</XS>
													<XO>30</XO>
													<YS>0</YS>
													<YO>30</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<string name="Text"></string>
												<Color3 name="TextColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<bool name="TextScaled">false</bool>
												<float name="TextSize">8</float>
												<Color3 name="TextStrokeColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="TextStrokeTransparency">1</float>
												<float name="TextTransparency">0</float>
												<token name="TextTruncate">0</token>
												<bool name="TextWrapped">false</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ab5</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">8</int>
											</Properties>
											<Item class="UICorner" referent="RBX19d8e4e8996a49a78715b7664fd170a5">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<UDim name="CornerRadius">
														<S>0</S>
														<O>8</O>
													</UDim>
													<string name="Name">UICorner</string>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025af1</UniqueId>
												</Properties>
											</Item>
											<Item class="ImageLabel" referent="RBX9e7a2fc9aa7140e9aba75b2f770e08e9">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0.5</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>0.117647059</R>
														<G>0.117647059</G>
														<B>0.117647059</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882354</R>
														<G>0.164705887</G>
														<B>0.20784314</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">0</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<Content name="Image"><url>http://www.roblox.com/asset/?id=6031094678</url></Content>
													<Color3 name="ImageColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<Vector2 name="ImageRectOffset">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<Vector2 name="ImageRectSize">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<float name="ImageTransparency">0</float>
													<int name="LayoutOrder">0</int>
													<string name="Name">Icon</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0.5</XS>
														<XO>0</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<token name="ResampleMode">0</token>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<token name="ScaleType">0</token>
													<bool name="Selectable">true</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0</XS>
														<XO>25</XO>
														<YS>0</YS>
														<YO>25</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<Rect2D name="SliceCenter">
														<min>
															<X>0</X>
															<Y>0</Y>
														</min>
														<max>
															<X>0</X>
															<Y>0</Y>
														</max>
													</Rect2D>
													<float name="SliceScale">1</float>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UDim2 name="TileSize">
														<XS>1</XS>
														<XO>0</XO>
														<YS>1</YS>
														<YO>0</YO>
													</UDim2>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a19</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">8</int>
												</Properties>
											</Item>
										</Item>
									</Item>
								</Item>
								<Item class="Frame" referent="RBXd9f22854cb144c48a4cc702282cde09d">
									<Properties>
										<bool name="Active">false</bool>
										<Vector2 name="AnchorPoint">
											<X>0</X>
											<Y>0</Y>
										</Vector2>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<bool name="AutoLocalize">true</bool>
										<token name="AutomaticSize">0</token>
										<Color3 name="BackgroundColor3">
											<R>1</R>
											<G>1</G>
											<B>1</B>
										</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">
											<R>0.105882362</R>
											<G>0.164705887</G>
											<B>0.207843155</B>
										</Color3>
										<token name="BorderMode">0</token>
										<int name="BorderSizePixel">1</int>
										<bool name="ClipsDescendants">false</bool>
										<bool name="Draggable">false</bool>
										<int name="LayoutOrder">0</int>
										<string name="Name">UI</string>
										<Ref name="NextSelectionDown">null</Ref>
										<Ref name="NextSelectionLeft">null</Ref>
										<Ref name="NextSelectionRight">null</Ref>
										<Ref name="NextSelectionUp">null</Ref>
										<UDim2 name="Position">
											<XS>1</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<Ref name="RootLocalizationTable">null</Ref>
										<float name="Rotation">0</float>
										<bool name="Selectable">false</bool>
										<Ref name="SelectionImageObject">null</Ref>
										<UDim2 name="Size">
											<XS>1</XS>
											<XO>0</XO>
											<YS>1</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<int64 name="SourceAssetId">-1</int64>
										<token name="Style">0</token>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259c8</UniqueId>
										<bool name="Visible">true</bool>
										<int name="ZIndex">6</int>
									</Properties>
									<Item class="TextLabel" referent="RBX5c4b516a48aa42878b4ede86cabe5336">
										<Properties>
											<bool name="Active">false</bool>
											<Vector2 name="AnchorPoint">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticSize">0</token>
											<Color3 name="BackgroundColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">
												<R>0.105882362</R>
												<G>0.164705887</G>
												<B>0.207843155</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">1</int>
											<bool name="ClipsDescendants">false</bool>
											<bool name="Draggable">false</bool>
											<token name="Font">18</token>
											<Font name="FontFace"></Font>
											<int name="LayoutOrder">0</int>
											<float name="LineHeight">1</float>
											<int name="MaxVisibleGraphemes">-1</int>
											<string name="Name">Title</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>5</YO>
											</UDim2>
											<bool name="RichText">false</bool>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<bool name="Selectable">false</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>30</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<string name="Text">UI Settings</string>
											<Color3 name="TextColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<bool name="TextScaled">false</bool>
											<float name="TextSize">20</float>
											<Color3 name="TextStrokeColor3">
												<R>0</R>
												<G>0</G>
												<B>0</B>
											</Color3>
											<float name="TextStrokeTransparency">1</float>
											<float name="TextTransparency">0</float>
											<token name="TextTruncate">0</token>
											<bool name="TextWrapped">false</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ad0</UniqueId>
											<bool name="Visible">true</bool>
											<int name="ZIndex">6</int>
										</Properties>
										<Item class="TextButton" referent="RBXe107bcfe80db4d34999c3d9bf649ad7a">
											<Properties>
												<bool name="Active">true</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0.5</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoButtonColor">true</bool>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="BackgroundTransparency">0</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<token name="Font">3</token>
												<Font name="FontFace"></Font>
												<int name="LayoutOrder">0</int>
												<float name="LineHeight">1</float>
												<int name="MaxVisibleGraphemes">-1</int>
												<bool name="Modal">false</bool>
												<string name="Name">Back</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>5</XO>
													<YS>0.5</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="RichText">false</bool>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">true</bool>
												<bool name="Selected">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>0</XS>
													<XO>25</XO>
													<YS>0</YS>
													<YO>25</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<string name="Text"></string>
												<Color3 name="TextColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<bool name="TextScaled">false</bool>
												<float name="TextSize">14</float>
												<Color3 name="TextStrokeColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="TextStrokeTransparency">1</float>
												<float name="TextTransparency">0</float>
												<token name="TextTruncate">0</token>
												<bool name="TextWrapped">false</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ab6</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">6</int>
											</Properties>
											<Item class="ImageLabel" referent="RBXa698006ea7484c4988301bdfa89c9ba2">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0.5</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">1</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<Content name="Image"><url>rbxassetid://8677511725</url></Content>
													<Color3 name="ImageColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<Vector2 name="ImageRectOffset">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<Vector2 name="ImageRectSize">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<float name="ImageTransparency">0</float>
													<int name="LayoutOrder">0</int>
													<string name="Name">ImageLabel</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0.5</XS>
														<XO>0</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<token name="ResampleMode">0</token>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<token name="ScaleType">0</token>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0.850000024</XS>
														<XO>0</XO>
														<YS>0.850000024</YS>
														<YO>0</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<Rect2D name="SliceCenter">
														<min>
															<X>0</X>
															<Y>0</Y>
														</min>
														<max>
															<X>0</X>
															<Y>0</Y>
														</max>
													</Rect2D>
													<float name="SliceScale">1</float>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UDim2 name="TileSize">
														<XS>1</XS>
														<XO>0</XO>
														<YS>1</YS>
														<YO>0</YO>
													</UDim2>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a1a</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">6</int>
												</Properties>
											</Item>
											<Item class="UICorner" referent="RBX1aec386f7e4b49c89702dab22f301040">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<UDim name="CornerRadius">
														<S>0</S>
														<O>8</O>
													</UDim>
													<string name="Name">UICorner</string>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025af2</UniqueId>
												</Properties>
											</Item>
										</Item>
									</Item>
									<Item class="ScrollingFrame" referent="RBXd6affe6d885f440d92af6e81426ed60c">
										<Properties>
											<bool name="Active">false</bool>
											<Vector2 name="AnchorPoint">
												<X>0.5</X>
												<Y>1</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticCanvasSize">0</token>
											<token name="AutomaticSize">0</token>
											<Color3 name="BackgroundColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">
												<R>0.105882362</R>
												<G>0.164705887</G>
												<B>0.207843155</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">0</int>
											<Content name="BottomImage"><url>rbxassetid://8082116996</url></Content>
											<Vector2 name="CanvasPosition">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<UDim2 name="CanvasSize">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<bool name="ClipsDescendants">true</bool>
											<bool name="Draggable">false</bool>
											<token name="ElasticBehavior">0</token>
											<token name="HorizontalScrollBarInset">0</token>
											<int name="LayoutOrder">0</int>
											<Content name="MidImage"><url>rbxassetid://7488333553</url></Content>
											<string name="Name">Scroller</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>0.5</XS>
												<XO>0</XO>
												<YS>1</YS>
												<YO>-10</YO>
											</UDim2>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<Color3 name="ScrollBarImageColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<float name="ScrollBarImageTransparency">0</float>
											<int name="ScrollBarThickness">5</int>
											<token name="ScrollingDirection">4</token>
											<bool name="ScrollingEnabled">true</bool>
											<bool name="Selectable">false</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>-10</XO>
												<YS>1</YS>
												<YO>-50</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<Content name="TopImage"><url>rbxassetid://8082122989</url></Content>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aa2</UniqueId>
											<token name="VerticalScrollBarInset">0</token>
											<token name="VerticalScrollBarPosition">0</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">6</int>
										</Properties>
										<Item class="UIListLayout" referent="RBXef96bd5d66a74c2db4fe688e360675b7">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<token name="FillDirection">1</token>
												<token name="HorizontalAlignment">1</token>
												<string name="Name">UIListLayout</string>
												<UDim name="Padding">
													<S>0</S>
													<O>5</O>
												</UDim>
												<token name="SortOrder">2</token>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b28</UniqueId>
												<token name="VerticalAlignment">1</token>
											</Properties>
										</Item>
										<Item class="Frame" referent="RBX1840b37d232646f98c9a3d644ff8a472">
											<Properties>
												<bool name="Active">true</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="BackgroundTransparency">0.5</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">0</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<int name="LayoutOrder">0</int>
												<string name="Name">TextSize</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0.0327868834</XS>
													<XO>0</XO>
													<YS>0.0439999998</YS>
													<YO>0</YO>
												</UDim2>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">true</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>-10</XO>
													<YS>0</YS>
													<YO>55</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259c9</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">6</int>
											</Properties>
											<Item class="Frame" referent="RBXb1c90099216b48d19ce15b6b49edaeff">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">1</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<int name="LayoutOrder">0</int>
													<string name="Name">Center</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>0</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>1</XS>
														<XO>0</XO>
														<YS>0.75</YS>
														<YO>0</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<token name="Style">0</token>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259ca</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">6</int>
												</Properties>
												<Item class="Frame" referent="RBXe2b8de8f1fe841699607da599952cc6f">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0.5</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">0</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<int name="LayoutOrder">0</int>
														<string name="Name">Title</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0.5</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0.949999988</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>20</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259cb</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">6</int>
													</Properties>
													<Item class="ImageLabel" referent="RBX8fa6868cbe5441309b97a2f0fad34005">
														<Properties>
															<bool name="Active">false</bool>
															<Vector2 name="AnchorPoint">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">0</token>
															<Color3 name="BackgroundColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<float name="BackgroundTransparency">1</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">1</int>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<Content name="Image"><url>rbxassetid://8677222862</url></Content>
															<Color3 name="ImageColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<Vector2 name="ImageRectOffset">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<Vector2 name="ImageRectSize">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<float name="ImageTransparency">0</float>
															<int name="LayoutOrder">0</int>
															<string name="Name">Icon</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<UDim2 name="Position">
																<XS>0</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>0</YO>
															</UDim2>
															<token name="ResampleMode">0</token>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<token name="ScaleType">0</token>
															<bool name="Selectable">false</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<UDim2 name="Size">
																<XS>0</XS>
																<XO>20</XO>
																<YS>0</YS>
																<YO>20</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<Rect2D name="SliceCenter">
																<min>
																	<X>0</X>
																	<Y>0</Y>
																</min>
																<max>
																	<X>0</X>
																	<Y>0</Y>
																</max>
															</Rect2D>
															<float name="SliceScale">1</float>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UDim2 name="TileSize">
																<XS>1</XS>
																<XO>0</XO>
																<YS>1</YS>
																<YO>0</YO>
															</UDim2>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a1b</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">6</int>
														</Properties>
													</Item>
													<Item class="TextLabel" referent="RBX76361fc33a1e41a2bda7f9bc11ed6609">
														<Properties>
															<bool name="Active">false</bool>
															<Vector2 name="AnchorPoint">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">0</token>
															<Color3 name="BackgroundColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<float name="BackgroundTransparency">1</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">1</int>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<token name="Font">19</token>
															<Font name="FontFace"></Font>
															<int name="LayoutOrder">0</int>
															<float name="LineHeight">1</float>
															<int name="MaxVisibleGraphemes">-1</int>
															<string name="Name">Label</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<UDim2 name="Position">
																<XS>0</XS>
																<XO>25</XO>
																<YS>0</YS>
																<YO>0</YO>
															</UDim2>
															<bool name="RichText">false</bool>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<bool name="Selectable">false</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<UDim2 name="Size">
																<XS>0.5</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>18</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<string name="Text">Text Size</string>
															<Color3 name="TextColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<bool name="TextScaled">false</bool>
															<float name="TextSize">14</float>
															<Color3 name="TextStrokeColor3">
																<R>0</R>
																<G>0</G>
																<B>0</B>
															</Color3>
															<float name="TextStrokeTransparency">1</float>
															<float name="TextTransparency">0</float>
															<token name="TextTruncate">0</token>
															<bool name="TextWrapped">false</bool>
															<token name="TextXAlignment">0</token>
															<token name="TextYAlignment">1</token>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ad1</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">6</int>
														</Properties>
													</Item>
												</Item>
												<Item class="Frame" referent="RBXa44c1ea375c74376968115d2bfc8e4f5">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0.5</X>
															<Y>1</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<int name="LayoutOrder">0</int>
														<string name="Name">Actual</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0.5</XS>
															<XO>0</XO>
															<YS>1</YS>
															<YO>5</YO>
														</UDim2>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0.949999988</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>25</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259cc</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">6</int>
													</Properties>
													<Item class="TextBox" referent="RBX192d137e66344a96855dca01504a9066">
														<Properties>
															<bool name="Active">true</bool>
															<Vector2 name="AnchorPoint">
																<X>1</X>
																<Y>0.5</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">0</token>
															<Color3 name="BackgroundColor3">
																<R>0</R>
																<G>0</G>
																<B>0</B>
															</Color3>
															<float name="BackgroundTransparency">0.5</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">0</int>
															<bool name="ClearTextOnFocus">true</bool>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<token name="Font">18</token>
															<Font name="FontFace"></Font>
															<int name="LayoutOrder">0</int>
															<float name="LineHeight">1</float>
															<int name="MaxVisibleGraphemes">-1</int>
															<bool name="MultiLine">false</bool>
															<string name="Name">Amount</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<Color3 name="PlaceholderColor3">
																<R>0.862745106</R>
																<G>0.862745106</G>
																<B>0.862745106</B>
															</Color3>
															<string name="PlaceholderText">%</string>
															<UDim2 name="Position">
																<XS>1</XS>
																<XO>0</XO>
																<YS>0.5</YS>
																<YO>0</YO>
															</UDim2>
															<bool name="RichText">false</bool>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<bool name="Selectable">true</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<bool name="ShowNativeInput">true</bool>
															<UDim2 name="Size">
																<XS>0.125</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>20</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<string name="Text">_</string>
															<Color3 name="TextColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<bool name="TextEditable">true</bool>
															<bool name="TextScaled">false</bool>
															<float name="TextSize">14</float>
															<Color3 name="TextStrokeColor3">
																<R>0</R>
																<G>0</G>
																<B>0</B>
															</Color3>
															<float name="TextStrokeTransparency">1</float>
															<float name="TextTransparency">0</float>
															<token name="TextTruncate">1</token>
															<bool name="TextWrapped">false</bool>
															<token name="TextXAlignment">2</token>
															<token name="TextYAlignment">1</token>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aa8</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">6</int>
														</Properties>
														<Item class="UICorner" referent="RBX570a29760bb345d4ad556805e7918653">
															<Properties>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<UDim name="CornerRadius">
																	<S>0</S>
																	<O>8</O>
																</UDim>
																<string name="Name">UICorner</string>
																<int64 name="SourceAssetId">-1</int64>
																<BinaryString name="Tags"></BinaryString>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025af3</UniqueId>
															</Properties>
														</Item>
														<Item class="UIPadding" referent="RBX1a944c58972847618b072daa21e16fb4">
															<Properties>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<string name="Name">UIPadding</string>
																<UDim name="PaddingBottom">
																	<S>0</S>
																	<O>0</O>
																</UDim>
																<UDim name="PaddingLeft">
																	<S>0</S>
																	<O>5</O>
																</UDim>
																<UDim name="PaddingRight">
																	<S>0</S>
																	<O>5</O>
																</UDim>
																<UDim name="PaddingTop">
																	<S>0</S>
																	<O>0</O>
																</UDim>
																<int64 name="SourceAssetId">-1</int64>
																<BinaryString name="Tags"></BinaryString>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b33</UniqueId>
															</Properties>
														</Item>
													</Item>
													<Item class="Frame" referent="RBXf641105ce783446189da8a2288e7d83e">
														<Properties>
															<bool name="Active">false</bool>
															<Vector2 name="AnchorPoint">
																<X>0</X>
																<Y>0.5</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">0</token>
															<Color3 name="BackgroundColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<float name="BackgroundTransparency">0</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">0</int>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<int name="LayoutOrder">0</int>
															<string name="Name">Bar</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<UDim2 name="Position">
																<XS>0</XS>
																<XO>0</XO>
																<YS>0.5</YS>
																<YO>0</YO>
															</UDim2>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<bool name="Selectable">false</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<UDim2 name="Size">
																<XS>0.850000024</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>10</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<int64 name="SourceAssetId">-1</int64>
															<token name="Style">0</token>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259cd</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">6</int>
														</Properties>
														<Item class="UICorner" referent="RBXbfedbccad81649aebe0aea1450660a92">
															<Properties>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<UDim name="CornerRadius">
																	<S>1</S>
																	<O>0</O>
																</UDim>
																<string name="Name">Ignore</string>
																<int64 name="SourceAssetId">-1</int64>
																<BinaryString name="Tags"></BinaryString>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025af4</UniqueId>
															</Properties>
														</Item>
														<Item class="TextButton" referent="RBX5a329a503ec34c8895674ba868e3dba4">
															<Properties>
																<bool name="Active">true</bool>
																<Vector2 name="AnchorPoint">
																	<X>0.5</X>
																	<Y>0.5</Y>
																</Vector2>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<bool name="AutoButtonColor">true</bool>
																<bool name="AutoLocalize">true</bool>
																<token name="AutomaticSize">0</token>
																<Color3 name="BackgroundColor3">
																	<R>0.117647059</R>
																	<G>0.784313738</G>
																	<B>0.588235319</B>
																</Color3>
																<float name="BackgroundTransparency">0</float>
																<Color3 name="BorderColor3">
																	<R>0.105882362</R>
																	<G>0.164705887</G>
																	<B>0.207843155</B>
																</Color3>
																<token name="BorderMode">0</token>
																<int name="BorderSizePixel">0</int>
																<bool name="ClipsDescendants">false</bool>
																<bool name="Draggable">false</bool>
																<token name="Font">3</token>
																<Font name="FontFace"></Font>
																<int name="LayoutOrder">0</int>
																<float name="LineHeight">1</float>
																<int name="MaxVisibleGraphemes">-1</int>
																<bool name="Modal">false</bool>
																<string name="Name">Button</string>
																<Ref name="NextSelectionDown">null</Ref>
																<Ref name="NextSelectionLeft">null</Ref>
																<Ref name="NextSelectionRight">null</Ref>
																<Ref name="NextSelectionUp">null</Ref>
																<UDim2 name="Position">
																	<XS>0</XS>
																	<XO>10</XO>
																	<YS>0.5</YS>
																	<YO>0</YO>
																</UDim2>
																<bool name="RichText">false</bool>
																<Ref name="RootLocalizationTable">null</Ref>
																<float name="Rotation">0</float>
																<bool name="Selectable">true</bool>
																<bool name="Selected">false</bool>
																<Ref name="SelectionImageObject">null</Ref>
																<UDim2 name="Size">
																	<XS>0</XS>
																	<XO>20</XO>
																	<YS>0</YS>
																	<YO>20</YO>
																</UDim2>
																<token name="SizeConstraint">0</token>
																<int64 name="SourceAssetId">-1</int64>
																<token name="Style">0</token>
																<BinaryString name="Tags"></BinaryString>
																<string name="Text"></string>
																<Color3 name="TextColor3">
																	<R>0</R>
																	<G>0</G>
																	<B>0</B>
																</Color3>
																<bool name="TextScaled">false</bool>
																<float name="TextSize">14</float>
																<Color3 name="TextStrokeColor3">
																	<R>0</R>
																	<G>0</G>
																	<B>0</B>
																</Color3>
																<float name="TextStrokeTransparency">1</float>
																<float name="TextTransparency">0</float>
																<token name="TextTruncate">0</token>
																<bool name="TextWrapped">false</bool>
																<token name="TextXAlignment">2</token>
																<token name="TextYAlignment">1</token>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ab7</UniqueId>
																<bool name="Visible">true</bool>
																<int name="ZIndex">7</int>
															</Properties>
															<Item class="UICorner" referent="RBX79ba178d0d754d0dbb7e245f549cc4a9">
																<Properties>
																	<BinaryString name="AttributesSerialize"></BinaryString>
																	<UDim name="CornerRadius">
																		<S>1</S>
																		<O>0</O>
																	</UDim>
																	<string name="Name">Ignore</string>
																	<int64 name="SourceAssetId">-1</int64>
																	<BinaryString name="Tags"></BinaryString>
																	<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025af5</UniqueId>
																</Properties>
															</Item>
														</Item>
														<Item class="Frame" referent="RBX5bf3b3a1f35046ddb4d13af75f3915b7">
															<Properties>
																<bool name="Active">false</bool>
																<Vector2 name="AnchorPoint">
																	<X>0</X>
																	<Y>0</Y>
																</Vector2>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<bool name="AutoLocalize">true</bool>
																<token name="AutomaticSize">0</token>
																<Color3 name="BackgroundColor3">
																	<R>0.0980392247</R>
																	<G>0.666666687</G>
																	<B>0.498039246</B>
																</Color3>
																<float name="BackgroundTransparency">0</float>
																<Color3 name="BorderColor3">
																	<R>0.105882362</R>
																	<G>0.164705887</G>
																	<B>0.207843155</B>
																</Color3>
																<token name="BorderMode">0</token>
																<int name="BorderSizePixel">0</int>
																<bool name="ClipsDescendants">false</bool>
																<bool name="Draggable">false</bool>
																<int name="LayoutOrder">0</int>
																<string name="Name">Progress</string>
																<Ref name="NextSelectionDown">null</Ref>
																<Ref name="NextSelectionLeft">null</Ref>
																<Ref name="NextSelectionRight">null</Ref>
																<Ref name="NextSelectionUp">null</Ref>
																<UDim2 name="Position">
																	<XS>0</XS>
																	<XO>0</XO>
																	<YS>0</YS>
																	<YO>0</YO>
																</UDim2>
																<Ref name="RootLocalizationTable">null</Ref>
																<float name="Rotation">0</float>
																<bool name="Selectable">false</bool>
																<Ref name="SelectionImageObject">null</Ref>
																<UDim2 name="Size">
																	<XS>0</XS>
																	<XO>0</XO>
																	<YS>1</YS>
																	<YO>0</YO>
																</UDim2>
																<token name="SizeConstraint">0</token>
																<int64 name="SourceAssetId">-1</int64>
																<token name="Style">0</token>
																<BinaryString name="Tags"></BinaryString>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259ce</UniqueId>
																<bool name="Visible">true</bool>
																<int name="ZIndex">6</int>
															</Properties>
															<Item class="UICorner" referent="RBXad491d3c68b84beab96f4d719aa39b60">
																<Properties>
																	<BinaryString name="AttributesSerialize"></BinaryString>
																	<UDim name="CornerRadius">
																		<S>1</S>
																		<O>0</O>
																	</UDim>
																	<string name="Name">Ignore</string>
																	<int64 name="SourceAssetId">-1</int64>
																	<BinaryString name="Tags"></BinaryString>
																	<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025af6</UniqueId>
																</Properties>
															</Item>
														</Item>
													</Item>
												</Item>
											</Item>
											<Item class="UICorner" referent="RBXc55a4355f67b466484a0b25c7159808e">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<UDim name="CornerRadius">
														<S>0</S>
														<O>8</O>
													</UDim>
													<string name="Name">UICorner</string>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025af7</UniqueId>
												</Properties>
											</Item>
										</Item>
										<Item class="Frame" referent="RBXe5e03111202d4353b89fb70f79400250">
											<Properties>
												<bool name="Active">true</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="BackgroundTransparency">0.5</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">0</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<int name="LayoutOrder">0</int>
												<string name="Name">Roundness</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0.0327868834</XS>
													<XO>0</XO>
													<YS>0.0439999998</YS>
													<YO>0</YO>
												</UDim2>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">true</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>-10</XO>
													<YS>0</YS>
													<YO>55</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259cf</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">6</int>
											</Properties>
											<Item class="Frame" referent="RBX7538a44801074bfcb99157435824b4ba">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">1</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<int name="LayoutOrder">0</int>
													<string name="Name">Center</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>0</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>1</XS>
														<XO>0</XO>
														<YS>0.75</YS>
														<YO>0</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<token name="Style">0</token>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259d0</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">6</int>
												</Properties>
												<Item class="Frame" referent="RBXd7d3da8f76004ed495cb6edb47cb2a48">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0.5</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">0</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<int name="LayoutOrder">0</int>
														<string name="Name">Title</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0.5</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0.949999988</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>20</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259d1</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">6</int>
													</Properties>
													<Item class="ImageLabel" referent="RBX028fbe238e6149e79b85433f67c99f11">
														<Properties>
															<bool name="Active">false</bool>
															<Vector2 name="AnchorPoint">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">0</token>
															<Color3 name="BackgroundColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<float name="BackgroundTransparency">1</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">1</int>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<Content name="Image"><url>rbxassetid://8677280864</url></Content>
															<Color3 name="ImageColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<Vector2 name="ImageRectOffset">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<Vector2 name="ImageRectSize">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<float name="ImageTransparency">0</float>
															<int name="LayoutOrder">0</int>
															<string name="Name">Icon</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<UDim2 name="Position">
																<XS>0</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>0</YO>
															</UDim2>
															<token name="ResampleMode">0</token>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<token name="ScaleType">0</token>
															<bool name="Selectable">false</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<UDim2 name="Size">
																<XS>0</XS>
																<XO>20</XO>
																<YS>0</YS>
																<YO>20</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<Rect2D name="SliceCenter">
																<min>
																	<X>0</X>
																	<Y>0</Y>
																</min>
																<max>
																	<X>0</X>
																	<Y>0</Y>
																</max>
															</Rect2D>
															<float name="SliceScale">1</float>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UDim2 name="TileSize">
																<XS>1</XS>
																<XO>0</XO>
																<YS>1</YS>
																<YO>0</YO>
															</UDim2>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a1c</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">6</int>
														</Properties>
													</Item>
													<Item class="TextLabel" referent="RBX9d0adca1038940ffbe81e4d96b2367e1">
														<Properties>
															<bool name="Active">false</bool>
															<Vector2 name="AnchorPoint">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">0</token>
															<Color3 name="BackgroundColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<float name="BackgroundTransparency">1</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">1</int>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<token name="Font">19</token>
															<Font name="FontFace"></Font>
															<int name="LayoutOrder">0</int>
															<float name="LineHeight">1</float>
															<int name="MaxVisibleGraphemes">-1</int>
															<string name="Name">Label</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<UDim2 name="Position">
																<XS>0</XS>
																<XO>25</XO>
																<YS>0</YS>
																<YO>0</YO>
															</UDim2>
															<bool name="RichText">false</bool>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<bool name="Selectable">false</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<UDim2 name="Size">
																<XS>0.5</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>18</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<string name="Text">Roundness</string>
															<Color3 name="TextColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<bool name="TextScaled">false</bool>
															<float name="TextSize">14</float>
															<Color3 name="TextStrokeColor3">
																<R>0</R>
																<G>0</G>
																<B>0</B>
															</Color3>
															<float name="TextStrokeTransparency">1</float>
															<float name="TextTransparency">0</float>
															<token name="TextTruncate">0</token>
															<bool name="TextWrapped">false</bool>
															<token name="TextXAlignment">0</token>
															<token name="TextYAlignment">1</token>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ad2</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">6</int>
														</Properties>
													</Item>
												</Item>
												<Item class="Frame" referent="RBX59cd275ba4ec4a3aa17ae0e1fd1a7c5a">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0.5</X>
															<Y>1</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<int name="LayoutOrder">0</int>
														<string name="Name">Actual</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0.5</XS>
															<XO>0</XO>
															<YS>1</YS>
															<YO>5</YO>
														</UDim2>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0.949999988</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>25</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259d2</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">6</int>
													</Properties>
													<Item class="TextBox" referent="RBX4036f9ad8d9d4efa8f10fe622adbb2d4">
														<Properties>
															<bool name="Active">true</bool>
															<Vector2 name="AnchorPoint">
																<X>1</X>
																<Y>0.5</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">0</token>
															<Color3 name="BackgroundColor3">
																<R>0</R>
																<G>0</G>
																<B>0</B>
															</Color3>
															<float name="BackgroundTransparency">0.5</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">0</int>
															<bool name="ClearTextOnFocus">true</bool>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<token name="Font">18</token>
															<Font name="FontFace"></Font>
															<int name="LayoutOrder">0</int>
															<float name="LineHeight">1</float>
															<int name="MaxVisibleGraphemes">-1</int>
															<bool name="MultiLine">false</bool>
															<string name="Name">Amount</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<Color3 name="PlaceholderColor3">
																<R>0.862745106</R>
																<G>0.862745106</G>
																<B>0.862745106</B>
															</Color3>
															<string name="PlaceholderText">%</string>
															<UDim2 name="Position">
																<XS>1</XS>
																<XO>0</XO>
																<YS>0.5</YS>
																<YO>0</YO>
															</UDim2>
															<bool name="RichText">false</bool>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<bool name="Selectable">true</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<bool name="ShowNativeInput">true</bool>
															<UDim2 name="Size">
																<XS>0.125</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>20</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<string name="Text">_</string>
															<Color3 name="TextColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<bool name="TextEditable">true</bool>
															<bool name="TextScaled">false</bool>
															<float name="TextSize">14</float>
															<Color3 name="TextStrokeColor3">
																<R>0</R>
																<G>0</G>
																<B>0</B>
															</Color3>
															<float name="TextStrokeTransparency">1</float>
															<float name="TextTransparency">0</float>
															<token name="TextTruncate">1</token>
															<bool name="TextWrapped">false</bool>
															<token name="TextXAlignment">2</token>
															<token name="TextYAlignment">1</token>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aa9</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">6</int>
														</Properties>
														<Item class="UICorner" referent="RBX630e9a658c50426a8f3083da13b313f7">
															<Properties>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<UDim name="CornerRadius">
																	<S>0</S>
																	<O>8</O>
																</UDim>
																<string name="Name">UICorner</string>
																<int64 name="SourceAssetId">-1</int64>
																<BinaryString name="Tags"></BinaryString>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025af8</UniqueId>
															</Properties>
														</Item>
														<Item class="UIPadding" referent="RBXf5cfe3f4aa5c4865839e1906cb2a90ce">
															<Properties>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<string name="Name">UIPadding</string>
																<UDim name="PaddingBottom">
																	<S>0</S>
																	<O>0</O>
																</UDim>
																<UDim name="PaddingLeft">
																	<S>0</S>
																	<O>5</O>
																</UDim>
																<UDim name="PaddingRight">
																	<S>0</S>
																	<O>5</O>
																</UDim>
																<UDim name="PaddingTop">
																	<S>0</S>
																	<O>0</O>
																</UDim>
																<int64 name="SourceAssetId">-1</int64>
																<BinaryString name="Tags"></BinaryString>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b34</UniqueId>
															</Properties>
														</Item>
													</Item>
													<Item class="Frame" referent="RBXd86cc80070a64311b497cc5d5b145330">
														<Properties>
															<bool name="Active">false</bool>
															<Vector2 name="AnchorPoint">
																<X>0</X>
																<Y>0.5</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">0</token>
															<Color3 name="BackgroundColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<float name="BackgroundTransparency">0</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">0</int>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<int name="LayoutOrder">0</int>
															<string name="Name">Bar</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<UDim2 name="Position">
																<XS>0</XS>
																<XO>0</XO>
																<YS>0.5</YS>
																<YO>0</YO>
															</UDim2>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<bool name="Selectable">false</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<UDim2 name="Size">
																<XS>0.850000024</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>10</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<int64 name="SourceAssetId">-1</int64>
															<token name="Style">0</token>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259d3</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">6</int>
														</Properties>
														<Item class="UICorner" referent="RBXb17299d700ef44bfa7c8416c1a427ef0">
															<Properties>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<UDim name="CornerRadius">
																	<S>1</S>
																	<O>0</O>
																</UDim>
																<string name="Name">Ignore</string>
																<int64 name="SourceAssetId">-1</int64>
																<BinaryString name="Tags"></BinaryString>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025af9</UniqueId>
															</Properties>
														</Item>
														<Item class="TextButton" referent="RBX715ac58bdf584fcebb0fc28488fa2b4a">
															<Properties>
																<bool name="Active">true</bool>
																<Vector2 name="AnchorPoint">
																	<X>0.5</X>
																	<Y>0.5</Y>
																</Vector2>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<bool name="AutoButtonColor">true</bool>
																<bool name="AutoLocalize">true</bool>
																<token name="AutomaticSize">0</token>
																<Color3 name="BackgroundColor3">
																	<R>0.117647059</R>
																	<G>0.784313738</G>
																	<B>0.588235319</B>
																</Color3>
																<float name="BackgroundTransparency">0</float>
																<Color3 name="BorderColor3">
																	<R>0.105882362</R>
																	<G>0.164705887</G>
																	<B>0.207843155</B>
																</Color3>
																<token name="BorderMode">0</token>
																<int name="BorderSizePixel">0</int>
																<bool name="ClipsDescendants">false</bool>
																<bool name="Draggable">false</bool>
																<token name="Font">3</token>
																<Font name="FontFace"></Font>
																<int name="LayoutOrder">0</int>
																<float name="LineHeight">1</float>
																<int name="MaxVisibleGraphemes">-1</int>
																<bool name="Modal">false</bool>
																<string name="Name">Button</string>
																<Ref name="NextSelectionDown">null</Ref>
																<Ref name="NextSelectionLeft">null</Ref>
																<Ref name="NextSelectionRight">null</Ref>
																<Ref name="NextSelectionUp">null</Ref>
																<UDim2 name="Position">
																	<XS>0</XS>
																	<XO>10</XO>
																	<YS>0.5</YS>
																	<YO>0</YO>
																</UDim2>
																<bool name="RichText">false</bool>
																<Ref name="RootLocalizationTable">null</Ref>
																<float name="Rotation">0</float>
																<bool name="Selectable">true</bool>
																<bool name="Selected">false</bool>
																<Ref name="SelectionImageObject">null</Ref>
																<UDim2 name="Size">
																	<XS>0</XS>
																	<XO>20</XO>
																	<YS>0</YS>
																	<YO>20</YO>
																</UDim2>
																<token name="SizeConstraint">0</token>
																<int64 name="SourceAssetId">-1</int64>
																<token name="Style">0</token>
																<BinaryString name="Tags"></BinaryString>
																<string name="Text"></string>
																<Color3 name="TextColor3">
																	<R>0</R>
																	<G>0</G>
																	<B>0</B>
																</Color3>
																<bool name="TextScaled">false</bool>
																<float name="TextSize">14</float>
																<Color3 name="TextStrokeColor3">
																	<R>0</R>
																	<G>0</G>
																	<B>0</B>
																</Color3>
																<float name="TextStrokeTransparency">1</float>
																<float name="TextTransparency">0</float>
																<token name="TextTruncate">0</token>
																<bool name="TextWrapped">false</bool>
																<token name="TextXAlignment">2</token>
																<token name="TextYAlignment">1</token>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ab8</UniqueId>
																<bool name="Visible">true</bool>
																<int name="ZIndex">7</int>
															</Properties>
															<Item class="UICorner" referent="RBX44d210d1240e43db89ec00b96002c1e1">
																<Properties>
																	<BinaryString name="AttributesSerialize"></BinaryString>
																	<UDim name="CornerRadius">
																		<S>1</S>
																		<O>0</O>
																	</UDim>
																	<string name="Name">Ignore</string>
																	<int64 name="SourceAssetId">-1</int64>
																	<BinaryString name="Tags"></BinaryString>
																	<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025afa</UniqueId>
																</Properties>
															</Item>
														</Item>
														<Item class="Frame" referent="RBX48325434f6a1446db0c0143a3274ba85">
															<Properties>
																<bool name="Active">false</bool>
																<Vector2 name="AnchorPoint">
																	<X>0</X>
																	<Y>0</Y>
																</Vector2>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<bool name="AutoLocalize">true</bool>
																<token name="AutomaticSize">0</token>
																<Color3 name="BackgroundColor3">
																	<R>0.0980392247</R>
																	<G>0.666666687</G>
																	<B>0.498039246</B>
																</Color3>
																<float name="BackgroundTransparency">0</float>
																<Color3 name="BorderColor3">
																	<R>0.105882362</R>
																	<G>0.164705887</G>
																	<B>0.207843155</B>
																</Color3>
																<token name="BorderMode">0</token>
																<int name="BorderSizePixel">0</int>
																<bool name="ClipsDescendants">false</bool>
																<bool name="Draggable">false</bool>
																<int name="LayoutOrder">0</int>
																<string name="Name">Progress</string>
																<Ref name="NextSelectionDown">null</Ref>
																<Ref name="NextSelectionLeft">null</Ref>
																<Ref name="NextSelectionRight">null</Ref>
																<Ref name="NextSelectionUp">null</Ref>
																<UDim2 name="Position">
																	<XS>0</XS>
																	<XO>0</XO>
																	<YS>0</YS>
																	<YO>0</YO>
																</UDim2>
																<Ref name="RootLocalizationTable">null</Ref>
																<float name="Rotation">0</float>
																<bool name="Selectable">false</bool>
																<Ref name="SelectionImageObject">null</Ref>
																<UDim2 name="Size">
																	<XS>0</XS>
																	<XO>0</XO>
																	<YS>1</YS>
																	<YO>0</YO>
																</UDim2>
																<token name="SizeConstraint">0</token>
																<int64 name="SourceAssetId">-1</int64>
																<token name="Style">0</token>
																<BinaryString name="Tags"></BinaryString>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259d4</UniqueId>
																<bool name="Visible">true</bool>
																<int name="ZIndex">6</int>
															</Properties>
															<Item class="UICorner" referent="RBXc8f57f3b7f7540d39ad14d7fdaa0c5a1">
																<Properties>
																	<BinaryString name="AttributesSerialize"></BinaryString>
																	<UDim name="CornerRadius">
																		<S>1</S>
																		<O>0</O>
																	</UDim>
																	<string name="Name">Ignore</string>
																	<int64 name="SourceAssetId">-1</int64>
																	<BinaryString name="Tags"></BinaryString>
																	<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025afb</UniqueId>
																</Properties>
															</Item>
														</Item>
													</Item>
												</Item>
											</Item>
											<Item class="UICorner" referent="RBX86d8df08175447f29714cf35ae2aca97">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<UDim name="CornerRadius">
														<S>0</S>
														<O>8</O>
													</UDim>
													<string name="Name">UICorner</string>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025afc</UniqueId>
												</Properties>
											</Item>
										</Item>
										<Item class="Frame" referent="RBX01d517790bde4758b79f691883a18fb4">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="BackgroundTransparency">0.5</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<int name="LayoutOrder">0</int>
												<string name="Name">Resizable</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>-10</XO>
													<YS>0</YS>
													<YO>30</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259d5</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">6</int>
											</Properties>
											<Item class="Frame" referent="RBXaf126f29963d4924ac2f7a569028d5bb">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0.5</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">0</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<int name="LayoutOrder">0</int>
													<string name="Name">Title</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0.5</XS>
														<XO>0</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0.949999988</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>20</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<token name="Style">0</token>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259d6</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">6</int>
												</Properties>
												<Item class="ImageLabel" referent="RBX283ed00ba29a4fccbb75d6e1da88a42b">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<Content name="Image"><url>rbxassetid://8571348189</url></Content>
														<Color3 name="ImageColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<Vector2 name="ImageRectOffset">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<Vector2 name="ImageRectSize">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<float name="ImageTransparency">0</float>
														<int name="LayoutOrder">0</int>
														<string name="Name">Icon</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<token name="ResampleMode">0</token>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<token name="ScaleType">0</token>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0</XS>
															<XO>20</XO>
															<YS>0</YS>
															<YO>20</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<Rect2D name="SliceCenter">
															<min>
																<X>0</X>
																<Y>0</Y>
															</min>
															<max>
																<X>0</X>
																<Y>0</Y>
															</max>
														</Rect2D>
														<float name="SliceScale">1</float>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<UDim2 name="TileSize">
															<XS>1</XS>
															<XO>0</XO>
															<YS>1</YS>
															<YO>0</YO>
														</UDim2>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a1d</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">6</int>
													</Properties>
												</Item>
												<Item class="TextLabel" referent="RBXf1a2a8d741ed4e44bf4f352da6bb6875">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<token name="Font">19</token>
														<Font name="FontFace"></Font>
														<int name="LayoutOrder">0</int>
														<float name="LineHeight">1</float>
														<int name="MaxVisibleGraphemes">-1</int>
														<string name="Name">Label</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>25</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<bool name="RichText">false</bool>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0.5</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>18</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<string name="Text">Resizable</string>
														<Color3 name="TextColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<bool name="TextScaled">false</bool>
														<float name="TextSize">14</float>
														<Color3 name="TextStrokeColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="TextStrokeTransparency">1</float>
														<float name="TextTransparency">0</float>
														<token name="TextTruncate">0</token>
														<bool name="TextWrapped">false</bool>
														<token name="TextXAlignment">0</token>
														<token name="TextYAlignment">1</token>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ad3</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">6</int>
													</Properties>
												</Item>
											</Item>
											<Item class="UICorner" referent="RBX1111911dca0c4709b5a93382c160b43e">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<UDim name="CornerRadius">
														<S>0</S>
														<O>8</O>
													</UDim>
													<string name="Name">UICorner</string>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025afd</UniqueId>
												</Properties>
											</Item>
											<Item class="Frame" referent="RBX4d4ef456c3cf420bb8bfff2c19d7bb69">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>1</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>0.282352954</R>
														<G>0.686274529</G>
														<B>0.941176474</B>
													</Color3>
													<float name="BackgroundTransparency">0</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">0</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<int name="LayoutOrder">0</int>
													<string name="Name">Toggle</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>1</XS>
														<XO>-5</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0</XS>
														<XO>40</XO>
														<YS>0</YS>
														<YO>18</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<token name="Style">0</token>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259d7</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">6</int>
												</Properties>
												<Item class="UICorner" referent="RBX9bb3dc3d465047e4bc7ed4cfd4907d9b">
													<Properties>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<UDim name="CornerRadius">
															<S>1</S>
															<O>0</O>
														</UDim>
														<string name="Name">Ignore</string>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025afe</UniqueId>
													</Properties>
												</Item>
												<Item class="TextButton" referent="RBX8c2416c5ff824070b07fc3ce040073ee">
													<Properties>
														<bool name="Active">true</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoButtonColor">true</bool>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<token name="Font">3</token>
														<Font name="FontFace"></Font>
														<int name="LayoutOrder">0</int>
														<float name="LineHeight">1</float>
														<int name="MaxVisibleGraphemes">-1</int>
														<bool name="Modal">false</bool>
														<string name="Name">Zone</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<bool name="RichText">false</bool>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">true</bool>
														<bool name="Selected">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>1</XS>
															<XO>0</XO>
															<YS>1</YS>
															<YO>0</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<string name="Text"></string>
														<Color3 name="TextColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<bool name="TextScaled">false</bool>
														<float name="TextSize">14</float>
														<Color3 name="TextStrokeColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="TextStrokeTransparency">1</float>
														<float name="TextTransparency">0</float>
														<token name="TextTruncate">0</token>
														<bool name="TextWrapped">false</bool>
														<token name="TextXAlignment">2</token>
														<token name="TextYAlignment">1</token>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ab9</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">8</int>
													</Properties>
													<Item class="UICorner" referent="RBX3b6d4e1eae66408fb2f4d5b4adbf53d7">
														<Properties>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<UDim name="CornerRadius">
																<S>1</S>
																<O>0</O>
															</UDim>
															<string name="Name">Ignore</string>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aff</UniqueId>
														</Properties>
													</Item>
												</Item>
												<Item class="Frame" referent="RBX7d9935c1696d43dca565b9d848cdbb4c">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>1</X>
															<Y>0.5</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">0</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<int name="LayoutOrder">0</int>
														<string name="Name">Rounded</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>1</XS>
															<XO>-3</XO>
															<YS>0.5</YS>
															<YO>0</YO>
														</UDim2>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0</XS>
															<XO>14</XO>
															<YS>0</YS>
															<YO>14</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259d8</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">6</int>
													</Properties>
													<Item class="UICorner" referent="RBX4de30654d1024d30a018867b42f7bf2a">
														<Properties>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<UDim name="CornerRadius">
																<S>1</S>
																<O>0</O>
															</UDim>
															<string name="Name">Ignore</string>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b00</UniqueId>
														</Properties>
													</Item>
												</Item>
											</Item>
										</Item>
									</Item>
								</Item>
								<Item class="Frame" referent="RBX0cfe8f777d9b4f17ace7751054b63123">
									<Properties>
										<bool name="Active">false</bool>
										<Vector2 name="AnchorPoint">
											<X>0</X>
											<Y>0</Y>
										</Vector2>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<bool name="AutoLocalize">true</bool>
										<token name="AutomaticSize">0</token>
										<Color3 name="BackgroundColor3">
											<R>1</R>
											<G>1</G>
											<B>1</B>
										</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">
											<R>0.105882362</R>
											<G>0.164705887</G>
											<B>0.207843155</B>
										</Color3>
										<token name="BorderMode">0</token>
										<int name="BorderSizePixel">1</int>
										<bool name="ClipsDescendants">false</bool>
										<bool name="Draggable">false</bool>
										<int name="LayoutOrder">0</int>
										<string name="Name">BubbleChat</string>
										<Ref name="NextSelectionDown">null</Ref>
										<Ref name="NextSelectionLeft">null</Ref>
										<Ref name="NextSelectionRight">null</Ref>
										<Ref name="NextSelectionUp">null</Ref>
										<UDim2 name="Position">
											<XS>1</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<Ref name="RootLocalizationTable">null</Ref>
										<float name="Rotation">0</float>
										<bool name="Selectable">false</bool>
										<Ref name="SelectionImageObject">null</Ref>
										<UDim2 name="Size">
											<XS>1</XS>
											<XO>0</XO>
											<YS>1</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<int64 name="SourceAssetId">-1</int64>
										<token name="Style">0</token>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259d9</UniqueId>
										<bool name="Visible">true</bool>
										<int name="ZIndex">6</int>
									</Properties>
									<Item class="TextLabel" referent="RBXd3c1bd1e064e4e18b14aa0250f8c90b8">
										<Properties>
											<bool name="Active">false</bool>
											<Vector2 name="AnchorPoint">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticSize">0</token>
											<Color3 name="BackgroundColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">
												<R>0.105882362</R>
												<G>0.164705887</G>
												<B>0.207843155</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">1</int>
											<bool name="ClipsDescendants">false</bool>
											<bool name="Draggable">false</bool>
											<token name="Font">18</token>
											<Font name="FontFace"></Font>
											<int name="LayoutOrder">0</int>
											<float name="LineHeight">1</float>
											<int name="MaxVisibleGraphemes">-1</int>
											<string name="Name">Title</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>5</YO>
											</UDim2>
											<bool name="RichText">false</bool>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<bool name="Selectable">false</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>30</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<string name="Text">Bubble Chat</string>
											<Color3 name="TextColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<bool name="TextScaled">false</bool>
											<float name="TextSize">20</float>
											<Color3 name="TextStrokeColor3">
												<R>0</R>
												<G>0</G>
												<B>0</B>
											</Color3>
											<float name="TextStrokeTransparency">1</float>
											<float name="TextTransparency">0</float>
											<token name="TextTruncate">0</token>
											<bool name="TextWrapped">false</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ad4</UniqueId>
											<bool name="Visible">true</bool>
											<int name="ZIndex">6</int>
										</Properties>
										<Item class="TextButton" referent="RBXae963ca8dcfc4f9b8f11db3191f0011e">
											<Properties>
												<bool name="Active">true</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0.5</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoButtonColor">true</bool>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="BackgroundTransparency">0</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<token name="Font">3</token>
												<Font name="FontFace"></Font>
												<int name="LayoutOrder">0</int>
												<float name="LineHeight">1</float>
												<int name="MaxVisibleGraphemes">-1</int>
												<bool name="Modal">false</bool>
												<string name="Name">Back</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>5</XO>
													<YS>0.5</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="RichText">false</bool>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">true</bool>
												<bool name="Selected">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>0</XS>
													<XO>25</XO>
													<YS>0</YS>
													<YO>25</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<string name="Text"></string>
												<Color3 name="TextColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<bool name="TextScaled">false</bool>
												<float name="TextSize">14</float>
												<Color3 name="TextStrokeColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="TextStrokeTransparency">1</float>
												<float name="TextTransparency">0</float>
												<token name="TextTruncate">0</token>
												<bool name="TextWrapped">false</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aba</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">6</int>
											</Properties>
											<Item class="ImageLabel" referent="RBX8583738b15a6451993957f985e8ff65d">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0.5</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">1</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<Content name="Image"><url>rbxassetid://8677511725</url></Content>
													<Color3 name="ImageColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<Vector2 name="ImageRectOffset">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<Vector2 name="ImageRectSize">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<float name="ImageTransparency">0</float>
													<int name="LayoutOrder">0</int>
													<string name="Name">ImageLabel</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0.5</XS>
														<XO>0</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<token name="ResampleMode">0</token>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<token name="ScaleType">0</token>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0.850000024</XS>
														<XO>0</XO>
														<YS>0.850000024</YS>
														<YO>0</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<Rect2D name="SliceCenter">
														<min>
															<X>0</X>
															<Y>0</Y>
														</min>
														<max>
															<X>0</X>
															<Y>0</Y>
														</max>
													</Rect2D>
													<float name="SliceScale">1</float>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UDim2 name="TileSize">
														<XS>1</XS>
														<XO>0</XO>
														<YS>1</YS>
														<YO>0</YO>
													</UDim2>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a1e</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">6</int>
												</Properties>
											</Item>
											<Item class="UICorner" referent="RBX059eb32e0ab747e0aed32d68ab48f639">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<UDim name="CornerRadius">
														<S>0</S>
														<O>8</O>
													</UDim>
													<string name="Name">UICorner</string>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b01</UniqueId>
												</Properties>
											</Item>
										</Item>
									</Item>
									<Item class="ScrollingFrame" referent="RBXc66a7958cee64b9e95ebae5d1225a5b3">
										<Properties>
											<bool name="Active">false</bool>
											<Vector2 name="AnchorPoint">
												<X>0.5</X>
												<Y>1</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticCanvasSize">0</token>
											<token name="AutomaticSize">0</token>
											<Color3 name="BackgroundColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">
												<R>0.105882362</R>
												<G>0.164705887</G>
												<B>0.207843155</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">0</int>
											<Content name="BottomImage"><url>rbxassetid://8082116996</url></Content>
											<Vector2 name="CanvasPosition">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<UDim2 name="CanvasSize">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<bool name="ClipsDescendants">true</bool>
											<bool name="Draggable">false</bool>
											<token name="ElasticBehavior">0</token>
											<token name="HorizontalScrollBarInset">0</token>
											<int name="LayoutOrder">0</int>
											<Content name="MidImage"><url>rbxassetid://7488333553</url></Content>
											<string name="Name">Scroller</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>0.5</XS>
												<XO>0</XO>
												<YS>1</YS>
												<YO>-10</YO>
											</UDim2>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<Color3 name="ScrollBarImageColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<float name="ScrollBarImageTransparency">0</float>
											<int name="ScrollBarThickness">5</int>
											<token name="ScrollingDirection">4</token>
											<bool name="ScrollingEnabled">true</bool>
											<bool name="Selectable">false</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>-10</XO>
												<YS>1</YS>
												<YO>-50</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<Content name="TopImage"><url>rbxassetid://8082122989</url></Content>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aa3</UniqueId>
											<token name="VerticalScrollBarInset">0</token>
											<token name="VerticalScrollBarPosition">0</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">6</int>
										</Properties>
										<Item class="UIListLayout" referent="RBX14e039f4858a493e8c2f1883bdc1e13e">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<token name="FillDirection">1</token>
												<token name="HorizontalAlignment">1</token>
												<string name="Name">UIListLayout</string>
												<UDim name="Padding">
													<S>0</S>
													<O>5</O>
												</UDim>
												<token name="SortOrder">2</token>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b29</UniqueId>
												<token name="VerticalAlignment">1</token>
											</Properties>
										</Item>
										<Item class="Frame" referent="RBX40a0634ee10149bab46642459862437b">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">true</bool>
												<bool name="Draggable">false</bool>
												<int name="LayoutOrder">0</int>
												<string name="Name">AnimationStyle</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>-10</XO>
													<YS>0</YS>
													<YO>30</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259da</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">6</int>
											</Properties>
											<Item class="Frame" referent="RBXc372874ff6894209ab7457c566027ff3">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0.5</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">0</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<int name="LayoutOrder">0</int>
													<string name="Name">Title</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0.5</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>15</YO>
													</UDim2>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0.949999988</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>20</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<token name="Style">0</token>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259db</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">8</int>
												</Properties>
												<Item class="ImageLabel" referent="RBX47785f68f47940578b97dc1e9b2b7939">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<Content name="Image"><url>rbxassetid://8677960616</url></Content>
														<Color3 name="ImageColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<Vector2 name="ImageRectOffset">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<Vector2 name="ImageRectSize">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<float name="ImageTransparency">0</float>
														<int name="LayoutOrder">0</int>
														<string name="Name">Icon</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<token name="ResampleMode">0</token>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<token name="ScaleType">0</token>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0</XS>
															<XO>20</XO>
															<YS>0</YS>
															<YO>20</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<Rect2D name="SliceCenter">
															<min>
																<X>0</X>
																<Y>0</Y>
															</min>
															<max>
																<X>0</X>
																<Y>0</Y>
															</max>
														</Rect2D>
														<float name="SliceScale">1</float>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<UDim2 name="TileSize">
															<XS>1</XS>
															<XO>0</XO>
															<YS>1</YS>
															<YO>0</YO>
														</UDim2>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a1f</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">9</int>
													</Properties>
												</Item>
												<Item class="TextLabel" referent="RBX4ac981db70c14984b2a8cbcb62b25fdb">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">1</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<token name="Font">19</token>
														<Font name="FontFace"></Font>
														<int name="LayoutOrder">0</int>
														<float name="LineHeight">1</float>
														<int name="MaxVisibleGraphemes">-1</int>
														<string name="Name">Label</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>25</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<bool name="RichText">false</bool>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>18</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<string name="Text">Animation Style</string>
														<Color3 name="TextColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<bool name="TextScaled">false</bool>
														<float name="TextSize">14</float>
														<Color3 name="TextStrokeColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="TextStrokeTransparency">1</float>
														<float name="TextTransparency">0</float>
														<token name="TextTruncate">0</token>
														<bool name="TextWrapped">false</bool>
														<token name="TextXAlignment">0</token>
														<token name="TextYAlignment">1</token>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ad5</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">9</int>
													</Properties>
												</Item>
												<Item class="TextButton" referent="RBX6a709f2e24a5470ab0c7267b1a8c9591">
													<Properties>
														<bool name="Active">true</bool>
														<Vector2 name="AnchorPoint">
															<X>1</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoButtonColor">true</bool>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="BackgroundTransparency">0</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">0</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<token name="Font">3</token>
														<Font name="FontFace"></Font>
														<int name="LayoutOrder">0</int>
														<float name="LineHeight">1</float>
														<int name="MaxVisibleGraphemes">-1</int>
														<bool name="Modal">false</bool>
														<string name="Name">Drop</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>1</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<bool name="RichText">false</bool>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">true</bool>
														<bool name="Selected">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0</XS>
															<XO>30</XO>
															<YS>0</YS>
															<YO>20</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<string name="Text"></string>
														<Color3 name="TextColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<bool name="TextScaled">false</bool>
														<float name="TextSize">14</float>
														<Color3 name="TextStrokeColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="TextStrokeTransparency">1</float>
														<float name="TextTransparency">0</float>
														<token name="TextTruncate">0</token>
														<bool name="TextWrapped">false</bool>
														<token name="TextXAlignment">2</token>
														<token name="TextYAlignment">1</token>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025abb</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">9</int>
													</Properties>
													<Item class="UICorner" referent="RBXf9e33e40eea04a7987710d2de51284ce">
														<Properties>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<UDim name="CornerRadius">
																<S>0</S>
																<O>8</O>
															</UDim>
															<string name="Name">UICorner</string>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b02</UniqueId>
														</Properties>
													</Item>
													<Item class="ImageLabel" referent="RBX8c854c0d294243cea20703c204517e57">
														<Properties>
															<bool name="Active">false</bool>
															<Vector2 name="AnchorPoint">
																<X>0.5</X>
																<Y>0.5</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">0</token>
															<Color3 name="BackgroundColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<float name="BackgroundTransparency">1</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">1</int>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<Content name="Image"><url>rbxassetid://8677555693</url></Content>
															<Color3 name="ImageColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<Vector2 name="ImageRectOffset">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<Vector2 name="ImageRectSize">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<float name="ImageTransparency">0</float>
															<int name="LayoutOrder">0</int>
															<string name="Name">Icon</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<UDim2 name="Position">
																<XS>0.5</XS>
																<XO>0</XO>
																<YS>0.5</YS>
																<YO>0</YO>
															</UDim2>
															<token name="ResampleMode">0</token>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<token name="ScaleType">0</token>
															<bool name="Selectable">false</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<UDim2 name="Size">
																<XS>0</XS>
																<XO>25</XO>
																<YS>0</YS>
																<YO>25</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<Rect2D name="SliceCenter">
																<min>
																	<X>0</X>
																	<Y>0</Y>
																</min>
																<max>
																	<X>0</X>
																	<Y>0</Y>
																</max>
															</Rect2D>
															<float name="SliceScale">1</float>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UDim2 name="TileSize">
																<XS>1</XS>
																<XO>0</XO>
																<YS>1</YS>
																<YO>0</YO>
															</UDim2>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a20</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">10</int>
														</Properties>
													</Item>
												</Item>
												<Item class="TextLabel" referent="RBX3757addbbbed4f14ab82f00c02cd5394">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>1</X>
															<Y>0.5</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">1</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<token name="Font">17</token>
														<Font name="FontFace"></Font>
														<int name="LayoutOrder">0</int>
														<float name="LineHeight">1</float>
														<int name="MaxVisibleGraphemes">-1</int>
														<string name="Name">Selected</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>1</XS>
															<XO>-35</XO>
															<YS>0.5</YS>
															<YO>0</YO>
														</UDim2>
														<bool name="RichText">false</bool>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>18</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<string name="Text">Linear</string>
														<Color3 name="TextColor3">
															<R>0.784313738</R>
															<G>0.784313738</G>
															<B>0.784313738</B>
														</Color3>
														<bool name="TextScaled">false</bool>
														<float name="TextSize">14</float>
														<Color3 name="TextStrokeColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="TextStrokeTransparency">1</float>
														<float name="TextTransparency">0</float>
														<token name="TextTruncate">0</token>
														<bool name="TextWrapped">false</bool>
														<token name="TextXAlignment">1</token>
														<token name="TextYAlignment">1</token>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ad6</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">9</int>
													</Properties>
												</Item>
											</Item>
											<Item class="Frame" referent="RBXc55b788c10474c35aeb22cec84a18919">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>0</R>
														<G>0</G>
														<B>0</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">1</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<int name="LayoutOrder">2</int>
													<string name="Name">TopContainer</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>0</YO>
													</UDim2>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>1</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>25</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<token name="Style">0</token>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259dc</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">6</int>
												</Properties>
												<Item class="Frame" referent="RBXf95396601bf4490480310668eff87b4a">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<int name="LayoutOrder">2</int>
														<string name="Name">Background</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>1</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>25</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259dd</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">6</int>
													</Properties>
													<Item class="Frame" referent="RBX1a098663d5e94dd8bcf4c33ad5edf497">
														<Properties>
															<bool name="Active">false</bool>
															<Vector2 name="AnchorPoint">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">0</token>
															<Color3 name="BackgroundColor3">
																<R>0</R>
																<G>0</G>
																<B>0</B>
															</Color3>
															<float name="BackgroundTransparency">0.5</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">1</int>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<int name="LayoutOrder">2</int>
															<string name="Name">Main</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<UDim2 name="Position">
																<XS>0</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>0</YO>
															</UDim2>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<bool name="Selectable">false</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<UDim2 name="Size">
																<XS>1</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>30</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<int64 name="SourceAssetId">-1</int64>
															<token name="Style">0</token>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259de</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">6</int>
														</Properties>
														<Item class="UICorner" referent="RBX5cea2f04a4bd484fb3df04d5afae26a9">
															<Properties>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<UDim name="CornerRadius">
																	<S>0</S>
																	<O>8</O>
																</UDim>
																<string name="Name">UICorner</string>
																<int64 name="SourceAssetId">-1</int64>
																<BinaryString name="Tags"></BinaryString>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b03</UniqueId>
															</Properties>
														</Item>
													</Item>
												</Item>
												<Item class="Frame" referent="RBX7518549709054f1a9a2de17a4dc651f5">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="BackgroundTransparency">0.5</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">0</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<int name="LayoutOrder">0</int>
														<string name="Name">Flat</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>25</YO>
														</UDim2>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>1</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>5</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259df</UniqueId>
														<bool name="Visible">false</bool>
														<int name="ZIndex">6</int>
													</Properties>
												</Item>
											</Item>
											<Item class="Frame" referent="RBX3fda69bef9d74372a4a376dfe6465112">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">2</token>
													<Color3 name="BackgroundColor3">
														<R>0</R>
														<G>0</G>
														<B>0</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">0</int>
													<bool name="ClipsDescendants">true</bool>
													<bool name="Draggable">false</bool>
													<int name="LayoutOrder">0</int>
													<string name="Name">Dropdown</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>30</YO>
													</UDim2>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>1</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>0</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<token name="Style">0</token>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259e0</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">6</int>
												</Properties>
												<Item class="Frame" referent="RBXb71020fd85d54fdc81d5127673b1d5c0">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>1</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882354</R>
															<G>0.164705887</G>
															<B>0.20784314</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">0</int>
														<bool name="ClipsDescendants">true</bool>
														<bool name="Draggable">false</bool>
														<int name="LayoutOrder">0</int>
														<string name="Name">BottomContainer</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>2</YS>
															<YO>-20</YO>
														</UDim2>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>1</XS>
															<XO>0</XO>
															<YS>1</YS>
															<YO>0</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259e1</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">6</int>
													</Properties>
													<Item class="Frame" referent="RBX92cf1d3544354cb48864cd025307b3d6">
														<Properties>
															<bool name="Active">false</bool>
															<Vector2 name="AnchorPoint">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">0</token>
															<Color3 name="BackgroundColor3">
																<R>0</R>
																<G>0</G>
																<B>0</B>
															</Color3>
															<float name="BackgroundTransparency">0.349999994</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">1</int>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<int name="LayoutOrder">0</int>
															<string name="Name">Rounded</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<UDim2 name="Position">
																<XS>0</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>-30</YO>
															</UDim2>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<bool name="Selectable">false</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<UDim2 name="Size">
																<XS>1</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>50</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<int64 name="SourceAssetId">-1</int64>
															<token name="Style">0</token>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259e2</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">6</int>
														</Properties>
														<Item class="UICorner" referent="RBXfd50b7537c2b4d2c91dc72b942176b6f">
															<Properties>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<UDim name="CornerRadius">
																	<S>0</S>
																	<O>8</O>
																</UDim>
																<string name="Name">UICorner</string>
																<int64 name="SourceAssetId">-1</int64>
																<BinaryString name="Tags"></BinaryString>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b04</UniqueId>
															</Properties>
														</Item>
													</Item>
												</Item>
												<Item class="Frame" referent="RBX674bcb60f75e4f7ab7ae6cc3e8247b9f">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">2</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<int name="LayoutOrder">0</int>
														<string name="Name">Options</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>1</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259e3</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">6</int>
													</Properties>
													<Item class="UIListLayout" referent="RBX763f1571aa804c7aa263f899dded9e16">
														<Properties>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<token name="FillDirection">1</token>
															<token name="HorizontalAlignment">0</token>
															<string name="Name">UIListLayout</string>
															<UDim name="Padding">
																<S>0</S>
																<O>3</O>
															</UDim>
															<token name="SortOrder">2</token>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b2a</UniqueId>
															<token name="VerticalAlignment">1</token>
														</Properties>
													</Item>
												</Item>
												<Item class="UIPadding" referent="RBX50360b463e4e498e8617cc6ce14441e2">
													<Properties>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<string name="Name">UIPadding</string>
														<UDim name="PaddingBottom">
															<S>0</S>
															<O>55</O>
														</UDim>
														<UDim name="PaddingLeft">
															<S>0</S>
															<O>0</O>
														</UDim>
														<UDim name="PaddingRight">
															<S>0</S>
															<O>0</O>
														</UDim>
														<UDim name="PaddingTop">
															<S>0</S>
															<O>0</O>
														</UDim>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b35</UniqueId>
													</Properties>
												</Item>
												<Item class="Frame" referent="RBXc6782fbdeeb8470786436fb6e9fa5ef8">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="BackgroundTransparency">0.349999994</float>
														<Color3 name="BorderColor3">
															<R>0.105882354</R>
															<G>0.164705887</G>
															<B>0.20784314</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">0</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<int name="LayoutOrder">0</int>
														<string name="Name">Frame</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>1</XS>
															<XO>0</XO>
															<YS>1</YS>
															<YO>-20</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259e4</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">6</int>
													</Properties>
												</Item>
											</Item>
										</Item>
										<Item class="Frame" referent="RBXd4af2b5d58884d19a4f549f45f3c2bcd">
											<Properties>
												<bool name="Active">true</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="BackgroundTransparency">0.5</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">0</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<int name="LayoutOrder">2</int>
												<string name="Name">FadeoutTime</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0.0327868834</XS>
													<XO>0</XO>
													<YS>0.0439999998</YS>
													<YO>0</YO>
												</UDim2>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">true</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>-10</XO>
													<YS>0</YS>
													<YO>55</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259e5</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">6</int>
											</Properties>
											<Item class="Frame" referent="RBXe10a3665ee454f8e991781346c0e3f46">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">1</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<int name="LayoutOrder">0</int>
													<string name="Name">Center</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>0</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>1</XS>
														<XO>0</XO>
														<YS>0.75</YS>
														<YO>0</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<token name="Style">0</token>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259e6</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">6</int>
												</Properties>
												<Item class="Frame" referent="RBX1c235919d5d84f3887af75ffb82eef4d">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0.5</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">0</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<int name="LayoutOrder">0</int>
														<string name="Name">Title</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0.5</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0.949999988</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>20</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259e7</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">6</int>
													</Properties>
													<Item class="ImageLabel" referent="RBXec16cffcaf3b46efb14930aad06ab9c3">
														<Properties>
															<bool name="Active">false</bool>
															<Vector2 name="AnchorPoint">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">0</token>
															<Color3 name="BackgroundColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<float name="BackgroundTransparency">1</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">1</int>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<Content name="Image"><url>rbxassetid://8677983647</url></Content>
															<Color3 name="ImageColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<Vector2 name="ImageRectOffset">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<Vector2 name="ImageRectSize">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<float name="ImageTransparency">0</float>
															<int name="LayoutOrder">0</int>
															<string name="Name">Icon</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<UDim2 name="Position">
																<XS>0</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>0</YO>
															</UDim2>
															<token name="ResampleMode">0</token>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<token name="ScaleType">0</token>
															<bool name="Selectable">false</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<UDim2 name="Size">
																<XS>0</XS>
																<XO>20</XO>
																<YS>0</YS>
																<YO>20</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<Rect2D name="SliceCenter">
																<min>
																	<X>0</X>
																	<Y>0</Y>
																</min>
																<max>
																	<X>0</X>
																	<Y>0</Y>
																</max>
															</Rect2D>
															<float name="SliceScale">1</float>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UDim2 name="TileSize">
																<XS>1</XS>
																<XO>0</XO>
																<YS>1</YS>
																<YO>0</YO>
															</UDim2>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a21</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">6</int>
														</Properties>
													</Item>
													<Item class="TextLabel" referent="RBXa8af437f45a742bc994696e38c1c4426">
														<Properties>
															<bool name="Active">false</bool>
															<Vector2 name="AnchorPoint">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">0</token>
															<Color3 name="BackgroundColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<float name="BackgroundTransparency">1</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">1</int>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<token name="Font">19</token>
															<Font name="FontFace"></Font>
															<int name="LayoutOrder">0</int>
															<float name="LineHeight">1</float>
															<int name="MaxVisibleGraphemes">-1</int>
															<string name="Name">Label</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<UDim2 name="Position">
																<XS>0</XS>
																<XO>25</XO>
																<YS>0</YS>
																<YO>0</YO>
															</UDim2>
															<bool name="RichText">false</bool>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<bool name="Selectable">false</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<UDim2 name="Size">
																<XS>0.5</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>18</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<string name="Text">Fade Time</string>
															<Color3 name="TextColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<bool name="TextScaled">false</bool>
															<float name="TextSize">14</float>
															<Color3 name="TextStrokeColor3">
																<R>0</R>
																<G>0</G>
																<B>0</B>
															</Color3>
															<float name="TextStrokeTransparency">1</float>
															<float name="TextTransparency">0</float>
															<token name="TextTruncate">0</token>
															<bool name="TextWrapped">false</bool>
															<token name="TextXAlignment">0</token>
															<token name="TextYAlignment">1</token>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ad7</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">6</int>
														</Properties>
													</Item>
												</Item>
												<Item class="Frame" referent="RBXd4d848f3090648308a27e865284bb8fa">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0.5</X>
															<Y>1</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<int name="LayoutOrder">0</int>
														<string name="Name">Actual</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0.5</XS>
															<XO>0</XO>
															<YS>1</YS>
															<YO>5</YO>
														</UDim2>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0.949999988</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>25</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259e8</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">6</int>
													</Properties>
													<Item class="TextBox" referent="RBXa44a24a94ab443579326bcf3905e70ca">
														<Properties>
															<bool name="Active">true</bool>
															<Vector2 name="AnchorPoint">
																<X>1</X>
																<Y>0.5</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">0</token>
															<Color3 name="BackgroundColor3">
																<R>0</R>
																<G>0</G>
																<B>0</B>
															</Color3>
															<float name="BackgroundTransparency">0.5</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">0</int>
															<bool name="ClearTextOnFocus">true</bool>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<token name="Font">18</token>
															<Font name="FontFace"></Font>
															<int name="LayoutOrder">0</int>
															<float name="LineHeight">1</float>
															<int name="MaxVisibleGraphemes">-1</int>
															<bool name="MultiLine">false</bool>
															<string name="Name">Amount</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<Color3 name="PlaceholderColor3">
																<R>0.862745106</R>
																<G>0.862745106</G>
																<B>0.862745106</B>
															</Color3>
															<string name="PlaceholderText">%</string>
															<UDim2 name="Position">
																<XS>1</XS>
																<XO>0</XO>
																<YS>0.5</YS>
																<YO>0</YO>
															</UDim2>
															<bool name="RichText">false</bool>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<bool name="Selectable">true</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<bool name="ShowNativeInput">true</bool>
															<UDim2 name="Size">
																<XS>0.125</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>20</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<string name="Text">_</string>
															<Color3 name="TextColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<bool name="TextEditable">true</bool>
															<bool name="TextScaled">false</bool>
															<float name="TextSize">14</float>
															<Color3 name="TextStrokeColor3">
																<R>0</R>
																<G>0</G>
																<B>0</B>
															</Color3>
															<float name="TextStrokeTransparency">1</float>
															<float name="TextTransparency">0</float>
															<token name="TextTruncate">1</token>
															<bool name="TextWrapped">false</bool>
															<token name="TextXAlignment">2</token>
															<token name="TextYAlignment">1</token>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aaa</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">6</int>
														</Properties>
														<Item class="UICorner" referent="RBX9a86c903a20b460ebe1593f7dc9c2e7a">
															<Properties>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<UDim name="CornerRadius">
																	<S>0</S>
																	<O>8</O>
																</UDim>
																<string name="Name">UICorner</string>
																<int64 name="SourceAssetId">-1</int64>
																<BinaryString name="Tags"></BinaryString>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b05</UniqueId>
															</Properties>
														</Item>
														<Item class="UIPadding" referent="RBX6806077193be496f9479cf6308fd2c02">
															<Properties>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<string name="Name">UIPadding</string>
																<UDim name="PaddingBottom">
																	<S>0</S>
																	<O>0</O>
																</UDim>
																<UDim name="PaddingLeft">
																	<S>0</S>
																	<O>5</O>
																</UDim>
																<UDim name="PaddingRight">
																	<S>0</S>
																	<O>5</O>
																</UDim>
																<UDim name="PaddingTop">
																	<S>0</S>
																	<O>0</O>
																</UDim>
																<int64 name="SourceAssetId">-1</int64>
																<BinaryString name="Tags"></BinaryString>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b36</UniqueId>
															</Properties>
														</Item>
													</Item>
													<Item class="Frame" referent="RBX8a9ffa1e05f348d8ae3180285b86f364">
														<Properties>
															<bool name="Active">false</bool>
															<Vector2 name="AnchorPoint">
																<X>0</X>
																<Y>0.5</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">0</token>
															<Color3 name="BackgroundColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<float name="BackgroundTransparency">0</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">0</int>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<int name="LayoutOrder">0</int>
															<string name="Name">Bar</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<UDim2 name="Position">
																<XS>0</XS>
																<XO>0</XO>
																<YS>0.5</YS>
																<YO>0</YO>
															</UDim2>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<bool name="Selectable">false</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<UDim2 name="Size">
																<XS>0.850000024</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>10</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<int64 name="SourceAssetId">-1</int64>
															<token name="Style">0</token>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259e9</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">6</int>
														</Properties>
														<Item class="UICorner" referent="RBXbc6d4a752a5642ae9a1bc7b249a73820">
															<Properties>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<UDim name="CornerRadius">
																	<S>1</S>
																	<O>0</O>
																</UDim>
																<string name="Name">Ignore</string>
																<int64 name="SourceAssetId">-1</int64>
																<BinaryString name="Tags"></BinaryString>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b06</UniqueId>
															</Properties>
														</Item>
														<Item class="TextButton" referent="RBXeacf380aabd24f1b95a8214c74062fbd">
															<Properties>
																<bool name="Active">true</bool>
																<Vector2 name="AnchorPoint">
																	<X>0.5</X>
																	<Y>0.5</Y>
																</Vector2>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<bool name="AutoButtonColor">true</bool>
																<bool name="AutoLocalize">true</bool>
																<token name="AutomaticSize">0</token>
																<Color3 name="BackgroundColor3">
																	<R>0.117647059</R>
																	<G>0.784313738</G>
																	<B>0.588235319</B>
																</Color3>
																<float name="BackgroundTransparency">0</float>
																<Color3 name="BorderColor3">
																	<R>0.105882362</R>
																	<G>0.164705887</G>
																	<B>0.207843155</B>
																</Color3>
																<token name="BorderMode">0</token>
																<int name="BorderSizePixel">0</int>
																<bool name="ClipsDescendants">false</bool>
																<bool name="Draggable">false</bool>
																<token name="Font">3</token>
																<Font name="FontFace"></Font>
																<int name="LayoutOrder">0</int>
																<float name="LineHeight">1</float>
																<int name="MaxVisibleGraphemes">-1</int>
																<bool name="Modal">false</bool>
																<string name="Name">Button</string>
																<Ref name="NextSelectionDown">null</Ref>
																<Ref name="NextSelectionLeft">null</Ref>
																<Ref name="NextSelectionRight">null</Ref>
																<Ref name="NextSelectionUp">null</Ref>
																<UDim2 name="Position">
																	<XS>0</XS>
																	<XO>10</XO>
																	<YS>0.5</YS>
																	<YO>0</YO>
																</UDim2>
																<bool name="RichText">false</bool>
																<Ref name="RootLocalizationTable">null</Ref>
																<float name="Rotation">0</float>
																<bool name="Selectable">true</bool>
																<bool name="Selected">false</bool>
																<Ref name="SelectionImageObject">null</Ref>
																<UDim2 name="Size">
																	<XS>0</XS>
																	<XO>20</XO>
																	<YS>0</YS>
																	<YO>20</YO>
																</UDim2>
																<token name="SizeConstraint">0</token>
																<int64 name="SourceAssetId">-1</int64>
																<token name="Style">0</token>
																<BinaryString name="Tags"></BinaryString>
																<string name="Text"></string>
																<Color3 name="TextColor3">
																	<R>0</R>
																	<G>0</G>
																	<B>0</B>
																</Color3>
																<bool name="TextScaled">false</bool>
																<float name="TextSize">14</float>
																<Color3 name="TextStrokeColor3">
																	<R>0</R>
																	<G>0</G>
																	<B>0</B>
																</Color3>
																<float name="TextStrokeTransparency">1</float>
																<float name="TextTransparency">0</float>
																<token name="TextTruncate">0</token>
																<bool name="TextWrapped">false</bool>
																<token name="TextXAlignment">2</token>
																<token name="TextYAlignment">1</token>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025abc</UniqueId>
																<bool name="Visible">true</bool>
																<int name="ZIndex">7</int>
															</Properties>
															<Item class="UICorner" referent="RBX80933b6893784cbaa68b7221c683592c">
																<Properties>
																	<BinaryString name="AttributesSerialize"></BinaryString>
																	<UDim name="CornerRadius">
																		<S>1</S>
																		<O>0</O>
																	</UDim>
																	<string name="Name">Ignore</string>
																	<int64 name="SourceAssetId">-1</int64>
																	<BinaryString name="Tags"></BinaryString>
																	<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b07</UniqueId>
																</Properties>
															</Item>
														</Item>
														<Item class="Frame" referent="RBX7111c481137c4769b44fe401ec020e67">
															<Properties>
																<bool name="Active">false</bool>
																<Vector2 name="AnchorPoint">
																	<X>0</X>
																	<Y>0</Y>
																</Vector2>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<bool name="AutoLocalize">true</bool>
																<token name="AutomaticSize">0</token>
																<Color3 name="BackgroundColor3">
																	<R>0.0980392247</R>
																	<G>0.666666687</G>
																	<B>0.498039246</B>
																</Color3>
																<float name="BackgroundTransparency">0</float>
																<Color3 name="BorderColor3">
																	<R>0.105882362</R>
																	<G>0.164705887</G>
																	<B>0.207843155</B>
																</Color3>
																<token name="BorderMode">0</token>
																<int name="BorderSizePixel">0</int>
																<bool name="ClipsDescendants">false</bool>
																<bool name="Draggable">false</bool>
																<int name="LayoutOrder">0</int>
																<string name="Name">Progress</string>
																<Ref name="NextSelectionDown">null</Ref>
																<Ref name="NextSelectionLeft">null</Ref>
																<Ref name="NextSelectionRight">null</Ref>
																<Ref name="NextSelectionUp">null</Ref>
																<UDim2 name="Position">
																	<XS>0</XS>
																	<XO>0</XO>
																	<YS>0</YS>
																	<YO>0</YO>
																</UDim2>
																<Ref name="RootLocalizationTable">null</Ref>
																<float name="Rotation">0</float>
																<bool name="Selectable">false</bool>
																<Ref name="SelectionImageObject">null</Ref>
																<UDim2 name="Size">
																	<XS>0</XS>
																	<XO>0</XO>
																	<YS>1</YS>
																	<YO>0</YO>
																</UDim2>
																<token name="SizeConstraint">0</token>
																<int64 name="SourceAssetId">-1</int64>
																<token name="Style">0</token>
																<BinaryString name="Tags"></BinaryString>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259ea</UniqueId>
																<bool name="Visible">true</bool>
																<int name="ZIndex">6</int>
															</Properties>
															<Item class="UICorner" referent="RBX2627053fd60f4bdeb9e286eca8f6dbf4">
																<Properties>
																	<BinaryString name="AttributesSerialize"></BinaryString>
																	<UDim name="CornerRadius">
																		<S>1</S>
																		<O>0</O>
																	</UDim>
																	<string name="Name">Ignore</string>
																	<int64 name="SourceAssetId">-1</int64>
																	<BinaryString name="Tags"></BinaryString>
																	<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b08</UniqueId>
																</Properties>
															</Item>
														</Item>
													</Item>
												</Item>
											</Item>
											<Item class="UICorner" referent="RBX2f5094cfeb9549a0a74150fbea75e350">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<UDim name="CornerRadius">
														<S>0</S>
														<O>8</O>
													</UDim>
													<string name="Name">UICorner</string>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b09</UniqueId>
												</Properties>
											</Item>
										</Item>
										<Item class="Frame" referent="RBXaa12494b20154cbf99788ccedd986e45">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">true</bool>
												<bool name="Draggable">false</bool>
												<int name="LayoutOrder">1</int>
												<string name="Name">Font</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>-10</XO>
													<YS>0</YS>
													<YO>30</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259eb</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">6</int>
											</Properties>
											<Item class="Frame" referent="RBX1a9ffecfc4c84bb7b94bb93ccb9dfddf">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0.5</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">0</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<int name="LayoutOrder">0</int>
													<string name="Name">Title</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0.5</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>15</YO>
													</UDim2>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0.949999988</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>20</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<token name="Style">0</token>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259ec</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">8</int>
												</Properties>
												<Item class="ImageLabel" referent="RBXe7eb965ca035412aa41eee183aafc8ae">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<Content name="Image"><url>rbxassetid://8678012976</url></Content>
														<Color3 name="ImageColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<Vector2 name="ImageRectOffset">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<Vector2 name="ImageRectSize">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<float name="ImageTransparency">0</float>
														<int name="LayoutOrder">0</int>
														<string name="Name">Icon</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<token name="ResampleMode">0</token>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<token name="ScaleType">0</token>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0</XS>
															<XO>20</XO>
															<YS>0</YS>
															<YO>20</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<Rect2D name="SliceCenter">
															<min>
																<X>0</X>
																<Y>0</Y>
															</min>
															<max>
																<X>0</X>
																<Y>0</Y>
															</max>
														</Rect2D>
														<float name="SliceScale">1</float>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<UDim2 name="TileSize">
															<XS>1</XS>
															<XO>0</XO>
															<YS>1</YS>
															<YO>0</YO>
														</UDim2>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a22</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">9</int>
													</Properties>
												</Item>
												<Item class="TextLabel" referent="RBXde959a65bcbe4139a231133e24d88bf9">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">1</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<token name="Font">19</token>
														<Font name="FontFace"></Font>
														<int name="LayoutOrder">0</int>
														<float name="LineHeight">1</float>
														<int name="MaxVisibleGraphemes">-1</int>
														<string name="Name">Label</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>25</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<bool name="RichText">false</bool>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>18</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<string name="Text">Font</string>
														<Color3 name="TextColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<bool name="TextScaled">false</bool>
														<float name="TextSize">14</float>
														<Color3 name="TextStrokeColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="TextStrokeTransparency">1</float>
														<float name="TextTransparency">0</float>
														<token name="TextTruncate">0</token>
														<bool name="TextWrapped">false</bool>
														<token name="TextXAlignment">0</token>
														<token name="TextYAlignment">1</token>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ad8</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">9</int>
													</Properties>
												</Item>
												<Item class="TextButton" referent="RBXa85d9de8a5454473b3f1a51b036085b6">
													<Properties>
														<bool name="Active">true</bool>
														<Vector2 name="AnchorPoint">
															<X>1</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoButtonColor">true</bool>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="BackgroundTransparency">0</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">0</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<token name="Font">3</token>
														<Font name="FontFace"></Font>
														<int name="LayoutOrder">0</int>
														<float name="LineHeight">1</float>
														<int name="MaxVisibleGraphemes">-1</int>
														<bool name="Modal">false</bool>
														<string name="Name">Drop</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>1</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<bool name="RichText">false</bool>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">true</bool>
														<bool name="Selected">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0</XS>
															<XO>30</XO>
															<YS>0</YS>
															<YO>20</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<string name="Text"></string>
														<Color3 name="TextColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<bool name="TextScaled">false</bool>
														<float name="TextSize">14</float>
														<Color3 name="TextStrokeColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="TextStrokeTransparency">1</float>
														<float name="TextTransparency">0</float>
														<token name="TextTruncate">0</token>
														<bool name="TextWrapped">false</bool>
														<token name="TextXAlignment">2</token>
														<token name="TextYAlignment">1</token>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025abd</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">9</int>
													</Properties>
													<Item class="UICorner" referent="RBX1fa152d6d26b43519774b894bbedf6c1">
														<Properties>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<UDim name="CornerRadius">
																<S>0</S>
																<O>8</O>
															</UDim>
															<string name="Name">UICorner</string>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b0a</UniqueId>
														</Properties>
													</Item>
													<Item class="ImageLabel" referent="RBX6c34bfb5ad2349a1beebb874a5b9a501">
														<Properties>
															<bool name="Active">false</bool>
															<Vector2 name="AnchorPoint">
																<X>0.5</X>
																<Y>0.5</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">0</token>
															<Color3 name="BackgroundColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<float name="BackgroundTransparency">1</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">1</int>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<Content name="Image"><url>rbxassetid://8677555693</url></Content>
															<Color3 name="ImageColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<Vector2 name="ImageRectOffset">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<Vector2 name="ImageRectSize">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<float name="ImageTransparency">0</float>
															<int name="LayoutOrder">0</int>
															<string name="Name">Icon</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<UDim2 name="Position">
																<XS>0.5</XS>
																<XO>0</XO>
																<YS>0.5</YS>
																<YO>0</YO>
															</UDim2>
															<token name="ResampleMode">0</token>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<token name="ScaleType">0</token>
															<bool name="Selectable">false</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<UDim2 name="Size">
																<XS>0</XS>
																<XO>25</XO>
																<YS>0</YS>
																<YO>25</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<Rect2D name="SliceCenter">
																<min>
																	<X>0</X>
																	<Y>0</Y>
																</min>
																<max>
																	<X>0</X>
																	<Y>0</Y>
																</max>
															</Rect2D>
															<float name="SliceScale">1</float>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UDim2 name="TileSize">
																<XS>1</XS>
																<XO>0</XO>
																<YS>1</YS>
																<YO>0</YO>
															</UDim2>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a23</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">10</int>
														</Properties>
													</Item>
												</Item>
												<Item class="TextLabel" referent="RBXaa2ef80b0d4d415ab42a3cfe595ccea6">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>1</X>
															<Y>0.5</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">1</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<token name="Font">17</token>
														<Font name="FontFace"></Font>
														<int name="LayoutOrder">0</int>
														<float name="LineHeight">1</float>
														<int name="MaxVisibleGraphemes">-1</int>
														<string name="Name">Selected</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>1</XS>
															<XO>-35</XO>
															<YS>0.5</YS>
															<YO>0</YO>
														</UDim2>
														<bool name="RichText">false</bool>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>18</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<string name="Text">GothamSemibold</string>
														<Color3 name="TextColor3">
															<R>0.784313738</R>
															<G>0.784313738</G>
															<B>0.784313738</B>
														</Color3>
														<bool name="TextScaled">false</bool>
														<float name="TextSize">14</float>
														<Color3 name="TextStrokeColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="TextStrokeTransparency">1</float>
														<float name="TextTransparency">0</float>
														<token name="TextTruncate">0</token>
														<bool name="TextWrapped">false</bool>
														<token name="TextXAlignment">1</token>
														<token name="TextYAlignment">1</token>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ad9</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">9</int>
													</Properties>
												</Item>
											</Item>
											<Item class="Frame" referent="RBX70bef79454ad47af923cca3dac552ade">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>0</R>
														<G>0</G>
														<B>0</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">1</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<int name="LayoutOrder">2</int>
													<string name="Name">TopContainer</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>0</YO>
													</UDim2>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>1</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>25</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<token name="Style">0</token>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259ed</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">6</int>
												</Properties>
												<Item class="Frame" referent="RBX84b70525306d4a07be72295a2d0270a8">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<int name="LayoutOrder">2</int>
														<string name="Name">Background</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>1</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>25</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259ee</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">6</int>
													</Properties>
													<Item class="Frame" referent="RBX8367facbbac942f9828d5471d292e047">
														<Properties>
															<bool name="Active">false</bool>
															<Vector2 name="AnchorPoint">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">0</token>
															<Color3 name="BackgroundColor3">
																<R>0</R>
																<G>0</G>
																<B>0</B>
															</Color3>
															<float name="BackgroundTransparency">0.5</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">1</int>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<int name="LayoutOrder">2</int>
															<string name="Name">Main</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<UDim2 name="Position">
																<XS>0</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>0</YO>
															</UDim2>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<bool name="Selectable">false</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<UDim2 name="Size">
																<XS>1</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>30</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<int64 name="SourceAssetId">-1</int64>
															<token name="Style">0</token>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259ef</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">6</int>
														</Properties>
														<Item class="UICorner" referent="RBXa9e8e9a939ee47d3a3f56acc1e9d0a44">
															<Properties>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<UDim name="CornerRadius">
																	<S>0</S>
																	<O>8</O>
																</UDim>
																<string name="Name">UICorner</string>
																<int64 name="SourceAssetId">-1</int64>
																<BinaryString name="Tags"></BinaryString>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b0b</UniqueId>
															</Properties>
														</Item>
													</Item>
												</Item>
												<Item class="Frame" referent="RBX33de4b4bc1994631a454cfe25d8becfd">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="BackgroundTransparency">0.5</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">0</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<int name="LayoutOrder">0</int>
														<string name="Name">Flat</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>25</YO>
														</UDim2>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>1</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>5</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259f0</UniqueId>
														<bool name="Visible">false</bool>
														<int name="ZIndex">6</int>
													</Properties>
												</Item>
											</Item>
											<Item class="Frame" referent="RBX02c6d1086468417396dd26a1c9d33073">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">2</token>
													<Color3 name="BackgroundColor3">
														<R>0</R>
														<G>0</G>
														<B>0</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">0</int>
													<bool name="ClipsDescendants">true</bool>
													<bool name="Draggable">false</bool>
													<int name="LayoutOrder">0</int>
													<string name="Name">Dropdown</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>30</YO>
													</UDim2>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>1</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>0</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<token name="Style">0</token>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259f1</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">6</int>
												</Properties>
												<Item class="Frame" referent="RBX4a464aa5e4c64dcea477b980eb1ad2cc">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>1</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882354</R>
															<G>0.164705887</G>
															<B>0.20784314</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">0</int>
														<bool name="ClipsDescendants">true</bool>
														<bool name="Draggable">false</bool>
														<int name="LayoutOrder">0</int>
														<string name="Name">BottomContainer</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>2</YS>
															<YO>-20</YO>
														</UDim2>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>1</XS>
															<XO>0</XO>
															<YS>1</YS>
															<YO>0</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259f2</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">6</int>
													</Properties>
													<Item class="Frame" referent="RBX0298c20c0bf94921b2614305b84aabad">
														<Properties>
															<bool name="Active">false</bool>
															<Vector2 name="AnchorPoint">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">0</token>
															<Color3 name="BackgroundColor3">
																<R>0</R>
																<G>0</G>
																<B>0</B>
															</Color3>
															<float name="BackgroundTransparency">0.349999994</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">1</int>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<int name="LayoutOrder">0</int>
															<string name="Name">Rounded</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<UDim2 name="Position">
																<XS>0</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>-30</YO>
															</UDim2>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<bool name="Selectable">false</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<UDim2 name="Size">
																<XS>1</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>50</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<int64 name="SourceAssetId">-1</int64>
															<token name="Style">0</token>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259f3</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">6</int>
														</Properties>
														<Item class="UICorner" referent="RBX7ead573433cd43269e44fc1568de39ce">
															<Properties>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<UDim name="CornerRadius">
																	<S>0</S>
																	<O>8</O>
																</UDim>
																<string name="Name">UICorner</string>
																<int64 name="SourceAssetId">-1</int64>
																<BinaryString name="Tags"></BinaryString>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b0c</UniqueId>
															</Properties>
														</Item>
													</Item>
												</Item>
												<Item class="Frame" referent="RBX4684c881325546d5bce3d32a87beb5c1">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">2</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<int name="LayoutOrder">0</int>
														<string name="Name">Options</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>1</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259f4</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">6</int>
													</Properties>
													<Item class="UIListLayout" referent="RBX18b6af0cf945411785ed3f5c6520e863">
														<Properties>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<token name="FillDirection">1</token>
															<token name="HorizontalAlignment">0</token>
															<string name="Name">UIListLayout</string>
															<UDim name="Padding">
																<S>0</S>
																<O>3</O>
															</UDim>
															<token name="SortOrder">2</token>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b2b</UniqueId>
															<token name="VerticalAlignment">1</token>
														</Properties>
													</Item>
												</Item>
												<Item class="UIPadding" referent="RBX42e6be99ee8f433bab05cd1cafa67b36">
													<Properties>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<string name="Name">UIPadding</string>
														<UDim name="PaddingBottom">
															<S>0</S>
															<O>55</O>
														</UDim>
														<UDim name="PaddingLeft">
															<S>0</S>
															<O>0</O>
														</UDim>
														<UDim name="PaddingRight">
															<S>0</S>
															<O>0</O>
														</UDim>
														<UDim name="PaddingTop">
															<S>0</S>
															<O>0</O>
														</UDim>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b37</UniqueId>
													</Properties>
												</Item>
												<Item class="Frame" referent="RBXbce9e3901caf41fa9663f3a7f1155813">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="BackgroundTransparency">0.349999994</float>
														<Color3 name="BorderColor3">
															<R>0.105882354</R>
															<G>0.164705887</G>
															<B>0.20784314</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">0</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<int name="LayoutOrder">0</int>
														<string name="Name">Frame</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>1</XS>
															<XO>0</XO>
															<YS>1</YS>
															<YO>-20</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259f5</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">6</int>
													</Properties>
												</Item>
											</Item>
										</Item>
										<Item class="Frame" referent="RBXa2ddbb9685b94d45a96e146e11f043f1">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="BackgroundTransparency">0.5</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<int name="LayoutOrder">-1</int>
												<string name="Name">Enabled</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>-10</XO>
													<YS>0</YS>
													<YO>30</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259f6</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">6</int>
											</Properties>
											<Item class="Frame" referent="RBX06762c6fe00b45ad84615a7ca6afbff4">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0.5</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">0</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<int name="LayoutOrder">0</int>
													<string name="Name">Title</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0.5</XS>
														<XO>0</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0.949999988</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>20</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<token name="Style">0</token>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259f7</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">6</int>
												</Properties>
												<Item class="ImageLabel" referent="RBXd78fafa47c80477d99bf6088bc68378a">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<Content name="Image"><url>rbxassetid://8685962752</url></Content>
														<Color3 name="ImageColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<Vector2 name="ImageRectOffset">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<Vector2 name="ImageRectSize">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<float name="ImageTransparency">0</float>
														<int name="LayoutOrder">0</int>
														<string name="Name">Icon</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<token name="ResampleMode">0</token>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<token name="ScaleType">0</token>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0</XS>
															<XO>20</XO>
															<YS>0</YS>
															<YO>20</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<Rect2D name="SliceCenter">
															<min>
																<X>0</X>
																<Y>0</Y>
															</min>
															<max>
																<X>0</X>
																<Y>0</Y>
															</max>
														</Rect2D>
														<float name="SliceScale">1</float>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<UDim2 name="TileSize">
															<XS>1</XS>
															<XO>0</XO>
															<YS>1</YS>
															<YO>0</YO>
														</UDim2>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a24</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">6</int>
													</Properties>
												</Item>
												<Item class="TextLabel" referent="RBXc2c570d6f3294eaca4ee2ed18038f636">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<token name="Font">19</token>
														<Font name="FontFace"></Font>
														<int name="LayoutOrder">0</int>
														<float name="LineHeight">1</float>
														<int name="MaxVisibleGraphemes">-1</int>
														<string name="Name">Label</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>25</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<bool name="RichText">false</bool>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0.5</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>18</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<string name="Text">Enabled</string>
														<Color3 name="TextColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<bool name="TextScaled">false</bool>
														<float name="TextSize">14</float>
														<Color3 name="TextStrokeColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="TextStrokeTransparency">1</float>
														<float name="TextTransparency">0</float>
														<token name="TextTruncate">0</token>
														<bool name="TextWrapped">false</bool>
														<token name="TextXAlignment">0</token>
														<token name="TextYAlignment">1</token>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ada</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">6</int>
													</Properties>
												</Item>
											</Item>
											<Item class="UICorner" referent="RBX50d6b818f94a48abb6b1fb04405c112f">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<UDim name="CornerRadius">
														<S>0</S>
														<O>8</O>
													</UDim>
													<string name="Name">UICorner</string>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b0d</UniqueId>
												</Properties>
											</Item>
											<Item class="Frame" referent="RBXc5f34a77a4fb41b4b33b46c4842ac077">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>1</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>0.282352954</R>
														<G>0.686274529</G>
														<B>0.941176474</B>
													</Color3>
													<float name="BackgroundTransparency">0</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">0</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<int name="LayoutOrder">0</int>
													<string name="Name">Toggle</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>1</XS>
														<XO>-5</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0</XS>
														<XO>40</XO>
														<YS>0</YS>
														<YO>18</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<token name="Style">0</token>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259f8</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">6</int>
												</Properties>
												<Item class="UICorner" referent="RBXe5bf65ec002e4cbabac1fc67423f5f5b">
													<Properties>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<UDim name="CornerRadius">
															<S>1</S>
															<O>0</O>
														</UDim>
														<string name="Name">Ignore</string>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b0e</UniqueId>
													</Properties>
												</Item>
												<Item class="TextButton" referent="RBX131c595d68e746dc9740720f6f5fcc27">
													<Properties>
														<bool name="Active">true</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoButtonColor">true</bool>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<token name="Font">3</token>
														<Font name="FontFace"></Font>
														<int name="LayoutOrder">0</int>
														<float name="LineHeight">1</float>
														<int name="MaxVisibleGraphemes">-1</int>
														<bool name="Modal">false</bool>
														<string name="Name">Zone</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<bool name="RichText">false</bool>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">true</bool>
														<bool name="Selected">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>1</XS>
															<XO>0</XO>
															<YS>1</YS>
															<YO>0</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<string name="Text"></string>
														<Color3 name="TextColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<bool name="TextScaled">false</bool>
														<float name="TextSize">14</float>
														<Color3 name="TextStrokeColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="TextStrokeTransparency">1</float>
														<float name="TextTransparency">0</float>
														<token name="TextTruncate">0</token>
														<bool name="TextWrapped">false</bool>
														<token name="TextXAlignment">2</token>
														<token name="TextYAlignment">1</token>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025abe</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">8</int>
													</Properties>
													<Item class="UICorner" referent="RBXdb4cc373d955494f9a96d3dec1c3172f">
														<Properties>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<UDim name="CornerRadius">
																<S>1</S>
																<O>0</O>
															</UDim>
															<string name="Name">Ignore</string>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b0f</UniqueId>
														</Properties>
													</Item>
												</Item>
												<Item class="Frame" referent="RBX5bbf57561e0d422c9bca8a2b488f6099">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>1</X>
															<Y>0.5</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">0</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<int name="LayoutOrder">0</int>
														<string name="Name">Rounded</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>1</XS>
															<XO>-3</XO>
															<YS>0.5</YS>
															<YO>0</YO>
														</UDim2>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0</XS>
															<XO>14</XO>
															<YS>0</YS>
															<YO>14</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259f9</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">6</int>
													</Properties>
													<Item class="UICorner" referent="RBX781ab325b2034aa8b9ade3e31d407e10">
														<Properties>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<UDim name="CornerRadius">
																<S>1</S>
																<O>0</O>
															</UDim>
															<string name="Name">Ignore</string>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b10</UniqueId>
														</Properties>
													</Item>
												</Item>
											</Item>
										</Item>
									</Item>
								</Item>
								<Item class="Frame" referent="RBX10c9ac5df9cc4ece8602490272ac316e">
									<Properties>
										<bool name="Active">false</bool>
										<Vector2 name="AnchorPoint">
											<X>0</X>
											<Y>0</Y>
										</Vector2>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<bool name="AutoLocalize">true</bool>
										<token name="AutomaticSize">0</token>
										<Color3 name="BackgroundColor3">
											<R>1</R>
											<G>1</G>
											<B>1</B>
										</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">
											<R>0.105882362</R>
											<G>0.164705887</G>
											<B>0.207843155</B>
										</Color3>
										<token name="BorderMode">0</token>
										<int name="BorderSizePixel">1</int>
										<bool name="ClipsDescendants">false</bool>
										<bool name="Draggable">false</bool>
										<int name="LayoutOrder">0</int>
										<string name="Name">QuickChat</string>
										<Ref name="NextSelectionDown">null</Ref>
										<Ref name="NextSelectionLeft">null</Ref>
										<Ref name="NextSelectionRight">null</Ref>
										<Ref name="NextSelectionUp">null</Ref>
										<UDim2 name="Position">
											<XS>1</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<Ref name="RootLocalizationTable">null</Ref>
										<float name="Rotation">0</float>
										<bool name="Selectable">false</bool>
										<Ref name="SelectionImageObject">null</Ref>
										<UDim2 name="Size">
											<XS>1</XS>
											<XO>0</XO>
											<YS>1</YS>
											<YO>0</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<int64 name="SourceAssetId">-1</int64>
										<token name="Style">0</token>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259fa</UniqueId>
										<bool name="Visible">true</bool>
										<int name="ZIndex">6</int>
									</Properties>
									<Item class="TextLabel" referent="RBXffadac07c81a48db850127e8f11b8ccd">
										<Properties>
											<bool name="Active">false</bool>
											<Vector2 name="AnchorPoint">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticSize">0</token>
											<Color3 name="BackgroundColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">
												<R>0.105882362</R>
												<G>0.164705887</G>
												<B>0.207843155</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">1</int>
											<bool name="ClipsDescendants">false</bool>
											<bool name="Draggable">false</bool>
											<token name="Font">18</token>
											<Font name="FontFace"></Font>
											<int name="LayoutOrder">0</int>
											<float name="LineHeight">1</float>
											<int name="MaxVisibleGraphemes">-1</int>
											<string name="Name">Title</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>5</YO>
											</UDim2>
											<bool name="RichText">false</bool>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<bool name="Selectable">false</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>30</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<string name="Text">Quick Chat</string>
											<Color3 name="TextColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<bool name="TextScaled">false</bool>
											<float name="TextSize">20</float>
											<Color3 name="TextStrokeColor3">
												<R>0</R>
												<G>0</G>
												<B>0</B>
											</Color3>
											<float name="TextStrokeTransparency">1</float>
											<float name="TextTransparency">0</float>
											<token name="TextTruncate">0</token>
											<bool name="TextWrapped">false</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025adb</UniqueId>
											<bool name="Visible">true</bool>
											<int name="ZIndex">6</int>
										</Properties>
										<Item class="TextButton" referent="RBX19a865e7f2a84d4392d0a3f5b6621142">
											<Properties>
												<bool name="Active">true</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0.5</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoButtonColor">true</bool>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="BackgroundTransparency">0</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<token name="Font">3</token>
												<Font name="FontFace"></Font>
												<int name="LayoutOrder">0</int>
												<float name="LineHeight">1</float>
												<int name="MaxVisibleGraphemes">-1</int>
												<bool name="Modal">false</bool>
												<string name="Name">Back</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>5</XO>
													<YS>0.5</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="RichText">false</bool>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">true</bool>
												<bool name="Selected">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>0</XS>
													<XO>25</XO>
													<YS>0</YS>
													<YO>25</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<string name="Text"></string>
												<Color3 name="TextColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<bool name="TextScaled">false</bool>
												<float name="TextSize">14</float>
												<Color3 name="TextStrokeColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="TextStrokeTransparency">1</float>
												<float name="TextTransparency">0</float>
												<token name="TextTruncate">0</token>
												<bool name="TextWrapped">false</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025abf</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">6</int>
											</Properties>
											<Item class="ImageLabel" referent="RBXc52aaecb88994939a4a44efc62f18627">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0.5</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">1</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<Content name="Image"><url>rbxassetid://8677511725</url></Content>
													<Color3 name="ImageColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<Vector2 name="ImageRectOffset">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<Vector2 name="ImageRectSize">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<float name="ImageTransparency">0</float>
													<int name="LayoutOrder">0</int>
													<string name="Name">ImageLabel</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0.5</XS>
														<XO>0</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<token name="ResampleMode">0</token>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<token name="ScaleType">0</token>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0.850000024</XS>
														<XO>0</XO>
														<YS>0.850000024</YS>
														<YO>0</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<Rect2D name="SliceCenter">
														<min>
															<X>0</X>
															<Y>0</Y>
														</min>
														<max>
															<X>0</X>
															<Y>0</Y>
														</max>
													</Rect2D>
													<float name="SliceScale">1</float>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UDim2 name="TileSize">
														<XS>1</XS>
														<XO>0</XO>
														<YS>1</YS>
														<YO>0</YO>
													</UDim2>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a25</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">6</int>
												</Properties>
											</Item>
											<Item class="UICorner" referent="RBX4b95a790572d456d887b33d5ee727bfc">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<UDim name="CornerRadius">
														<S>0</S>
														<O>8</O>
													</UDim>
													<string name="Name">UICorner</string>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b11</UniqueId>
												</Properties>
											</Item>
										</Item>
									</Item>
									<Item class="ScrollingFrame" referent="RBX1eb97de5c2874703a529d75003d12460">
										<Properties>
											<bool name="Active">false</bool>
											<Vector2 name="AnchorPoint">
												<X>0.5</X>
												<Y>1</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticCanvasSize">0</token>
											<token name="AutomaticSize">0</token>
											<Color3 name="BackgroundColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">
												<R>0.105882362</R>
												<G>0.164705887</G>
												<B>0.207843155</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">0</int>
											<Content name="BottomImage"><url>rbxassetid://8082116996</url></Content>
											<Vector2 name="CanvasPosition">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<UDim2 name="CanvasSize">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<bool name="ClipsDescendants">true</bool>
											<bool name="Draggable">false</bool>
											<token name="ElasticBehavior">0</token>
											<token name="HorizontalScrollBarInset">0</token>
											<int name="LayoutOrder">0</int>
											<Content name="MidImage"><url>rbxassetid://7488333553</url></Content>
											<string name="Name">Scroller</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>0.5</XS>
												<XO>0</XO>
												<YS>1</YS>
												<YO>-10</YO>
											</UDim2>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<Color3 name="ScrollBarImageColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<float name="ScrollBarImageTransparency">0</float>
											<int name="ScrollBarThickness">5</int>
											<token name="ScrollingDirection">4</token>
											<bool name="ScrollingEnabled">true</bool>
											<bool name="Selectable">false</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>-10</XO>
												<YS>1</YS>
												<YO>-50</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<Content name="TopImage"><url>rbxassetid://8082122989</url></Content>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aa4</UniqueId>
											<token name="VerticalScrollBarInset">0</token>
											<token name="VerticalScrollBarPosition">0</token>
											<bool name="Visible">true</bool>
											<int name="ZIndex">6</int>
										</Properties>
										<Item class="UIListLayout" referent="RBX4b55ef94627244c59bab9be8213591ab">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<token name="FillDirection">1</token>
												<token name="HorizontalAlignment">1</token>
												<string name="Name">UIListLayout</string>
												<UDim name="Padding">
													<S>0</S>
													<O>5</O>
												</UDim>
												<token name="SortOrder">2</token>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b2c</UniqueId>
												<token name="VerticalAlignment">1</token>
											</Properties>
										</Item>
									</Item>
								</Item>
							</Item>
						</Item>
						<Item class="Frame" referent="RBXf63871d799614b8f85b63a08bcf17682">
							<Properties>
								<bool name="Active">false</bool>
								<Vector2 name="AnchorPoint">
									<X>0.5</X>
									<Y>0.5</Y>
								</Vector2>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<bool name="AutoLocalize">true</bool>
								<token name="AutomaticSize">0</token>
								<Color3 name="BackgroundColor3">
									<R>0</R>
									<G>0</G>
									<B>0</B>
								</Color3>
								<float name="BackgroundTransparency">0.75</float>
								<Color3 name="BorderColor3">
									<R>0.105882354</R>
									<G>0.164705887</G>
									<B>0.20784314</B>
								</Color3>
								<token name="BorderMode">0</token>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<int name="LayoutOrder">0</int>
								<string name="Name">SaveChat</string>
								<Ref name="NextSelectionDown">null</Ref>
								<Ref name="NextSelectionLeft">null</Ref>
								<Ref name="NextSelectionRight">null</Ref>
								<Ref name="NextSelectionUp">null</Ref>
								<UDim2 name="Position">
									<XS>0.5</XS>
									<XO>0</XO>
									<YS>-1.5</YS>
									<YO>0</YO>
								</UDim2>
								<Ref name="RootLocalizationTable">null</Ref>
								<float name="Rotation">0</float>
								<bool name="Selectable">false</bool>
								<Ref name="SelectionImageObject">null</Ref>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>150</XO>
									<YS>0</YS>
									<YO>240</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<int64 name="SourceAssetId">-1</int64>
								<token name="Style">0</token>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259fb</UniqueId>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="ScrollingFrame" referent="RBXaa0c64c3a3d64705a8e7605ce1e58279">
								<Properties>
									<bool name="Active">false</bool>
									<Vector2 name="AnchorPoint">
										<X>0.5</X>
										<Y>1</Y>
									</Vector2>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<bool name="AutoLocalize">true</bool>
									<token name="AutomaticCanvasSize">2</token>
									<token name="AutomaticSize">0</token>
									<Color3 name="BackgroundColor3">
										<R>0</R>
										<G>0</G>
										<B>0</B>
									</Color3>
									<float name="BackgroundTransparency">1</float>
									<Color3 name="BorderColor3">
										<R>0.105882362</R>
										<G>0.164705887</G>
										<B>0.207843155</B>
									</Color3>
									<token name="BorderMode">0</token>
									<int name="BorderSizePixel">0</int>
									<Content name="BottomImage"><url>rbxassetid://8082116996</url></Content>
									<Vector2 name="CanvasPosition">
										<X>0</X>
										<Y>0</Y>
									</Vector2>
									<UDim2 name="CanvasSize">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>0</YO>
									</UDim2>
									<bool name="ClipsDescendants">true</bool>
									<bool name="Draggable">false</bool>
									<token name="ElasticBehavior">0</token>
									<token name="HorizontalScrollBarInset">0</token>
									<int name="LayoutOrder">0</int>
									<Content name="MidImage"><url>rbxassetid://7488333553</url></Content>
									<string name="Name">Container</string>
									<Ref name="NextSelectionDown">null</Ref>
									<Ref name="NextSelectionLeft">null</Ref>
									<Ref name="NextSelectionRight">null</Ref>
									<Ref name="NextSelectionUp">null</Ref>
									<UDim2 name="Position">
										<XS>0.5</XS>
										<XO>0</XO>
										<YS>1</YS>
										<YO>-5</YO>
									</UDim2>
									<Ref name="RootLocalizationTable">null</Ref>
									<float name="Rotation">0</float>
									<Color3 name="ScrollBarImageColor3">
										<R>1</R>
										<G>1</G>
										<B>1</B>
									</Color3>
									<float name="ScrollBarImageTransparency">0</float>
									<int name="ScrollBarThickness">5</int>
									<token name="ScrollingDirection">4</token>
									<bool name="ScrollingEnabled">true</bool>
									<bool name="Selectable">false</bool>
									<Ref name="SelectionImageObject">null</Ref>
									<UDim2 name="Size">
										<XS>0</XS>
										<XO>140</XO>
										<YS>1</YS>
										<YO>-35</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<Content name="TopImage"><url>rbxassetid://8082122989</url></Content>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aa5</UniqueId>
									<token name="VerticalScrollBarInset">0</token>
									<token name="VerticalScrollBarPosition">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="UIListLayout" referent="RBX072456e492bb41ed90af4d8f0e05bacc">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<token name="FillDirection">1</token>
										<token name="HorizontalAlignment">1</token>
										<string name="Name">UIListLayout</string>
										<UDim name="Padding">
											<S>0</S>
											<O>2</O>
										</UDim>
										<token name="SortOrder">2</token>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b2d</UniqueId>
										<token name="VerticalAlignment">1</token>
									</Properties>
								</Item>
								<Item class="TextButton" referent="RBX1a1778504f91436fae2191ae2ae39547">
									<Properties>
										<bool name="Active">true</bool>
										<Vector2 name="AnchorPoint">
											<X>0</X>
											<Y>0</Y>
										</Vector2>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<bool name="AutoButtonColor">true</bool>
										<bool name="AutoLocalize">true</bool>
										<token name="AutomaticSize">0</token>
										<Color3 name="BackgroundColor3">
											<R>0</R>
											<G>0</G>
											<B>0</B>
										</Color3>
										<float name="BackgroundTransparency">0.5</float>
										<Color3 name="BorderColor3">
											<R>0.105882362</R>
											<G>0.164705887</G>
											<B>0.207843155</B>
										</Color3>
										<token name="BorderMode">0</token>
										<int name="BorderSizePixel">0</int>
										<bool name="ClipsDescendants">false</bool>
										<bool name="Draggable">false</bool>
										<token name="Font">18</token>
										<Font name="FontFace"></Font>
										<int name="LayoutOrder">0</int>
										<float name="LineHeight">1</float>
										<int name="MaxVisibleGraphemes">-1</int>
										<bool name="Modal">false</bool>
										<string name="Name">Slot</string>
										<Ref name="NextSelectionDown">null</Ref>
										<Ref name="NextSelectionLeft">null</Ref>
										<Ref name="NextSelectionRight">null</Ref>
										<Ref name="NextSelectionUp">null</Ref>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="RichText">false</bool>
										<Ref name="RootLocalizationTable">null</Ref>
										<float name="Rotation">0</float>
										<bool name="Selectable">true</bool>
										<bool name="Selected">false</bool>
										<Ref name="SelectionImageObject">null</Ref>
										<UDim2 name="Size">
											<XS>1</XS>
											<XO>-10</XO>
											<YS>0</YS>
											<YO>25</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<int64 name="SourceAssetId">-1</int64>
										<token name="Style">0</token>
										<BinaryString name="Tags"></BinaryString>
										<string name="Text">Slot 0</string>
										<Color3 name="TextColor3">
											<R>1</R>
											<G>1</G>
											<B>1</B>
										</Color3>
										<bool name="TextScaled">false</bool>
										<float name="TextSize">14</float>
										<Color3 name="TextStrokeColor3">
											<R>0</R>
											<G>0</G>
											<B>0</B>
										</Color3>
										<float name="TextStrokeTransparency">1</float>
										<float name="TextTransparency">0</float>
										<token name="TextTruncate">0</token>
										<bool name="TextWrapped">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ac0</UniqueId>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="UICorner" referent="RBXbae07f10046949e79ab786546d481308">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<UDim name="CornerRadius">
												<S>0</S>
												<O>8</O>
											</UDim>
											<string name="Name">UICorner</string>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b12</UniqueId>
										</Properties>
									</Item>
								</Item>
							</Item>
							<Item class="UICorner" referent="RBX1e32f6f6e5cf49fb8ea13fce54fa12a0">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<UDim name="CornerRadius">
										<S>0</S>
										<O>8</O>
									</UDim>
									<string name="Name">UICorner</string>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b13</UniqueId>
								</Properties>
							</Item>
							<Item class="UIGradient" referent="RBX2d85da3c3001488dbfd168c21cc48a26">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<ColorSequence name="Color">0 1 1 1 0 1 1 1 1 0 </ColorSequence>
									<bool name="Enabled">true</bool>
									<string name="Name">UIGradient</string>
									<Vector2 name="Offset">
										<X>0</X>
										<Y>0</Y>
									</Vector2>
									<float name="Rotation">-90</float>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<NumberSequence name="Transparency">0 0 0 0.904 0 0 0.905 1 0 1 1 0 </NumberSequence>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b23</UniqueId>
								</Properties>
							</Item>
							<Item class="Frame" referent="RBXc52e9b4630d448a386c1c0b0ac5a8ee5">
								<Properties>
									<bool name="Active">false</bool>
									<Vector2 name="AnchorPoint">
										<X>0</X>
										<Y>0</Y>
									</Vector2>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<bool name="AutoLocalize">true</bool>
									<token name="AutomaticSize">0</token>
									<Color3 name="BackgroundColor3">
										<R>0</R>
										<G>0</G>
										<B>0</B>
									</Color3>
									<float name="BackgroundTransparency">1</float>
									<Color3 name="BorderColor3">
										<R>0.105882362</R>
										<G>0.164705887</G>
										<B>0.207843155</B>
									</Color3>
									<token name="BorderMode">0</token>
									<int name="BorderSizePixel">1</int>
									<bool name="ClipsDescendants">true</bool>
									<bool name="Draggable">false</bool>
									<int name="LayoutOrder">0</int>
									<string name="Name">Header</string>
									<Ref name="NextSelectionDown">null</Ref>
									<Ref name="NextSelectionLeft">null</Ref>
									<Ref name="NextSelectionRight">null</Ref>
									<Ref name="NextSelectionUp">null</Ref>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>-13</YO>
									</UDim2>
									<Ref name="RootLocalizationTable">null</Ref>
									<float name="Rotation">0</float>
									<bool name="Selectable">false</bool>
									<Ref name="SelectionImageObject">null</Ref>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>0</XO>
										<YS>0</YS>
										<YO>35</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<int64 name="SourceAssetId">-1</int64>
									<token name="Style">0</token>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259fc</UniqueId>
									<bool name="Visible">true</bool>
									<int name="ZIndex">1</int>
								</Properties>
								<Item class="Frame" referent="RBXfa7c07041cc14e628c672fb375c288e2">
									<Properties>
										<bool name="Active">false</bool>
										<Vector2 name="AnchorPoint">
											<X>0</X>
											<Y>0</Y>
										</Vector2>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<bool name="AutoLocalize">true</bool>
										<token name="AutomaticSize">0</token>
										<Color3 name="BackgroundColor3">
											<R>0</R>
											<G>0</G>
											<B>0</B>
										</Color3>
										<float name="BackgroundTransparency">0.5</float>
										<Color3 name="BorderColor3">
											<R>0.105882362</R>
											<G>0.164705887</G>
											<B>0.207843155</B>
										</Color3>
										<token name="BorderMode">0</token>
										<int name="BorderSizePixel">1</int>
										<bool name="ClipsDescendants">false</bool>
										<bool name="Draggable">false</bool>
										<int name="LayoutOrder">0</int>
										<string name="Name">UI</string>
										<Ref name="NextSelectionDown">null</Ref>
										<Ref name="NextSelectionLeft">null</Ref>
										<Ref name="NextSelectionRight">null</Ref>
										<Ref name="NextSelectionUp">null</Ref>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<Ref name="RootLocalizationTable">null</Ref>
										<float name="Rotation">0</float>
										<bool name="Selectable">false</bool>
										<Ref name="SelectionImageObject">null</Ref>
										<UDim2 name="Size">
											<XS>1</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>48</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<int64 name="SourceAssetId">-1</int64>
										<token name="Style">0</token>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259fd</UniqueId>
										<bool name="Visible">true</bool>
										<int name="ZIndex">1</int>
									</Properties>
									<Item class="TextButton" referent="RBX81292b9be7eb4e60a94f0d92fd19c380">
										<Properties>
											<bool name="Active">true</bool>
											<Vector2 name="AnchorPoint">
												<X>1</X>
												<Y>0</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoButtonColor">true</bool>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticSize">0</token>
											<Color3 name="BackgroundColor3">
												<R>0.176470593</R>
												<G>0.176470593</G>
												<B>0.176470593</B>
											</Color3>
											<float name="BackgroundTransparency">0</float>
											<Color3 name="BorderColor3">
												<R>0.105882354</R>
												<G>0.164705887</G>
												<B>0.20784314</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">0</int>
											<bool name="ClipsDescendants">false</bool>
											<bool name="Draggable">false</bool>
											<token name="Font">3</token>
											<Font name="FontFace"></Font>
											<int name="LayoutOrder">0</int>
											<float name="LineHeight">1</float>
											<int name="MaxVisibleGraphemes">-1</int>
											<bool name="Modal">false</bool>
											<string name="Name">Close</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>1</XS>
												<XO>-5</XO>
												<YS>0</YS>
												<YO>5</YO>
											</UDim2>
											<bool name="RichText">false</bool>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<bool name="Selectable">true</bool>
											<bool name="Selected">false</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>0</XS>
												<XO>25</XO>
												<YS>0</YS>
												<YO>25</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<token name="Style">0</token>
											<BinaryString name="Tags"></BinaryString>
											<string name="Text"></string>
											<Color3 name="TextColor3">
												<R>0</R>
												<G>0</G>
												<B>0</B>
											</Color3>
											<bool name="TextScaled">false</bool>
											<float name="TextSize">14</float>
											<Color3 name="TextStrokeColor3">
												<R>0</R>
												<G>0</G>
												<B>0</B>
											</Color3>
											<float name="TextStrokeTransparency">1</float>
											<float name="TextTransparency">0</float>
											<token name="TextTruncate">0</token>
											<bool name="TextWrapped">false</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ac1</UniqueId>
											<bool name="Visible">true</bool>
											<int name="ZIndex">5</int>
										</Properties>
										<Item class="ImageLabel" referent="RBXd4210b06ad37487c9ba8249f864d87f2">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>0.5</X>
													<Y>0.5</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<Content name="Image"><url>http://www.roblox.com/asset/?id=6031094678</url></Content>
												<Color3 name="ImageColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<Vector2 name="ImageRectOffset">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<Vector2 name="ImageRectSize">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<float name="ImageTransparency">0</float>
												<int name="LayoutOrder">0</int>
												<string name="Name">ImageLabel</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0.5</XS>
													<XO>0</XO>
													<YS>0.5</YS>
													<YO>0</YO>
												</UDim2>
												<token name="ResampleMode">0</token>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<token name="ScaleType">0</token>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>0</XS>
													<XO>20</XO>
													<YS>0</YS>
													<YO>20</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<Rect2D name="SliceCenter">
													<min>
														<X>0</X>
														<Y>0</Y>
													</min>
													<max>
														<X>0</X>
														<Y>0</Y>
													</max>
												</Rect2D>
												<float name="SliceScale">1</float>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UDim2 name="TileSize">
													<XS>1</XS>
													<XO>0</XO>
													<YS>1</YS>
													<YO>0</YO>
												</UDim2>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a26</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">6</int>
											</Properties>
										</Item>
										<Item class="UICorner" referent="RBXd68943021d984253a0981d2d68908e57">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<UDim name="CornerRadius">
													<S>0</S>
													<O>8</O>
												</UDim>
												<string name="Name">UICorner</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b14</UniqueId>
											</Properties>
										</Item>
									</Item>
									<Item class="TextLabel" referent="RBX78c7097f8997452d8220b5ad12324140">
										<Properties>
											<bool name="Active">false</bool>
											<Vector2 name="AnchorPoint">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticSize">0</token>
											<Color3 name="BackgroundColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">
												<R>0.105882362</R>
												<G>0.164705887</G>
												<B>0.207843155</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">1</int>
											<bool name="ClipsDescendants">false</bool>
											<bool name="Draggable">false</bool>
											<token name="Font">19</token>
											<Font name="FontFace"></Font>
											<int name="LayoutOrder">0</int>
											<float name="LineHeight">1</float>
											<int name="MaxVisibleGraphemes">-1</int>
											<string name="Name">Title</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>5</XO>
												<YS>0</YS>
												<YO>5</YO>
											</UDim2>
											<bool name="RichText">false</bool>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<bool name="Selectable">false</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>25</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<string name="Text">Save Chat</string>
											<Color3 name="TextColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<bool name="TextScaled">false</bool>
											<float name="TextSize">14</float>
											<Color3 name="TextStrokeColor3">
												<R>0</R>
												<G>0</G>
												<B>0</B>
											</Color3>
											<float name="TextStrokeTransparency">1</float>
											<float name="TextTransparency">0</float>
											<token name="TextTruncate">0</token>
											<bool name="TextWrapped">false</bool>
											<token name="TextXAlignment">0</token>
											<token name="TextYAlignment">1</token>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025adc</UniqueId>
											<bool name="Visible">true</bool>
											<int name="ZIndex">8</int>
										</Properties>
									</Item>
									<Item class="UICorner" referent="RBX6b2cd1ef2ef940199435840a125beb79">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<UDim name="CornerRadius">
												<S>0</S>
												<O>8</O>
											</UDim>
											<string name="Name">UICorner</string>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b15</UniqueId>
										</Properties>
									</Item>
								</Item>
							</Item>
						</Item>
					</Item>
				</Item>
				<Item class="Folder" referent="RBX145276b5c95444c6952103e9e1ed249c">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">modules</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259aa</UniqueId>
					</Properties>
					<Item class="Folder" referent="RBXc993b8c517004bdb8d7b393b5f7af57f">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<string name="Name">core</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259ab</UniqueId>
						</Properties>
						<Item class="ModuleScript" referent="RBX7f697f28238d4fe79243600d88ecdc3d">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">connections</string>
								<string name="ScriptGuid">{867E39CD-77E9-4F9D-A734-911442FE83AE}</string>
								<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: connections.lua
-- Description: Set up core connections for Roblox's chat so I can connect signals like .Chatted etc

local starterGui = game:GetService("StarterGui")

local chatConnectionsList = {}

local createEvents = function(array)
	for name,info in pairs(array) do
		local event = Instance.new(info.class)
		event.Name = name
		chatConnectionsList[info.category] = chatConnectionsList[info.category] or {}
		chatConnectionsList[info.category][name] = event
	end
end

createEvents({
	["ToggleVisibility"] = { -- Fired when CoreGui chat button is pressed
		class = "BindableEvent",
		category = "ChatWindow"
	},
	["SetVisible"] = { -- Fired when CoreGui wants to change if the chat is visible
		class = "BindableEvent",
		category = "ChatWindow"
	},
	["FocusChatBar"] = { -- Fired when CoreGui wants to focus the chat bar
		class = "BindableEvent",
		category = "ChatWindow"
	},
	["TopbarEnabledChanged"] = { -- Fired when topbar visibility changes
		class = "BindableEvent",
		category = "ChatWindow"
	},
	["SpecialKeyPressed"] = { -- Fired when the chat hotkey is pressed
		class = "BindableEvent",
		category = "ChatWindow"
	},
	["CoreGuiEnabled"] = { -- Fired when the developer sets StarterGui:SetCoreGuiEnabled for the chat
		class = "BindableEvent",
		category = "ChatWindow"
	},
	["ChatBarFocusChanged"] = { -- Fire w 'true' when you want to ensure that the chatbar is being focused on
		class = "BindableEvent",
		category = "ChatWindow"
	},
	["VisibilityStateChanged"] = { -- Fire w 'true' when the user shows or hides the chat
		class = "BindableEvent",
		category = "ChatWindow"
	},
	["MessagesChanged"] = { -- Fire this to set the topbar chat button's message counter
		class = "BindableEvent",
		category = "ChatWindow"
	},
	["MessagePosted"] = { 
		-- Fired for the .Chatted event, attempting to forge this can land you with trouble in moderation
		class = "BindableEvent",
		category = "ChatWindow"
	},
	["IsFocused"] = { -- Invoked by CoreGui to determine if the chat is focused
		class = "BindableFunction",
		category = "ChatWindow"
	},
	["ChatMakeSystemMessage"] = { -- https://developer.roblox.com/en-us/api-reference/function/StarterGui/SetCore
		class = "BindableEvent",
		category = "SetCore"
	},
	["ChatWindowPosition"] = { -- https://developer.roblox.com/en-us/api-reference/function/StarterGui/SetCore
		class = "BindableEvent",
		category = "SetCore"
	},
	["ChatWindowSize"] = { -- https://developer.roblox.com/en-us/api-reference/function/StarterGui/SetCore
		class = "BindableEvent",
		category = "SetCore"
	},
	["ChatBarDisabled"] = { -- https://developer.roblox.com/en-us/api-reference/function/StarterGui/SetCore
		class = "BindableEvent",
		category = "SetCore"
	}
})

createEvents({
	["ChatWindowPosition"] = { -- Invoked by :GetCore to return the UDim2 position of the chat window
		class = "BindableFunction",
		category = "GetCore"
	},
	["ChatWindowSize"] = { -- Invoked by :GetCore to determine the chat size of the window with a UDim2 value
		class = "BindableFunction",
		category = "GetCore"
	},
	["ChatBarDisabled"] = { -- Invoked by :GetCore to return a boolean if the chatbar is disabled
		class = "BindableFunction",
		category = "GetCore"
	}
})

local loaded = false
local loadedEvent = Instance.new("BindableEvent")

task.spawn(function()
	local tries = 0
	local maxAttempts = 10
	while(tries < maxAttempts) do
		local success,result = pcall(function()
			starterGui:SetCore("CoreGuiChatConnections",chatConnectionsList)
		end)
		if(success) then
			loaded = true
			loadedEvent:Fire()
			break
		else
			tries += 1
			if(tries == maxAttempts) then
				error("[Better Chat]: Error calling SetCore CoreGuiChatConnections:",result)
			else
				task.wait()
			end
		end
	end
end)

local pending = {}

function pending:Connect(category,name,callback)
	if(not loaded) then
		loadedEvent.Event:Wait()
	end
	local event = chatConnectionsList[category][name]
	if(event:IsA("BindableEvent")) then
		event.Event:Connect(callback)
	else
		event.OnInvoke = callback
	end
end

function pending:Fire(category,name,...)
	if(not loaded) then
		loadedEvent.Event:Wait()
	end
	chatConnectionsList[category][name]:Fire(...)
end

function pending:Invoke(category,name,...)
	if(not loaded) then
		loadedEvent.Event:Wait()
	end
	return chatConnectionsList[category][name]:Invoke(...)
end

return pending]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a52</UniqueId>
							</Properties>
						</Item>
						<Item class="ModuleScript" referent="RBXf16b10bffc6549bd94b0db1302f9f905">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">utility</string>
								<string name="ScriptGuid">{9FFE8105-1B71-4A7B-85AD-C34230C0D6AD}</string>
								<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: utility.lua
-- Description: Utilitarian functions (dont know if that's even a word LMAO)

local utility = {}
local tweenService = game:GetService("TweenService")
local players = game:GetService("Players")
local style = Enum.EasingStyle.Linear

function utility:tween(...)
	local args = {...}
	if(type(args[1]) ~= "table") then
		local object,length,properties = unpack(args)
		local tween = tweenService:Create(object,TweenInfo.new(length,style,Enum.EasingDirection.Out),properties)
		tween:Play()
		return tween
	else
		local tweens = {}
		for _,t in pairs(args) do
			local object,length,properties = unpack(t)
			local tween = tweenService:Create(object,TweenInfo.new(length,style,Enum.EasingDirection.Out),properties)
			tween:Play()
			tweens[object] = tween
		end
		return tweens
	end
end

function utility.descendantOfClassAdded(holder,class,callback)
	local check = function(object)
		if(object:IsA(class)) then
			callback(object)
		end
	end
	holder.DescendantAdded:Connect(check)
	for _,descendant in pairs(holder:GetDescendants()) do
		task.spawn(check,descendant)
	end
end

function utility:clampTextLimit(box,limit)
	local conn
	local last = ""
	conn = box.Changed:Connect(function()
		if(box:GetFullName() ~= box.Name) then
			if(#box.Text > limit) then
				box.Text = last
				return
			end
			last = box.Text
		else
			conn:Disconnect()
		end
	end)
end

function utility:linkObjectSignals(object,signals)
	local conn;
	conn = object.Changed:Connect(function()
		if(object:GetFullName() == object.Name) then
			for _,sig in pairs(signals) do
				sig:Disconnect()
			end
			conn:Disconnect()
			signals = nil
		end
	end)
end

utility.childAdded = function(parent,onChild)
	parent.ChildAdded:Connect(onChild)
	for _,child in pairs(parent:GetChildren()) do
		task.spawn(onChild,child)
	end
end

utility.viewport = require(script:WaitForChild("buildViewport"))

return utility]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a53</UniqueId>
							</Properties>
							<Item class="ModuleScript" referent="RBX4504b7fcf024493dac99b9da02fc2ea5">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">buildViewport</string>
									<string name="ScriptGuid">{2578F7DA-AF4A-4B7F-AAB4-81F40846A457}</string>
									<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: buildViewport.lua
-- Description: Build headshot viewport frames for roleplay effects n stuff

local utility = require(script:WaitForChild("utility"))
local storage = game:GetService("ReplicatedStorage"):WaitForChild("betterchat_shared"):WaitForChild("loading")
local buildViewport = {}
local cached = {}

local constructFromGround = function(description,id)
	local event = Instance.new("BindableEvent")
	cached[id] = event
	local dummy,toApply = script.dummy:Clone(),utility:create("HumanoidDescription",description)
	dummy.Parent = storage
	dummy.Humanoid:ApplyDescription(toApply)
	dummy.Name = utility:guid()
	local changed
	changed = dummy.Changed:Connect(function()
		if(dummy:GetFullName() == dummy.Name) then
			cached[id] = nil
		end
	end)
	cached[id] = dummy
	event:Fire()
	event:Destroy()
	return dummy
end

function buildViewport.new(description,size)
	local id = utility:getDescriptionId(description)
	local constructed
	if(cached[id]) then
		if(cached[id]:IsA("BindableEvent")) then
			cached[id].Event:Wait()
		end
		constructed = cached[id]
	else
		constructFromGround(description,id)
		constructed = cached[id]
	end
	local frame,camera,worldModel = utility:createViewport(size)
	local dummy = constructed:Clone()
	dummy.Parent = worldModel
	camera.CFrame = CFrame.lookAt(
		dummy.Head.Position + (dummy.Head.CFrame.LookVector * (3)),
		dummy.Head.Position
	)
	return frame
end

return buildViewport]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a54</UniqueId>
								</Properties>
								<Item class="ModuleScript" referent="RBXf621eec5413444489e6a9c32fc700343">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">utility</string>
										<string name="ScriptGuid">{05B132C2-7A79-4B4A-812A-796311A936E7}</string>
										<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: utility.lua
-- Description: Utility functions for building viewport headshots

local zlib = require(script:WaitForChild("zlib"))
local httpService = game:GetService("HttpService")
local utility = {}

function utility:createViewport(size)
	local viewport = Instance.new("ViewportFrame")
	viewport.Size = UDim2.fromOffset(size,size)
	viewport.BackgroundTransparency = 1
	viewport.BorderSizePixel = 0
	viewport.BackgroundColor3 = Color3.fromRGB(80,80,80)
	local world = Instance.new("WorldModel")
	world.Parent = viewport
	local camera = Instance.new("Camera")
	camera.Parent = world
	camera.FieldOfView = 50
	viewport.CurrentCamera = camera
	return viewport,camera,world
end

function utility:create(class,properties)
	local created = Instance.new(class)
	for property,value in pairs(properties) do
		created[property] = value
	end
	return created
end

function utility:compress(text)
	return zlib.Zlib.Compress(text,{
		strategy = "dynamic",
		level = 9
	})
end

function utility:getDescriptionId(description)
	local toAlphabetize = {}
	for property,value in pairs(description) do
		table.insert(toAlphabetize,property)
	end
	table.sort(toAlphabetize)
	local id = {}
	for _,name in pairs(toAlphabetize) do
		table.insert(id,name..":"..tostring(description[name]))
	end
	return utility:compress(table.concat(id,","))
end

function utility:guid()
	return httpService:GenerateGUID():sub(2,37):gsub("-","")
end

return utility]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a55</UniqueId>
									</Properties>
									<Item class="ModuleScript" referent="RBX75df1a010e744bb9839dc81cb0ef7f0f">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">zlib</string>
											<string name="ScriptGuid">{8899944E-757D-4EE0-8FFB-639B7410E071}</string>
											<ProtectedString name="Source"><![CDATA[--[[
	-------------------------------
	---       INFORMATION       ---
	-------------------------------
	
	Written by Haoqian He
	Edited/Forked by Scarious
	
	This is the forked version of the LibDeflate library by Haoqian He intended for luau. Credit for the original source code and such
	goes to their respective creators (basic credits can be viewed under CREDITS, and more expansive credits/licensing info can be viewed
	under LICENSING AND COPYRIGHT.
	
	Original documentation can be viewed here: https://safeteewow.github.io/LibDeflate/source/LibDeflate.lua.html
	
	You can access the LibDeflate library (and most LibDeflate methods seen in the original documentation) by using Compression.Library
	
	
	-------------------------------
	---      DOCUMENTATION      ---
	-------------------------------
	
	Compression Methods:
	
	Compression.Deflate.Compress(data, configs?)
	Compression.Zlib.Compress(data, configs?)
	
	
	Decompression Methods:
	
	Compression.Deflate.Decompress(compressedData)
	Compression.Zlib.Decompress(compressedData)
	
	
	USAGE:
	
		configs table:
	
		{
			level = 0; -- integer 0 -> 9 where 0 is no compression and 9 is most compression
			strategy = "" -- "huffman_only", "fixed", "dynamic"
		}
		
		note :: the higher the level, the slower the compression will be
			 :: configs table is optional, if not supplied (aka nil) default level+strategy will be used
			 
		
		methods:
		
		Method: Compression.Deflate.Compress(data, configs?):
	
			Description: Compresses a string using the raw deflate format
			
			Input:
				- String: data = The data to be compressed
				- table?: configs = The configuration table to control the compression
				
			Output:
				- String: compressedData = The compressed data
				- int: paddedBits = The number of bits padded at the end of the output


		Method: Compression.Deflate.Decompress(compressedData):
	
			Description: Decompresses a raw deflate compressed data.
			
			Input:
				- String: compressedData = The data to be decompressed
				
			Output:
				- String: data = The decompressed data



		Method: Compression.Zlib.Compress(data, configs?):
	
			Description: Compresses a string using the zlib format
			
			Input:
				- String: data = The data to be compressed
				- table?: configs = The configuration table to control the compression
				
			Output:
				- String: compressedData = The compressed data
				- int: paddedBits = The number of bits padded at the end of the output
		
		
		Method: Compression.Deflate.Decompress(compressedData):
	
			Description: Decompresses a zlib compressed data.
			
			Input:
				- String: compressedData = The data to be decompressed
				
			Output:
				- String: data = The decompressed data
		
		
	-------------------------------
	---         CREDITS         ---
	-------------------------------
	
	- LibDeflate Library: Haoqian He
	- zlib: Jean-loup Gailly and Mark Adler
	- puff: Mark Adler
	- LibCompress: jjsheets and Galmok (WoW)
	- 6bit encoding/decoding: WeakAuras2 (WoW)
	

	-------------------------------
	--- LICENSING AND COPYRIGHT ---
	-------------------------------

	LibDeflate 1.0.2-release <br>
	Pure Lua compressor and decompressor with high compression ratio using
	DEFLATE/zlib format.
	@file LibDeflate.lua
	@author Haoqian He (Github: SafeteeWoW; World of Warcraft: Safetyy-Illidan(US))
	@copyright LibDeflate <2018-2020> Haoqian He
	@license zlib License
	This library is implemented according to the following specifications.
	Report a bug if LibDeflate is not fully compliant with those specs.
	Both compressors and decompressors have been implemented in the library.
	1. RFC1950: DEFLATE Compressed Data Format Specification version 1.3
	https://tools.ietf.org/html/rfc1951
	2. RFC1951: ZLIB Compressed Data Format Specification version 3.3
	https://tools.ietf.org/html/rfc1950


	zlib License
	(C) 2018-2020 Haoqian He
	This software is provided 'as-is', without any express or implied
	warranty.  In no event will the authors be held liable for any damages
	arising from the use of this software.
	Permission is granted to anyone to use this software for any purpose,
	including commercial applications, and to alter it and redistribute it
	freely, subject to the following restrictions:
	1. The origin of this software must not be misrepresented; you must not
	   claim that you wrote the original software. If you use this software
	   in a product, an acknowledgment in the product documentation would be
	   appreciated but is not required.
	2. Altered source versions must be plainly marked as such, and must not be
	   misrepresented as being the original software.
	3. This notice may not be removed or altered from any source distribution.
	License History:
		1. GNU General Public License Version 3 in v1.0.0 and earlier versions.
		2. GNU Lesser General Public License Version 3 in v1.0.1
		3. the zlib License since v1.0.2
		
	Credits and Disclaimer:
	This library rewrites the code from the algorithm
	and the ideas of the following projects,
	and uses their code to help to test the correctness of this library,
	but their code is not included directly in the library itself.
	Their original licenses shall be comply when used:
		1. zlib, by Jean-loup Gailly (compression) and Mark Adler (decompression).
			http://www.zlib.net/
			Licensed under zlib License. http://www.zlib.net/zlib_license.html
			For the compression algorithm.
		2. puff, by Mark Adler. https://github.com/madler/zlib/tree/master/contrib/puff
			Licensed under zlib License. http://www.zlib.net/zlib_license.html
			For the decompression algorithm.
		3. LibCompress, by jjsheets and Galmok of European Stormrage (Horde)
			https://www.wowace.com/projects/libcompress
			Licensed under GPLv2.
			https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
			For the code to create customized codec.
		4. WeakAuras2,
			https://github.com/WeakAuras/WeakAuras2
			Licensed under GPLv2.
			For the 6bit encoding and decoding.
]]

local Compression = {}
local LibDeflate = {}

Compression.Deflate = {}
Compression.Zlib = {}
Compression.Library = LibDeflate

--[[
	Method: Compression.Deflate.Compress
	
	Description: Compresses a string using the raw deflate format
	
	Input:
		- String: data = The data to be compressed
		- table?: configs = The configuration table to control the compression
		
	Output:
		- String: compressedData = The compressed data
		- int: paddedBits = The number of bits padded at the end of the output
		
	For more information see:
		- LibDeflate:CompressDeflate
		- compression_configs
]]

function Compression.Deflate.Compress(data, configs)
	return LibDeflate:CompressDeflate(data, configs)
end


--[[
	Method: Compression.Deflate.Decompress
	
	Description: Decompresses a raw deflate compressed data.
	
	Input:
		- String: compressedData = The data to be decompressed
		
	Output:
		- String: data = The decompressed data
		
	For more information see:
		- LibDeflate:DecompressDeflate
		- compression_configs
]]

function Compression.Deflate.Decompress(compressedData)
	return LibDeflate:DecompressDeflate(compressedData)
end



--[[
	Method: Compression.Zlib.Compress
	
	Description: Compresses a string using the zlib format
	
	Input:
		- String: data = The data to be compressed
		- table?: configs = The configuration table to control the compression
		
	Output:
		- String: compressedData = The compressed data
		- int: paddedBits = The number of bits padded at the end of the output
		
	For more information see:
		- LibDeflate:CompressZlib
		- compression_configs
]]

function Compression.Zlib.Compress(data, configs)
	return LibDeflate:CompressZlib(data, configs)
end


--[[
	Method: Compression.Deflate.Decompress
	
	Description: Decompresses a zlib compressed data.
	
	Input:
		- String: compressedData = The data to be decompressed
		
	Output:
		- String: data = The decompressed data
		
	For more information see:
		- LibDeflate:DecompressZlib
		- compression_configs
]]

function Compression.Zlib.Decompress(compressedData)
	return LibDeflate:DecompressZlib(compressedData)
end





--[[

	LIBDEFLATE LIBRARY:

]]


do
	-- Semantic version. all lowercase.
	-- Suffix can be alpha1, alpha2, beta1, beta2, rc1, rc2, etc.
	-- NOTE: Two version numbers needs to modify.
	-- 1. On the top of LibDeflate.lua
	-- 2. _VERSION
	-- 3. _MINOR
	
	-- version to store the official version of LibDeflate
	local _VERSION = "1.0.2-release"
	
	-- When MAJOR is changed, I should name it as LibDeflate2
	local _MAJOR = "LibDeflate"
	
	-- Update this whenever a new version, for LibStub version registration.
	-- 0 : v0.x
	-- 1 : v1.0.0
	-- 2 : v1.0.1
	-- 3 : v1.0.2
	local _MINOR = 3
	
	local _COPYRIGHT =
		"LibDeflate ".._VERSION
		.." Copyright (C) 2018-2020 Haoqian He."
		.." Licensed under the zlib License"
	
	-- Register in the World of Warcraft library "LibStub" if detected.
	LibDeflate = {}
	
	LibDeflate._VERSION = _VERSION
	LibDeflate._MAJOR = _MAJOR
	LibDeflate._MINOR = _MINOR
	LibDeflate._COPYRIGHT = _COPYRIGHT
end

-- localize Lua api for faster access.
local assert = assert
local error = error
local pairs = pairs
local string_byte = string.byte
local string_char = string.char
local string_find = string.find
local string_gsub = string.gsub
local string_sub = string.sub
local table_concat = table.concat
local table_sort = table.sort
local tostring = tostring
local type = type

-- Converts i to 2^i, (0<=i<=32)
-- This is used to implement bit left shift and bit right shift.
-- "x >> y" in C:   "(x-x%_pow2[y])/_pow2[y]" in Lua
-- "x << y" in C:   "x*_pow2[y]" in Lua
local _pow2 = {}

-- Converts any byte to a character, (0<=byte<=255)
local _byte_to_char = {}

-- _reverseBitsTbl[len][val] stores the bit reverse of
-- the number with bit length "len" and value "val"
-- For example, decimal number 6 with bits length 5 is binary 00110
-- It's reverse is binary 01100,
-- which is decimal 12 and 12 == _reverseBitsTbl[5][6]
-- 1<=len<=9, 0<=val<=2^len-1
-- The reason for 1<=len<=9 is that the max of min bitlen of huffman code
-- of a huffman alphabet is 9?
local _reverse_bits_tbl = {}

-- Convert a LZ77 length (3<=len<=258) to
-- a deflate literal/LZ77_length code (257<=code<=285)
local _length_to_deflate_code = {}

-- convert a LZ77 length (3<=len<=258) to
-- a deflate literal/LZ77_length code extra bits.
local _length_to_deflate_extra_bits = {}

-- Convert a LZ77 length (3<=len<=258) to
-- a deflate literal/LZ77_length code extra bit length.
local _length_to_deflate_extra_bitlen = {}

-- Convert a small LZ77 distance (1<=dist<=256) to a deflate code.
local _dist256_to_deflate_code = {}

-- Convert a small LZ77 distance (1<=dist<=256) to
-- a deflate distance code extra bits.
local _dist256_to_deflate_extra_bits = {}

-- Convert a small LZ77 distance (1<=dist<=256) to
-- a deflate distance code extra bit length.
local _dist256_to_deflate_extra_bitlen = {}

-- Convert a literal/LZ77_length deflate code to LZ77 base length
-- The key of the table is (code - 256), 257<=code<=285
local _literal_deflate_code_to_base_len = {
	3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
	35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258,
}

-- Convert a literal/LZ77_length deflate code to base LZ77 length extra bits
-- The key of the table is (code - 256), 257<=code<=285
local _literal_deflate_code_to_extra_bitlen = {
	0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
	3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0,
}

-- Convert a distance deflate code to base LZ77 distance. (0<=code<=29)
local _dist_deflate_code_to_base_dist = {
	[0] = 1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
	257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
	8193, 12289, 16385, 24577,
}

-- Convert a distance deflate code to LZ77 bits length. (0<=code<=29)
local _dist_deflate_code_to_extra_bitlen = {
	[0] = 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
	7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13,
}

-- The code order of the first huffman header in the dynamic deflate block.
-- See the page 12 of RFC1951
local _rle_codes_huffman_bitlen_order = {16, 17, 18,
	0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15,
}

-- The following tables are used by fixed deflate block.
-- The value of these tables are assigned at the bottom of the source.

-- The huffman code of the literal/LZ77_length deflate codes,
-- in fixed deflate block.
local _fix_block_literal_huffman_code

-- Convert huffman code of the literal/LZ77_length to deflate codes,
-- in fixed deflate block.
local _fix_block_literal_huffman_to_deflate_code

-- The bit length of the huffman code of literal/LZ77_length deflate codes,
-- in fixed deflate block.
local _fix_block_literal_huffman_bitlen

-- The count of each bit length of the literal/LZ77_length deflate codes,
-- in fixed deflate block.
local _fix_block_literal_huffman_bitlen_count

-- The huffman code of the distance deflate codes,
-- in fixed deflate block.
local _fix_block_dist_huffman_code

-- Convert huffman code of the distance to deflate codes,
-- in fixed deflate block.
local _fix_block_dist_huffman_to_deflate_code

-- The bit length of the huffman code of the distance deflate codes,
-- in fixed deflate block.
local _fix_block_dist_huffman_bitlen

-- The count of each bit length of the huffman code of
-- the distance deflate codes,
-- in fixed deflate block.
local _fix_block_dist_huffman_bitlen_count

for i = 0, 255 do
	_byte_to_char[i] = string_char(i)
end

do
	local pow = 1
	for i = 0, 32 do
		_pow2[i] = pow
		pow = pow * 2
	end
end

for i = 1, 9 do
	_reverse_bits_tbl[i] = {}
	for j=0, _pow2[i+1]-1 do
		local reverse = 0
		local value = j
		for _ = 1, i do
			-- The following line is equivalent to "res | (code %2)" in C.
			reverse = reverse - reverse%2
			+ (((reverse%2==1) or (value % 2) == 1) and 1 or 0)
			value = (value-value%2)/2
			reverse = reverse * 2
		end
		_reverse_bits_tbl[i][j] = (reverse-reverse%2)/2
	end
end

-- The source code is written according to the pattern in the numbers
-- in RFC1951 Page10.
do
	local a = 18
	local b = 16
	local c = 265
	local bitlen = 1
	for len = 3, 258 do
		if len <= 10 then
			_length_to_deflate_code[len] = len + 254
			_length_to_deflate_extra_bitlen[len] = 0
		elseif len == 258 then
			_length_to_deflate_code[len] = 285
			_length_to_deflate_extra_bitlen[len] = 0
		else
			if len > a then
				a = a + b
				b = b * 2
				c = c + 4
				bitlen = bitlen + 1
			end
			local t = len-a-1+b/2
			_length_to_deflate_code[len] = (t-(t%(b/8)))/(b/8) + c
			_length_to_deflate_extra_bitlen[len] = bitlen
			_length_to_deflate_extra_bits[len] = t % (b/8)
		end
	end
end

-- The source code is written according to the pattern in the numbers
-- in RFC1951 Page11.
do
	_dist256_to_deflate_code[1] = 0
	_dist256_to_deflate_code[2] = 1
	_dist256_to_deflate_extra_bitlen[1] = 0
	_dist256_to_deflate_extra_bitlen[2] = 0
	
	local a = 3
	local b = 4
	local code = 2
	local bitlen = 0
	for dist = 3, 256 do
		if dist > b then
			a = a * 2
			b = b * 2
			code = code + 2
			bitlen = bitlen + 1
		end
		_dist256_to_deflate_code[dist] = (dist <= a) and code or (code+1)
		_dist256_to_deflate_extra_bitlen[dist] = (bitlen < 0) and 0 or bitlen
		if b >= 8 then
			_dist256_to_deflate_extra_bits[dist] = (dist-b/2-1) % (b/4)
		end
	end
end

--- Calculate the Adler-32 checksum of the string. <br>
-- See RFC1950 Page 9 https://tools.ietf.org/html/rfc1950 for the
-- definition of Adler-32 checksum.
-- @param str [string] the input string to calcuate its Adler-32 checksum.
-- @return [integer] The Adler-32 checksum, which is greater or equal to 0,
-- and less than 2^32 (4294967296).
function LibDeflate:Adler32(str)
	-- This function is loop unrolled by better performance.
	--
	-- Here is the minimum code:
	--
	-- local a = 1
	-- local b = 0
	-- for i=1, #str do
	-- 		local s = string.byte(str, i, i)
	-- 		a = (a+s)%65521
	-- 		b = (b+a)%65521
	-- 		end
	-- return b*65536+a
	if type(str) ~= "string" then
		error(("Usage: LibDeflate:Adler32(str):"
			.." 'str' - string expected got '%s'."):format(type(str)), 2)
	end
	local strlen = #str
	
	local i = 1
	local a = 1
	local b = 0
	while i <= strlen - 15 do
		local x1, x2, x3, x4, x5, x6, x7, x8,
		x9, x10, x11, x12, x13, x14, x15, x16 = string_byte(str, i, i+15)
		b = (b+16*a+16*x1+15*x2+14*x3+13*x4+12*x5+11*x6+10*x7+9*x8+8*x9
			+7*x10+6*x11+5*x12+4*x13+3*x14+2*x15+x16)%65521
		a = (a+x1+x2+x3+x4+x5+x6+x7+x8+x9+x10+x11+x12+x13+x14+x15+x16)%65521
		i =  i + 16
	end
	while (i <= strlen) do
		local x = string_byte(str, i, i)
		a = (a + x) % 65521
		b = (b + a) % 65521
		i = i + 1
	end
	return (b*65536+a) % 4294967296
end

-- Compare adler32 checksum.
-- adler32 should be compared with a mod to avoid sign problem
-- 4072834167 (unsigned) is the same adler32 as -222133129
local function IsEqualAdler32(actual, expected)
	return (actual % 4294967296) == (expected % 4294967296)
end

--- Create a preset dictionary.
--
-- This function is not fast, and the memory consumption of the produced
-- dictionary is about 50 times of the input string. Therefore, it is suggestted
-- to run this function only once in your program.
--
-- It is very important to know that if you do use a preset dictionary,
-- compressors and decompressors MUST USE THE SAME dictionary. That is,
-- dictionary must be created using the same string. If you update your program
-- with a new dictionary, people with the old version won't be able to transmit
-- data with people with the new version. Therefore, changing the dictionary
-- must be very careful.
--
-- The parameters "strlen" and "adler32" add a layer of verification to ensure
-- the parameter "str" is not modified unintentionally during the program
-- development.
--
-- @usage local dict_str = "1234567890"
--
-- -- print(dict_str:len(), LibDeflate:Adler32(dict_str))
-- -- Hardcode the print result below to verify it to avoid acciently
-- -- modification of 'str' during the program development.
-- -- string length: 10, Adler-32: 187433486,
-- -- Don't calculate string length and its Adler-32 at run-time.
--
-- local dict = LibDeflate:CreateDictionary(dict_str, 10, 187433486)
--
-- @param str [string] The string used as the preset dictionary. <br>
-- You should put stuffs that frequently appears in the dictionary
-- string and preferablely put more frequently appeared stuffs toward the end
-- of the string. <br>
-- Empty string and string longer than 32768 bytes are not allowed.
-- @param strlen [integer] The length of 'str'. Please pass in this parameter
-- as a hardcoded constant, in order to verify the content of 'str'. The value
-- of this parameter should be known before your program runs.
-- @param adler32 [integer] The Adler-32 checksum of 'str'. Please pass in this
-- parameter as a hardcoded constant, in order to verify the content of 'str'.
-- The value of this parameter should be known before your program runs.
-- @return  [table] The dictionary used for preset dictionary compression and
-- decompression.
-- @raise error if 'strlen' does not match the length of 'str',
-- or if 'adler32' does not match the Adler-32 checksum of 'str'.
function LibDeflate:CreateDictionary(str, strlen, adler32)
	if type(str) ~= "string" then
		error(("Usage: LibDeflate:CreateDictionary(str, strlen, adler32):"
			.." 'str' - string expected got '%s'."):format(type(str)), 2)
	end
	if type(strlen) ~= "number" then
		error(("Usage: LibDeflate:CreateDictionary(str, strlen, adler32):"
			.." 'strlen' - number expected got '%s'."):format(
				type(strlen)), 2)
	end
	if type(adler32) ~= "number" then
		error(("Usage: LibDeflate:CreateDictionary(str, strlen, adler32):"
			.." 'adler32' - number expected got '%s'."):format(
				type(adler32)), 2)
	end
	if strlen ~= #str then
		error(("Usage: LibDeflate:CreateDictionary(str, strlen, adler32):"
			.." 'strlen' does not match the actual length of 'str'."
			.." 'strlen': %u, '#str': %u ."
			.." Please check if 'str' is modified unintentionally.")
			:format(strlen, #str))
	end
	if strlen == 0 then
		error(("Usage: LibDeflate:CreateDictionary(str, strlen, adler32):"
			.." 'str' - Empty string is not allowed."), 2)
	end
	if strlen > 32768 then
		error(("Usage: LibDeflate:CreateDictionary(str, strlen, adler32):"
			.." 'str' - string longer than 32768 bytes is not allowed."
			.." Got %d bytes."):format(strlen), 2)
	end
	local actual_adler32 = self:Adler32(str)
	if not IsEqualAdler32(adler32, actual_adler32) then
		error(("Usage: LibDeflate:CreateDictionary(str, strlen, adler32):"
			.." 'adler32' does not match the actual adler32 of 'str'."
			.." 'adler32': %u, 'Adler32(str)': %u ."
			.." Please check if 'str' is modified unintentionally.")
			:format(adler32, actual_adler32))
	end
	
	local dictionary = {}
	dictionary.adler32 = adler32
	dictionary.hash_tables = {}
	dictionary.string_table = {}
	dictionary.strlen = strlen
	local string_table = dictionary.string_table
	local hash_tables = dictionary.hash_tables
	string_table[1] = string_byte(str, 1, 1)
	string_table[2] = string_byte(str, 2, 2)
	if strlen >= 3 then
		local i = 1
		local hash = string_table[1]*256+string_table[2]
		while i <= strlen - 2 - 3 do
			local x1, x2, x3, x4 = string_byte(str, i+2, i+5)
			string_table[i+2] = x1
			string_table[i+3] = x2
			string_table[i+4] = x3
			string_table[i+5] = x4
			hash = (hash*256+x1)%16777216
			local t = hash_tables[hash]
			if not t then t = {}; hash_tables[hash] = t end
			t[#t+1] = i-strlen
			i = i + 1
			hash = (hash*256+x2)%16777216
			t = hash_tables[hash]
			if not t then t = {}; hash_tables[hash] = t end
			t[#t+1] = i-strlen
			i = i + 1
			hash = (hash*256+x3)%16777216
			t = hash_tables[hash]
			if not t then t = {}; hash_tables[hash] = t end
			t[#t+1] = i-strlen
			i = i + 1
			hash = (hash*256+x4)%16777216
			t = hash_tables[hash]
			if not t then t = {}; hash_tables[hash] = t end
			t[#t+1] = i-strlen
			i = i + 1
		end
		while i <= strlen - 2 do
			local x = string_byte(str, i+2)
			string_table[i+2] = x
			hash = (hash*256+x)%16777216
			local t = hash_tables[hash]
			if not t then t = {}; hash_tables[hash] = t end
			t[#t+1] = i-strlen
			i = i + 1
		end
	end
	return dictionary
end

-- Check if the dictionary is valid.
-- @param dictionary The preset dictionary for compression and decompression.
-- @return true if valid, false if not valid.
-- @return if not valid, the error message.
local function IsValidDictionary(dictionary)
	if type(dictionary) ~= "table" then
		return false, ("'dictionary' - table expected got '%s'.")
		:format(type(dictionary))
	end
	if type(dictionary.adler32) ~= "number"
		or type(dictionary.string_table) ~= "table"
		or type(dictionary.strlen) ~= "number"
		or dictionary.strlen <= 0
		or dictionary.strlen > 32768
		or dictionary.strlen ~= #dictionary.string_table
		or type(dictionary.hash_tables) ~= "table"
	then
		return false, ("'dictionary' - corrupted dictionary.")
		:format(type(dictionary))
	end
	return true, ""
end

--[[
	key of the configuration table is the compression level,
	and its value stores the compression setting.
	These numbers come from zlib source code.
	Higher compression level usually means better compression.
	(Because LibDeflate uses a simplified version of zlib algorithm,
	there is no guarantee that higher compression level does not create
	bigger file than lower level, but I can say it's 99% likely)
	Be careful with the high compression level. This is a pure lua
	implementation compressor/decompressor, which is significant slower than
	a C/C++ equivalant compressor/decompressor. Very high compression level
	costs significant more CPU time, and usually compression size won't be
	significant smaller when you increase compression level by 1, when the
	level is already very high. Benchmark yourself if you can afford it.
	See also https://github.com/madler/zlib/blob/master/doc/algorithm.txt,
	https://github.com/madler/zlib/blob/master/deflate.c for more information.
	The meaning of each field:
	@field 1 use_lazy_evaluation:
		true/false. Whether the program uses lazy evaluation.
		See what is "lazy evaluation" in the link above.
		lazy_evaluation improves ratio, but relatively slow.
	@field 2 good_prev_length:
		Only effective if lazy is set, Only use 1/4 of max_chain,
		if prev length of lazy match is above this.
	@field 3 max_insert_length/max_lazy_match:
		If not using lazy evaluation,
		insert new strings in the hash table only if the match length is not
		greater than this length.
		If using lazy evaluation, only continue lazy evaluation,
		if previous match length is strictly smaller than this value.
	@field 4 nice_length:
		Number. Don't continue to go down the hash chain,
		if match length is above this.
	@field 5 max_chain:
		Number. The maximum number of hash chains we look.
--]]
local _compression_level_configs = {
	[0] = {false, nil, 0, 0, 0}, -- level 0, no compression
	[1] = {false, nil, 4, 8, 4}, -- level 1, similar to zlib level 1
	[2] = {false, nil, 5, 18, 8}, -- level 2, similar to zlib level 2
	[3] = {false, nil, 6, 32, 32},	-- level 3, similar to zlib level 3
	[4] = {true, 4,	4, 16, 16},	-- level 4, similar to zlib level 4
	[5] = {true, 8,	16,	32,	32}, -- level 5, similar to zlib level 5
	[6] = {true, 8,	16,	128, 128}, -- level 6, similar to zlib level 6
	[7] = {true, 8,	32,	128, 256}, -- (SLOW) level 7, similar to zlib level 7
	[8] = {true, 32, 128, 258, 1024} , --(SLOW) level 8,similar to zlib level 8
	[9] = {true, 32, 258, 258, 4096},
	-- (VERY SLOW) level 9, similar to zlib level 9
}

-- Check if the compression/decompression arguments is valid
-- @param str The input string.
-- @param check_dictionary if true, check if dictionary is valid.
-- @param dictionary The preset dictionary for compression and decompression.
-- @param check_configs if true, check if config is valid.
-- @param configs The compression configuration table
-- @return true if valid, false if not valid.
-- @return if not valid, the error message.
local function IsValidArguments(str,
	check_dictionary, dictionary,
	check_configs, configs)
	
	if type(str) ~= "string" then
		return false,
			("'str' - string expected got '%s'."):format(type(str))
	end
	if check_dictionary then
		local dict_valid, dict_err = IsValidDictionary(dictionary)
		if not dict_valid then
			return false, dict_err
		end
	end
	if check_configs then
		local type_configs = type(configs)
		if type_configs ~= "nil" and type_configs ~= "table" then
			return false,
				("'configs' - nil or table expected got '%s'.")
			:format(type(configs))
		end
		if type_configs == "table" then
			for k, v in pairs(configs) do
				if k ~= "level" and k ~= "strategy" then
					return false,
						("'configs' - unsupported table key in the configs: '%s'.")
					:format(k)
				elseif k == "level" and not _compression_level_configs[v] then
					return false,
						("'configs' - unsupported 'level': %s."):format(tostring(v))
				elseif k == "strategy" and v ~= "fixed" and v ~= "huffman_only"
					and v ~= "dynamic" then
					-- random_block_type is for testing purpose
					return false, ("'configs' - unsupported 'strategy': '%s'.")
					:format(tostring(v))
				end
			end
		end
	end
	return true, ""
end



--[[ --------------------------------------------------------------------------
	Compress code
--]] --------------------------------------------------------------------------

-- partial flush to save memory
local _FLUSH_MODE_MEMORY_CLEANUP = 0
-- full flush with partial bytes
local _FLUSH_MODE_OUTPUT = 1
-- write bytes to get to byte boundary
local _FLUSH_MODE_BYTE_BOUNDARY = 2
-- no flush, just get num of bits written so far
local _FLUSH_MODE_NO_FLUSH = 3

--[[
	Create an empty writer to easily write stuffs as the unit of bits.
	Return values:
	1. WriteBits(code, bitlen):
	2. WriteString(str):
	3. Flush(mode):
--]]
local function CreateWriter()
	local buffer_size = 0
	local cache = 0
	local cache_bitlen = 0
	local total_bitlen = 0
	local buffer = {}
	-- When buffer is big enough, flush into result_buffer to save memory.
	local result_buffer = {}
	
	-- Write bits with value "value" and bit length of "bitlen" into writer.
	-- @param value: The value being written
	-- @param bitlen: The bit length of "value"
	-- @return nil
	local function WriteBits(value, bitlen)
		cache = cache + value * _pow2[cache_bitlen]
		cache_bitlen = cache_bitlen + bitlen
		total_bitlen = total_bitlen + bitlen
		-- Only bulk to buffer every 4 bytes. This is quicker.
		if cache_bitlen >= 32 then
			buffer_size = buffer_size + 1
			buffer[buffer_size] =
				_byte_to_char[cache % 256]
				.._byte_to_char[((cache-cache%256)/256 % 256)]
				.._byte_to_char[((cache-cache%65536)/65536 % 256)]
				.._byte_to_char[((cache-cache%16777216)/16777216 % 256)]
			local rshift_mask = _pow2[32 - cache_bitlen + bitlen]
			cache = (value - value%rshift_mask)/rshift_mask
			cache_bitlen = cache_bitlen - 32
		end
	end
	
	-- Write the entire string into the writer.
	-- @param str The string being written
	-- @return nil
	local function WriteString(str)
		for _ = 1, cache_bitlen, 8 do
			buffer_size = buffer_size + 1
			buffer[buffer_size] = string_char(cache % 256)
			cache = (cache-cache%256)/256
		end
		cache_bitlen = 0
		buffer_size = buffer_size + 1
		buffer[buffer_size] = str
		total_bitlen = total_bitlen + #str*8
	end
	
	-- Flush current stuffs in the writer and return it.
	-- This operation will free most of the memory.
	-- @param mode See the descrtion of the constant and the source code.
	-- @return The total number of bits stored in the writer right now.
	-- for byte boundary mode, it includes the padding bits.
	-- for output mode, it does not include padding bits.
	-- @return Return the outputs if mode is output.
	local function FlushWriter(mode)
		if mode == _FLUSH_MODE_NO_FLUSH then
			return total_bitlen
		end
		
		if mode == _FLUSH_MODE_OUTPUT
			or mode == _FLUSH_MODE_BYTE_BOUNDARY then
			-- Full flush, also output cache.
			-- Need to pad some bits if cache_bitlen is not multiple of 8.
			local padding_bitlen = (8 - cache_bitlen % 8) % 8
			
			if cache_bitlen > 0 then
				-- padding with all 1 bits, mainly because "\000" is not
				-- good to be tranmitted. I do this so "\000" is a little bit
				-- less frequent.
				cache = cache - _pow2[cache_bitlen]
				+ _pow2[cache_bitlen+padding_bitlen]
				for _ = 1, cache_bitlen, 8 do
					buffer_size = buffer_size + 1
					buffer[buffer_size] = _byte_to_char[cache % 256]
					cache = (cache-cache%256)/256
				end
				
				cache = 0
				cache_bitlen = 0
			end
			if mode == _FLUSH_MODE_BYTE_BOUNDARY then
				total_bitlen = total_bitlen + padding_bitlen
				return total_bitlen
			end
		end
		
		local flushed = table_concat(buffer)
		buffer = {}
		buffer_size = 0
		result_buffer[#result_buffer+1] = flushed
		
		if mode == _FLUSH_MODE_MEMORY_CLEANUP then
			return total_bitlen
		else
			return total_bitlen, table_concat(result_buffer)
		end
	end
	
	return WriteBits, WriteString, FlushWriter
end

-- Push an element into a max heap
-- @param heap A max heap whose max element is at index 1.
-- @param e The element to be pushed. Assume element "e" is a table
--  and comparison is done via its first entry e[1]
-- @param heap_size current number of elements in the heap.
--  NOTE: There may be some garbage stored in
--  heap[heap_size+1], heap[heap_size+2], etc..
-- @return nil
local function MinHeapPush(heap, e, heap_size)
	heap_size = heap_size + 1
	heap[heap_size] = e
	local value = e[1]
	local pos = heap_size
	local parent_pos = (pos-pos%2)/2
	
	while (parent_pos >= 1 and heap[parent_pos][1] > value) do
		local t = heap[parent_pos]
		heap[parent_pos] = e
		heap[pos] = t
		pos = parent_pos
		parent_pos = (parent_pos-parent_pos%2)/2
	end
end

-- Pop an element from a max heap
-- @param heap A max heap whose max element is at index 1.
-- @param heap_size current number of elements in the heap.
-- @return the poped element
-- Note: This function does not change table size of "heap" to save CPU time.
local function MinHeapPop(heap, heap_size)
	local top = heap[1]
	local e = heap[heap_size]
	local value = e[1]
	heap[1] = e
	heap[heap_size] = top
	heap_size = heap_size - 1
	
	local pos = 1
	local left_child_pos = pos * 2
	local right_child_pos = left_child_pos + 1
	
	while (left_child_pos <= heap_size) do
		local left_child = heap[left_child_pos]
		if (right_child_pos <= heap_size
			and heap[right_child_pos][1] < left_child[1]) then
			local right_child = heap[right_child_pos]
			if right_child[1] < value then
				heap[right_child_pos] = e
				heap[pos] = right_child
				pos = right_child_pos
				left_child_pos = pos * 2
				right_child_pos = left_child_pos + 1
			else
				break
			end
		else
			if left_child[1] < value then
				heap[left_child_pos] = e
				heap[pos] = left_child
				pos = left_child_pos
				left_child_pos = pos * 2
				right_child_pos = left_child_pos + 1
			else
				break
			end
		end
	end
	
	return top
end

-- Deflate defines a special huffman tree, which is unique once the bit length
-- of huffman code of all symbols are known.
-- @param bitlen_count Number of symbols with a specific bitlen
-- @param symbol_bitlen The bit length of a symbol
-- @param max_symbol The max symbol among all symbols,
--		which is (number of symbols - 1)
-- @param max_bitlen The max huffman bit length among all symbols.
-- @return The huffman code of all symbols.
local function GetHuffmanCodeFromBitlen(bitlen_counts, symbol_bitlens
	, max_symbol, max_bitlen)
	local huffman_code = 0
	local next_codes = {}
	local symbol_huffman_codes = {}
	for bitlen = 1, max_bitlen do
		huffman_code = (huffman_code+(bitlen_counts[bitlen-1] or 0))*2
		next_codes[bitlen] = huffman_code
	end
	for symbol = 0, max_symbol do
		local bitlen = symbol_bitlens[symbol]
		if bitlen then
			huffman_code = next_codes[bitlen]
			next_codes[bitlen] = huffman_code + 1
			
			-- Reverse the bits of huffman code,
			-- because most signifant bits of huffman code
			-- is stored first into the compressed data.
			-- @see RFC1951 Page5 Section 3.1.1
			if bitlen <= 9 then -- Have cached reverse for small bitlen.
				symbol_huffman_codes[symbol] =
					_reverse_bits_tbl[bitlen][huffman_code]
			else
				local reverse = 0
				for _ = 1, bitlen do
					reverse = reverse - reverse%2
					+ (((reverse%2==1)
						or (huffman_code % 2) == 1) and 1 or 0)
					huffman_code = (huffman_code-huffman_code%2)/2
					reverse = reverse*2
				end
				symbol_huffman_codes[symbol] = (reverse-reverse%2)/2
			end
		end
	end
	return symbol_huffman_codes
end

-- A helper function to sort heap elements
-- a[1], b[1] is the huffman frequency
-- a[2], b[2] is the symbol value.
local function SortByFirstThenSecond(a, b)
	return a[1] < b[1] or
		(a[1] == b[1] and a[2] < b[2])
end

-- Calculate the huffman bit length and huffman code.
-- @param symbol_count: A table whose table key is the symbol, and table value
--		is the symbol frenquency (nil means 0 frequency).
-- @param max_bitlen: See description of return value.
-- @param max_symbol: The maximum symbol
-- @return a table whose key is the symbol, and the value is the huffman bit
--		bit length. We guarantee that all bit length <= max_bitlen.
--		For 0<=symbol<=max_symbol, table value could be nil if the frequency
--		of the symbol is 0 or nil.
-- @return a table whose key is the symbol, and the value is the huffman code.
-- @return a number indicating the maximum symbol whose bitlen is not 0.
local function GetHuffmanBitlenAndCode(symbol_counts, max_bitlen, max_symbol)
	local heap_size
	local max_non_zero_bitlen_symbol = -1
	local leafs = {}
	local heap = {}
	local symbol_bitlens = {}
	local symbol_codes = {}
	local bitlen_counts = {}
	
	--[[
		tree[1]: weight, temporarily used as parent and bitLengths
		tree[2]: symbol
		tree[3]: left child
		tree[4]: right child
	--]]
	local number_unique_symbols = 0
	for symbol, count in pairs(symbol_counts) do
		number_unique_symbols = number_unique_symbols + 1
		leafs[number_unique_symbols] = {count, symbol}
	end
	
	if (number_unique_symbols == 0) then
		-- no code.
		return {}, {}, -1
	elseif (number_unique_symbols == 1) then
		-- Only one code. In this case, its huffman code
		-- needs to be assigned as 0, and bit length is 1.
		-- This is the only case that the return result
		-- represents an imcomplete huffman tree.
		local symbol = leafs[1][2]
		symbol_bitlens[symbol] = 1
		symbol_codes[symbol] = 0
		return symbol_bitlens, symbol_codes, symbol
	else
		table_sort(leafs, SortByFirstThenSecond)
		heap_size = number_unique_symbols
		for i = 1, heap_size do
			heap[i] = leafs[i]
		end
		
		while (heap_size > 1) do
			-- Note: pop does not change table size of heap
			local leftChild = MinHeapPop(heap, heap_size)
			heap_size = heap_size - 1
			local rightChild = MinHeapPop(heap, heap_size)
			heap_size = heap_size - 1
			local newNode =
			{leftChild[1]+rightChild[1], -1, leftChild, rightChild}
			MinHeapPush(heap, newNode, heap_size)
			heap_size = heap_size + 1
		end
		
		-- Number of leafs whose bit length is greater than max_len.
		local number_bitlen_overflow = 0
		
		-- Calculate bit length of all nodes
		local fifo = {heap[1], 0, 0, 0} -- preallocate some spaces.
		local fifo_size = 1
		local index = 1
		heap[1][1] = 0
		while (index <= fifo_size) do -- Breath first search
			local e = fifo[index]
			local bitlen = e[1]
			local symbol = e[2]
			local left_child = e[3]
			local right_child = e[4]
			if left_child then
				fifo_size = fifo_size + 1
				fifo[fifo_size] = left_child
				left_child[1] = bitlen + 1
			end
			if right_child then
				fifo_size = fifo_size + 1
				fifo[fifo_size] = right_child
				right_child[1] = bitlen + 1
			end
			index = index + 1
			
			if (bitlen > max_bitlen) then
				number_bitlen_overflow = number_bitlen_overflow + 1
				bitlen = max_bitlen
			end
			if symbol >= 0 then
				symbol_bitlens[symbol] = bitlen
				max_non_zero_bitlen_symbol =
					(symbol > max_non_zero_bitlen_symbol)
					and symbol or max_non_zero_bitlen_symbol
				bitlen_counts[bitlen] = (bitlen_counts[bitlen] or 0) + 1
			end
		end
		
		-- Resolve bit length overflow
		-- @see ZLib/trees.c:gen_bitlen(s, desc), for reference
		if (number_bitlen_overflow > 0) then
			repeat
				local bitlen = max_bitlen - 1
				while ((bitlen_counts[bitlen] or 0) == 0) do
					bitlen = bitlen - 1
				end
				-- move one leaf down the tree
				bitlen_counts[bitlen] = bitlen_counts[bitlen] - 1
				-- move one overflow item as its brother
				bitlen_counts[bitlen+1] = (bitlen_counts[bitlen+1] or 0) + 2
				bitlen_counts[max_bitlen] = bitlen_counts[max_bitlen] - 1
				number_bitlen_overflow = number_bitlen_overflow - 2
			until (number_bitlen_overflow <= 0)
			
			index = 1
			for bitlen = max_bitlen, 1, -1 do
				local n = bitlen_counts[bitlen] or 0
				while (n > 0) do
					local symbol = leafs[index][2]
					symbol_bitlens[symbol] = bitlen
					n = n - 1
					index = index + 1
				end
			end
		end
		
		symbol_codes = GetHuffmanCodeFromBitlen(bitlen_counts, symbol_bitlens,
			max_symbol, max_bitlen)
		return symbol_bitlens, symbol_codes, max_non_zero_bitlen_symbol
	end
end

-- Calculate the first huffman header in the dynamic huffman block
-- @see RFC1951 Page 12
-- @param lcode_bitlen: The huffman bit length of literal/LZ77_length.
-- @param max_non_zero_bitlen_lcode: The maximum literal/LZ77_length symbol
--		whose huffman bit length is not zero.
-- @param dcode_bitlen: The huffman bit length of LZ77 distance.
-- @param max_non_zero_bitlen_dcode: The maximum LZ77 distance symbol
--		whose huffman bit length is not zero.
-- @return The run length encoded codes.
-- @return The extra bits. One entry for each rle code that needs extra bits.
--		(code == 16 or 17 or 18).
-- @return The count of appearance of each rle codes.
local function RunLengthEncodeHuffmanBitlen(
	lcode_bitlens,
	max_non_zero_bitlen_lcode,
	dcode_bitlens,
	max_non_zero_bitlen_dcode)
	local rle_code_tblsize = 0
	local rle_codes = {}
	local rle_code_counts = {}
	local rle_extra_bits_tblsize = 0
	local rle_extra_bits = {}
	local prev = nil
	local count = 0
	
	-- If there is no distance code, assume one distance code of bit length 0.
	-- RFC1951: One distance code of zero bits means that
	-- there are no distance codes used at all (the data is all literals).
	max_non_zero_bitlen_dcode = (max_non_zero_bitlen_dcode < 0)
	and 0 or max_non_zero_bitlen_dcode
	local max_code = max_non_zero_bitlen_lcode+max_non_zero_bitlen_dcode+1
	
	for code = 0, max_code+1 do
		local len = (code <= max_non_zero_bitlen_lcode)
		and (lcode_bitlens[code] or 0)
		or ((code <= max_code)
			and (dcode_bitlens[code-max_non_zero_bitlen_lcode-1] or 0) or nil)
		if len == prev then
			count = count + 1
			if len ~= 0 and count == 6 then
				rle_code_tblsize = rle_code_tblsize + 1
				rle_codes[rle_code_tblsize] = 16
				rle_extra_bits_tblsize = rle_extra_bits_tblsize + 1
				rle_extra_bits[rle_extra_bits_tblsize] = 3
				rle_code_counts[16] = (rle_code_counts[16] or 0) + 1
				count = 0
			elseif len == 0 and count == 138 then
				rle_code_tblsize = rle_code_tblsize + 1
				rle_codes[rle_code_tblsize] = 18
				rle_extra_bits_tblsize = rle_extra_bits_tblsize + 1
				rle_extra_bits[rle_extra_bits_tblsize] = 127
				rle_code_counts[18] = (rle_code_counts[18] or 0) + 1
				count = 0
			end
		else
			if count == 1 then
				rle_code_tblsize = rle_code_tblsize + 1
				rle_codes[rle_code_tblsize] = prev
				rle_code_counts[prev] = (rle_code_counts[prev] or 0) + 1
			elseif count == 2 then
				rle_code_tblsize = rle_code_tblsize + 1
				rle_codes[rle_code_tblsize] = prev
				rle_code_tblsize = rle_code_tblsize + 1
				rle_codes[rle_code_tblsize] = prev
				rle_code_counts[prev] = (rle_code_counts[prev] or 0) + 2
			elseif count >= 3 then
				rle_code_tblsize = rle_code_tblsize + 1
				local rleCode = (prev ~= 0) and 16 or (count <= 10 and 17 or 18)
				rle_codes[rle_code_tblsize] = rleCode
				rle_code_counts[rleCode] = (rle_code_counts[rleCode] or 0) + 1
				rle_extra_bits_tblsize = rle_extra_bits_tblsize + 1
				rle_extra_bits[rle_extra_bits_tblsize] =
					(count <= 10) and (count - 3) or (count - 11)
			end
			
			prev = len
			if len and len ~= 0 then
				rle_code_tblsize = rle_code_tblsize + 1
				rle_codes[rle_code_tblsize] = len
				rle_code_counts[len] = (rle_code_counts[len] or 0) + 1
				count = 0
			else
				count = 1
			end
		end
	end
	
	return rle_codes, rle_extra_bits, rle_code_counts
end

-- Load the string into a table, in order to speed up LZ77.
-- Loop unrolled 16 times to speed this function up.
-- @param str The string to be loaded.
-- @param t The load destination
-- @param start str[index] will be the first character to be loaded.
-- @param end str[index] will be the last character to be loaded
-- @param offset str[index] will be loaded into t[index-offset]
-- @return t
local function LoadStringToTable(str, t, start, stop, offset)
	local i = start - offset
	while i <= stop - 15 - offset do
		t[i], t[i+1], t[i+2], t[i+3], t[i+4], t[i+5], t[i+6], t[i+7], t[i+8],
			t[i+9], t[i+10], t[i+11], t[i+12], t[i+13], t[i+14], t[i+15] =
			string_byte(str, i + offset, i + 15 + offset)
		i = i + 16
	end
	while (i <= stop - offset) do
		t[i] = string_byte(str, i + offset, i + offset)
		i = i + 1
	end
	return t
end

-- Do LZ77 process. This function uses the majority of the CPU time.
-- @see zlib/deflate.c:deflate_fast(), zlib/deflate.c:deflate_slow()
-- @see https://github.com/madler/zlib/blob/master/doc/algorithm.txt
-- This function uses the algorithms used above. You should read the
-- algorithm.txt above to understand what is the hash function and the
-- lazy evaluation.
--
-- The special optimization used here is hash functions used here.
-- The hash function is just the multiplication of the three consective
-- characters. So if the hash matches, it guarantees 3 characters are matched.
-- This optimization can be implemented because Lua table is a hash table.
--
-- @param level integer that describes compression level.
-- @param string_table table that stores the value of string to be compressed.
--			The index of this table starts from 1.
--			The caller needs to make sure all values needed by this function
--			are loaded.
--			Assume "str" is the origin input string into the compressor
--			str[block_start]..str[block_end+3] needs to be loaded into
--			string_table[block_start-offset]..string_table[block_end-offset]
--			If dictionary is presented, the last 258 bytes of the dictionary
--			needs to be loaded into sing_table[-257..0]
--			(See more in the description of offset.)
-- @param hash_tables. The table key is the hash value (0<=hash<=16777216=256^3)
--			The table value is an array0 that stores the indexes of the
--			input data string to be compressed, such that
--			hash == str[index]*str[index+1]*str[index+2]
--			Indexes are ordered in this array.
-- @param block_start The indexes of the input data string to be compressed.
--				that starts the LZ77 block.
-- @param block_end The indexes of the input data string to be compressed.
--				that stores the LZ77 block.
-- @param offset str[index] is stored in string_table[index-offset],
--			This offset is mainly an optimization to limit the index
--			of string_table, so lua can access this table quicker.
-- @param dictionary See LibDeflate:CreateDictionary
-- @return literal/LZ77_length deflate codes.
-- @return the extra bits of literal/LZ77_length deflate codes.
-- @return the count of each literal/LZ77 deflate code.
-- @return LZ77 distance deflate codes.
-- @return the extra bits of LZ77 distance deflate codes.
-- @return the count of each LZ77 distance deflate code.
local function GetBlockLZ77Result(level, string_table, hash_tables, block_start,
	block_end, offset, dictionary)
	local config = _compression_level_configs[level]
	local config_use_lazy
	, config_good_prev_length
	, config_max_lazy_match
	, config_nice_length
	, config_max_hash_chain =
		config[1], config[2], config[3], config[4], config[5]
	
	local config_max_insert_length = (not config_use_lazy)
	and config_max_lazy_match or 2147483646
	local config_good_hash_chain =
		(config_max_hash_chain-config_max_hash_chain%4/4)
	
	local hash
	
	local dict_hash_tables
	local dict_string_table
	local dict_string_len = 0
	
	if dictionary then
		dict_hash_tables = dictionary.hash_tables
		dict_string_table = dictionary.string_table
		dict_string_len = dictionary.strlen
		assert(block_start == 1)
		if block_end >= block_start and dict_string_len >= 2 then
			hash = dict_string_table[dict_string_len-1]*65536
			+ dict_string_table[dict_string_len]*256 + string_table[1]
			local t = hash_tables[hash]
			if not t then t = {}; hash_tables[hash] = t end
			t[#t+1] = -1
		end
		if block_end >= block_start+1 and dict_string_len >= 1 then
			hash = dict_string_table[dict_string_len]*65536
			+ string_table[1]*256 + string_table[2]
			local t = hash_tables[hash]
			if not t then t = {}; hash_tables[hash] = t end
			t[#t+1] = 0
		end
	end
	
	local dict_string_len_plus3 = dict_string_len + 3
	
	hash = (string_table[block_start-offset] or 0)*256
	+ (string_table[block_start+1-offset] or 0)
	
	local lcodes = {}
	local lcode_tblsize = 0
	local lcodes_counts = {}
	local dcodes = {}
	local dcodes_tblsize = 0
	local dcodes_counts = {}
	
	local lextra_bits = {}
	local lextra_bits_tblsize = 0
	local dextra_bits = {}
	local dextra_bits_tblsize = 0
	
	local match_available = false
	local prev_len
	local prev_dist
	local cur_len = 0
	local cur_dist = 0
	
	local index = block_start
	local index_end = block_end + (config_use_lazy and 1 or 0)
	
	-- the zlib source code writes separate code for lazy evaluation and
	-- not lazy evaluation, which is easier to understand.
	-- I put them together, so it is a bit harder to understand.
	-- because I think this is easier for me to maintain it.
	while (index <= index_end) do
		local string_table_index = index - offset
		local offset_minus_three = offset - 3
		prev_len = cur_len
		prev_dist = cur_dist
		cur_len = 0
		
		hash = (hash*256+(string_table[string_table_index+2] or 0))%16777216
		
		local chain_index
		local cur_chain
		local hash_chain = hash_tables[hash]
		local chain_old_size
		if not hash_chain then
			chain_old_size = 0
			hash_chain = {}
			hash_tables[hash] = hash_chain
			if dict_hash_tables then
				cur_chain = dict_hash_tables[hash]
				chain_index = cur_chain and #cur_chain or 0
			else
				chain_index = 0
			end
		else
			chain_old_size = #hash_chain
			cur_chain = hash_chain
			chain_index = chain_old_size
		end
		
		if index <= block_end then
			hash_chain[chain_old_size+1] = index
		end
		
		if (chain_index > 0 and index + 2 <= block_end
			and (not config_use_lazy or prev_len < config_max_lazy_match)) then
			
			local depth =
				(config_use_lazy and prev_len >= config_good_prev_length)
				and config_good_hash_chain or config_max_hash_chain
			
			local max_len_minus_one = block_end - index
			max_len_minus_one = (max_len_minus_one >= 257) and 257 or max_len_minus_one
			max_len_minus_one = max_len_minus_one + string_table_index
			local string_table_index_plus_three = string_table_index + 3
			
			while chain_index >= 1 and depth > 0 do
				local prev = cur_chain[chain_index]
				
				if index - prev > 32768 then
					break
				end
				if prev < index then
					local sj = string_table_index_plus_three
					
					if prev >= -257 then
						local pj = prev - offset_minus_three
						while (sj <= max_len_minus_one
							and string_table[pj]
							== string_table[sj]) do
							sj = sj + 1
							pj = pj + 1
						end
					else
						local pj = dict_string_len_plus3 + prev
						while (sj <= max_len_minus_one
							and dict_string_table[pj]
							== string_table[sj]) do
							sj = sj + 1
							pj = pj + 1
						end
					end
					local j = sj - string_table_index
					if j > cur_len then
						cur_len = j
						cur_dist = index - prev
					end
					if cur_len >= config_nice_length then
						break
					end
				end
				
				chain_index = chain_index - 1
				depth = depth - 1
				if chain_index == 0 and prev > 0 and dict_hash_tables then
					cur_chain = dict_hash_tables[hash]
					chain_index = cur_chain and #cur_chain or 0
				end
			end
		end
		
		if not config_use_lazy then
			prev_len, prev_dist = cur_len, cur_dist
		end
		if ((not config_use_lazy or match_available)
			and (prev_len > 3 or (prev_len == 3 and prev_dist < 4096))
			and cur_len <= prev_len )then
			local code = _length_to_deflate_code[prev_len]
			local length_extra_bits_bitlen =
				_length_to_deflate_extra_bitlen[prev_len]
			local dist_code, dist_extra_bits_bitlen, dist_extra_bits
			if prev_dist <= 256 then -- have cached code for small distance.
				dist_code = _dist256_to_deflate_code[prev_dist]
				dist_extra_bits = _dist256_to_deflate_extra_bits[prev_dist]
				dist_extra_bits_bitlen =
					_dist256_to_deflate_extra_bitlen[prev_dist]
			else
				dist_code = 16
				dist_extra_bits_bitlen = 7
				local a = 384
				local b = 512
				
				while true do
					if prev_dist <= a then
						dist_extra_bits = (prev_dist-(b/2)-1) % (b/4)
						break
					elseif prev_dist <= b then
						dist_extra_bits = (prev_dist-(b/2)-1) % (b/4)
						dist_code = dist_code + 1
						break
					else
						dist_code = dist_code + 2
						dist_extra_bits_bitlen = dist_extra_bits_bitlen + 1
						a = a*2
						b = b*2
					end
				end
			end
			lcode_tblsize = lcode_tblsize + 1
			lcodes[lcode_tblsize] = code
			lcodes_counts[code] = (lcodes_counts[code] or 0) + 1
			
			dcodes_tblsize = dcodes_tblsize + 1
			dcodes[dcodes_tblsize] = dist_code
			dcodes_counts[dist_code] = (dcodes_counts[dist_code] or 0) + 1
			
			if length_extra_bits_bitlen > 0 then
				local lenExtraBits = _length_to_deflate_extra_bits[prev_len]
				lextra_bits_tblsize = lextra_bits_tblsize + 1
				lextra_bits[lextra_bits_tblsize] = lenExtraBits
			end
			if dist_extra_bits_bitlen > 0 then
				dextra_bits_tblsize = dextra_bits_tblsize + 1
				dextra_bits[dextra_bits_tblsize] = dist_extra_bits
			end
			
			for i=index+1, index+prev_len-(config_use_lazy and 2 or 1) do
				hash = (hash*256+(string_table[i-offset+2] or 0))%16777216
				if prev_len <= config_max_insert_length then
					hash_chain = hash_tables[hash]
					if not hash_chain then
						hash_chain = {}
						hash_tables[hash] = hash_chain
					end
					hash_chain[#hash_chain+1] = i
				end
			end
			index = index + prev_len - (config_use_lazy and 1 or 0)
			match_available = false
		elseif (not config_use_lazy) or match_available then
			local code = string_table[config_use_lazy
			and (string_table_index-1) or string_table_index]
			lcode_tblsize = lcode_tblsize + 1
			lcodes[lcode_tblsize] = code
			lcodes_counts[code] = (lcodes_counts[code] or 0) + 1
			index = index + 1
		else
			match_available = true
			index = index + 1
		end
	end
	
	-- Write "end of block" symbol
	lcode_tblsize = lcode_tblsize + 1
	lcodes[lcode_tblsize] = 256
	lcodes_counts[256] = (lcodes_counts[256] or 0) + 1
	
	return lcodes, lextra_bits, lcodes_counts, dcodes, dextra_bits
	, dcodes_counts
end

-- Get the header data of dynamic block.
-- @param lcodes_count The count of each literal/LZ77_length codes.
-- @param dcodes_count The count of each Lz77 distance codes.
-- @return a lots of stuffs.
-- @see RFC1951 Page 12
local function GetBlockDynamicHuffmanHeader(lcodes_counts, dcodes_counts)
	local lcodes_huffman_bitlens, lcodes_huffman_codes
	, max_non_zero_bitlen_lcode =
		GetHuffmanBitlenAndCode(lcodes_counts, 15, 285)
	local dcodes_huffman_bitlens, dcodes_huffman_codes
	, max_non_zero_bitlen_dcode =
		GetHuffmanBitlenAndCode(dcodes_counts, 15, 29)
	
	local rle_deflate_codes, rle_extra_bits, rle_codes_counts =
		RunLengthEncodeHuffmanBitlen(lcodes_huffman_bitlens
			,max_non_zero_bitlen_lcode, dcodes_huffman_bitlens
			, max_non_zero_bitlen_dcode)
	
	local rle_codes_huffman_bitlens, rle_codes_huffman_codes =
		GetHuffmanBitlenAndCode(rle_codes_counts, 7, 18)
	
	local HCLEN = 0
	for i = 1, 19 do
		local symbol = _rle_codes_huffman_bitlen_order[i]
		local length = rle_codes_huffman_bitlens[symbol] or 0
		if length ~= 0 then
			HCLEN = i
		end
	end
	
	HCLEN = HCLEN - 4
	local HLIT = max_non_zero_bitlen_lcode + 1 - 257
	local HDIST = max_non_zero_bitlen_dcode + 1 - 1
	if HDIST < 0 then HDIST = 0 end
	
	return HLIT, HDIST, HCLEN, rle_codes_huffman_bitlens
	, rle_codes_huffman_codes, rle_deflate_codes, rle_extra_bits
	, lcodes_huffman_bitlens, lcodes_huffman_codes
	, dcodes_huffman_bitlens, dcodes_huffman_codes
end

-- Get the size of dynamic block without writing any bits into the writer.
-- @param ... Read the source code of GetBlockDynamicHuffmanHeader()
-- @return the bit length of the dynamic block
local function GetDynamicHuffmanBlockSize(lcodes, dcodes, HCLEN
	, rle_codes_huffman_bitlens, rle_deflate_codes
	, lcodes_huffman_bitlens, dcodes_huffman_bitlens)
	
	local block_bitlen = 17 -- 1+2+5+5+4
	block_bitlen = block_bitlen + (HCLEN+4)*3
	
	for i = 1, #rle_deflate_codes do
		local code = rle_deflate_codes[i]
		block_bitlen = block_bitlen + rle_codes_huffman_bitlens[code]
		if code >= 16 then
			block_bitlen = block_bitlen +
				((code == 16) and 2 or (code == 17 and 3 or 7))
		end
	end
	
	local length_code_count = 0
	for i = 1, #lcodes do
		local code = lcodes[i]
		local huffman_bitlen = lcodes_huffman_bitlens[code]
		block_bitlen = block_bitlen + huffman_bitlen
		if code > 256 then -- Length code
			length_code_count = length_code_count + 1
			if code > 264 and code < 285 then -- Length code with extra bits
				local extra_bits_bitlen =
					_literal_deflate_code_to_extra_bitlen[code-256]
				block_bitlen = block_bitlen + extra_bits_bitlen
			end
			local dist_code = dcodes[length_code_count]
			local dist_huffman_bitlen = dcodes_huffman_bitlens[dist_code]
			block_bitlen = block_bitlen + dist_huffman_bitlen
			
			if dist_code > 3 then -- dist code with extra bits
				local dist_extra_bits_bitlen = (dist_code-dist_code%2)/2 - 1
				block_bitlen = block_bitlen + dist_extra_bits_bitlen
			end
		end
	end
	return block_bitlen
end

-- Write dynamic block.
-- @param ... Read the source code of GetBlockDynamicHuffmanHeader()
local function CompressDynamicHuffmanBlock(WriteBits, is_last_block
	, lcodes, lextra_bits, dcodes, dextra_bits, HLIT, HDIST, HCLEN
	, rle_codes_huffman_bitlens, rle_codes_huffman_codes
	, rle_deflate_codes, rle_extra_bits
	, lcodes_huffman_bitlens, lcodes_huffman_codes
	, dcodes_huffman_bitlens, dcodes_huffman_codes)
	
	WriteBits(is_last_block and 1 or 0, 1) -- Last block identifier
	WriteBits(2, 2) -- Dynamic Huffman block identifier
	
	WriteBits(HLIT, 5)
	WriteBits(HDIST, 5)
	WriteBits(HCLEN, 4)
	
	for i = 1, HCLEN+4 do
		local symbol = _rle_codes_huffman_bitlen_order[i]
		local length = rle_codes_huffman_bitlens[symbol] or 0
		WriteBits(length, 3)
	end
	
	local rleExtraBitsIndex = 1
	for i=1, #rle_deflate_codes do
		local code = rle_deflate_codes[i]
		WriteBits(rle_codes_huffman_codes[code]
			, rle_codes_huffman_bitlens[code])
		if code >= 16 then
			local extraBits = rle_extra_bits[rleExtraBitsIndex]
			WriteBits(extraBits, (code == 16) and 2 or (code == 17 and 3 or 7))
			rleExtraBitsIndex = rleExtraBitsIndex + 1
		end
	end
	
	local length_code_count = 0
	local length_code_with_extra_count = 0
	local dist_code_with_extra_count = 0
	
	for i=1, #lcodes do
		local deflate_codee = lcodes[i]
		local huffman_code = lcodes_huffman_codes[deflate_codee]
		local huffman_bitlen = lcodes_huffman_bitlens[deflate_codee]
		WriteBits(huffman_code, huffman_bitlen)
		if deflate_codee > 256 then -- Length code
			length_code_count = length_code_count + 1
			if deflate_codee > 264 and deflate_codee < 285 then
				-- Length code with extra bits
				length_code_with_extra_count = length_code_with_extra_count + 1
				local extra_bits = lextra_bits[length_code_with_extra_count]
				local extra_bits_bitlen =
					_literal_deflate_code_to_extra_bitlen[deflate_codee-256]
				WriteBits(extra_bits, extra_bits_bitlen)
			end
			-- Write distance code
			local dist_deflate_code = dcodes[length_code_count]
			local dist_huffman_code = dcodes_huffman_codes[dist_deflate_code]
			local dist_huffman_bitlen =
				dcodes_huffman_bitlens[dist_deflate_code]
			WriteBits(dist_huffman_code, dist_huffman_bitlen)
			
			if dist_deflate_code > 3 then -- dist code with extra bits
				dist_code_with_extra_count = dist_code_with_extra_count + 1
				local dist_extra_bits = dextra_bits[dist_code_with_extra_count]
				local dist_extra_bits_bitlen =
					(dist_deflate_code-dist_deflate_code%2)/2 - 1
				WriteBits(dist_extra_bits, dist_extra_bits_bitlen)
			end
		end
	end
end

-- Get the size of fixed block without writing any bits into the writer.
-- @param lcodes literal/LZ77_length deflate codes
-- @param decodes LZ77 distance deflate codes
-- @return the bit length of the fixed block
local function GetFixedHuffmanBlockSize(lcodes, dcodes)
	local block_bitlen = 3
	local length_code_count = 0
	for i=1, #lcodes do
		local code = lcodes[i]
		local huffman_bitlen = _fix_block_literal_huffman_bitlen[code]
		block_bitlen = block_bitlen + huffman_bitlen
		if code > 256 then -- Length code
			length_code_count = length_code_count + 1
			if code > 264 and code < 285 then -- Length code with extra bits
				local extra_bits_bitlen =
					_literal_deflate_code_to_extra_bitlen[code-256]
				block_bitlen = block_bitlen + extra_bits_bitlen
			end
			local dist_code = dcodes[length_code_count]
			block_bitlen = block_bitlen + 5
			
			if dist_code > 3 then -- dist code with extra bits
				local dist_extra_bits_bitlen =
					(dist_code-dist_code%2)/2 - 1
				block_bitlen = block_bitlen + dist_extra_bits_bitlen
			end
		end
	end
	return block_bitlen
end

-- Write fixed block.
-- @param lcodes literal/LZ77_length deflate codes
-- @param decodes LZ77 distance deflate codes
local function CompressFixedHuffmanBlock(WriteBits, is_last_block,
	lcodes, lextra_bits, dcodes, dextra_bits)
	WriteBits(is_last_block and 1 or 0, 1) -- Last block identifier
	WriteBits(1, 2) -- Fixed Huffman block identifier
	local length_code_count = 0
	local length_code_with_extra_count = 0
	local dist_code_with_extra_count = 0
	for i=1, #lcodes do
		local deflate_code = lcodes[i]
		local huffman_code = _fix_block_literal_huffman_code[deflate_code]
		local huffman_bitlen = _fix_block_literal_huffman_bitlen[deflate_code]
		WriteBits(huffman_code, huffman_bitlen)
		if deflate_code > 256 then -- Length code
			length_code_count = length_code_count + 1
			if deflate_code > 264 and deflate_code < 285 then
				-- Length code with extra bits
				length_code_with_extra_count = length_code_with_extra_count + 1
				local extra_bits = lextra_bits[length_code_with_extra_count]
				local extra_bits_bitlen =
					_literal_deflate_code_to_extra_bitlen[deflate_code-256]
				WriteBits(extra_bits, extra_bits_bitlen)
			end
			-- Write distance code
			local dist_code = dcodes[length_code_count]
			local dist_huffman_code = _fix_block_dist_huffman_code[dist_code]
			WriteBits(dist_huffman_code, 5)
			
			if dist_code > 3 then -- dist code with extra bits
				dist_code_with_extra_count = dist_code_with_extra_count + 1
				local dist_extra_bits = dextra_bits[dist_code_with_extra_count]
				local dist_extra_bits_bitlen = (dist_code-dist_code%2)/2 - 1
				WriteBits(dist_extra_bits, dist_extra_bits_bitlen)
			end
		end
	end
end

-- Get the size of store block without writing any bits into the writer.
-- @param block_start The start index of the origin input string
-- @param block_end The end index of the origin input string
-- @param Total bit lens had been written into the compressed result before,
-- because store block needs to shift to byte boundary.
-- @return the bit length of the fixed block
local function GetStoreBlockSize(block_start, block_end, total_bitlen)
	assert(block_end-block_start+1 <= 65535)
	local block_bitlen = 3
	total_bitlen = total_bitlen + 3
	local padding_bitlen = (8-total_bitlen%8)%8
	block_bitlen = block_bitlen + padding_bitlen
	block_bitlen = block_bitlen + 32
	block_bitlen = block_bitlen + (block_end - block_start + 1) * 8
	return block_bitlen
end

-- Write the store block.
-- @param ... lots of stuffs
-- @return nil
local function CompressStoreBlock(WriteBits, WriteString, is_last_block, str
	, block_start, block_end, total_bitlen)
	assert(block_end-block_start+1 <= 65535)
	WriteBits(is_last_block and 1 or 0, 1) -- Last block identifer.
	WriteBits(0, 2) -- Store block identifier.
	total_bitlen = total_bitlen + 3
	local padding_bitlen = (8-total_bitlen%8)%8
	if padding_bitlen > 0 then
		WriteBits(_pow2[padding_bitlen]-1, padding_bitlen)
	end
	local size = block_end - block_start + 1
	WriteBits(size, 16)
	
	-- Write size's one's complement
	local comp = (255 - size % 256) + (255 - (size-size%256)/256)*256
	WriteBits(comp, 16)
	
	WriteString(str:sub(block_start, block_end))
end

-- Do the deflate
-- Currently using a simple way to determine the block size
-- (This is why the compression ratio is little bit worse than zlib when
-- the input size is very large
-- The first block is 64KB, the following block is 32KB.
-- After each block, there is a memory cleanup operation.
-- This is not a fast operation, but it is needed to save memory usage, so
-- the memory usage does not grow unboundly. If the data size is less than
-- 64KB, then memory cleanup won't happen.
-- This function determines whether to use store/fixed/dynamic blocks by
-- calculating the block size of each block type and chooses the smallest one.
local function Deflate(configs, WriteBits, WriteString, FlushWriter, str
	, dictionary)
	local string_table = {}
	local hash_tables = {}
	local is_last_block = nil
	local block_start
	local block_end
	local bitlen_written
	local total_bitlen = FlushWriter(_FLUSH_MODE_NO_FLUSH)
	local strlen = #str
	local offset
	
	local level
	local strategy
	if configs then
		if configs.level then
			level = configs.level
		end
		if configs.strategy then
			strategy = configs.strategy
		end
	end
	
	if not level then
		if strlen < 2048 then
			level = 7
		elseif strlen > 65536 then
			level = 3
		else
			level = 5
		end
	end
	
	while not is_last_block do
		if not block_start then
			block_start = 1
			block_end = 64*1024 - 1
			offset = 0
		else
			block_start = block_end + 1
			block_end = block_end + 32*1024
			offset = block_start - 32*1024 - 1
		end
		
		if block_end >= strlen then
			block_end = strlen
			is_last_block = true
		else
			is_last_block = false
		end
		
		local lcodes, lextra_bits, lcodes_counts, dcodes, dextra_bits
		, dcodes_counts
		
		local HLIT, HDIST, HCLEN, rle_codes_huffman_bitlens
		, rle_codes_huffman_codes, rle_deflate_codes
		, rle_extra_bits, lcodes_huffman_bitlens, lcodes_huffman_codes
		, dcodes_huffman_bitlens, dcodes_huffman_codes
		
		local dynamic_block_bitlen
		local fixed_block_bitlen
		local store_block_bitlen
		
		if level ~= 0 then
			
			-- GetBlockLZ77 needs block_start to block_end+3 to be loaded.
			LoadStringToTable(str, string_table, block_start, block_end + 3
				, offset)
			if block_start == 1 and dictionary then
				local dict_string_table = dictionary.string_table
				local dict_strlen = dictionary.strlen
				for i=0, (-dict_strlen+1)<-257
					and -257 or (-dict_strlen+1), -1 do
					string_table[i] = dict_string_table[dict_strlen+i]
				end
			end
			
			if strategy == "huffman_only" then
				lcodes = {}
				LoadStringToTable(str, lcodes, block_start, block_end
					, block_start-1)
				lextra_bits = {}
				lcodes_counts = {}
				lcodes[block_end - block_start+2] = 256 -- end of block
				for i=1, block_end - block_start+2 do
					local code = lcodes[i]
					lcodes_counts[code] = (lcodes_counts[code] or 0) + 1
				end
				dcodes = {}
				dextra_bits = {}
				dcodes_counts = {}
			else
				lcodes, lextra_bits, lcodes_counts, dcodes, dextra_bits
				, dcodes_counts = GetBlockLZ77Result(level, string_table
					, hash_tables, block_start, block_end, offset, dictionary
				)
			end
			
			HLIT, HDIST, HCLEN, rle_codes_huffman_bitlens
			, rle_codes_huffman_codes, rle_deflate_codes
			, rle_extra_bits, lcodes_huffman_bitlens, lcodes_huffman_codes
			, dcodes_huffman_bitlens, dcodes_huffman_codes =
				GetBlockDynamicHuffmanHeader(lcodes_counts, dcodes_counts)
			dynamic_block_bitlen = GetDynamicHuffmanBlockSize(
				lcodes, dcodes, HCLEN, rle_codes_huffman_bitlens
				, rle_deflate_codes, lcodes_huffman_bitlens
				, dcodes_huffman_bitlens)
			fixed_block_bitlen = GetFixedHuffmanBlockSize(lcodes, dcodes)
		end
		
		store_block_bitlen = GetStoreBlockSize(block_start, block_end
			, total_bitlen)
		
		local min_bitlen = store_block_bitlen
		min_bitlen = (fixed_block_bitlen and fixed_block_bitlen < min_bitlen)
		and fixed_block_bitlen or min_bitlen
		min_bitlen = (dynamic_block_bitlen
			and dynamic_block_bitlen < min_bitlen)
		and dynamic_block_bitlen or min_bitlen
		
		if level == 0 or (strategy ~= "fixed" and strategy ~= "dynamic" and
			store_block_bitlen == min_bitlen) then
			CompressStoreBlock(WriteBits, WriteString, is_last_block
				, str, block_start, block_end, total_bitlen)
			total_bitlen = total_bitlen + store_block_bitlen
		elseif strategy ~= "dynamic" and (
			strategy == "fixed" or fixed_block_bitlen == min_bitlen) then
			CompressFixedHuffmanBlock(WriteBits, is_last_block,
				lcodes, lextra_bits, dcodes, dextra_bits)
			total_bitlen = total_bitlen + fixed_block_bitlen
		elseif strategy == "dynamic" or dynamic_block_bitlen == min_bitlen then
			CompressDynamicHuffmanBlock(WriteBits, is_last_block, lcodes
				, lextra_bits, dcodes, dextra_bits, HLIT, HDIST, HCLEN
				, rle_codes_huffman_bitlens, rle_codes_huffman_codes
				, rle_deflate_codes, rle_extra_bits
				, lcodes_huffman_bitlens, lcodes_huffman_codes
				, dcodes_huffman_bitlens, dcodes_huffman_codes)
			total_bitlen = total_bitlen + dynamic_block_bitlen
		end
		
		if is_last_block then
			bitlen_written = FlushWriter(_FLUSH_MODE_NO_FLUSH)
		else
			bitlen_written = FlushWriter(_FLUSH_MODE_MEMORY_CLEANUP)
		end
		
		assert(bitlen_written == total_bitlen)
		
		-- Memory clean up, so memory consumption does not always grow linearly
		-- , even if input string is > 64K.
		-- Not a very efficient operation, but this operation won't happen
		-- when the input data size is less than 64K.
		if not is_last_block then
			local j
			if dictionary and block_start == 1 then
				j = 0
				while (string_table[j]) do
					string_table[j] = nil
					j = j - 1
				end
			end
			dictionary = nil
			j = 1
			for i = block_end-32767, block_end do
				string_table[j] = string_table[i-offset]
				j = j + 1
			end
			
			for k, t in pairs(hash_tables) do
				local tSize = #t
				if tSize > 0 and block_end+1 - t[1] > 32768 then
					if tSize == 1 then
						hash_tables[k] = nil
					else
						local new = {}
						local newSize = 0
						for i = 2, tSize do
							j = t[i]
							if block_end+1 - j <= 32768 then
								newSize = newSize + 1
								new[newSize] = j
							end
						end
						hash_tables[k] = new
					end
				end
			end
		end
	end
end

--- The description to compression configuration table. <br>
-- Any field can be nil to use its default. <br>
-- Table with keys other than those below is an invalid table.
-- @class table
-- @name compression_configs
-- @field level The compression level ranged from 0 to 9. 0 is no compression.
-- 9 is the slowest but best compression. Use nil for default level.
-- @field strategy The compression strategy. "fixed" to only use fixed deflate
-- compression block. "dynamic" to only use dynamic block. "huffman_only" to
-- do no LZ77 compression. Only do huffman compression.


-- @see LibDeflate:CompressDeflate(str, configs)
-- @see LibDeflate:CompressDeflateWithDict(str, dictionary, configs)
local function CompressDeflateInternal(str, dictionary, configs)
	local WriteBits, WriteString, FlushWriter = CreateWriter()
	Deflate(configs, WriteBits, WriteString, FlushWriter, str, dictionary)
	local total_bitlen, result = FlushWriter(_FLUSH_MODE_OUTPUT)
	local padding_bitlen = (8-total_bitlen%8)%8
	return result, padding_bitlen
end

-- @see LibDeflate:CompressZlib
-- @see LibDeflate:CompressZlibWithDict
local function CompressZlibInternal(str, dictionary, configs)
	local WriteBits, WriteString, FlushWriter = CreateWriter()
	
	local CM = 8 -- Compression method
	local CINFO = 7 --Window Size = 32K
	local CMF = CINFO*16+CM
	WriteBits(CMF, 8)
	
	local FDIST = dictionary and 1 or 0
	local FLEVEL = 2 -- Default compression
	local FLG = FLEVEL*64+FDIST*32
	local FCHECK = (31-(CMF*256+FLG)%31)
	-- The FCHECK value must be such that CMF and FLG,
	-- when viewed as a 16-bit unsigned integer stored
	-- in MSB order (CMF*256 + FLG), is a multiple of 31.
	FLG = FLG + FCHECK
	WriteBits(FLG, 8)
	
	if FDIST == 1 then
		local adler32 = dictionary.adler32
		local byte0 = adler32 % 256
		adler32 = (adler32 - byte0) / 256
		local byte1 = adler32 % 256
		adler32 = (adler32 - byte1) / 256
		local byte2 = adler32 % 256
		adler32 = (adler32 - byte2) / 256
		local byte3 = adler32 % 256
		WriteBits(byte3, 8)
		WriteBits(byte2, 8)
		WriteBits(byte1, 8)
		WriteBits(byte0, 8)
	end
	
	Deflate(configs, WriteBits, WriteString, FlushWriter, str, dictionary)
	FlushWriter(_FLUSH_MODE_BYTE_BOUNDARY)
	
	local adler32 = LibDeflate:Adler32(str)
	
	-- Most significant byte first
	local byte3 = adler32%256
	adler32 = (adler32 - byte3) / 256
	local byte2 = adler32%256
	adler32 = (adler32 - byte2) / 256
	local byte1 = adler32%256
	adler32 = (adler32 - byte1) / 256
	local byte0 = adler32%256
	
	WriteBits(byte0, 8)
	WriteBits(byte1, 8)
	WriteBits(byte2, 8)
	WriteBits(byte3, 8)
	local total_bitlen, result = FlushWriter(_FLUSH_MODE_OUTPUT)
	local padding_bitlen = (8-total_bitlen%8)%8
	return result, padding_bitlen
end

--- Compress using the raw deflate format.
-- @param str [string] The data to be compressed.
-- @param configs [table/nil] The configuration table to control the compression
-- . If nil, use the default configuration.
-- @return [string] The compressed data.
-- @return [integer] The number of bits padded at the end of output.
-- 0 <= bits < 8  <br>
-- This means the most significant "bits" of the last byte of the returned
-- compressed data are padding bits and they don't affect decompression.
-- You don't need to use this value unless you want to do some postprocessing
-- to the compressed data.
-- @see compression_configs
-- @see LibDeflate:DecompressDeflate
function LibDeflate:CompressDeflate(str, configs)
	local arg_valid, arg_err = IsValidArguments(str, false, nil, true, configs)
	if not arg_valid then
		error(("Usage: LibDeflate:CompressDeflate(str, configs): "
			..arg_err), 2)
	end
	return CompressDeflateInternal(str, nil, configs)
end

--- Compress using the raw deflate format with a preset dictionary.
-- @param str [string] The data to be compressed.
-- @param dictionary [table] The preset dictionary produced by
-- LibDeflate:CreateDictionary
-- @param configs [table/nil] The configuration table to control the compression
-- . If nil, use the default configuration.
-- @return [string] The compressed data.
-- @return [integer] The number of bits padded at the end of output.
-- 0 <= bits < 8  <br>
-- This means the most significant "bits" of the last byte of the returned
-- compressed data are padding bits and they don't affect decompression.
-- You don't need to use this value unless you want to do some postprocessing
-- to the compressed data.
-- @see compression_configs
-- @see LibDeflate:CreateDictionary
-- @see LibDeflate:DecompressDeflateWithDict
function LibDeflate:CompressDeflateWithDict(str, dictionary, configs)
	local arg_valid, arg_err = IsValidArguments(str, true, dictionary
		, true, configs)
	if not arg_valid then
		error(("Usage: LibDeflate:CompressDeflateWithDict"
			.."(str, dictionary, configs): "
			..arg_err), 2)
	end
	return CompressDeflateInternal(str, dictionary, configs)
end

--- Compress using the zlib format.
-- @param str [string] the data to be compressed.
-- @param configs [table/nil] The configuration table to control the compression
-- . If nil, use the default configuration.
-- @return [string] The compressed data.
-- @return [integer] The number of bits padded at the end of output.
-- Should always be 0.
-- Zlib formatted compressed data never has padding bits at the end.
-- @see compression_configs
-- @see LibDeflate:DecompressZlib
function LibDeflate:CompressZlib(str, configs)
	local arg_valid, arg_err = IsValidArguments(str, false, nil, true, configs)
	if not arg_valid then
		error(("Usage: LibDeflate:CompressZlib(str, configs): "
			..arg_err), 2)
	end
	return CompressZlibInternal(str, nil, configs)
end

--- Compress using the zlib format with a preset dictionary.
-- @param str [string] the data to be compressed.
-- @param dictionary [table] A preset dictionary produced
-- by LibDeflate:CreateDictionary()
-- @param configs [table/nil] The configuration table to control the compression
-- . If nil, use the default configuration.
-- @return [string] The compressed data.
-- @return [integer] The number of bits padded at the end of output.
-- Should always be 0.
-- Zlib formatted compressed data never has padding bits at the end.
-- @see compression_configs
-- @see LibDeflate:CreateDictionary
-- @see LibDeflate:DecompressZlibWithDict
function LibDeflate:CompressZlibWithDict(str, dictionary, configs)
	local arg_valid, arg_err = IsValidArguments(str, true, dictionary
		, true, configs)
	if not arg_valid then
		error(("Usage: LibDeflate:CompressZlibWithDict"
			.."(str, dictionary, configs): "
			..arg_err), 2)
	end
	return CompressZlibInternal(str, dictionary, configs)
end

--[[ --------------------------------------------------------------------------
	Decompress code
--]] --------------------------------------------------------------------------

--[[
	Create a reader to easily reader stuffs as the unit of bits.
	Return values:
	1. ReadBits(bitlen)
	2. ReadBytes(bytelen, buffer, buffer_size)
	3. Decode(huffman_bitlen_count, huffman_symbol, min_bitlen)
	4. ReaderBitlenLeft()
	5. SkipToByteBoundary()
--]]
local function CreateReader(input_string)
	local input = input_string
	local input_strlen = #input_string
	local input_next_byte_pos = 1
	local cache_bitlen = 0
	local cache = 0
	
	-- Read some bits.
	-- To improve speed, this function does not
	-- check if the input has been exhausted.
	-- Use ReaderBitlenLeft() < 0 to check it.
	-- @param bitlen the number of bits to read
	-- @return the data is read.
	local function ReadBits(bitlen)
		local rshift_mask = _pow2[bitlen]
		local code
		if bitlen <= cache_bitlen then
			code = cache % rshift_mask
			cache = (cache - code) / rshift_mask
			cache_bitlen = cache_bitlen - bitlen
		else -- Whether input has been exhausted is not checked.
			local lshift_mask = _pow2[cache_bitlen]
			local byte1, byte2, byte3, byte4 = string_byte(input
				, input_next_byte_pos, input_next_byte_pos+3)
			-- This requires lua number to be at least double ()
			cache = cache + ((byte1 or 0)+(byte2 or 0)*256
				+ (byte3 or 0)*65536+(byte4 or 0)*16777216)*lshift_mask
			input_next_byte_pos = input_next_byte_pos + 4
			cache_bitlen = cache_bitlen + 32 - bitlen
			code = cache % rshift_mask
			cache = (cache - code) / rshift_mask
		end
		return code
	end
	
	-- Read some bytes from the reader.
	-- Assume reader is on the byte boundary.
	-- @param bytelen The number of bytes to be read.
	-- @param buffer The byte read will be stored into this buffer.
	-- @param buffer_size The buffer will be modified starting from
	--	buffer[buffer_size+1], ending at buffer[buffer_size+bytelen-1]
	-- @return the new buffer_size
	local function ReadBytes(bytelen, buffer, buffer_size)
		assert(cache_bitlen % 8 == 0)
		
		local byte_from_cache = (cache_bitlen/8 < bytelen)
		and (cache_bitlen/8) or bytelen
		for _=1, byte_from_cache do
			local byte = cache % 256
			buffer_size = buffer_size + 1
			buffer[buffer_size] = string_char(byte)
			cache = (cache - byte) / 256
		end
		cache_bitlen = cache_bitlen - byte_from_cache*8
		bytelen = bytelen - byte_from_cache
		if (input_strlen - input_next_byte_pos - bytelen + 1) * 8
			+ cache_bitlen < 0 then
			return -1 -- out of input
		end
		for i=input_next_byte_pos, input_next_byte_pos+bytelen-1 do
			buffer_size = buffer_size + 1
			buffer[buffer_size] = string_sub(input, i, i)
		end
		
		input_next_byte_pos = input_next_byte_pos + bytelen
		return buffer_size
	end
	
	-- Decode huffman code
	-- To improve speed, this function does not check
	-- if the input has been exhausted.
	-- Use ReaderBitlenLeft() < 0 to check it.
	-- Credits for Mark Adler. This code is from puff:Decode()
	-- @see puff:Decode(...)
	-- @param huffman_bitlen_count
	-- @param huffman_symbol
	-- @param min_bitlen The minimum huffman bit length of all symbols
	-- @return The decoded deflate code.
	--	Negative value is returned if decoding fails.
	local function Decode(huffman_bitlen_counts, huffman_symbols, min_bitlen)
		local code = 0
		local first = 0
		local index = 0
		local count
		if min_bitlen > 0 then
			if cache_bitlen < 15 and input then
				local lshift_mask = _pow2[cache_bitlen]
				local byte1, byte2, byte3, byte4 =
					string_byte(input, input_next_byte_pos
						, input_next_byte_pos+3)
				-- This requires lua number to be at least double ()
				cache = cache + ((byte1 or 0)+(byte2 or 0)*256
					+(byte3 or 0)*65536+(byte4 or 0)*16777216)*lshift_mask
				input_next_byte_pos = input_next_byte_pos + 4
				cache_bitlen = cache_bitlen + 32
			end
			
			local rshift_mask = _pow2[min_bitlen]
			cache_bitlen = cache_bitlen - min_bitlen
			code = cache % rshift_mask
			cache = (cache - code) / rshift_mask
			-- Reverse the bits
			code = _reverse_bits_tbl[min_bitlen][code]
			
			count = huffman_bitlen_counts[min_bitlen]
			if code < count then
				return huffman_symbols[code]
			end
			index = count
			first = count * 2
			code = code * 2
		end
		
		for bitlen = min_bitlen+1, 15 do
			local bit
			bit = cache % 2
			cache = (cache - bit) / 2
			cache_bitlen = cache_bitlen - 1
			
			code = (bit==1) and (code + 1 - code % 2) or code
			count = huffman_bitlen_counts[bitlen] or 0
			local diff = code - first
			if diff < count then
				return huffman_symbols[index + diff]
			end
			index = index + count
			first = first + count
			first = first * 2
			code = code * 2
		end
		-- invalid literal/length or distance code
		-- in fixed or dynamic block (run out of code)
		return -10
	end
	
	local function ReaderBitlenLeft()
		return (input_strlen - input_next_byte_pos + 1) * 8 + cache_bitlen
	end
	
	local function SkipToByteBoundary()
		local skipped_bitlen = cache_bitlen%8
		local rshift_mask = _pow2[skipped_bitlen]
		cache_bitlen = cache_bitlen - skipped_bitlen
		cache = (cache - cache % rshift_mask) / rshift_mask
	end
	
	return ReadBits, ReadBytes, Decode, ReaderBitlenLeft, SkipToByteBoundary
end

-- Create a deflate state, so I can pass in less arguments to functions.
-- @param str the whole string to be decompressed.
-- @param dictionary The preset dictionary. nil if not provided.
--		This dictionary should be produced by LibDeflate:CreateDictionary(str)
-- @return The decomrpess state.
local function CreateDecompressState(str, dictionary)
	local ReadBits, ReadBytes, Decode, ReaderBitlenLeft
	, SkipToByteBoundary = CreateReader(str)
	local state =
	{
		ReadBits = ReadBits,
		ReadBytes = ReadBytes,
		Decode = Decode,
		ReaderBitlenLeft = ReaderBitlenLeft,
		SkipToByteBoundary = SkipToByteBoundary,
		buffer_size = 0,
		buffer = {},
		result_buffer = {},
		dictionary = dictionary,
	}
	return state
end

-- Get the stuffs needed to decode huffman codes
-- @see puff.c:construct(...)
-- @param huffman_bitlen The huffman bit length of the huffman codes.
-- @param max_symbol The maximum symbol
-- @param max_bitlen The min huffman bit length of all codes
-- @return zero or positive for success, negative for failure.
-- @return The count of each huffman bit length.
-- @return A table to convert huffman codes to deflate codes.
-- @return The minimum huffman bit length.
local function GetHuffmanForDecode(huffman_bitlens, max_symbol, max_bitlen)
	local huffman_bitlen_counts = {}
	local min_bitlen = max_bitlen
	for symbol = 0, max_symbol do
		local bitlen = huffman_bitlens[symbol] or 0
		min_bitlen = (bitlen > 0 and bitlen < min_bitlen)
		and bitlen or min_bitlen
		huffman_bitlen_counts[bitlen] = (huffman_bitlen_counts[bitlen] or 0)+1
	end
	
	if huffman_bitlen_counts[0] == max_symbol+1 then -- No Codes
		return 0, huffman_bitlen_counts, {}, 0 -- Complete, but decode will fail
	end
	
	local left = 1
	for len = 1, max_bitlen do
		left = left * 2
		left = left - (huffman_bitlen_counts[len] or 0)
		if left < 0 then
			return left -- Over-subscribed, return negative
		end
	end
	
	-- Generate offsets info symbol table for each length for sorting
	local offsets = {}
	offsets[1] = 0
	for len = 1, max_bitlen-1 do
		offsets[len + 1] = offsets[len] + (huffman_bitlen_counts[len] or 0)
	end
	
	local huffman_symbols = {}
	for symbol = 0, max_symbol do
		local bitlen = huffman_bitlens[symbol] or 0
		if bitlen ~= 0 then
			local offset = offsets[bitlen]
			huffman_symbols[offset] = symbol
			offsets[bitlen] = offsets[bitlen] + 1
		end
	end
	
	-- Return zero for complete set, positive for incomplete set.
	return left, huffman_bitlen_counts, huffman_symbols, min_bitlen
end

-- Decode a fixed or dynamic huffman blocks, excluding last block identifier
-- and block type identifer.
-- @see puff.c:codes()
-- @param state decompression state that will be modified by this function.
--	@see CreateDecompressState
-- @param ... Read the source code
-- @return 0 on success, other value on failure.
local function DecodeUntilEndOfBlock(state, lcodes_huffman_bitlens
	, lcodes_huffman_symbols, lcodes_huffman_min_bitlen
	, dcodes_huffman_bitlens, dcodes_huffman_symbols
	, dcodes_huffman_min_bitlen)
	local buffer, buffer_size, ReadBits, Decode, ReaderBitlenLeft
	, result_buffer =
		state.buffer, state.buffer_size, state.ReadBits, state.Decode
	, state.ReaderBitlenLeft, state.result_buffer
	local dictionary = state.dictionary
	local dict_string_table
	local dict_strlen
	
	local buffer_end = 1
	if dictionary and not buffer[0] then
		-- If there is a dictionary, copy the last 258 bytes into
		-- the string_table to make the copy in the main loop quicker.
		-- This is done only once per decompression.
		dict_string_table = dictionary.string_table
		dict_strlen = dictionary.strlen
		buffer_end = -dict_strlen + 1
		for i=0, (-dict_strlen+1)<-257 and -257 or (-dict_strlen+1), -1 do
			buffer[i] = _byte_to_char[dict_string_table[dict_strlen+i]]
		end
	end
	
	repeat
		local symbol = Decode(lcodes_huffman_bitlens
			, lcodes_huffman_symbols, lcodes_huffman_min_bitlen)
		if symbol < 0 or symbol > 285 then
			-- invalid literal/length or distance code in fixed or dynamic block
			return -10
		elseif symbol < 256 then -- Literal
			buffer_size = buffer_size + 1
			buffer[buffer_size] = _byte_to_char[symbol]
		elseif symbol > 256 then -- Length code
			symbol = symbol - 256
			local bitlen = _literal_deflate_code_to_base_len[symbol]
			bitlen = (symbol >= 8)
			and (bitlen
				+ ReadBits(_literal_deflate_code_to_extra_bitlen[symbol]))
			or bitlen
			symbol = Decode(dcodes_huffman_bitlens, dcodes_huffman_symbols
				, dcodes_huffman_min_bitlen)
			if symbol < 0 or symbol > 29 then
				-- invalid literal/length or distance code in fixed or dynamic block
				return -10
			end
			local dist = _dist_deflate_code_to_base_dist[symbol]
			dist = (dist > 4) and (dist
			+ ReadBits(_dist_deflate_code_to_extra_bitlen[symbol])) or dist
			
			local char_buffer_index = buffer_size-dist+1
			if char_buffer_index < buffer_end then
				-- distance is too far back in fixed or dynamic block
				return -11
			end
			if char_buffer_index >= -257 then
				for _=1, bitlen do
					buffer_size = buffer_size + 1
					buffer[buffer_size] = buffer[char_buffer_index]
					char_buffer_index = char_buffer_index + 1
				end
			else
				char_buffer_index = dict_strlen + char_buffer_index
				for _=1, bitlen do
					buffer_size = buffer_size + 1
					buffer[buffer_size] =
						_byte_to_char[dict_string_table[char_buffer_index]]
					char_buffer_index = char_buffer_index + 1
				end
			end
		end
		
		if ReaderBitlenLeft() < 0 then
			return 2 -- available inflate data did not terminate
		end
		
		if buffer_size >= 65536 then
			result_buffer[#result_buffer+1] =
				table_concat(buffer, "", 1, 32768)
			for i=32769, buffer_size do
				buffer[i-32768] = buffer[i]
			end
			buffer_size = buffer_size - 32768
			buffer[buffer_size+1] = nil
			-- NOTE: buffer[32769..end] and buffer[-257..0] are not cleared.
			-- This is why "buffer_size" variable is needed.
		end
	until symbol == 256
	
	state.buffer_size = buffer_size
	
	return 0
end

-- Decompress a store block
-- @param state decompression state that will be modified by this function.
-- @return 0 if succeeds, other value if fails.
local function DecompressStoreBlock(state)
	local buffer, buffer_size, ReadBits, ReadBytes, ReaderBitlenLeft
	, SkipToByteBoundary, result_buffer =
		state.buffer, state.buffer_size, state.ReadBits, state.ReadBytes
	, state.ReaderBitlenLeft, state.SkipToByteBoundary, state.result_buffer
	
	SkipToByteBoundary()
	local bytelen = ReadBits(16)
	if ReaderBitlenLeft() < 0 then
		return 2 -- available inflate data did not terminate
	end
	local bytelenComp = ReadBits(16)
	if ReaderBitlenLeft() < 0 then
		return 2 -- available inflate data did not terminate
	end
	
	if bytelen % 256 + bytelenComp % 256 ~= 255 then
		return -2 -- Not one's complement
	end
	if (bytelen-bytelen % 256)/256
		+ (bytelenComp-bytelenComp % 256)/256 ~= 255 then
		return -2 -- Not one's complement
	end
	
	-- Note that ReadBytes will skip to the next byte boundary first.
	buffer_size = ReadBytes(bytelen, buffer, buffer_size)
	if buffer_size < 0 then
		return 2 -- available inflate data did not terminate
	end
	
	-- memory clean up when there are enough bytes in the buffer.
	if buffer_size >= 65536 then
		result_buffer[#result_buffer+1] = table_concat(buffer, "", 1, 32768)
		for i=32769, buffer_size do
			buffer[i-32768] = buffer[i]
		end
		buffer_size = buffer_size - 32768
		buffer[buffer_size+1] = nil
	end
	state.buffer_size = buffer_size
	return 0
end

-- Decompress a fixed block
-- @param state decompression state that will be modified by this function.
-- @return 0 if succeeds other value if fails.
local function DecompressFixBlock(state)
	return DecodeUntilEndOfBlock(state
		, _fix_block_literal_huffman_bitlen_count
		, _fix_block_literal_huffman_to_deflate_code, 7
		, _fix_block_dist_huffman_bitlen_count
		, _fix_block_dist_huffman_to_deflate_code, 5)
end

-- Decompress a dynamic block
-- @param state decompression state that will be modified by this function.
-- @return 0 if success, other value if fails.
local function DecompressDynamicBlock(state)
	local ReadBits, Decode = state.ReadBits, state.Decode
	local nlen = ReadBits(5) + 257
	local ndist = ReadBits(5) + 1
	local ncode = ReadBits(4) + 4
	if nlen > 286 or ndist > 30 then
		-- dynamic block code description: too many length or distance codes
		return -3
	end
	
	local rle_codes_huffman_bitlens = {}
	
	for i = 1, ncode do
		rle_codes_huffman_bitlens[_rle_codes_huffman_bitlen_order[i]] =
			ReadBits(3)
	end
	
	local rle_codes_err, rle_codes_huffman_bitlen_counts,
	rle_codes_huffman_symbols, rle_codes_huffman_min_bitlen =
		GetHuffmanForDecode(rle_codes_huffman_bitlens, 18, 7)
	if rle_codes_err ~= 0 then -- Require complete code set here
		-- dynamic block code description: code lengths codes incomplete
		return -4
	end
	
	local lcodes_huffman_bitlens = {}
	local dcodes_huffman_bitlens = {}
	-- Read length/literal and distance code length tables
	local index = 0
	while index < nlen + ndist do
		local symbol -- Decoded value
		local bitlen -- Last length to repeat
		
		symbol = Decode(rle_codes_huffman_bitlen_counts
			, rle_codes_huffman_symbols, rle_codes_huffman_min_bitlen)
		
		if symbol < 0 then
			return symbol -- Invalid symbol
		elseif symbol < 16 then
			if index < nlen then
				lcodes_huffman_bitlens[index] = symbol
			else
				dcodes_huffman_bitlens[index-nlen] = symbol
			end
			index = index + 1
		else
			bitlen = 0
			if symbol == 16 then
				if index == 0 then
					-- dynamic block code description: repeat lengths
					-- with no first length
					return -5
				end
				if index-1 < nlen then
					bitlen = lcodes_huffman_bitlens[index-1]
				else
					bitlen = dcodes_huffman_bitlens[index-nlen-1]
				end
				symbol = 3 + ReadBits(2)
			elseif symbol == 17 then -- Repeat zero 3..10 times
				symbol = 3 + ReadBits(3)
			else -- == 18, repeat zero 11.138 times
				symbol = 11 + ReadBits(7)
			end
			if index + symbol > nlen + ndist then
				-- dynamic block code description:
				-- repeat more than specified lengths
				return -6
			end
			while symbol > 0 do -- Repeat last or zero symbol times
				symbol = symbol - 1
				if index < nlen then
					lcodes_huffman_bitlens[index] = bitlen
				else
					dcodes_huffman_bitlens[index-nlen] = bitlen
				end
				index = index + 1
			end
		end
	end
	
	if (lcodes_huffman_bitlens[256] or 0) == 0 then
		-- dynamic block code description: missing end-of-block code
		return -9
	end
	
	local lcodes_err, lcodes_huffman_bitlen_counts
	, lcodes_huffman_symbols, lcodes_huffman_min_bitlen =
		GetHuffmanForDecode(lcodes_huffman_bitlens, nlen-1, 15)
	--dynamic block code description: invalid literal/length code lengths,
	-- Incomplete code ok only for single length 1 code
	if (lcodes_err ~=0 and (lcodes_err < 0
		or nlen ~= (lcodes_huffman_bitlen_counts[0] or 0)
		+(lcodes_huffman_bitlen_counts[1] or 0))) then
		return -7
	end
	
	local dcodes_err, dcodes_huffman_bitlen_counts
	, dcodes_huffman_symbols, dcodes_huffman_min_bitlen =
		GetHuffmanForDecode(dcodes_huffman_bitlens, ndist-1, 15)
	-- dynamic block code description: invalid distance code lengths,
	-- Incomplete code ok only for single length 1 code
	if (dcodes_err ~=0 and (dcodes_err < 0
		or ndist ~= (dcodes_huffman_bitlen_counts[0] or 0)
		+ (dcodes_huffman_bitlen_counts[1] or 0))) then
		return -8
	end
	
	-- Build buffman table for literal/length codes
	return DecodeUntilEndOfBlock(state, lcodes_huffman_bitlen_counts
		, lcodes_huffman_symbols, lcodes_huffman_min_bitlen
		, dcodes_huffman_bitlen_counts, dcodes_huffman_symbols
		, dcodes_huffman_min_bitlen)
end

-- Decompress a deflate stream
-- @param state: a decompression state
-- @return the decompressed string if succeeds. nil if fails.
local function Inflate(state)
	local ReadBits = state.ReadBits
	
	local is_last_block
	while not is_last_block do
		is_last_block = (ReadBits(1) == 1)
		local block_type = ReadBits(2)
		local status
		if block_type == 0 then
			status = DecompressStoreBlock(state)
		elseif block_type == 1 then
			status = DecompressFixBlock(state)
		elseif block_type == 2 then
			status = DecompressDynamicBlock(state)
		else
			return nil, -1 -- invalid block type (type == 3)
		end
		if status ~= 0 then
			return nil, status
		end
	end
	
	state.result_buffer[#state.result_buffer+1] =
		table_concat(state.buffer, "", 1, state.buffer_size)
	local result = table_concat(state.result_buffer)
	return result
end

-- @see LibDeflate:DecompressDeflate(str)
-- @see LibDeflate:DecompressDeflateWithDict(str, dictionary)
local function DecompressDeflateInternal(str, dictionary)
	local state = CreateDecompressState(str, dictionary)
	local result, status = Inflate(state)
	if not result then
		return nil, status
	end
	
	local bitlen_left = state.ReaderBitlenLeft()
	local bytelen_left = (bitlen_left - bitlen_left % 8) / 8
	return result, bytelen_left
end

-- @see LibDeflate:DecompressZlib(str)
-- @see LibDeflate:DecompressZlibWithDict(str)
local function DecompressZlibInternal(str, dictionary)
	local state = CreateDecompressState(str, dictionary)
	local ReadBits = state.ReadBits
	
	local CMF = ReadBits(8)
	if state.ReaderBitlenLeft() < 0 then
		return nil, 2 -- available inflate data did not terminate
	end
	local CM = CMF % 16
	local CINFO = (CMF - CM) / 16
	if CM ~= 8 then
		return nil, -12 -- invalid compression method
	end
	if CINFO > 7 then
		return nil, -13 -- invalid window size
	end
	
	local FLG = ReadBits(8)
	if state.ReaderBitlenLeft() < 0 then
		return nil, 2 -- available inflate data did not terminate
	end
	if (CMF*256+FLG)%31 ~= 0 then
		return nil, -14 -- invalid header checksum
	end
	
	local FDIST = ((FLG-FLG%32)/32 % 2)
	local FLEVEL = ((FLG-FLG%64)/64 % 4) -- luacheck: ignore FLEVEL
	
	if FDIST == 1 then
		if not dictionary then
			return nil, -16 -- need dictonary, but dictionary is not provided.
		end
		local byte3 = ReadBits(8)
		local byte2 = ReadBits(8)
		local byte1 = ReadBits(8)
		local byte0 = ReadBits(8)
		local actual_adler32 = byte3*16777216+byte2*65536+byte1*256+byte0
		if state.ReaderBitlenLeft() < 0 then
			return nil, 2 -- available inflate data did not terminate
		end
		if not IsEqualAdler32(actual_adler32, dictionary.adler32) then
			return nil, -17 -- dictionary adler32 does not match
		end
	end
	local result, status = Inflate(state)
	if not result then
		return nil, status
	end
	state.SkipToByteBoundary()
	
	local adler_byte0 = ReadBits(8)
	local adler_byte1 = ReadBits(8)
	local adler_byte2 = ReadBits(8)
	local adler_byte3 = ReadBits(8)
	if state.ReaderBitlenLeft() < 0 then
		return nil, 2 -- available inflate data did not terminate
	end
	
	local adler32_expected = adler_byte0*16777216
	+ adler_byte1*65536 + adler_byte2*256 + adler_byte3
	local adler32_actual = LibDeflate:Adler32(result)
	if not IsEqualAdler32(adler32_expected, adler32_actual) then
		return nil, -15 -- Adler32 checksum does not match
	end
	
	local bitlen_left = state.ReaderBitlenLeft()
	local bytelen_left = (bitlen_left - bitlen_left % 8) / 8
	return result, bytelen_left
end

--- Decompress a raw deflate compressed data.
-- @param str [string] The data to be decompressed.
-- @return [string/nil] If the decompression succeeds, return the decompressed
-- data. If the decompression fails, return nil. You should check if this return
-- value is non-nil to know if the decompression succeeds.
-- @return [integer] If the decompression succeeds, return the number of
-- unprocessed bytes in the input compressed data. This return value is a
-- positive integer if the input data is a valid compressed data appended by an
-- arbitary non-empty string. This return value is 0 if the input data does not
-- contain any extra bytes.<br>
-- If the decompression fails (The first return value of this function is nil),
-- this return value is undefined.
-- @see LibDeflate:CompressDeflate
function LibDeflate:DecompressDeflate(str)
	local arg_valid, arg_err = IsValidArguments(str)
	if not arg_valid then
		error(("Usage: LibDeflate:DecompressDeflate(str): "
			..arg_err), 2)
	end
	return DecompressDeflateInternal(str)
end

--- Decompress a raw deflate compressed data with a preset dictionary.
-- @param str [string] The data to be decompressed.
-- @param dictionary [table] The preset dictionary used by
-- LibDeflate:CompressDeflateWithDict when the compressed data is produced.
-- Decompression and compression must use the same dictionary.
-- Otherwise wrong decompressed data could be produced without generating any
-- error.
-- @return [string/nil] If the decompression succeeds, return the decompressed
-- data. If the decompression fails, return nil. You should check if this return
-- value is non-nil to know if the decompression succeeds.
-- @return [integer] If the decompression succeeds, return the number of
-- unprocessed bytes in the input compressed data. This return value is a
-- positive integer if the input data is a valid compressed data appended by an
-- arbitary non-empty string. This return value is 0 if the input data does not
-- contain any extra bytes.<br>
-- If the decompression fails (The first return value of this function is nil),
-- this return value is undefined.
-- @see LibDeflate:CompressDeflateWithDict
function LibDeflate:DecompressDeflateWithDict(str, dictionary)
	local arg_valid, arg_err = IsValidArguments(str, true, dictionary)
	if not arg_valid then
		error(("Usage: LibDeflate:DecompressDeflateWithDict(str, dictionary): "
			..arg_err), 2)
	end
	return DecompressDeflateInternal(str, dictionary)
end

--- Decompress a zlib compressed data.
-- @param str [string] The data to be decompressed
-- @return [string/nil] If the decompression succeeds, return the decompressed
-- data. If the decompression fails, return nil. You should check if this return
-- value is non-nil to know if the decompression succeeds.
-- @return [integer] If the decompression succeeds, return the number of
-- unprocessed bytes in the input compressed data. This return value is a
-- positive integer if the input data is a valid compressed data appended by an
-- arbitary non-empty string. This return value is 0 if the input data does not
-- contain any extra bytes.<br>
-- If the decompression fails (The first return value of this function is nil),
-- this return value is undefined.
-- @see LibDeflate:CompressZlib
function LibDeflate:DecompressZlib(str)
	local arg_valid, arg_err = IsValidArguments(str)
	if not arg_valid then
		error(("Usage: LibDeflate:DecompressZlib(str): "
			..arg_err), 2)
	end
	return DecompressZlibInternal(str)
end

--- Decompress a zlib compressed data with a preset dictionary.
-- @param str [string] The data to be decompressed
-- @param dictionary [table] The preset dictionary used by
-- LibDeflate:CompressDeflateWithDict when the compressed data is produced.
-- Decompression and compression must use the same dictionary.
-- Otherwise wrong decompressed data could be produced without generating any
-- error.
-- @return [string/nil] If the decompression succeeds, return the decompressed
-- data. If the decompression fails, return nil. You should check if this return
-- value is non-nil to know if the decompression succeeds.
-- @return [integer] If the decompression succeeds, return the number of
-- unprocessed bytes in the input compressed data. This return value is a
-- positive integer if the input data is a valid compressed data appended by an
-- arbitary non-empty string. This return value is 0 if the input data does not
-- contain any extra bytes.<br>
-- If the decompression fails (The first return value of this function is nil),
-- this return value is undefined.
-- @see LibDeflate:CompressZlibWithDict
function LibDeflate:DecompressZlibWithDict(str, dictionary)
	local arg_valid, arg_err = IsValidArguments(str, true, dictionary)
	if not arg_valid then
		error(("Usage: LibDeflate:DecompressZlibWithDict(str, dictionary): "
			..arg_err), 2)
	end
	return DecompressZlibInternal(str, dictionary)
end

-- Calculate the huffman code of fixed block
do
	_fix_block_literal_huffman_bitlen = {}
	for sym=0, 143 do
		_fix_block_literal_huffman_bitlen[sym] = 8
	end
	for sym=144, 255 do
		_fix_block_literal_huffman_bitlen[sym] = 9
	end
	for sym=256, 279 do
		_fix_block_literal_huffman_bitlen[sym] = 7
	end
	for sym=280, 287 do
		_fix_block_literal_huffman_bitlen[sym] = 8
	end
	
	_fix_block_dist_huffman_bitlen = {}
	for dist=0, 31 do
		_fix_block_dist_huffman_bitlen[dist] = 5
	end
	local status
	status, _fix_block_literal_huffman_bitlen_count
	, _fix_block_literal_huffman_to_deflate_code =
		GetHuffmanForDecode(_fix_block_literal_huffman_bitlen, 287, 9)
	assert(status == 0)
	status, _fix_block_dist_huffman_bitlen_count,
		_fix_block_dist_huffman_to_deflate_code =
		GetHuffmanForDecode(_fix_block_dist_huffman_bitlen, 31, 5)
	assert(status == 0)
	
	_fix_block_literal_huffman_code =
		GetHuffmanCodeFromBitlen(_fix_block_literal_huffman_bitlen_count
			, _fix_block_literal_huffman_bitlen, 287, 9)
	_fix_block_dist_huffman_code =
		GetHuffmanCodeFromBitlen(_fix_block_dist_huffman_bitlen_count
			, _fix_block_dist_huffman_bitlen, 31, 5)
end

-- Prefix encoding algorithm
-- Credits to LibCompress.
-- The code has been rewritten by the author of LibDeflate.
------------------------------------------------------------------------------

-- to be able to match any requested byte value, the search
-- string must be preprocessed characters to escape with %:
-- ( ) . % + - * ? [ ] ^ $
-- "illegal" byte values:
-- 0 is replaces %z
local _gsub_escape_table = {
	["\000"] = "%z", ["("] = "%(", [")"] = "%)", ["."] = "%.",
	["%"] = "%%", ["+"] = "%+", ["-"] = "%-", ["*"] = "%*",
	["?"] = "%?", ["["] = "%[", ["]"] = "%]", ["^"] = "%^",
	["$"] = "%$",
}

local function escape_for_gsub(str)
	return str:gsub("([%z%(%)%.%%%+%-%*%?%[%]%^%$])", _gsub_escape_table)
end

--- Create a custom codec with encoder and decoder. <br>
-- This codec is used to convert an input string to make it not contain
-- some specific bytes.
-- This created codec and the parameters of this function do NOT take
-- localization into account. One byte (0-255) in the string is exactly one
-- character (0-255).
-- Credits to LibCompress.
-- The code has been rewritten by the author of LibDeflate. <br>
-- @param reserved_chars [string] The created encoder will ensure encoded
-- data does not contain any single character in reserved_chars. This parameter
-- should be non-empty.
-- @param escape_chars [string] The escape character(s) used in the created
-- codec. The codec converts any character included in reserved\_chars /
-- escape\_chars / map\_chars to (one escape char + one character not in
-- reserved\_chars / escape\_chars / map\_chars).
-- You usually only need to provide a length-1 string for this parameter.
-- Length-2 string is only needed when
-- reserved\_chars + escape\_chars + map\_chars is longer than 127.
-- This parameter should be non-empty.
-- @param map_chars [string] The created encoder will map every
-- reserved\_chars:sub(i, i) (1 <= i <= #map\_chars) to map\_chars:sub(i, i).
-- This parameter CAN be empty string.
-- @return [table/nil] If the codec cannot be created, return nil.<br>
-- If the codec can be created according to the given
-- parameters, return the codec, which is a encode/decode table.
-- The table contains two functions: <br>
-- t:Encode(str) returns the encoded string. <br>
-- t:Decode(str) returns the decoded string if succeeds. nil if fails.
-- @return [nil/string] If the codec is successfully created, return nil.
-- If not, return a string that describes the reason why the codec cannot be
-- created.
-- @usage
-- -- Create an encoder/decoder that maps all "\000" to "\003",
-- -- and escape "\001" (and "\002" and "\003") properly
-- local codec = LibDeflate:CreateCodec("\000\001", "\002", "\003")
--
-- local encoded = codec:Encode(SOME_STRING)
-- -- "encoded" does not contain "\000" or "\001"
-- local decoded = codec:Decode(encoded)
-- -- assert(decoded == SOME_STRING)
function LibDeflate:CreateCodec(reserved_chars, escape_chars
	, map_chars)
	if type(reserved_chars) ~= "string"
		or type(escape_chars) ~= "string"
		or type(map_chars) ~= "string" then
		error(
			"Usage: LibDeflate:CreateCodec(reserved_chars,"
			.." escape_chars, map_chars):"
			.." All arguments must be string.", 2)
	end
	
	if escape_chars == "" then
		return nil, "No escape characters supplied."
	end
	if #reserved_chars < #map_chars then
		return nil, "The number of reserved characters must be"
		.." at least as many as the number of mapped chars."
	end
	if reserved_chars == "" then
		return nil, "No characters to encode."
	end
	
	local encode_bytes = reserved_chars..escape_chars..map_chars
	-- build list of bytes not available as a suffix to a prefix byte
	local taken = {}
	for i = 1, #encode_bytes do
		local byte = string_byte(encode_bytes, i, i)
		if taken[byte] then
			return nil, "There must be no duplicate characters in the"
			.." concatenation of reserved_chars, escape_chars and"
			.." map_chars."
		end
		taken[byte] = true
	end
	
	local decode_patterns = {}
	local decode_repls = {}
	
	-- the encoding can be a single gsub
	-- , but the decoding can require multiple gsubs
	local encode_search = {}
	local encode_translate = {}
	
	-- map single byte to single byte
	if #map_chars > 0 then
		local decode_search = {}
		local decode_translate = {}
		for i = 1, #map_chars do
			local from = string_sub(reserved_chars, i, i)
			local to = string_sub(map_chars, i, i)
			encode_translate[from] = to
			encode_search[#encode_search+1] = from
			decode_translate[to] = from
			decode_search[#decode_search+1] = to
		end
		decode_patterns[#decode_patterns+1] =
			"([".. escape_for_gsub(table_concat(decode_search)).."])"
		decode_repls[#decode_repls+1] = decode_translate
	end
	
	local escape_char_index = 1
	local escape_char = string_sub(escape_chars
		, escape_char_index, escape_char_index)
	-- map single byte to double-byte
	local r = 0 -- suffix char value to the escapeChar
	
	local decode_search = {}
	local decode_translate = {}
	for i = 1, #encode_bytes do
		local c = string_sub(encode_bytes, i, i)
		if not encode_translate[c] then
			while r >= 256 or taken[r] do
				r = r + 1
				if r > 255 then -- switch to next escapeChar
					decode_patterns[#decode_patterns+1] =
						escape_for_gsub(escape_char)
						.."(["
						.. escape_for_gsub(table_concat(decode_search)).."])"
					decode_repls[#decode_repls+1] = decode_translate
					
					escape_char_index = escape_char_index + 1
					escape_char = string_sub(escape_chars, escape_char_index
						, escape_char_index)
					r = 0
					decode_search = {}
					decode_translate = {}
					
					if not escape_char or escape_char == "" then
						-- actually I don't need to check
						-- "not ecape_char", but what if Lua changes
						-- the behavior of string.sub() in the future?
						-- we are out of escape chars and we need more!
						return nil, "Out of escape characters."
					end
				end
			end
			
			local char_r = _byte_to_char[r]
			encode_translate[c] = escape_char..char_r
			encode_search[#encode_search+1] = c
			decode_translate[char_r] = c
			decode_search[#decode_search+1] = char_r
			r = r + 1
		end
		if i == #encode_bytes then
			decode_patterns[#decode_patterns+1] =
				escape_for_gsub(escape_char).."(["
				.. escape_for_gsub(table_concat(decode_search)).."])"
			decode_repls[#decode_repls+1] = decode_translate
		end
	end
	
	local codec = {}
	
	local encode_pattern = "(["
	.. escape_for_gsub(table_concat(encode_search)).."])"
	local encode_repl = encode_translate
	
	function codec:Encode(str)
		if type(str) ~= "string" then
			error(("Usage: codec:Encode(str):"
				.." 'str' - string expected got '%s'."):format(type(str)), 2)
		end
		return string_gsub(str, encode_pattern, encode_repl)
	end
	
	local decode_tblsize = #decode_patterns
	local decode_fail_pattern = "(["
	.. escape_for_gsub(reserved_chars).."])"
	
	function codec:Decode(str)
		if type(str) ~= "string" then
			error(("Usage: codec:Decode(str):"
				.." 'str' - string expected got '%s'."):format(type(str)), 2)
		end
		if string_find(str, decode_fail_pattern) then
			return nil
		end
		for i = 1, decode_tblsize do
			str = string_gsub(str, decode_patterns[i], decode_repls[i])
		end
		return str
	end
	
	return codec
end

local _addon_channel_codec


-- Credits to WeakAuras2 and Galmok for the 6 bit encoding algorithm.
-- The code has been rewritten by the author of LibDeflate.
-- The result of encoding will be 25% larger than the
-- origin string, but every single byte of the encoding result will be
-- printable characters as the following.
local _byte_to_6bit_char = {
	[0]="a", "b", "c", "d", "e", "f", "g", "h",
	"i", "j", "k", "l", "m", "n", "o", "p",
	"q", "r", "s", "t", "u", "v", "w", "x",
	"y", "z", "A", "B", "C", "D", "E", "F",
	"G", "H", "I", "J", "K", "L", "M", "N",
	"O", "P", "Q", "R", "S", "T", "U", "V",
	"W", "X", "Y", "Z", "0", "1", "2", "3",
	"4", "5", "6", "7", "8", "9", "(", ")",
}

local _6bit_to_byte = {
	[97]=0,[98]=1,[99]=2,[100]=3,[101]=4,[102]=5,[103]=6,[104]=7,
	[105]=8,[106]=9,[107]=10,[108]=11,[109]=12,[110]=13,[111]=14,[112]=15,
	[113]=16,[114]=17,[115]=18,[116]=19,[117]=20,[118]=21,[119]=22,[120]=23,
	[121]=24,[122]=25,[65]=26,[66]=27,[67]=28,[68]=29,[69]=30,[70]=31,
	[71]=32,[72]=33,[73]=34,[74]=35,[75]=36,[76]=37,[77]=38,[78]=39,
	[79]=40,[80]=41,[81]=42,[82]=43,[83]=44,[84]=45,[85]=46,[86]=47,
	[87]=48,[88]=49,[89]=50,[90]=51,[48]=52,[49]=53,[50]=54,[51]=55,
	[52]=56,[53]=57,[54]=58,[55]=59,[56]=60,[57]=61,[40]=62,[41]=63,
}

--- Encode the string to make it printable. <br>
--
-- Credit to WeakAuras2, this function is equivalant to the implementation
-- it is using right now. <br>
-- The code has been rewritten by the author of LibDeflate. <br>
-- The encoded string will be 25% larger than the origin string. However, every
-- single byte of the encoded string will be one of 64 printable ASCII
-- characters, which are can be easier copied, pasted and displayed.
-- (26 lowercase letters, 26 uppercase letters, 10 numbers digits,
-- left parenthese, or right parenthese)
-- @param str [string] The string to be encoded.
-- @return [string] The encoded string.
function LibDeflate:EncodeForPrint(str)
	if type(str) ~= "string" then
		error(("Usage: LibDeflate:EncodeForPrint(str):"
			.." 'str' - string expected got '%s'."):format(type(str)), 2)
	end
	local strlen = #str
	local strlenMinus2 = strlen - 2
	local i = 1
	local buffer = {}
	local buffer_size = 0
	while i <= strlenMinus2 do
		local x1, x2, x3 = string_byte(str, i, i+2)
		i = i + 3
		local cache = x1+x2*256+x3*65536
		local b1 = cache % 64
		cache = (cache - b1) / 64
		local b2 = cache % 64
		cache = (cache - b2) / 64
		local b3 = cache % 64
		local b4 = (cache - b3) / 64
		buffer_size = buffer_size + 1
		buffer[buffer_size] =
			_byte_to_6bit_char[b1].._byte_to_6bit_char[b2]
			.._byte_to_6bit_char[b3].._byte_to_6bit_char[b4]
	end
	
	local cache = 0
	local cache_bitlen = 0
	while i <= strlen do
		local x = string_byte(str, i, i)
		cache = cache + x * _pow2[cache_bitlen]
		cache_bitlen = cache_bitlen + 8
		i = i + 1
	end
	while cache_bitlen > 0 do
		local bit6 = cache % 64
		buffer_size = buffer_size + 1
		buffer[buffer_size] = _byte_to_6bit_char[bit6]
		cache = (cache - bit6) / 64
		cache_bitlen = cache_bitlen - 6
	end
	
	return table_concat(buffer)
end

--- Decode the printable string produced by LibDeflate:EncodeForPrint.
-- "str" will have its prefixed and trailing control characters or space
-- removed before it is decoded, so it is easier to use if "str" comes form
-- user copy and paste with some prefixed or trailing spaces.
-- Then decode fails if the string contains any characters cant be produced by
-- LibDeflate:EncodeForPrint. That means, decode fails if the string contains a
-- characters NOT one of 26 lowercase letters, 26 uppercase letters,
-- 10 numbers digits, left parenthese, or right parenthese.
-- @param str [string] The string to be decoded
-- @return [string/nil] The decoded string if succeeds. nil if fails.
function LibDeflate:DecodeForPrint(str)
	if type(str) ~= "string" then
		error(("Usage: LibDeflate:DecodeForPrint(str):"
			.." 'str' - string expected got '%s'."):format(type(str)), 2)
	end
	str = str:gsub("^[%c ]+", "")
	str = str:gsub("[%c ]+$", "")
	
	local strlen = #str
	if strlen == 1 then
		return nil
	end
	local strlenMinus3 = strlen - 3
	local i = 1
	local buffer = {}
	local buffer_size = 0
	while i <= strlenMinus3 do
		local x1, x2, x3, x4 = string_byte(str, i, i+3)
		x1 = _6bit_to_byte[x1]
		x2 = _6bit_to_byte[x2]
		x3 = _6bit_to_byte[x3]
		x4 = _6bit_to_byte[x4]
		if not (x1 and x2 and x3 and x4) then
			return nil
		end
		i = i + 4
		local cache = x1+x2*64+x3*4096+x4*262144
		local b1 = cache % 256
		cache = (cache - b1) / 256
		local b2 = cache % 256
		local b3 = (cache - b2) / 256
		buffer_size = buffer_size + 1
		buffer[buffer_size] =
			_byte_to_char[b1].._byte_to_char[b2].._byte_to_char[b3]
	end
	
	local cache  = 0
	local cache_bitlen = 0
	while i <= strlen do
		local x = string_byte(str, i, i)
		x =  _6bit_to_byte[x]
		if not x then
			return nil
		end
		cache = cache + x * _pow2[cache_bitlen]
		cache_bitlen = cache_bitlen + 6
		i = i + 1
	end
	
	while cache_bitlen >= 8 do
		local byte = cache % 256
		buffer_size = buffer_size + 1
		buffer[buffer_size] = _byte_to_char[byte]
		cache = (cache - byte) / 256
		cache_bitlen = cache_bitlen - 8
	end
	
	return table_concat(buffer)
end

local function InternalClearCache()
	_addon_channel_codec = nil
end

-- For test. Don't use the functions in this table for real application.
-- Stuffs in this table is subject to change.
LibDeflate.internals = {
	LoadStringToTable = LoadStringToTable,
	IsValidDictionary = IsValidDictionary,
	IsEqualAdler32 = IsEqualAdler32,
	_byte_to_6bit_char = _byte_to_6bit_char,
	_6bit_to_byte = _6bit_to_byte,
	InternalClearCache = InternalClearCache,
}

return Compression]]></ProtectedString>
											<int64 name="SourceAssetId">5649237524</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a56</UniqueId>
										</Properties>
									</Item>
								</Item>
								<Item class="Model" referent="RBX0759f136f3734c3db088fb441e31279e">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<token name="LevelOfDetail">0</token>
										<CoordinateFrame name="ModelMeshCFrame">
											<X>0</X>
											<Y>0</Y>
											<Z>0</Z>
											<R00>1</R00>
											<R01>0</R01>
											<R02>0</R02>
											<R10>0</R10>
											<R11>1</R11>
											<R12>0</R12>
											<R20>0</R20>
											<R21>0</R21>
											<R22>1</R22>
										</CoordinateFrame>
										<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
										<Vector3 name="ModelMeshSize">
											<X>0</X>
											<Y>0</Y>
											<Z>0</Z>
										</Vector3>
										<string name="Name">dummy</string>
										<bool name="NeedsPivotMigration">false</bool>
										<Ref name="PrimaryPart">RBX7d60b77ab1364c1f952791a047c52077</Ref>
										<int64 name="SourceAssetId">518355944</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a41</UniqueId>
										<OptionalCoordinateFrame name="WorldPivotData">
											<CFrame>
												<X>0</X>
												<Y>0.5</Y>
												<Z>-0.5</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CFrame>
										</OptionalCoordinateFrame>
									</Properties>
									<Item class="MeshPart" referent="RBXe5476b48b7464e4dbaed9ae27f597305">
										<Properties>
											<bool name="Anchored">false</bool>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<float name="BackParamA">-0.5</float>
											<float name="BackParamB">0.5</float>
											<token name="BackSurface">0</token>
											<token name="BackSurfaceInput">0</token>
											<float name="BottomParamA">-0.5</float>
											<float name="BottomParamB">0.5</float>
											<token name="BottomSurface">0</token>
											<token name="BottomSurfaceInput">0</token>
											<CoordinateFrame name="CFrame">
												<X>-1.53165555</X>
												<Y>-0.825060666</Y>
												<Z>-0.98144424</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<bool name="CanCollide">false</bool>
											<bool name="CanQuery">true</bool>
											<bool name="CanTouch">true</bool>
											<bool name="CastShadow">true</bool>
											<int name="CollisionGroupId">0</int>
											<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
											<PhysicalProperties name="CustomPhysicalProperties">
												<CustomPhysics>false</CustomPhysics>
											</PhysicalProperties>
											<bool name="DoubleSided">false</bool>
											<float name="FrontParamA">-0.5</float>
											<float name="FrontParamB">0.5</float>
											<token name="FrontSurface">0</token>
											<token name="FrontSurfaceInput">0</token>
											<bool name="HasJointOffset">false</bool>
											<bool name="HasSkinnedMesh">false</bool>
											<Vector3 name="InitialSize">
												<X>1.00063133</X>
												<Y>0.335407257</Y>
												<Z>1.00020337</Z>
											</Vector3>
											<Vector3 name="JointOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<BinaryString name="LODData"></BinaryString>
											<float name="LeftParamA">-0.5</float>
											<float name="LeftParamB">0.5</float>
											<token name="LeftSurface">0</token>
											<token name="LeftSurfaceInput">0</token>
											<bool name="Locked">false</bool>
											<bool name="Massless">false</bool>
											<token name="Material">256</token>
											<string name="MaterialVariantSerialized"></string>
											<Content name="MeshID"><url>http://www.roblox.com/asset?id=467982673</url></Content>
											<Content name="MeshId"><url>http://www.roblox.com/asset?id=467982673</url></Content>
											<string name="Name">LeftFoot</string>
											<SharedString name="PhysicalConfigData">+qv2o0HSW+htH+ALwYQpiw==</SharedString>
											<BinaryString name="PhysicsData"></BinaryString>
											<CoordinateFrame name="PivotOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<float name="Reflectance">0</float>
											<token name="RenderFidelity">1</token>
											<float name="RightParamA">-0.5</float>
											<float name="RightParamB">0.5</float>
											<token name="RightSurface">0</token>
											<token name="RightSurfaceInput">0</token>
											<int name="RootPriority">0</int>
											<Vector3 name="RotVelocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<Content name="TextureID"><null></null></Content>
											<float name="TopParamA">-0.5</float>
											<float name="TopParamB">0.5</float>
											<token name="TopSurface">0</token>
											<token name="TopSurfaceInput">0</token>
											<float name="Transparency">0</float>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a33</UniqueId>
											<Vector3 name="Velocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<Vector3 name="size">
												<X>1.00063133</X>
												<Y>0.335407257</Y>
												<Z>1.00020337</Z>
											</Vector3>
										</Properties>
										<Item class="Attachment" referent="RBX284104a3a17d4d809b112f416cf96ec7">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>-0.00901681185</X>
													<Y>0.032443285</Y>
													<Z>0.000177569687</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">LeftAnkleRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025973</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Motor6D" referent="RBXcf18863e24a047e99628a8af45b6c8b4">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="C0">
													<X>-0.00382620096</X>
													<Y>-0.710131407</Y>
													<Z>0.00030554086</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<CoordinateFrame name="C1">
													<X>-0.00901681185</X>
													<Y>0.032443285</Y>
													<Z>0.000177569687</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<float name="DesiredAngle">0</float>
												<bool name="Enabled">true</bool>
												<float name="MaxVelocity">0</float>
												<string name="Name">LeftAnkle</string>
												<Ref name="Part0">RBXf4d22adf4f974f98bb6d2ce3e18aaa97</Ref>
												<Ref name="Part1">RBXe5476b48b7464e4dbaed9ae27f597305</Ref>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a8d</UniqueId>
											</Properties>
										</Item>
									</Item>
									<Item class="MeshPart" referent="RBXd912624974d2498f82d4b19571d27123">
										<Properties>
											<bool name="Anchored">false</bool>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<float name="BackParamA">-0.5</float>
											<float name="BackParamB">0.5</float>
											<token name="BackSurface">0</token>
											<token name="BackSurfaceInput">0</token>
											<float name="BottomParamA">-0.5</float>
											<float name="BottomParamB">0.5</float>
											<token name="BottomSurface">0</token>
											<token name="BottomSurfaceInput">0</token>
											<CoordinateFrame name="CFrame">
												<X>-2.53500748</X>
												<Y>1.1740818</Y>
												<Z>-0.981227636</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<bool name="CanCollide">false</bool>
											<bool name="CanQuery">true</bool>
											<bool name="CanTouch">true</bool>
											<bool name="CastShadow">true</bool>
											<int name="CollisionGroupId">0</int>
											<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
											<PhysicalProperties name="CustomPhysicalProperties">
												<CustomPhysics>false</CustomPhysics>
											</PhysicalProperties>
											<bool name="DoubleSided">false</bool>
											<float name="FrontParamA">-0.5</float>
											<float name="FrontParamB">0.5</float>
											<token name="FrontSurface">0</token>
											<token name="FrontSurfaceInput">0</token>
											<bool name="HasJointOffset">false</bool>
											<bool name="HasSkinnedMesh">false</bool>
											<Vector3 name="InitialSize">
												<X>0.999299049</X>
												<Y>0.335255831</Y>
												<Z>1.00029743</Z>
											</Vector3>
											<Vector3 name="JointOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<BinaryString name="LODData"></BinaryString>
											<float name="LeftParamA">-0.5</float>
											<float name="LeftParamB">0.5</float>
											<token name="LeftSurface">0</token>
											<token name="LeftSurfaceInput">0</token>
											<bool name="Locked">false</bool>
											<bool name="Massless">false</bool>
											<token name="Material">256</token>
											<string name="MaterialVariantSerialized"></string>
											<Content name="MeshID"><url>http://www.roblox.com/asset?id=467982655</url></Content>
											<Content name="MeshId"><url>http://www.roblox.com/asset?id=467982655</url></Content>
											<string name="Name">LeftHand</string>
											<SharedString name="PhysicalConfigData">+qv2o0HSW+htH+ALwYQpiw==</SharedString>
											<BinaryString name="PhysicsData"></BinaryString>
											<CoordinateFrame name="PivotOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<float name="Reflectance">0</float>
											<token name="RenderFidelity">1</token>
											<float name="RightParamA">-0.5</float>
											<float name="RightParamB">0.5</float>
											<token name="RightSurface">0</token>
											<token name="RightSurfaceInput">0</token>
											<int name="RootPriority">0</int>
											<Vector3 name="RotVelocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<Content name="TextureID"><null></null></Content>
											<float name="TopParamA">-0.5</float>
											<float name="TopParamB">0.5</float>
											<token name="TopSurface">0</token>
											<token name="TopSurfaceInput">0</token>
											<float name="Transparency">0</float>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a34</UniqueId>
											<Vector3 name="Velocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<Vector3 name="size">
												<X>0.999299049</X>
												<Y>0.335255831</Y>
												<Z>1.00029743</Z>
											</Vector3>
										</Properties>
										<Item class="Attachment" referent="RBXced2253a38884e3ea1cb737cdf02ff25">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>-0.000386238098</X>
													<Y>0.0579008311</Y>
													<Z>-0.0154390335</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">LeftWristRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025974</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX1dfe7a8153e54b0eb2690b9701001c24">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>-0.0108054876</X>
													<Y>-0.168664381</Y>
													<Z>-0.0154389441</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>-0</R02>
													<R10>0</R10>
													<R11>6.12323426e-17</R11>
													<R12>1</R12>
													<R20>0</R20>
													<R21>-1</R21>
													<R22>6.12323426e-17</R22>
												</CoordinateFrame>
												<string name="Name">LeftGripAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025975</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Motor6D" referent="RBX0e23a807a90646ad89066de6a93f348f">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="C0">
													<X>-0.0016657114</X>
													<Y>-0.682255626</Y>
													<Z>-0.00989592075</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<CoordinateFrame name="C1">
													<X>-0.000386238098</X>
													<Y>0.0579008311</Y>
													<Z>-0.0154390335</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<float name="DesiredAngle">0</float>
												<bool name="Enabled">true</bool>
												<float name="MaxVelocity">0</float>
												<string name="Name">LeftWrist</string>
												<Ref name="Part0">RBX42173f2e51d746e1a0afa19cbdeedfa2</Ref>
												<Ref name="Part1">RBXd912624974d2498f82d4b19571d27123</Ref>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a8e</UniqueId>
											</Properties>
										</Item>
									</Item>
									<Item class="MeshPart" referent="RBX42173f2e51d746e1a0afa19cbdeedfa2">
										<Properties>
											<bool name="Anchored">false</bool>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<float name="BackParamA">-0.5</float>
											<float name="BackParamB">0.5</float>
											<token name="BackSurface">0</token>
											<token name="BackSurfaceInput">0</token>
											<float name="BottomParamA">-0.5</float>
											<float name="BottomParamB">0.5</float>
											<token name="BottomSurface">0</token>
											<token name="BottomSurfaceInput">0</token>
											<CoordinateFrame name="CFrame">
												<X>-2.53372812</X>
												<Y>1.91423821</Y>
												<Z>-0.986770749</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<bool name="CanCollide">false</bool>
											<bool name="CanQuery">true</bool>
											<bool name="CanTouch">true</bool>
											<bool name="CastShadow">true</bool>
											<int name="CollisionGroupId">0</int>
											<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
											<PhysicalProperties name="CustomPhysicalProperties">
												<CustomPhysics>false</CustomPhysics>
											</PhysicalProperties>
											<bool name="DoubleSided">false</bool>
											<float name="FrontParamA">-0.5</float>
											<float name="FrontParamB">0.5</float>
											<token name="FrontSurface">0</token>
											<token name="FrontSurfaceInput">0</token>
											<bool name="HasJointOffset">false</bool>
											<bool name="HasSkinnedMesh">false</bool>
											<Vector3 name="InitialSize">
												<X>1.00027657</X>
												<Y>1.26567209</Y>
												<Z>1.00025082</Z>
											</Vector3>
											<Vector3 name="JointOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<BinaryString name="LODData"></BinaryString>
											<float name="LeftParamA">-0.5</float>
											<float name="LeftParamB">0.5</float>
											<token name="LeftSurface">0</token>
											<token name="LeftSurfaceInput">0</token>
											<bool name="Locked">false</bool>
											<bool name="Massless">false</bool>
											<token name="Material">256</token>
											<string name="MaterialVariantSerialized"></string>
											<Content name="MeshID"><url>http://www.roblox.com/asset?id=467982658</url></Content>
											<Content name="MeshId"><url>http://www.roblox.com/asset?id=467982658</url></Content>
											<string name="Name">LeftLowerArm</string>
											<SharedString name="PhysicalConfigData">+qv2o0HSW+htH+ALwYQpiw==</SharedString>
											<BinaryString name="PhysicsData"></BinaryString>
											<CoordinateFrame name="PivotOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<float name="Reflectance">0</float>
											<token name="RenderFidelity">1</token>
											<float name="RightParamA">-0.5</float>
											<float name="RightParamB">0.5</float>
											<token name="RightSurface">0</token>
											<token name="RightSurfaceInput">0</token>
											<int name="RootPriority">0</int>
											<Vector3 name="RotVelocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<Content name="TextureID"><null></null></Content>
											<float name="TopParamA">-0.5</float>
											<float name="TopParamB">0.5</float>
											<token name="TopSurface">0</token>
											<token name="TopSurfaceInput">0</token>
											<float name="Transparency">0</float>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a35</UniqueId>
											<Vector3 name="Velocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<Vector3 name="size">
												<X>1.00027657</X>
												<Y>1.26567209</Y>
												<Z>1.00025082</Z>
											</Vector3>
										</Properties>
										<Item class="Attachment" referent="RBX7b9793c9df11410d9bf866ba4615094e">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>-0.0016657114</X>
													<Y>0.122950554</Y>
													<Z>-0.00989592075</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">LeftElbowRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025976</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX07a3c5dc906d40dfa917b65b5fe9a870">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>-0.0016657114</X>
													<Y>-0.682255626</Y>
													<Z>-0.00989592075</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">LeftWristRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025977</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Motor6D" referent="RBX37833e3ce34a43cca591026dd36452d2">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="C0">
													<X>-0.00166511536</X>
													<Y>-0.263139546</Y>
													<Z>-0.00943991542</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<CoordinateFrame name="C1">
													<X>-0.0016657114</X>
													<Y>0.122950554</Y>
													<Z>-0.00989592075</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<float name="DesiredAngle">0</float>
												<bool name="Enabled">true</bool>
												<float name="MaxVelocity">0</float>
												<string name="Name">LeftElbow</string>
												<Ref name="Part0">RBX6db405633714429cb1cbbc4d3bfc74af</Ref>
												<Ref name="Part1">RBX42173f2e51d746e1a0afa19cbdeedfa2</Ref>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a8f</UniqueId>
											</Properties>
										</Item>
									</Item>
									<Item class="MeshPart" referent="RBXf4d22adf4f974f98bb6d2ce3e18aaa97">
										<Properties>
											<bool name="Anchored">false</bool>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<float name="BackParamA">-0.5</float>
											<float name="BackParamB">0.5</float>
											<token name="BackSurface">0</token>
											<token name="BackSurfaceInput">0</token>
											<float name="BottomParamA">-0.5</float>
											<float name="BottomParamB">0.5</float>
											<token name="BottomSurface">0</token>
											<token name="BottomSurfaceInput">0</token>
											<CoordinateFrame name="CFrame">
												<X>-1.53684616</X>
												<Y>-0.0824859738</Y>
												<Z>-0.981572211</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<bool name="CanCollide">false</bool>
											<bool name="CanQuery">true</bool>
											<bool name="CanTouch">true</bool>
											<bool name="CastShadow">true</bool>
											<int name="CollisionGroupId">0</int>
											<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
											<PhysicalProperties name="CustomPhysicalProperties">
												<CustomPhysics>false</CustomPhysics>
											</PhysicalProperties>
											<bool name="DoubleSided">false</bool>
											<float name="FrontParamA">-0.5</float>
											<float name="FrontParamB">0.5</float>
											<token name="FrontSurface">0</token>
											<token name="FrontSurfaceInput">0</token>
											<bool name="HasJointOffset">false</bool>
											<bool name="HasSkinnedMesh">false</bool>
											<Vector3 name="InitialSize">
												<X>1.00027585</X>
												<Y>1.48964536</Y>
												<Z>1.00032866</Z>
											</Vector3>
											<Vector3 name="JointOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<BinaryString name="LODData"></BinaryString>
											<float name="LeftParamA">-0.5</float>
											<float name="LeftParamB">0.5</float>
											<token name="LeftSurface">0</token>
											<token name="LeftSurfaceInput">0</token>
											<bool name="Locked">false</bool>
											<bool name="Massless">false</bool>
											<token name="Material">256</token>
											<string name="MaterialVariantSerialized"></string>
											<Content name="MeshID"><url>http://www.roblox.com/asset?id=467982675</url></Content>
											<Content name="MeshId"><url>http://www.roblox.com/asset?id=467982675</url></Content>
											<string name="Name">LeftLowerLeg</string>
											<SharedString name="PhysicalConfigData">+qv2o0HSW+htH+ALwYQpiw==</SharedString>
											<BinaryString name="PhysicsData"></BinaryString>
											<CoordinateFrame name="PivotOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<float name="Reflectance">0</float>
											<token name="RenderFidelity">1</token>
											<float name="RightParamA">-0.5</float>
											<float name="RightParamB">0.5</float>
											<token name="RightSurface">0</token>
											<token name="RightSurfaceInput">0</token>
											<int name="RootPriority">0</int>
											<Vector3 name="RotVelocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<Content name="TextureID"><null></null></Content>
											<float name="TopParamA">-0.5</float>
											<float name="TopParamB">0.5</float>
											<token name="TopSurface">0</token>
											<token name="TopSurfaceInput">0</token>
											<float name="Transparency">0</float>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a36</UniqueId>
											<Vector3 name="Velocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<Vector3 name="size">
												<X>1.00027585</X>
												<Y>1.48964536</Y>
												<Z>1.00032866</Z>
											</Vector3>
										</Properties>
										<Item class="Attachment" referent="RBXe4c139ab71eb43e6814d7753b30b1cf8">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>-0.00382620096</X>
													<Y>0.289868593</Y>
													<Z>0.00030554086</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">LeftKneeRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025978</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX9f47f322fb97473aa0cac8d8d0c60f88">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>-0.00382620096</X>
													<Y>-0.710131407</Y>
													<Z>0.00030554086</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">LeftAnkleRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025979</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Motor6D" referent="RBXea8c5f74f2504215a82ff8c2157ba024">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="C0">
													<X>-0.00382620096</X>
													<Y>-0.264486194</Y>
													<Z>0.000586740673</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<CoordinateFrame name="C1">
													<X>-0.00382620096</X>
													<Y>0.289868593</Y>
													<Z>0.00030554086</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<float name="DesiredAngle">0</float>
												<bool name="Enabled">true</bool>
												<float name="MaxVelocity">0</float>
												<string name="Name">LeftKnee</string>
												<Ref name="Part0">RBXd3906bb2597f4a6ba5c5054bac7b16ad</Ref>
												<Ref name="Part1">RBXf4d22adf4f974f98bb6d2ce3e18aaa97</Ref>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a90</UniqueId>
											</Properties>
										</Item>
									</Item>
									<Item class="MeshPart" referent="RBX6db405633714429cb1cbbc4d3bfc74af">
										<Properties>
											<bool name="Anchored">false</bool>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<float name="BackParamA">-0.5</float>
											<float name="BackParamB">0.5</float>
											<token name="BackSurface">0</token>
											<token name="BackSurfaceInput">0</token>
											<float name="BottomParamA">-0.5</float>
											<float name="BottomParamB">0.5</float>
											<token name="BottomSurface">0</token>
											<token name="BottomSurfaceInput">0</token>
											<CoordinateFrame name="CFrame">
												<X>-2.5337286</X>
												<Y>2.30032825</Y>
												<Z>-0.987226725</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<bool name="CanCollide">false</bool>
											<bool name="CanQuery">true</bool>
											<bool name="CanTouch">true</bool>
											<bool name="CastShadow">true</bool>
											<int name="CollisionGroupId">0</int>
											<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
											<PhysicalProperties name="CustomPhysicalProperties">
												<CustomPhysics>false</CustomPhysics>
											</PhysicalProperties>
											<bool name="DoubleSided">false</bool>
											<float name="FrontParamA">-0.5</float>
											<float name="FrontParamB">0.5</float>
											<token name="FrontSurface">0</token>
											<token name="FrontSurfaceInput">0</token>
											<bool name="HasJointOffset">false</bool>
											<bool name="HasSkinnedMesh">false</bool>
											<Vector3 name="InitialSize">
												<X>1.00027633</X>
												<Y>1.39554</Y>
												<Z>1.00025082</Z>
											</Vector3>
											<Vector3 name="JointOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<BinaryString name="LODData"></BinaryString>
											<float name="LeftParamA">-0.5</float>
											<float name="LeftParamB">0.5</float>
											<token name="LeftSurface">0</token>
											<token name="LeftSurfaceInput">0</token>
											<bool name="Locked">false</bool>
											<bool name="Massless">false</bool>
											<token name="Material">256</token>
											<string name="MaterialVariantSerialized"></string>
											<Content name="MeshID"><url>http://www.roblox.com/asset?id=467982661</url></Content>
											<Content name="MeshId"><url>http://www.roblox.com/asset?id=467982661</url></Content>
											<string name="Name">LeftUpperArm</string>
											<SharedString name="PhysicalConfigData">+qv2o0HSW+htH+ALwYQpiw==</SharedString>
											<BinaryString name="PhysicsData"></BinaryString>
											<CoordinateFrame name="PivotOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<float name="Reflectance">0</float>
											<token name="RenderFidelity">1</token>
											<float name="RightParamA">-0.5</float>
											<float name="RightParamB">0.5</float>
											<token name="RightSurface">0</token>
											<token name="RightSurfaceInput">0</token>
											<int name="RootPriority">0</int>
											<Vector3 name="RotVelocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<Content name="TextureID"><null></null></Content>
											<float name="TopParamA">-0.5</float>
											<float name="TopParamB">0.5</float>
											<token name="TopSurface">0</token>
											<token name="TopSurfaceInput">0</token>
											<float name="Transparency">0</float>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a37</UniqueId>
											<Vector3 name="Velocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<Vector3 name="size">
												<X>1.00027633</X>
												<Y>1.39554</Y>
												<Z>1.00025082</Z>
											</Vector3>
										</Properties>
										<Item class="Attachment" referent="RBXf1e2f8f3e79a47328753e7f59e8bcbc9">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.247964978</X>
													<Y>0.456732988</Y>
													<Z>-0.00943991542</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">LeftShoulderRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30002597a</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX08bee29a4aa347d08a5556aa03227bf5">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>-0.00166511536</X>
													<Y>-0.263139546</Y>
													<Z>-0.00943991542</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">LeftElbowRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30002597b</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX9d7fde56afab44da83d4e5322fe0e7cd">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>-0.0120843649</X>
													<Y>0.709783912</Y>
													<Z>-0.00943991542</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">LeftShoulderAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30002597c</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Motor6D" referent="RBX16bc21c477c24221ab6da2699505f135">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="C0">
													<X>-1.24955308</X>
													<Y>0.556408584</Y>
													<Z>-0.015560925</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<CoordinateFrame name="C1">
													<X>0.247964978</X>
													<Y>0.456732988</Y>
													<Z>-0.00943991542</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<float name="DesiredAngle">0</float>
												<bool name="Enabled">true</bool>
												<float name="MaxVelocity">0</float>
												<string name="Name">LeftShoulder</string>
												<Ref name="Part0">RBX4e244bf6b8bd44dfbfb37c1b8b93dc2d</Ref>
												<Ref name="Part1">RBX6db405633714429cb1cbbc4d3bfc74af</Ref>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a91</UniqueId>
											</Properties>
										</Item>
									</Item>
									<Item class="MeshPart" referent="RBXd3906bb2597f4a6ba5c5054bac7b16ad">
										<Properties>
											<bool name="Anchored">false</bool>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<float name="BackParamA">-0.5</float>
											<float name="BackParamB">0.5</float>
											<token name="BackSurface">0</token>
											<token name="BackSurfaceInput">0</token>
											<float name="BottomParamA">-0.5</float>
											<float name="BottomParamB">0.5</float>
											<token name="BottomSurface">0</token>
											<token name="BottomSurfaceInput">0</token>
											<CoordinateFrame name="CFrame">
												<X>-1.53684616</X>
												<Y>0.471868813</Y>
												<Z>-0.981853426</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<bool name="CanCollide">false</bool>
											<bool name="CanQuery">true</bool>
											<bool name="CanTouch">true</bool>
											<bool name="CastShadow">true</bool>
											<int name="CollisionGroupId">0</int>
											<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
											<PhysicalProperties name="CustomPhysicalProperties">
												<CustomPhysics>false</CustomPhysics>
											</PhysicalProperties>
											<bool name="DoubleSided">false</bool>
											<float name="FrontParamA">-0.5</float>
											<float name="FrontParamB">0.5</float>
											<token name="FrontSurface">0</token>
											<token name="FrontSurfaceInput">0</token>
											<bool name="HasJointOffset">false</bool>
											<bool name="HasSkinnedMesh">false</bool>
											<Vector3 name="InitialSize">
												<X>1.00027561</X>
												<Y>1.5362649</Y>
												<Z>1.00092912</Z>
											</Vector3>
											<Vector3 name="JointOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<BinaryString name="LODData"></BinaryString>
											<float name="LeftParamA">-0.5</float>
											<float name="LeftParamB">0.5</float>
											<token name="LeftSurface">0</token>
											<token name="LeftSurfaceInput">0</token>
											<bool name="Locked">false</bool>
											<bool name="Massless">false</bool>
											<token name="Material">256</token>
											<string name="MaterialVariantSerialized"></string>
											<Content name="MeshID"><url>http://www.roblox.com/asset?id=467982678</url></Content>
											<Content name="MeshId"><url>http://www.roblox.com/asset?id=467982678</url></Content>
											<string name="Name">LeftUpperLeg</string>
											<SharedString name="PhysicalConfigData">+qv2o0HSW+htH+ALwYQpiw==</SharedString>
											<BinaryString name="PhysicsData"></BinaryString>
											<CoordinateFrame name="PivotOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<float name="Reflectance">0</float>
											<token name="RenderFidelity">1</token>
											<float name="RightParamA">-0.5</float>
											<float name="RightParamB">0.5</float>
											<token name="RightSurface">0</token>
											<token name="RightSurfaceInput">0</token>
											<int name="RootPriority">0</int>
											<Vector3 name="RotVelocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<Content name="TextureID"><null></null></Content>
											<float name="TopParamA">-0.5</float>
											<float name="TopParamB">0.5</float>
											<token name="TopSurface">0</token>
											<token name="TopSurfaceInput">0</token>
											<float name="Transparency">0</float>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a38</UniqueId>
											<Vector3 name="Velocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<Vector3 name="size">
												<X>1.00027561</X>
												<Y>1.5362649</Y>
												<Z>1.00092912</Z>
											</Vector3>
										</Properties>
										<Item class="Attachment" referent="RBX997ff8ae30544ba4863093bd6a667d11">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>-0.00382620096</X>
													<Y>0.4851138</Y>
													<Z>0.000686740503</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">LeftHipRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30002597d</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBXc0f34a44592b4dfe8c0a61197b53f3fe">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>-0.00382620096</X>
													<Y>-0.264486194</Y>
													<Z>0.000586740673</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">LeftKneeRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30002597e</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Motor6D" referent="RBX45933ac409f746eaa7a5573c3d2e7ed6">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="C0">
													<X>-0.50451982</X>
													<Y>-0.243062243</Y>
													<Z>0.00122789107</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<CoordinateFrame name="C1">
													<X>-0.00382620096</X>
													<Y>0.4851138</Y>
													<Z>0.000686740503</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<float name="DesiredAngle">0</float>
												<bool name="Enabled">true</bool>
												<float name="MaxVelocity">0</float>
												<string name="Name">LeftHip</string>
												<Ref name="Part0">RBX6c869561e99241a7a3ab9ac42a4c6fbc</Ref>
												<Ref name="Part1">RBXd3906bb2597f4a6ba5c5054bac7b16ad</Ref>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a92</UniqueId>
											</Properties>
										</Item>
									</Item>
									<Item class="MeshPart" referent="RBX6c869561e99241a7a3ab9ac42a4c6fbc">
										<Properties>
											<bool name="Anchored">false</bool>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<float name="BackParamA">-0.5</float>
											<float name="BackParamB">0.5</float>
											<token name="BackSurface">0</token>
											<token name="BackSurfaceInput">0</token>
											<float name="BottomParamA">-0.5</float>
											<float name="BottomParamB">0.5</float>
											<token name="BottomSurface">0</token>
											<token name="BottomSurfaceInput">0</token>
											<CoordinateFrame name="CFrame">
												<X>-1.0361526</X>
												<Y>1.20004487</Y>
												<Z>-0.982394576</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<bool name="CanCollide">true</bool>
											<bool name="CanQuery">true</bool>
											<bool name="CanTouch">true</bool>
											<bool name="CastShadow">true</bool>
											<int name="CollisionGroupId">0</int>
											<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
											<PhysicalProperties name="CustomPhysicalProperties">
												<CustomPhysics>false</CustomPhysics>
											</PhysicalProperties>
											<bool name="DoubleSided">false</bool>
											<float name="FrontParamA">-0.5</float>
											<float name="FrontParamB">0.5</float>
											<token name="FrontSurface">0</token>
											<token name="FrontSurfaceInput">0</token>
											<bool name="HasJointOffset">false</bool>
											<bool name="HasSkinnedMesh">false</bool>
											<Vector3 name="InitialSize">
												<X>2.00017595</X>
												<Y>0.400037616</Y>
												<Z>1.00021255</Z>
											</Vector3>
											<Vector3 name="JointOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<BinaryString name="LODData"></BinaryString>
											<float name="LeftParamA">-0.5</float>
											<float name="LeftParamB">0.5</float>
											<token name="LeftSurface">0</token>
											<token name="LeftSurfaceInput">0</token>
											<bool name="Locked">false</bool>
											<bool name="Massless">false</bool>
											<token name="Material">256</token>
											<string name="MaterialVariantSerialized"></string>
											<Content name="MeshID"><url>http://www.roblox.com/asset?id=467982692</url></Content>
											<Content name="MeshId"><url>http://www.roblox.com/asset?id=467982692</url></Content>
											<string name="Name">LowerTorso</string>
											<SharedString name="PhysicalConfigData">+qv2o0HSW+htH+ALwYQpiw==</SharedString>
											<BinaryString name="PhysicsData"></BinaryString>
											<CoordinateFrame name="PivotOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<float name="Reflectance">0</float>
											<token name="RenderFidelity">1</token>
											<float name="RightParamA">-0.5</float>
											<float name="RightParamB">0.5</float>
											<token name="RightSurface">0</token>
											<token name="RightSurfaceInput">0</token>
											<int name="RootPriority">0</int>
											<Vector3 name="RotVelocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<Content name="TextureID"><null></null></Content>
											<float name="TopParamA">-0.5</float>
											<float name="TopParamB">0.5</float>
											<token name="TopSurface">0</token>
											<token name="TopSurfaceInput">0</token>
											<float name="Transparency">0</float>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a39</UniqueId>
											<Vector3 name="Velocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<Vector3 name="size">
												<X>2.00017595</X>
												<Y>0.400037616</Y>
												<Z>1.00021255</Z>
											</Vector3>
										</Properties>
										<Item class="Attachment" referent="RBXcbf295cb40b94d17999ec375245d6e29">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.000280171633</X>
													<Y>0.133037761</Y>
													<Z>-0.0142721087</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">RootRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30002597f</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX4ff9ba6508944fa4a00d2bca35821746">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.000280171633</X>
													<Y>0.537143946</Y>
													<Z>-0.0142721087</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">WaistRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025980</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX537f24c8387a4734b5bc3402bdd1f8ec">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>-0.50451982</X>
													<Y>-0.243062243</Y>
													<Z>0.00122789107</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">LeftHipRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025981</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX127f704894da4af8b43a8d33255cf728">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.505080223</X>
													<Y>-0.243262246</Y>
													<Z>0.00102789141</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">RightHipRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025982</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX7eeca728209d4e28a5cea1456e0496ff">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.000280171633</X>
													<Y>-0.0668323487</Y>
													<Z>-0.501259804</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">WaistFrontAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025983</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX07edb4b96b6d42f49f8de26537702d87">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.000280171633</X>
													<Y>-0.0668323487</Y>
													<Z>-0.0142721087</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">WaistCenterAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025984</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBXe08fca09057b4279b35b87c355e07d05">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.000280171633</X>
													<Y>-0.0668323487</Y>
													<Z>0.490862012</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">WaistBackAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025985</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Motor6D" referent="RBXcc55f97e5909457cb302ec686ad2db14">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="C0">
													<X>0</X>
													<Y>0</Y>
													<Z>0</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<CoordinateFrame name="C1">
													<X>0.000280171633</X>
													<Y>0.133037761</Y>
													<Z>-0.0142721087</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<float name="DesiredAngle">0</float>
												<bool name="Enabled">true</bool>
												<float name="MaxVelocity">0</float>
												<string name="Name">Root</string>
												<Ref name="Part0">RBX7d60b77ab1364c1f952791a047c52077</Ref>
												<Ref name="Part1">RBX6c869561e99241a7a3ab9ac42a4c6fbc</Ref>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a93</UniqueId>
											</Properties>
										</Item>
									</Item>
									<Item class="Part" referent="RBXa650b52b89734018a175e54a25dd726a">
										<Properties>
											<bool name="Anchored">false</bool>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<float name="BackParamA">-0.5</float>
											<float name="BackParamB">0.5</float>
											<token name="BackSurface">0</token>
											<token name="BackSurfaceInput">0</token>
											<float name="BottomParamA">-0.5</float>
											<float name="BottomParamB">0.5</float>
											<token name="BottomSurface">0</token>
											<token name="BottomSurfaceInput">0</token>
											<CoordinateFrame name="CFrame">
												<X>-1.03584528</X>
												<Y>3.5723002</Y>
												<Z>-1.00053358</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<bool name="CanCollide">true</bool>
											<bool name="CanQuery">true</bool>
											<bool name="CanTouch">true</bool>
											<bool name="CastShadow">true</bool>
											<int name="CollisionGroupId">0</int>
											<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
											<PhysicalProperties name="CustomPhysicalProperties">
												<CustomPhysics>false</CustomPhysics>
											</PhysicalProperties>
											<float name="FrontParamA">-0.5</float>
											<float name="FrontParamB">0.5</float>
											<token name="FrontSurface">0</token>
											<token name="FrontSurfaceInput">0</token>
											<float name="LeftParamA">-0.5</float>
											<float name="LeftParamB">0.5</float>
											<token name="LeftSurface">0</token>
											<token name="LeftSurfaceInput">0</token>
											<bool name="Locked">true</bool>
											<bool name="Massless">false</bool>
											<token name="Material">256</token>
											<string name="MaterialVariantSerialized"></string>
											<string name="Name">Head</string>
											<CoordinateFrame name="PivotOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<float name="Reflectance">0</float>
											<float name="RightParamA">-0.5</float>
											<float name="RightParamB">0.5</float>
											<token name="RightSurface">0</token>
											<token name="RightSurfaceInput">0</token>
											<int name="RootPriority">0</int>
											<Vector3 name="RotVelocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<float name="TopParamA">-0.5</float>
											<float name="TopParamB">0.5</float>
											<token name="TopSurface">0</token>
											<token name="TopSurfaceInput">0</token>
											<float name="Transparency">0</float>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a9c</UniqueId>
											<Vector3 name="Velocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<token name="formFactorRaw">3</token>
											<token name="shape">1</token>
											<Vector3 name="size">
												<X>1</X>
												<Y>1</Y>
												<Z>1</Z>
											</Vector3>
										</Properties>
										<Item class="SpecialMesh" referent="RBX38d5be91870a45a0aa065a64d0ff36e5">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<token name="LODX">2</token>
												<token name="LODY">2</token>
												<Content name="MeshId"><url>http://www.roblox.com/asset?id=419776358</url></Content>
												<token name="MeshType">5</token>
												<string name="Name">Mesh</string>
												<Vector3 name="Offset">
													<X>0</X>
													<Y>0</Y>
													<Z>0</Z>
												</Vector3>
												<Vector3 name="Scale">
													<X>1</X>
													<Y>1</Y>
													<Z>1</Z>
												</Vector3>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<Content name="TextureId"><null></null></Content>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aa6</UniqueId>
												<Vector3 name="VertexColor">
													<X>1</X>
													<Y>1</Y>
													<Z>1</Z>
												</Vector3>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX36302561182a49b5ab346d76d6fdc1bd">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>2.98023224e-08</X>
													<Y>0.000384569168</Y>
													<Z>0.0038668497</Z>
													<R00>1</R00>
													<R01>1.6054104e-16</R01>
													<R02>-1.21432539e-15</R02>
													<R10>-1.6054104e-16</R10>
													<R11>1</R11>
													<R12>6.9388939e-17</R12>
													<R20>1.21432539e-15</R20>
													<R21>-6.9388939e-17</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">FaceCenterAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025986</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBXfb38061b458f442fb9954d9c8d771fec">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>-2.72095203e-05</X>
													<Y>-0.565615535</Y>
													<Z>0.00386685133</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">NeckRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025987</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX3ccc6a86141045f58b39e9a780ae769f">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>1.71348802e-09</X>
													<Y>5.05447388e-05</Y>
													<Z>-0.5933792</Z>
													<R00>1</R00>
													<R01>1.6054104e-16</R01>
													<R02>-1.21432539e-15</R02>
													<R10>-1.6054104e-16</R10>
													<R11>1</R11>
													<R12>6.9388939e-17</R12>
													<R20>1.21432539e-15</R20>
													<R21>-6.9388939e-17</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">FaceFrontAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025988</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBXbb33f18ca362491f9856c23a5de3fa76">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>1.71348802e-09</X>
													<Y>0.599125862</Y>
													<Z>0.00386685249</Z>
													<R00>1</R00>
													<R01>1.6054104e-16</R01>
													<R02>-1.21432539e-15</R02>
													<R10>-1.6054104e-16</R10>
													<R11>1</R11>
													<R12>6.9388939e-17</R12>
													<R20>1.21432539e-15</R20>
													<R21>-6.9388939e-17</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">HairAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025989</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBXdf77136ab27c460b94726dcd13a8708b">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>1.71348802e-09</X>
													<Y>0.599125862</Y>
													<Z>0.00386685249</Z>
													<R00>1</R00>
													<R01>1.6054104e-16</R01>
													<R02>-1.21432539e-15</R02>
													<R10>-1.6054104e-16</R10>
													<R11>1</R11>
													<R12>6.9388939e-17</R12>
													<R20>1.21432539e-15</R20>
													<R21>-6.9388939e-17</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">HatAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30002598a</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX2b6f502f00e347af9da8705d6e0dd704">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>-2.72095203e-05</X>
													<Y>-0.577528834</Y>
													<Z>0.00386685133</Z>
													<R00>1</R00>
													<R01>1.6054104e-16</R01>
													<R02>-1.21432539e-15</R02>
													<R10>-1.6054104e-16</R10>
													<R11>1</R11>
													<R12>6.9388939e-17</R12>
													<R20>1.21432539e-15</R20>
													<R21>-6.9388939e-17</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">NeckAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30002598b</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Decal" referent="RBXc18ef6845e334c01bc2d4ebd31535476">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<Color3 name="Color3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<token name="Face">5</token>
												<string name="Name">face</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<Content name="Texture"><url>rbxasset://textures/face.png</url></Content>
												<float name="Transparency">0</float>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259a1</UniqueId>
												<int name="ZIndex">1</int>
											</Properties>
										</Item>
										<Item class="Motor6D" referent="RBXc0ebc6e0a05c4628b9dcf1389a4e8714">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="C0">
													<X>0.000338107347</X>
													<Y>0.806032121</Y>
													<Z>-0.015560925</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<CoordinateFrame name="C1">
													<X>-2.72095203e-05</X>
													<Y>-0.565615535</Y>
													<Z>0.00386685133</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<float name="DesiredAngle">0</float>
												<bool name="Enabled">true</bool>
												<float name="MaxVelocity">0</float>
												<string name="Name">Neck</string>
												<Ref name="Part0">RBX4e244bf6b8bd44dfbfb37c1b8b93dc2d</Ref>
												<Ref name="Part1">RBXa650b52b89734018a175e54a25dd726a</Ref>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a94</UniqueId>
											</Properties>
										</Item>
									</Item>
									<Item class="MeshPart" referent="RBX1acc43d20d2a48b8bf56a46c183766fd">
										<Properties>
											<bool name="Anchored">false</bool>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<float name="BackParamA">-0.5</float>
											<float name="BackParamB">0.5</float>
											<token name="BackSurface">0</token>
											<token name="BackSurfaceInput">0</token>
											<float name="BottomParamA">-0.5</float>
											<float name="BottomParamB">0.5</float>
											<token name="BottomSurface">0</token>
											<token name="BottomSurfaceInput">0</token>
											<CoordinateFrame name="CFrame">
												<X>-0.54008919</X>
												<Y>-0.825060666</Y>
												<Z>-0.981444478</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<bool name="CanCollide">false</bool>
											<bool name="CanQuery">true</bool>
											<bool name="CanTouch">true</bool>
											<bool name="CastShadow">true</bool>
											<int name="CollisionGroupId">0</int>
											<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
											<PhysicalProperties name="CustomPhysicalProperties">
												<CustomPhysics>false</CustomPhysics>
											</PhysicalProperties>
											<bool name="DoubleSided">false</bool>
											<float name="FrontParamA">-0.5</float>
											<float name="FrontParamB">0.5</float>
											<token name="FrontSurface">0</token>
											<token name="FrontSurfaceInput">0</token>
											<bool name="HasJointOffset">false</bool>
											<bool name="HasSkinnedMesh">false</bool>
											<Vector3 name="InitialSize">
												<X>1.00063133</X>
												<Y>0.335407376</Y>
												<Z>1.00020337</Z>
											</Vector3>
											<Vector3 name="JointOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<BinaryString name="LODData"></BinaryString>
											<float name="LeftParamA">-0.5</float>
											<float name="LeftParamB">0.5</float>
											<token name="LeftSurface">0</token>
											<token name="LeftSurfaceInput">0</token>
											<bool name="Locked">false</bool>
											<bool name="Massless">false</bool>
											<token name="Material">256</token>
											<string name="MaterialVariantSerialized"></string>
											<Content name="MeshID"><url>http://www.roblox.com/asset?id=467982681</url></Content>
											<Content name="MeshId"><url>http://www.roblox.com/asset?id=467982681</url></Content>
											<string name="Name">RightFoot</string>
											<SharedString name="PhysicalConfigData">+qv2o0HSW+htH+ALwYQpiw==</SharedString>
											<BinaryString name="PhysicsData"></BinaryString>
											<CoordinateFrame name="PivotOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<float name="Reflectance">0</float>
											<token name="RenderFidelity">1</token>
											<float name="RightParamA">-0.5</float>
											<float name="RightParamB">0.5</float>
											<token name="RightSurface">0</token>
											<token name="RightSurfaceInput">0</token>
											<int name="RootPriority">0</int>
											<Vector3 name="RotVelocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<Content name="TextureID"><null></null></Content>
											<float name="TopParamA">-0.5</float>
											<float name="TopParamB">0.5</float>
											<token name="TopSurface">0</token>
											<token name="TopSurfaceInput">0</token>
											<float name="Transparency">0</float>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a3a</UniqueId>
											<Vector3 name="Velocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<Vector3 name="size">
												<X>1.00063133</X>
												<Y>0.335407376</Y>
												<Z>1.00020337</Z>
											</Vector3>
										</Properties>
										<Item class="Attachment" referent="RBX4c9165d8cef9441ab75b2755792b6caf">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.00901681185</X>
													<Y>0.0318431854</Y>
													<Z>0.000155551359</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">RightAnkleRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30002598c</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Motor6D" referent="RBX1f7bab60b7884641bc2c62a8d4938bfa">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="C0">
													<X>0.00382620096</X>
													<Y>-0.710731506</Y>
													<Z>0.000283418223</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<CoordinateFrame name="C1">
													<X>0.00901681185</X>
													<Y>0.0318431854</Y>
													<Z>0.000155551359</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<float name="DesiredAngle">0</float>
												<bool name="Enabled">true</bool>
												<float name="MaxVelocity">0</float>
												<string name="Name">RightAnkle</string>
												<Ref name="Part0">RBXdd09a5e375af4e9787c7ce3451fed875</Ref>
												<Ref name="Part1">RBX1acc43d20d2a48b8bf56a46c183766fd</Ref>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a95</UniqueId>
											</Properties>
										</Item>
									</Item>
									<Item class="MeshPart" referent="RBXc07efc3c103744d2a801d32342fa466b">
										<Properties>
											<bool name="Anchored">false</bool>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<float name="BackParamA">-0.5</float>
											<float name="BackParamB">0.5</float>
											<token name="BackSurface">0</token>
											<token name="BackSurfaceInput">0</token>
											<float name="BottomParamA">-0.5</float>
											<float name="BottomParamB">0.5</float>
											<token name="BottomSurface">0</token>
											<token name="BottomSurfaceInput">0</token>
											<CoordinateFrame name="CFrame">
												<X>0.463262558</X>
												<Y>1.1740818</Y>
												<Z>-0.981227636</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<bool name="CanCollide">false</bool>
											<bool name="CanQuery">true</bool>
											<bool name="CanTouch">true</bool>
											<bool name="CastShadow">true</bool>
											<int name="CollisionGroupId">0</int>
											<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
											<PhysicalProperties name="CustomPhysicalProperties">
												<CustomPhysics>false</CustomPhysics>
											</PhysicalProperties>
											<bool name="DoubleSided">false</bool>
											<float name="FrontParamA">-0.5</float>
											<float name="FrontParamB">0.5</float>
											<token name="FrontSurface">0</token>
											<token name="FrontSurfaceInput">0</token>
											<bool name="HasJointOffset">false</bool>
											<bool name="HasSkinnedMesh">false</bool>
											<Vector3 name="InitialSize">
												<X>0.999299049</X>
												<Y>0.335255772</Y>
												<Z>1.00029743</Z>
											</Vector3>
											<Vector3 name="JointOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<BinaryString name="LODData"></BinaryString>
											<float name="LeftParamA">-0.5</float>
											<float name="LeftParamB">0.5</float>
											<token name="LeftSurface">0</token>
											<token name="LeftSurfaceInput">0</token>
											<bool name="Locked">false</bool>
											<bool name="Massless">false</bool>
											<token name="Material">256</token>
											<string name="MaterialVariantSerialized"></string>
											<Content name="MeshID"><url>http://www.roblox.com/asset?id=467982662</url></Content>
											<Content name="MeshId"><url>http://www.roblox.com/asset?id=467982662</url></Content>
											<string name="Name">RightHand</string>
											<SharedString name="PhysicalConfigData">+qv2o0HSW+htH+ALwYQpiw==</SharedString>
											<BinaryString name="PhysicsData"></BinaryString>
											<CoordinateFrame name="PivotOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<float name="Reflectance">0</float>
											<token name="RenderFidelity">1</token>
											<float name="RightParamA">-0.5</float>
											<float name="RightParamB">0.5</float>
											<token name="RightSurface">0</token>
											<token name="RightSurfaceInput">0</token>
											<int name="RootPriority">0</int>
											<Vector3 name="RotVelocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<Content name="TextureID"><null></null></Content>
											<float name="TopParamA">-0.5</float>
											<float name="TopParamB">0.5</float>
											<token name="TopSurface">0</token>
											<token name="TopSurfaceInput">0</token>
											<float name="Transparency">0</float>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a3b</UniqueId>
											<Vector3 name="Velocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<Vector3 name="size">
												<X>0.999299049</X>
												<Y>0.335255772</Y>
												<Z>1.00029743</Z>
											</Vector3>
										</Properties>
										<Item class="Attachment" referent="RBX79ee51666fc3497989c03a580d69afd2">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.000865101814</X>
													<Y>0.058106944</Y>
													<Z>-0.0154390335</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">RightWristRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30002598d</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX8e52d49e60e14677ab5a656989e0bff6">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.0108650923</X>
													<Y>-0.168664441</Y>
													<Z>-0.0154389441</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>-0</R02>
													<R10>0</R10>
													<R11>6.12323426e-17</R11>
													<R12>1</R12>
													<R20>0</R20>
													<R21>-1</R21>
													<R22>6.12323426e-17</R22>
												</CoordinateFrame>
												<string name="Name">RightGripAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30002598e</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Motor6D" referent="RBX94586cfbdc0c4b29a077f547cd2a6c3a">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="C0">
													<X>0.00214457512</X>
													<Y>-0.682049513</Y>
													<Z>-0.00989595056</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<CoordinateFrame name="C1">
													<X>0.000865101814</X>
													<Y>0.058106944</Y>
													<Z>-0.0154390335</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<float name="DesiredAngle">0</float>
												<bool name="Enabled">true</bool>
												<float name="MaxVelocity">0</float>
												<string name="Name">RightWrist</string>
												<Ref name="Part0">RBX965d2d85087544dbb5a4165406e62bf3</Ref>
												<Ref name="Part1">RBXc07efc3c103744d2a801d32342fa466b</Ref>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a96</UniqueId>
											</Properties>
										</Item>
									</Item>
									<Item class="MeshPart" referent="RBX965d2d85087544dbb5a4165406e62bf3">
										<Properties>
											<bool name="Anchored">false</bool>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<float name="BackParamA">-0.5</float>
											<float name="BackParamB">0.5</float>
											<token name="BackSurface">0</token>
											<token name="BackSurfaceInput">0</token>
											<float name="BottomParamA">-0.5</float>
											<float name="BottomParamB">0.5</float>
											<token name="BottomSurface">0</token>
											<token name="BottomSurfaceInput">0</token>
											<CoordinateFrame name="CFrame">
												<X>0.461983085</X>
												<Y>1.91423821</Y>
												<Z>-0.986770749</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<bool name="CanCollide">false</bool>
											<bool name="CanQuery">true</bool>
											<bool name="CanTouch">true</bool>
											<bool name="CastShadow">true</bool>
											<int name="CollisionGroupId">0</int>
											<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
											<PhysicalProperties name="CustomPhysicalProperties">
												<CustomPhysics>false</CustomPhysics>
											</PhysicalProperties>
											<bool name="DoubleSided">false</bool>
											<float name="FrontParamA">-0.5</float>
											<float name="FrontParamB">0.5</float>
											<token name="FrontSurface">0</token>
											<token name="FrontSurfaceInput">0</token>
											<bool name="HasJointOffset">false</bool>
											<bool name="HasSkinnedMesh">false</bool>
											<Vector3 name="InitialSize">
												<X>1.00027657</X>
												<Y>1.26567209</Y>
												<Z>1.00025082</Z>
											</Vector3>
											<Vector3 name="JointOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<BinaryString name="LODData"></BinaryString>
											<float name="LeftParamA">-0.5</float>
											<float name="LeftParamB">0.5</float>
											<token name="LeftSurface">0</token>
											<token name="LeftSurfaceInput">0</token>
											<bool name="Locked">false</bool>
											<bool name="Massless">false</bool>
											<token name="Material">256</token>
											<string name="MaterialVariantSerialized"></string>
											<Content name="MeshID"><url>http://www.roblox.com/asset?id=467982664</url></Content>
											<Content name="MeshId"><url>http://www.roblox.com/asset?id=467982664</url></Content>
											<string name="Name">RightLowerArm</string>
											<SharedString name="PhysicalConfigData">+qv2o0HSW+htH+ALwYQpiw==</SharedString>
											<BinaryString name="PhysicsData"></BinaryString>
											<CoordinateFrame name="PivotOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<float name="Reflectance">0</float>
											<token name="RenderFidelity">1</token>
											<float name="RightParamA">-0.5</float>
											<float name="RightParamB">0.5</float>
											<token name="RightSurface">0</token>
											<token name="RightSurfaceInput">0</token>
											<int name="RootPriority">0</int>
											<Vector3 name="RotVelocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<Content name="TextureID"><null></null></Content>
											<float name="TopParamA">-0.5</float>
											<float name="TopParamB">0.5</float>
											<token name="TopSurface">0</token>
											<token name="TopSurfaceInput">0</token>
											<float name="Transparency">0</float>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a3c</UniqueId>
											<Vector3 name="Velocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<Vector3 name="size">
												<X>1.00027657</X>
												<Y>1.26567209</Y>
												<Z>1.00025082</Z>
											</Vector3>
										</Properties>
										<Item class="Attachment" referent="RBX4f992a9059b74625a3b3e970d10d35f1">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.00214457512</X>
													<Y>0.122950554</Y>
													<Z>-0.00989595056</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">RightElbowRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30002598f</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBXb165714e021f4f2ebfa83eb1263f5d6d">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.00214457512</X>
													<Y>-0.682049513</Y>
													<Z>-0.00989595056</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">RightWristRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025990</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Motor6D" referent="RBX9412492431b441babe2eb676690e7c89">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="C0">
													<X>0.00214397907</X>
													<Y>-0.263139546</Y>
													<Z>-0.00944012403</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<CoordinateFrame name="C1">
													<X>0.00214457512</X>
													<Y>0.122950554</Y>
													<Z>-0.00989595056</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<float name="DesiredAngle">0</float>
												<bool name="Enabled">true</bool>
												<float name="MaxVelocity">0</float>
												<string name="Name">RightElbow</string>
												<Ref name="Part0">RBX453dc0fbd02a49849e9975f38b68c1e2</Ref>
												<Ref name="Part1">RBX965d2d85087544dbb5a4165406e62bf3</Ref>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a97</UniqueId>
											</Properties>
										</Item>
									</Item>
									<Item class="MeshPart" referent="RBXdd09a5e375af4e9787c7ce3451fed875">
										<Properties>
											<bool name="Anchored">false</bool>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<float name="BackParamA">-0.5</float>
											<float name="BackParamB">0.5</float>
											<token name="BackSurface">0</token>
											<token name="BackSurfaceInput">0</token>
											<float name="BottomParamA">-0.5</float>
											<float name="BottomParamB">0.5</float>
											<token name="BottomSurface">0</token>
											<token name="BottomSurfaceInput">0</token>
											<CoordinateFrame name="CFrame">
												<X>-0.534898579</X>
												<Y>-0.0824859738</Y>
												<Z>-0.98157233</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<bool name="CanCollide">false</bool>
											<bool name="CanQuery">true</bool>
											<bool name="CanTouch">true</bool>
											<bool name="CastShadow">true</bool>
											<int name="CollisionGroupId">0</int>
											<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
											<PhysicalProperties name="CustomPhysicalProperties">
												<CustomPhysics>false</CustomPhysics>
											</PhysicalProperties>
											<bool name="DoubleSided">false</bool>
											<float name="FrontParamA">-0.5</float>
											<float name="FrontParamB">0.5</float>
											<token name="FrontSurface">0</token>
											<token name="FrontSurfaceInput">0</token>
											<bool name="HasJointOffset">false</bool>
											<bool name="HasSkinnedMesh">false</bool>
											<Vector3 name="InitialSize">
												<X>1.00027585</X>
												<Y>1.48964536</Y>
												<Z>1.00032854</Z>
											</Vector3>
											<Vector3 name="JointOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<BinaryString name="LODData"></BinaryString>
											<float name="LeftParamA">-0.5</float>
											<float name="LeftParamB">0.5</float>
											<token name="LeftSurface">0</token>
											<token name="LeftSurfaceInput">0</token>
											<bool name="Locked">false</bool>
											<bool name="Massless">false</bool>
											<token name="Material">256</token>
											<string name="MaterialVariantSerialized"></string>
											<Content name="MeshID"><url>http://www.roblox.com/asset?id=467982684</url></Content>
											<Content name="MeshId"><url>http://www.roblox.com/asset?id=467982684</url></Content>
											<string name="Name">RightLowerLeg</string>
											<SharedString name="PhysicalConfigData">+qv2o0HSW+htH+ALwYQpiw==</SharedString>
											<BinaryString name="PhysicsData"></BinaryString>
											<CoordinateFrame name="PivotOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<float name="Reflectance">0</float>
											<token name="RenderFidelity">1</token>
											<float name="RightParamA">-0.5</float>
											<float name="RightParamB">0.5</float>
											<token name="RightSurface">0</token>
											<token name="RightSurfaceInput">0</token>
											<int name="RootPriority">0</int>
											<Vector3 name="RotVelocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<Content name="TextureID"><null></null></Content>
											<float name="TopParamA">-0.5</float>
											<float name="TopParamB">0.5</float>
											<token name="TopSurface">0</token>
											<token name="TopSurfaceInput">0</token>
											<float name="Transparency">0</float>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a3d</UniqueId>
											<Vector3 name="Velocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<Vector3 name="size">
												<X>1.00027585</X>
												<Y>1.48964536</Y>
												<Z>1.00032854</Z>
											</Vector3>
										</Properties>
										<Item class="Attachment" referent="RBXfe0b77ba3c7d4db883ee56a6fbd73fc6">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.00382620096</X>
													<Y>0.289268613</Y>
													<Z>0.000145851634</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">RightKneeRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025991</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBXa405ca4ed65742cbaa9472e07c775ccc">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.00382620096</X>
													<Y>-0.710731506</Y>
													<Z>0.000283418223</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">RightAnkleRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025992</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Motor6D" referent="RBX15123aed009c4268ad69a8c01c1cc283">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="C0">
													<X>0.00382620096</X>
													<Y>-0.265086174</Y>
													<Z>0.000426991843</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<CoordinateFrame name="C1">
													<X>0.00382620096</X>
													<Y>0.289268613</Y>
													<Z>0.000145851634</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<float name="DesiredAngle">0</float>
												<bool name="Enabled">true</bool>
												<float name="MaxVelocity">0</float>
												<string name="Name">RightKnee</string>
												<Ref name="Part0">RBXe8879a95580a4d048d282c726a8fd7fb</Ref>
												<Ref name="Part1">RBXdd09a5e375af4e9787c7ce3451fed875</Ref>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a98</UniqueId>
											</Properties>
										</Item>
									</Item>
									<Item class="MeshPart" referent="RBX453dc0fbd02a49849e9975f38b68c1e2">
										<Properties>
											<bool name="Anchored">false</bool>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<float name="BackParamA">-0.5</float>
											<float name="BackParamB">0.5</float>
											<token name="BackSurface">0</token>
											<token name="BackSurfaceInput">0</token>
											<float name="BottomParamA">-0.5</float>
											<float name="BottomParamB">0.5</float>
											<token name="BottomSurface">0</token>
											<token name="BottomSurfaceInput">0</token>
											<CoordinateFrame name="CFrame">
												<X>0.461983681</X>
												<Y>2.30032825</Y>
												<Z>-0.987226546</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<bool name="CanCollide">false</bool>
											<bool name="CanQuery">true</bool>
											<bool name="CanTouch">true</bool>
											<bool name="CastShadow">true</bool>
											<int name="CollisionGroupId">0</int>
											<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
											<PhysicalProperties name="CustomPhysicalProperties">
												<CustomPhysics>false</CustomPhysics>
											</PhysicalProperties>
											<bool name="DoubleSided">false</bool>
											<float name="FrontParamA">-0.5</float>
											<float name="FrontParamB">0.5</float>
											<token name="FrontSurface">0</token>
											<token name="FrontSurfaceInput">0</token>
											<bool name="HasJointOffset">false</bool>
											<bool name="HasSkinnedMesh">false</bool>
											<Vector3 name="InitialSize">
												<X>1.00027633</X>
												<Y>1.39554</Y>
												<Z>1.00025082</Z>
											</Vector3>
											<Vector3 name="JointOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<BinaryString name="LODData"></BinaryString>
											<float name="LeftParamA">-0.5</float>
											<float name="LeftParamB">0.5</float>
											<token name="LeftSurface">0</token>
											<token name="LeftSurfaceInput">0</token>
											<bool name="Locked">false</bool>
											<bool name="Massless">false</bool>
											<token name="Material">256</token>
											<string name="MaterialVariantSerialized"></string>
											<Content name="MeshID"><url>http://www.roblox.com/asset?id=467982669</url></Content>
											<Content name="MeshId"><url>http://www.roblox.com/asset?id=467982669</url></Content>
											<string name="Name">RightUpperArm</string>
											<SharedString name="PhysicalConfigData">+qv2o0HSW+htH+ALwYQpiw==</SharedString>
											<BinaryString name="PhysicsData"></BinaryString>
											<CoordinateFrame name="PivotOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<float name="Reflectance">0</float>
											<token name="RenderFidelity">1</token>
											<float name="RightParamA">-0.5</float>
											<float name="RightParamB">0.5</float>
											<token name="RightSurface">0</token>
											<token name="RightSurfaceInput">0</token>
											<int name="RootPriority">0</int>
											<Vector3 name="RotVelocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<Content name="TextureID"><null></null></Content>
											<float name="TopParamA">-0.5</float>
											<float name="TopParamB">0.5</float>
											<token name="TopSurface">0</token>
											<token name="TopSurfaceInput">0</token>
											<float name="Transparency">0</float>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a3e</UniqueId>
											<Vector3 name="Velocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<Vector3 name="size">
												<X>1.00027633</X>
												<Y>1.39554</Y>
												<Z>1.00025082</Z>
											</Vector3>
										</Properties>
										<Item class="Attachment" referent="RBX69a6ad739b3a4f6eae78741bfce65f7e">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>-0.24787569</X>
													<Y>0.456878304</Y>
													<Z>-0.00944012403</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">RightShoulderRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025993</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX3996efa052ce43d482def5ec8fdf5b59">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.00214397907</X>
													<Y>-0.263139546</Y>
													<Z>-0.00944012403</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">RightElbowRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025994</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBXa935b06020044076b1651df12b617462">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.0121438503</X>
													<Y>0.709783792</Y>
													<Z>-0.00944012403</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">RightShoulderAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025995</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Motor6D" referent="RBX75e5d79f56d544f5807ca7c4d4485cee">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="C0">
													<X>1.25031853</X>
													<Y>0.5565539</Y>
													<Z>-0.015560925</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<CoordinateFrame name="C1">
													<X>-0.24787569</X>
													<Y>0.456878304</Y>
													<Z>-0.00944012403</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<float name="DesiredAngle">0</float>
												<bool name="Enabled">true</bool>
												<float name="MaxVelocity">0</float>
												<string name="Name">RightShoulder</string>
												<Ref name="Part0">RBX4e244bf6b8bd44dfbfb37c1b8b93dc2d</Ref>
												<Ref name="Part1">RBX453dc0fbd02a49849e9975f38b68c1e2</Ref>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a99</UniqueId>
											</Properties>
										</Item>
									</Item>
									<Item class="MeshPart" referent="RBXe8879a95580a4d048d282c726a8fd7fb">
										<Properties>
											<bool name="Anchored">false</bool>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<float name="BackParamA">-0.5</float>
											<float name="BackParamB">0.5</float>
											<token name="BackSurface">0</token>
											<token name="BackSurfaceInput">0</token>
											<float name="BottomParamA">-0.5</float>
											<float name="BottomParamB">0.5</float>
											<token name="BottomSurface">0</token>
											<token name="BottomSurfaceInput">0</token>
											<CoordinateFrame name="CFrame">
												<X>-0.534898579</X>
												<Y>0.471868813</Y>
												<Z>-0.981853485</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<bool name="CanCollide">false</bool>
											<bool name="CanQuery">true</bool>
											<bool name="CanTouch">true</bool>
											<bool name="CastShadow">true</bool>
											<int name="CollisionGroupId">0</int>
											<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
											<PhysicalProperties name="CustomPhysicalProperties">
												<CustomPhysics>false</CustomPhysics>
											</PhysicalProperties>
											<bool name="DoubleSided">false</bool>
											<float name="FrontParamA">-0.5</float>
											<float name="FrontParamB">0.5</float>
											<token name="FrontSurface">0</token>
											<token name="FrontSurfaceInput">0</token>
											<bool name="HasJointOffset">false</bool>
											<bool name="HasSkinnedMesh">false</bool>
											<Vector3 name="InitialSize">
												<X>1.00027561</X>
												<Y>1.5362649</Y>
												<Z>1.00092912</Z>
											</Vector3>
											<Vector3 name="JointOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<BinaryString name="LODData"></BinaryString>
											<float name="LeftParamA">-0.5</float>
											<float name="LeftParamB">0.5</float>
											<token name="LeftSurface">0</token>
											<token name="LeftSurfaceInput">0</token>
											<bool name="Locked">false</bool>
											<bool name="Massless">false</bool>
											<token name="Material">256</token>
											<string name="MaterialVariantSerialized"></string>
											<Content name="MeshID"><url>http://www.roblox.com/asset?id=467982686</url></Content>
											<Content name="MeshId"><url>http://www.roblox.com/asset?id=467982686</url></Content>
											<string name="Name">RightUpperLeg</string>
											<SharedString name="PhysicalConfigData">+qv2o0HSW+htH+ALwYQpiw==</SharedString>
											<BinaryString name="PhysicsData"></BinaryString>
											<CoordinateFrame name="PivotOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<float name="Reflectance">0</float>
											<token name="RenderFidelity">1</token>
											<float name="RightParamA">-0.5</float>
											<float name="RightParamB">0.5</float>
											<token name="RightSurface">0</token>
											<token name="RightSurfaceInput">0</token>
											<int name="RootPriority">0</int>
											<Vector3 name="RotVelocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<Content name="TextureID"><null></null></Content>
											<float name="TopParamA">-0.5</float>
											<float name="TopParamB">0.5</float>
											<token name="TopSurface">0</token>
											<token name="TopSurfaceInput">0</token>
											<float name="Transparency">0</float>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a3f</UniqueId>
											<Vector3 name="Velocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<Vector3 name="size">
												<X>1.00027561</X>
												<Y>1.5362649</Y>
												<Z>1.00092912</Z>
											</Vector3>
										</Properties>
										<Item class="Attachment" referent="RBXb81e8785cc0141558431e67de1fca692">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.00382620096</X>
													<Y>0.484913796</Y>
													<Z>0.000486815348</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">RightHipRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025996</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX3028baed42e744f2be17443821a6646b">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.00382620096</X>
													<Y>-0.265086174</Y>
													<Z>0.000426991843</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">RightKneeRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025997</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Motor6D" referent="RBX315e5c637de34166afc4c13859433081">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="C0">
													<X>0.505080223</X>
													<Y>-0.243262246</Y>
													<Z>0.00102789141</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<CoordinateFrame name="C1">
													<X>0.00382620096</X>
													<Y>0.484913796</Y>
													<Z>0.000486815348</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<float name="DesiredAngle">0</float>
												<bool name="Enabled">true</bool>
												<float name="MaxVelocity">0</float>
												<string name="Name">RightHip</string>
												<Ref name="Part0">RBX6c869561e99241a7a3ab9ac42a4c6fbc</Ref>
												<Ref name="Part1">RBXe8879a95580a4d048d282c726a8fd7fb</Ref>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a9a</UniqueId>
											</Properties>
										</Item>
									</Item>
									<Item class="MeshPart" referent="RBX4e244bf6b8bd44dfbfb37c1b8b93dc2d">
										<Properties>
											<bool name="Anchored">false</bool>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<float name="BackParamA">-0.5</float>
											<float name="BackParamB">0.5</float>
											<token name="BackSurface">0</token>
											<token name="BackSurfaceInput">0</token>
											<float name="BottomParamA">-0.5</float>
											<float name="BottomParamB">0.5</float>
											<token name="BottomSurface">0</token>
											<token name="BottomSurfaceInput">0</token>
											<CoordinateFrame name="CFrame">
												<X>-1.03621054</X>
												<Y>2.2006526</Y>
												<Z>-0.981105745</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<bool name="CanCollide">true</bool>
											<bool name="CanQuery">true</bool>
											<bool name="CanTouch">true</bool>
											<bool name="CastShadow">true</bool>
											<int name="CollisionGroupId">0</int>
											<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
											<PhysicalProperties name="CustomPhysicalProperties">
												<CustomPhysics>false</CustomPhysics>
											</PhysicalProperties>
											<bool name="DoubleSided">false</bool>
											<float name="FrontParamA">-0.5</float>
											<float name="FrontParamB">0.5</float>
											<token name="FrontSurface">0</token>
											<token name="FrontSurfaceInput">0</token>
											<bool name="HasJointOffset">false</bool>
											<bool name="HasSkinnedMesh">false</bool>
											<Vector3 name="InitialSize">
												<X>2.00029206</X>
												<Y>1.60093355</Y>
												<Z>1.0005368</Z>
											</Vector3>
											<Vector3 name="JointOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<BinaryString name="LODData"></BinaryString>
											<float name="LeftParamA">-0.5</float>
											<float name="LeftParamB">0.5</float>
											<token name="LeftSurface">0</token>
											<token name="LeftSurfaceInput">0</token>
											<bool name="Locked">false</bool>
											<bool name="Massless">false</bool>
											<token name="Material">256</token>
											<string name="MaterialVariantSerialized"></string>
											<Content name="MeshID"><url>http://www.roblox.com/asset?id=467982671</url></Content>
											<Content name="MeshId"><url>http://www.roblox.com/asset?id=467982671</url></Content>
											<string name="Name">UpperTorso</string>
											<SharedString name="PhysicalConfigData">+qv2o0HSW+htH+ALwYQpiw==</SharedString>
											<BinaryString name="PhysicsData"></BinaryString>
											<CoordinateFrame name="PivotOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<float name="Reflectance">0</float>
											<token name="RenderFidelity">1</token>
											<float name="RightParamA">-0.5</float>
											<float name="RightParamB">0.5</float>
											<token name="RightSurface">0</token>
											<token name="RightSurfaceInput">0</token>
											<int name="RootPriority">0</int>
											<Vector3 name="RotVelocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<Content name="TextureID"><null></null></Content>
											<float name="TopParamA">-0.5</float>
											<float name="TopParamB">0.5</float>
											<token name="TopSurface">0</token>
											<token name="TopSurfaceInput">0</token>
											<float name="Transparency">0</float>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a40</UniqueId>
											<Vector3 name="Velocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<Vector3 name="size">
												<X>2.00029206</X>
												<Y>1.60093355</Y>
												<Z>1.0005368</Z>
											</Vector3>
										</Properties>
										<Item class="Attachment" referent="RBX2a807a73a5f94a5ebe2efd192f9f0c2f">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.000338107347</X>
													<Y>-0.463463932</Y>
													<Z>-0.015560925</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">WaistRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025998</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX2869fce49fc2463c81038e7d9d308d9f">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.000338107347</X>
													<Y>0.806032121</Y>
													<Z>-0.015560925</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">NeckRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025999</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBXad836f3920a847df9754f3c78964d174">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>-1.24955308</X>
													<Y>0.556408584</Y>
													<Z>-0.015560925</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">LeftShoulderRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30002599a</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX15a9c8ecfc774f4ebc97f473122298e9">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>1.25031853</X>
													<Y>0.5565539</Y>
													<Z>-0.015560925</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">RightShoulderRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30002599b</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX612b7685a2634b31bc9c3dd2461e89ba">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>-0.999661922</X>
													<Y>0.804298341</Y>
													<Z>-0.015560925</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">LeftCollarAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30002599c</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX1ed38ba04855436dabfaad466833a3e7">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>1.00033808</X>
													<Y>0.804298341</Y>
													<Z>-0.015560925</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">RightCollarAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30002599d</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBX1b9c535a3f134df59d77f75587df53d7">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.000338107347</X>
													<Y>-0.224075675</Y>
													<Z>0.523179948</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">BodyBackAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30002599e</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Attachment" referent="RBXaf0ff0b0b3a847588db2fddfaa964167">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>0.000338107347</X>
													<Y>-0.224075675</Y>
													<Z>-0.498673499</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">BodyFrontAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30002599f</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
										<Item class="Motor6D" referent="RBX70f62a48cfca4375829d55840264fca0">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="C0">
													<X>0.000280171633</X>
													<Y>0.537143946</Y>
													<Z>-0.0142721087</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<CoordinateFrame name="C1">
													<X>0.000338107347</X>
													<Y>-0.463463932</Y>
													<Z>-0.015560925</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<float name="DesiredAngle">0</float>
												<bool name="Enabled">true</bool>
												<float name="MaxVelocity">0</float>
												<string name="Name">Waist</string>
												<Ref name="Part0">RBX6c869561e99241a7a3ab9ac42a4c6fbc</Ref>
												<Ref name="Part1">RBX4e244bf6b8bd44dfbfb37c1b8b93dc2d</Ref>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a9b</UniqueId>
											</Properties>
										</Item>
									</Item>
									<Item class="Part" referent="RBX7d60b77ab1364c1f952791a047c52077">
										<Properties>
											<bool name="Anchored">true</bool>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<float name="BackParamA">-0.5</float>
											<float name="BackParamB">0.5</float>
											<token name="BackSurface">0</token>
											<token name="BackSurfaceInput">0</token>
											<float name="BottomParamA">-0.5</float>
											<float name="BottomParamB">0.5</float>
											<token name="BottomSurface">4</token>
											<token name="BottomSurfaceInput">0</token>
											<CoordinateFrame name="CFrame">
												<X>-1.03587246</X>
												<Y>1.33308268</Y>
												<Z>-0.99666667</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<bool name="CanCollide">false</bool>
											<bool name="CanQuery">true</bool>
											<bool name="CanTouch">true</bool>
											<bool name="CastShadow">true</bool>
											<int name="CollisionGroupId">0</int>
											<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
											<PhysicalProperties name="CustomPhysicalProperties">
												<CustomPhysics>false</CustomPhysics>
											</PhysicalProperties>
											<float name="FrontParamA">-0.5</float>
											<float name="FrontParamB">0.5</float>
											<token name="FrontSurface">0</token>
											<token name="FrontSurfaceInput">0</token>
											<float name="LeftParamA">-0.5</float>
											<float name="LeftParamB">0.5</float>
											<token name="LeftSurface">0</token>
											<token name="LeftSurfaceInput">0</token>
											<bool name="Locked">true</bool>
											<bool name="Massless">false</bool>
											<token name="Material">256</token>
											<string name="MaterialVariantSerialized"></string>
											<string name="Name">HumanoidRootPart</string>
											<CoordinateFrame name="PivotOffset">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
												<R00>1</R00>
												<R01>0</R01>
												<R02>0</R02>
												<R10>0</R10>
												<R11>1</R11>
												<R12>0</R12>
												<R20>0</R20>
												<R21>0</R21>
												<R22>1</R22>
											</CoordinateFrame>
											<float name="Reflectance">0</float>
											<float name="RightParamA">-0.5</float>
											<float name="RightParamB">0.5</float>
											<token name="RightSurface">0</token>
											<token name="RightSurfaceInput">0</token>
											<int name="RootPriority">0</int>
											<Vector3 name="RotVelocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<float name="TopParamA">-0.5</float>
											<float name="TopParamB">0.5</float>
											<token name="TopSurface">3</token>
											<token name="TopSurfaceInput">0</token>
											<float name="Transparency">1</float>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a9d</UniqueId>
											<Vector3 name="Velocity">
												<X>0</X>
												<Y>0</Y>
												<Z>0</Z>
											</Vector3>
											<token name="formFactorRaw">1</token>
											<token name="shape">1</token>
											<Vector3 name="size">
												<X>2</X>
												<Y>2</Y>
												<Z>1</Z>
											</Vector3>
										</Properties>
										<Item class="Attachment" referent="RBXc200db987fca4b808404e503d002f75f">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<CoordinateFrame name="CFrame">
													<X>-0</X>
													<Y>-0</Y>
													<Z>-0</Z>
													<R00>1</R00>
													<R01>0</R01>
													<R02>0</R02>
													<R10>0</R10>
													<R11>1</R11>
													<R12>0</R12>
													<R20>0</R20>
													<R21>0</R21>
													<R22>1</R22>
												</CoordinateFrame>
												<string name="Name">RootRigAttachment</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259a0</UniqueId>
												<bool name="Visible">false</bool>
											</Properties>
										</Item>
									</Item>
									<Item class="Humanoid" referent="RBX04c21f842c01400d9755abd655b6208f">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoJumpEnabled">true</bool>
											<bool name="AutoRotate">true</bool>
											<bool name="AutomaticScalingEnabled">true</bool>
											<bool name="BreakJointsOnDeath">true</bool>
											<token name="CollisionType">0</token>
											<token name="DisplayDistanceType">2</token>
											<string name="DisplayName"></string>
											<float name="HealthDisplayDistance">100</float>
											<token name="HealthDisplayType">2</token>
											<float name="Health_XML">100</float>
											<float name="HipHeight">1.35000002</float>
											<Vector3 name="InternalBodyScale">
												<X>1</X>
												<Y>1</Y>
												<Z>1</Z>
											</Vector3>
											<float name="InternalHeadScale">1</float>
											<float name="JumpHeight">7.19999981</float>
											<float name="JumpPower">50</float>
											<float name="MaxHealth">100</float>
											<float name="MaxSlopeAngle">89</float>
											<string name="Name">Humanoid</string>
											<float name="NameDisplayDistance">0</float>
											<token name="NameOcclusion">2</token>
											<bool name="RequiresNeck">true</bool>
											<token name="RigType">1</token>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a12</UniqueId>
											<bool name="UseJumpPower">true</bool>
											<float name="WalkSpeed">16</float>
										</Properties>
										<Item class="Animator" referent="RBXba2eb9908f594335b6a3eaf97f18c826">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<string name="Name">Animator</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025972</UniqueId>
											</Properties>
										</Item>
									</Item>
								</Item>
							</Item>
						</Item>
						<Item class="ModuleScript" referent="RBX06f365951e2e4ceaa83acac92bbad314">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">localization</string>
								<string name="ScriptGuid">{30FC9717-A8A0-47ED-94FD-0F3B94DF690B}</string>
								<ProtectedString name="Source"><![CDATA[-- Author: Roblox? (Skidd- I mean rewritten by Jumpathy)
-- Name: localization.lua
-- Description: Manage localization lol

return function()
	local localizationService = game:GetService("LocalizationService")
	local userShouldLocalizeServerMessages = true
	local localizationTable,entries = require(script:WaitForChild("table"))()
	local userInput = game:GetService("UserInputService")
	local touchEnabled = userInput.TouchEnabled
	
	local fetchEntry = function(key)
		for _,entry in pairs(entries) do 
			if(entry.Key == key) then
				return entry
			end
		end
		return {["en-us"] = "..."}
	end
	
	local getDefault = function(key)
		return fetchEntry(key)["en-us"]
	end
	
	local prefixKeys = {
		["System"] = "InGame.Chat.Label.SystemMessagePrefix",
		["Team"] = "InGame.Chat.Label.TeamMessagePrefix",
		["From"] = "InGame.Chat.Label.From",
		["To"] = "InGame.Chat.Label.To",
		["Welcome"] = "GameChat_ChatCommandsTeller_AllChannelWelcomeMessage"
	}
	
	local standardKeys = {
		["Chatbar"] = touchEnabled and "GameChat_ChatMain_ChatBarTextTouch" or "GameChat_ChatMain_ChatBarText",
		["CannotTalk"] = "Muted"
	}

	local module = {
		internal = {fetchedLocalization = false,translator = nil}		
	}

	function module.internal:fetchTranslator()
		if(not module.internal.translator and not module.internal.fetchedLocalization) then
			module.internal.fetchedLocalization = true
			module.internal.translator = localizationTable:GetTranslator(localizationService.RobloxLocaleId)
			local changedLocaleSignal
			changedLocaleSignal = localizationService:GetPropertyChangedSignal("RobloxLocaleId"):Connect(function()
				changedLocaleSignal:Disconnect()
				module.internal.fetchedLocalization = false
				module.internal.translator = nil
			end)
		end
		return module.internal.translator
	end
	
	function module:getWelcomeMessage(...)
		return {
			module:localize(prefixKeys.System,getDefault(prefixKeys.System)),
			module:localize(prefixKeys.Welcome,getDefault(prefixKeys.Welcome)),
			...
		}
	end

	function module:produceSystemMessage(message)
		return {
			module:localize(prefixKeys.System,getDefault(prefixKeys.System)),
			message
		}
	end
	
	function module:getChatbarPlaceholder(key)
		local keyToUse = key and standardKeys.CannotTalk or standardKeys.Chatbar
		return module:localize(keyToUse,getDefault(keyToUse))
	end
	
	function module:localizeResponse(key,...)
		return module:localize(key,getDefault(key),{...})
	end
	
	function module:localize(key,default,...)
		local success,returnValue = pcall(function(...)
			local translator = module.internal:fetchTranslator()
			if(translator ~= nil) then
				return translator:FormatByKey(key,...)
			else
				warn("[Better Chat]: Missing internal translator, using default value for key",key)
			end
		end,...)
		if(not success and returnValue) then
			warn(returnValue)
		end
		return(success and returnValue or (default or getDefault(key)))
	end
	
	function module:getMessagePrefix(base)
		return module:localize(prefixKeys[base])
	end
	
	return module
end]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a57</UniqueId>
							</Properties>
							<Item class="ModuleScript" referent="RBXe1665cef5e8f4000a59ea15330d87f3b">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">table</string>
									<string name="ScriptGuid">{E9746FC6-D68C-4A6A-9AAE-1446587FA9C9}</string>
									<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Credit: ?? (Roblox)
-- Name: table.lua
-- Description: Chat localization for accessibility

local entries = {
	{
		Key = "Muted",
		Values = { --> google translate go brr
			es = "No puedes hablas ahora mismo",
			ja = "今は話せません",
			fr = "Tu ne peux pas parler maintenant",
			["es-es"] = "No puedes hablas ahora mismo",
			["zh-cn"] = "你现在不能说话",
			["zh-tw"] = "你現在不能說話",
			ru = "Вы не можете говорить прямо сейчас",
			["de"] = "Je kunt nu niet praten",
			["ko"] = "당신은 지금 채팅에서 말할 수 없습니다",
			["pt-br"] = "Você não pode falar agora",
			["en-us"] = "You can't talk right now"
		}
	},
	{
		Key = "Chat_Edited",
		Values = { -- google translated by me so might not be 100% accurate
			es = "editado",
			ja = "編集",
			fr = "édité",
			["es-es"] = "editado",
			["zh-cn"] = "已编辑",
			["zh-tw"] = "已編輯",
			ru = "отредактировано",
			de = "bearbeitet",
			ko = "편집",
			["pt-br"] = "editado",
			["en-us"] = "edited",
			it = "modificato"
		}
	},
    {
        Key = "GameChat_ChatChannel_MutedInChannel",
        Values = {
            es = "Se te ha silenciado y no puedes hablar en este canal.",
            ja = "あなたはミュートされこのチャンネルで話すことは出来ません。",
            fr = "Vous êtes bâillonné et ne pouvez pas parler sur ce canal",
            ["es-es"] = "Se te ha silenciado y no puedes hablar en este canal.",
            ["zh-cjv"] = "你已被禁言，无法在此频道聊天",
            ["zh-tw"] = "您遭到靜音，無法在此頻道聊天",
            ru = "Вы добавлены в список игнорируемых и не можете общаться на этом канале",
            ["zh-cn"] = "你已被禁言，无法在此频道聊天",
            de = "Du wurdest stummgeschaltet und kannst in diesem Kanal nicht kommunizieren.",
            ko = "이 채널에서 음소거되어 이야기할 수 없어요",
            ["pt-br"] = "Você está silenciado(a) e não pode falar neste canal",
            pt = "Você está silenciado(a) e não pode falar neste canal",
            ["en-us"] = "You are muted and cannot talk in this channel",
            it = "Non hai più la parola e non puoi chattare in questo canale"
        }
    },
    {
        Key = "GameChat_ChatCommandsTeller_AllChannelWelcomeMessage",
        Values = {
            es = "Envía \"/?\" o \"/help\" para obtener la lista de comandos del chat.",
            ja = "チャットで 「/?」 または 「/help」を入力するとチャットコマンドの一覧を表示します。",
            fr = "Dans le chat, « /? » ou « /help » pour la liste des commandes du chat.",
            ["es-es"] = "Envía \"/?\" o \"/help\" para obtener la lista de comandos del chat.",
            ["zh-cjv"] = "输入 “/?”或 “/help” 可获取聊天指令清单。",
            ["zh-tw"] = "輸入「/?」或「/help」取得聊天指令清單。",
            ru = "Введите «/?» или «/help», чтобы увидеть список команд чата.",
            ["zh-cn"] = "输入 “/?”或 “/help” 可获取聊天指令清单。",
            de = "Gib „/?“ oder „/help“ im Chat ein, um eine Liste der Chatbefehle zu erhalten.",
            ko = "채팅창에 '/?' 또는 '/도움말'을 입력하면 채팅 명령어 목록을 볼 수 있어요.",
            ["pt-br"] = "Digite '/?' ou '/help' no chat para ver uma lista de comandos.",
            pt = "Digite '/?' ou '/help' no chat para ver uma lista de comandos.",
            ["en-us"] = "Chat '/?' or '/help' for a list of chat commands.",
            it = "Scrivi \"/?\" o \"/help\" per avere l'elenco dei comandi della chat."
        }
    },
    {
        Key = "GameChat_ChatCommandsTeller_Desc",
        Values = {
            es = "Estos son los comandos básicos del chat.",
            ja = "これらは基本的なチャットコマンドです。",
            fr = "Voici les commandes de chat basiques.",
            ["es-es"] = "Estos son los comandos básicos del chat.",
            ["zh-cjv"] = "这些是基本聊天指令。",
            ["zh-tw"] = "以下是基本聊天室指令。",
            ru = "Это основные команды чата.",
            ["zh-cn"] = "这些是基本聊天指令。",
            de = "Das sind die grundlegenden Chatbefehle.",
            ko = "기본 채팅 명령어에요.",
            ["pt-br"] = "Esses são os comandos de chat básicos.",
            pt = "Esses são os comandos de chat básicos.",
            ["en-us"] = "These are the basic chat commands.",
            it = "Questi sono i comandi base della chat."
        }
    },
    {
        Key = "GameChat_ChatCommandsTeller_MeCommand",
        Values = {
            es = "/me <text>: comando de rol para realizar acciones.",
            ja = "/me <テキスト> : アクションのためのロールプレイングコマンド。",
            fr = "/me <texte> : commande jeu de rôle pour accomplir des actions.",
            ["es-es"] = "/me <text>: comando de rol para realizar acciones.",
            ["zh-cjv"] = "/me <text> : 做动作的角色扮演指令。",
            ["zh-tw"] = "/me <文字>：角色扮演動作的指令。",
            ru = "/me <текст> : сообщить о выполнении какого-либо действия.",
            ["zh-cn"] = "/me <text> : 做动作的角色扮演指令。",
            de = "/me <Text> : Rollenspielbefehl für Aktionen.",
            ko = "/me <텍스트> : 작업 수행을 위한 역할 놀이 명령어.",
            ["pt-br"] = "/me <texto> : comando de RPG para realizar ações.",
            pt = "/me <texto> : comando de RPG para realizar ações.",
            ["en-us"] = "/me <text> : roleplaying command for doing actions.",
            it = "/me <testo>: comando per descrivere azioni e giocare di ruolo."
        }
    },
    {
        Key = "GameChat_ChatCommandsTeller_MuteCommand",
        Values = {
            es = "/mute <usuario>: silenciar a un usuario.",
            ja = "/mute <スピーカー> : 相手をミュート。",
            fr = "/mute <interlocuteur> : bâillonne un interlocuteur.",
            ["es-es"] = "/mute <usuario>: silenciar a un usuario.",
            ["zh-cjv"] = "/mute <用户名称>：将用户禁言。",
            ["zh-tw"] = "/mute <使用者名稱> : 將此使用者靜音。",
            ru = "/mute <пользователь> : игнорировать пользователя.",
            ["zh-cn"] = "/mute <用户名称>：将用户禁言。",
            de = "/mute <Sprecher> : Schaltet Sprecher:in stumm.",
            ko = "/mute <스피커> : 스피커 음소거.",
            ["pt-br"] = "/mute <pessoa> : silenciar uma pessoa.",
            pt = "/mute <pessoa> : silenciar uma pessoa.",
            ["en-us"] = "/mute <speaker> : mute a speaker.",
            it = "/mute <giocatore>: togli la parola a un giocatore."
        }
    },
    {
        Key = "GameChat_ChatCommandsTeller_SwitchChannelCommand",
        Values = {
            es = "/c <channel>: alternar pestañas del menú del chat.",
            ja = "/c <チャンネル> : チャンネルメニュータブを切り替える。",
            fr = "/c <canal> : échanger les onglets du menu Canal.",
            ["es-es"] = "/c <channel>: alternar pestañas del menú del chat.",
            ["zh-cjv"] = "/c <频道名称> : 切换频道菜单标签。",
            ["zh-tw"] = "/c <頻道名稱>：切換頻道選單標籤。",
            ru = "/c <канал> : переключить вкладку в меню каналов.",
            ["zh-cn"] = "/c <频道名称> : 切换频道菜单标签。",
            de = "/c <Kanal> : Zum Wechseln zwischen Kanalmenüreitern.",
            ko = "/c <채널> : 채널 메뉴 탭 전환.",
            ["pt-br"] = "/c <canal> : trocar abas de menu de canal.",
            pt = "/c <canal> : trocar abas de menu de canal.",
            ["en-us"] = "/c <channel> : switch channel menu tabs.",
            it = "/c <canale>: cambia scheda nel menu dei canali."
        }
    },
    {
        Key = "GameChat_ChatCommandsTeller_TeamCommand",
        Values = {
            es = "/team <message> o /t <message>: enviar un mensaje de chat de equipo a los jugadores de tu equipo.",
            ja = "/team <メッセージ> または /t <メッセージ> : 自分のチームメンバーにチームチャットを送る。",
            fr = "/team <message> ou /t <message> : envoyer un message aux joueurs de votre équipe.",
            ["es-es"] = "/team <message> o /t <message>: enviar un mensaje de chat de equipo a los jugadores de tu equipo.",
            ["zh-cjv"] = "/team <message> 或 /t <message> : 向你团队的玩家发送团队聊天。",
            ["zh-tw"] = "/team <訊息> 或 /t <訊息> : 傳送訊息給隊伍中的玩家。",
            ru = "/team <сообщение> или /t <сообщение> : отправить сообщение игрокам из вашей команды.",
            ["zh-cn"] = "/team <message> 或 /t <message> : 向你团队的玩家发送团队聊天。",
            de = "/team <Nachricht> oder /t <Nachricht> : Sendet eine Teamnachricht an Spieler:innen deines Teams.",
            ko = "/team <메시지> 또는 /t <메시지> : 팀 내 플레이어에게 팀 채팅 전송.",
            ["pt-br"] = "/team <mensagem> ou /t <mensagem> : enviar um chat de equipe aos jogadores da sua equipe.",
            pt = "/team <mensagem> ou /t <mensagem> : enviar um chat de equipe aos jogadores da sua equipe.",
            ["en-us"] = "/team <message> or /t <message> : send a team chat to people on your team.",
            it = "/team <messaggio> o /t <messaggio>: invia un messaggio a tutti i giocatori della tua squadra."
        }
    },
    {
        Key = "GameChat_ChatCommandsTeller_UnMuteCommand",
        Values = {
            es = "/unmute <speaker>: cancelar silencio de un usuario.",
            ja = "/unmute <スピーカー> : 相手のミュートを解除.",
            fr = "/unmute <interlocuteur> : retire le bâillon d'un interlocuteur.",
            ["es-es"] = "/unmute <speaker>: cancelar silencio de un usuario.",
            ["zh-cjv"] = "/unmute <用户名称> : 取消该用户禁言。",
            ["zh-tw"] = "/unmute <使用者名稱> : 將此使用者解除靜音。",
            ru = "/unmute <пользователь> : перестать игнорировать пользователя.",
            ["zh-cn"] = "/unmute <用户名称> : 取消该用户禁言。",
            de = "/unmute <Sprecher> : Hebt Stummschaltung eines Sprechers auf.",
            ko = "/unmute <스피커> : 스피커 음소거 해제.",
            ["pt-br"] = "/unmute <pessoa> : remover silêncio de uma pessoa.",
            pt = "/unmute <pessoa> : remover silêncio de uma pessoa.",
            ["en-us"] = "/unmute <speaker> : unmute a speaker.",
            it = "/unmute <giocatore>: restituisci la parola a un giocatore."
        }
    },
    {
        Key = "GameChat_ChatCommandsTeller_WhisperCommand",
        Values = {
            es = "/whisper <usuario> o /w <usuario>: abrir canal de mensajes privados con un usuario.",
            ja = "/whisper <スピーカー> または /w <スピーカー> : プライベートメッセージチャンネルを開く",
            fr = "/whisper <interlocuteur> ou /w <interlocuteur> : ouvre un canal de discussion privé avec l'interlocuteur.",
            ["es-es"] = "/whisper <usuario> o /w <usuario>: abrir canal de mensajes privados con un usuario.",
            ["zh-cjv"] = "/whisper <用户名称> 或 /w <用户名称> : 与此用户开启私人消息频道。",
            ["zh-tw"] = "/whisper <使用者名稱> 或 /w <使用者名稱> : 與此使用者開啟私人訊息頻道。",
            ru = "/whisper <пользователь> или /w <пользователь> : открыть канал для личной переписки с пользователем.",
            ["zh-cn"] = "/whisper <用户名称> 或 /w <用户名称> : 与此用户开启私人消息频道。",
            de = "/whisper <Sprecher:in> oder /w <Sprecher:in> : Öffnet privaten Nachrichtenkanal mit Sprecher:in.",
            ko = "/whisper <스피커> 또는 /w <스피커> : 스피커 채널에서 비공개 메시지 열기.",
            ["pt-br"] = "/whisper <pessoa> ou /w <pessoa> : abrir um canal de mensagem privada com uma pessoa.",
            pt = "/whisper <pessoa> ou /w <pessoa> : abrir um canal de mensagem privada com uma pessoa.",
            ["en-us"] = "/whisper <speaker> or /w <speaker> : open private message channel with speaker.",
            it = "/whisper <giocatore> o /w <giocatore>: apri un canale privato con un giocatore."
        }
    },
    {
        Key = "GameChat_ChatFloodDetector_Message",
        Values = {
            es = "¡Debes esperar antes de enviar otro mensaje!",
            ja = "少し待ってから次のメッセージを送ってください!",
            fr = "Vous devez attendre avant d'envoyer un autre message !",
            ["es-es"] = "¡Debes esperar antes de enviar otro mensaje!",
            ["zh-cjv"] = "发送另一条消息前你必须等待！",
            ["zh-tw"] = "請稍後再傳送訊息。",
            ru = "Необходимо подождать, прежде чем отправлять новое сообщение!",
            ["zh-cn"] = "发送另一条消息前你必须等待！",
            de = "Du musst warten, bevor du eine weitere Nachricht senden kannst!",
            ko = "추가 메시지를 보내기 전에 기다려야 해요!",
            ["pt-br"] = "Você precisa esperar antes de enviar outra mensagem!",
            pt = "Você precisa esperar antes de enviar outra mensagem!",
            ["en-us"] = "You must wait before sending another message!",
            it = "Devi aspettare prima di inviare un altro messaggio!"
        }
    },
    {
        Key = "GameChat_ChatFloodDetector_MessageDisplaySeconds",
        Values = {
            es = "¡Debes esperar {1:int} segundos antes de enviar otro mensaje!",
            ja = "{1:int} 秒待ってから次のメッセージを送ってください!",
            fr = "Vous devez attendre {1:int} secondes avant d'envoyer un autre message !",
            ["es-es"] = "¡Debes esperar {1:int} segundos antes de enviar otro mensaje!",
            ["zh-cjv"] = "发送另一条消息前你必须等待 {1:int} 秒！",
            ["zh-tw"] = "請 {1:int} 秒後再傳送訊息。",
            ru = "Вы сможете отправить новое сообщение только через {1:int} сек.!",
            ["zh-cn"] = "发送另一条消息前你必须等待 {1:int} 秒！",
            de = "Du musst {1:int} Sekunden lang warten, bevor du eine weitere Nachricht senden kannst!",
            ko = "추가 메시지를 보내기 전에 {1:int}초 동안 기다려야 해요!",
            ["pt-br"] = "Você precisa esperar {1:int} segundos antes de enviar outra mensagem!",
            pt = "Você precisa esperar {1:int} segundos antes de enviar outra mensagem!",
            ["en-us"] = "You must wait {1:int} seconds before sending another message!",
            it = "Devi aspettare {1:int} secondi prima di inviare un altro messaggio!"
        }
    },
    {
        Key = "GameChat_ChatMain_ChatBarText",
        Values = {
            es = "Para chatear, haz clic aquí o pulsa la tecla \"/\".",
            ja = "チャットするにはここをクリックするか 「 / 」 キーを押します。",
            fr = "Pour discuter, cliquez ici ou sur la touche « / »",
            ["es-es"] = "Para chatear, haz clic aquí o pulsa la tecla \"/\".",
            ["zh-cjv"] = "若要聊天，请点按此处或按下“/”键",
            ["zh-tw"] = "若要聊天，請按下此處或「/」鍵",
            ru = "Чтобы общаться в чате, нажмите здесь или на клавишу «/»",
            ["zh-cn"] = "若要聊天，请点按此处或按下“/”键",
            de = "Klicke zum Chatten hier oder drücke die „/“-Taste.",
            ko = "여기를 클릭하거나 \"/\" 키를 누른 후 채팅을 시작하세요",
            ["pt-br"] = "Para escrever clique aqui ou aperte a tecla \"/\"",
            pt = "Para escrever clique aqui ou aperte a tecla \"/\"",
			["en-us"] = "Click here or press '/' to chat.",
            it = "Per chattare, clicca qui o premi il tasto \"/\""
        }
    },
    {
        Key = "GameChat_ChatMain_ChatBarTextTouch",
        Values = {
            es = "Toca aquí para chatear",
            ja = "ここをタップしてチャットする",
            fr = "Touchez ici pour discuter",
            ["es-es"] = "Toca aquí para chatear",
            ["zh-cjv"] = "轻点此处以聊天",
            ["zh-tw"] = "按下此處聊天",
            ru = "Коснитесь здесь, чтобы общаться в чате",
            ["zh-cn"] = "轻点此处以聊天",
            de = "Tippe zum Chatten hier.",
            ko = "여기를 클릭한 후 내용을 입력하세요",
            ["pt-br"] = "Toque aqui para escrever",
            pt = "Toque aqui para escrever",
            ["en-us"] = "Tap here to chat",
            it = "Tocca qui per chattare"
        }
    },
    {
        Key = "GameChat_ChatMain_SpeakerHasBeenBlocked",
        Values = {
            es = "Se ha bloqueado al usuario \"{RBX_NAME}\".",
            ja = "「{RBX_NAME}」はブロック中です。",
            fr = "L'interlocuteur {RBX_NAME} a été bloqué.",
            ["es-es"] = "Se ha bloqueado al usuario \"{RBX_NAME}\".",
            ["zh-cjv"] = "发言者“{RBX_NAME}”已被屏蔽。",
            ["zh-tw"] = "已封鎖使用者「{RBX_NAME}」。",
            ru = "Пользователь {RBX_NAME} заблокирован.",
            ["zh-cn"] = "发言者“{RBX_NAME}”已被屏蔽。",
            de = "Sprecher:in „{RBX_NAME}“ wurde blockiert.",
            ko = "스피커 '%s'님을 차단했어요.",
            ["pt-br"] = "'%s' foi bloqueado.",
            pt = "'%s' foi bloqueado.",
            ["en-us"] = "Speaker '%s' has been blocked.",
            it = "Hai bloccato il giocatore \"{RBX_NAME}\"."
        }
    },
    {
        Key = "GameChat_ChatMain_SpeakerHasBeenMuted",
        Values = {
            es = "Se ha silenciado al usuario \"{RBX_NAME}\".",
            ja = "「{RBX_NAME}」をミュートしました。",
            fr = "L'interlocuteur {RBX_NAME} a été bâillonné.",
            ["es-es"] = "Se ha silenciado al usuario \"{RBX_NAME}\".",
            ["zh-cjv"] = "发言者“{RBX_NAME}”已被禁言。",
            ["zh-tw"] = "已將使用者「{RBX_NAME}」靜音。",
            ru = "Пользователь {RBX_NAME} добавлен в список игнорируемых.",
            ["zh-cn"] = "发言者“{RBX_NAME}”已被禁言。",
            de = "Sprecher:in „{RBX_NAME}“ wurde stummgeschaltet.",
            ko = "스피커 '%s'이(가) 음소거되었어요.",
            ["pt-br"] = "'%s' foi silenciado(a).",
            pt = "'%s' foi silenciado(a).",
            ["en-us"] = "Speaker '%s' has been muted.",
            it = "Hai tolto la parola al giocatore \"{RBX_NAME}\"."
        }
    },
    {
        Key = "GameChat_ChatMain_SpeakerHasBeenUnBlocked",
        Values = {
            es = "Se ha desbloqueado al usuario \"{RBX_NAME}\".",
            ja = "「{RBX_NAME}」のブロックが解除されました。",
            fr = "L'interlocuteur {RBX_NAME} n'est plus bloqué.",
            ["es-es"] = "Se ha desbloqueado al usuario \"{RBX_NAME}\".",
            ["zh-cjv"] = "发言者“{RBX_NAME}”已被取消屏蔽。",
            ["zh-tw"] = "已解除封鎖使用者「{RBX_NAME}」。",
            ru = "Пользователь {RBX_NAME} разблокирован.",
            ["zh-cn"] = "发言者“{RBX_NAME}”已被取消屏蔽。",
            de = "Blockierung von Sprecher:in „{RBX_NAME}“ wurde aufgehoben.",
            ko = "스피커 '%s'님 차단을 해제했어요.",
            ["pt-br"] = "'%s' foi desbloqueado.",
            pt = "'%s' foi desbloqueado.",
            ["en-us"] = "Speaker '%s' has been unblocked.",
            it = "Hai sbloccato il giocatore \"{RBX_NAME}\"."
        }
    },
    {
        Key = "GameChat_ChatMain_SpeakerHasBeenUnMuted",
        Values = {
            es = "Se ha cancelado el silencio del usuario \"{RBX_NAME}\".",
            ja = "「{RBX_NAME}」のミュートを解除しました。",
            fr = "L'interlocuteur {RBX_NAME} n'est plus bâillonné.",
            ["es-es"] = "Se ha cancelado el silencio del usuario \"{RBX_NAME}\".",
            ["zh-cjv"] = "发言者“{RBX_NAME}”已被取消禁言。",
            ["zh-tw"] = "已將使用者「{RBX_NAME}」解除靜音。",
            ru = "Пользователь {RBX_NAME} удален из списка игнорируемых.",
            ["zh-cn"] = "发言者“{RBX_NAME}”已被取消禁言。",
            de = "Stummschaltung von Sprecher:in „{RBX_NAME}“ wurde aufgehoben.",
            ko = "스피커 '%s'의 음소거가 해제되었어요.",
            ["pt-br"] = "O silêncio de '%s' foi removido.",
            pt = "O silêncio de '%s' foi removido.",
            ["en-us"] = "Speaker '%s' has been unmuted.",
            it = "Hai restituito la parola al giocatore \"{RBX_NAME}\"."
        }
    },
    {
        Key = "GameChat_ChatMessageValidator_MaxLengthError",
        Values = {
            es = "Tu mensaje supera la longitud máxima permitida.",
            ja = "メッセージが最大文字数を超えています。",
            fr = "Votre message dépasse la longueur maximale.",
            ["es-es"] = "Tu mensaje supera la longitud máxima permitida.",
            ["zh-cjv"] = "你的消息已超过最大长度限制。",
            ["zh-tw"] = "您的訊息超過長度限制。",
            ru = "Превышено максимально допустимое количество символов в сообщении.",
            ["zh-cn"] = "你的消息已超过最大长度限制。",
            de = "Deine Nachricht überschreitet die zulässige Nachrichtenlänge.",
            ko = "메시지 길이 한도를 초과했어요.",
            ["pt-br"] = "Sua mensagem ultrapassa o tamanho máximo de mensagem.",
            pt = "Sua mensagem ultrapassa o tamanho máximo de mensagem.",
            ["en-us"] = "Your message exceeds the maximum message length.",
            it = "Il tuo messaggio supera la lunghezza massima consentita."
        }
    },
    {
        Key = "GameChat_ChatMessageValidator_SettingsError",
        Values = {
            es = "Tu configuración de chat te impide enviar mensajes.",
            ja = "メッセージが送れないチャット設定です。",
            fr = "Vos paramètres de chat vous empêchent d'envoyer des messages.",
            ["es-es"] = "Tu configuración de chat te impide enviar mensajes.",
            ["zh-cjv"] = "你的聊天设置禁止你发送消息。",
            ["zh-tw"] = "您的聊天設定禁止您傳送訊息。",
            ru = "В ваших настройках чата заблокирована возможность отправлять сообщения.",
            ["zh-cn"] = "你的聊天设置禁止你发送消息。",
            de = "Aufgrund deiner Chateinstellungen kannst du keine Nachrichten senden.",
            ko = "채팅 설정 때문에 메시지를 보낼 수 없어요.",
            ["pt-br"] = "Suas configurações de chat impedem que você envie mensagens.",
            pt = "Suas configurações de chat impedem que você envie mensagens.",
            ["en-us"] = "Your chat settings prevent you from sending messages.",
            it = "Non puoi inviare messaggi per le impostazioni della tua chat."
        }
    },
    {
        Key = "GameChat_ChatMessageValidator_WhitespaceError",
        Values = {
            es = "Tu mensaje contiene espacios vacíos que no se permiten.",
            ja = "メッセージに許可されていないスペースが含まれています。",
            fr = "Votre message contient des espaces blancs qui sont interdits.",
            ["es-es"] = "Tu mensaje contiene espacios vacíos que no se permiten.",
            ["zh-cjv"] = "你的消息包含不被允许的空格。",
            ["zh-tw"] = "訊息禁止使用空白字元。",
            ru = "Ваше сообщение содержит недопустимый пробел.",
            ["zh-cn"] = "你的消息包含不被允许的空格。",
            de = "Deine Nachricht enthält unzulässige Leerräume.",
            ko = "메시지에 허용되지 않는 여백이 있어요.",
            ["pt-br"] = "Sua mensagem contém um espaço em branco, que não é permitido.",
            pt = "Sua mensagem contém um espaço em branco, que não é permitido.",
            ["en-us"] = "Your message contains whitespace that is not allowed.",
            it = "Il tuo messaggio contiene spazi vuoti non consentiti."
        }
    },
    {
        Key = "GameChat_ChatServiceRunner_ChannelDoesNotExist",
        Values = {
            es = "El canal {RBX_NAME} no existe.",
            ja = "チャンネル {RBX_NAME} は存在しません。",
            fr = "Le canal {RBX_NAME} n'existe pas.",
            ["es-es"] = "El canal {RBX_NAME} no existe.",
            ["zh-cjv"] = "频道“{RBX_NAME}”不存在。",
            ["zh-tw"] = "頻道「{RBX_NAME}」不存在。",
            ru = "Канала «{RBX_NAME}» не существует.",
            ["zh-cn"] = "频道“{RBX_NAME}”不存在。",
            de = "Kanal „{RBX_NAME}“ existiert nicht.",
            ko = "{RBX_NAME} 채널이 없어요.",
            ["pt-br"] = "O canal {RBX_NAME} não existe.",
            pt = "O canal {RBX_NAME} não existe.",
            ["en-us"] = "Channel {RBX_NAME} does not exist.",
            it = "Il canale {RBX_NAME} non esiste."
        }
    },
    {
        Key = "GameChat_ChatServiceRunner_SystemChannelWelcomeMessage",
        Values = {
            es = "Este canal es para notificaciones del sistema y del juego.",
            ja = "このチャンネルはシステムとゲーム通知のためのものです。",
            fr = "Ce canal est réservé aux notifications système et de jeu.",
            ["es-es"] = "Este canal es para notificaciones del sistema y del juego.",
            ["zh-cjv"] = "此频道用于发送系统及挑战通知。",
            ["zh-tw"] = "此頻道為系統及遊戲通知專用。",
            ru = "Этот канал предназначен для системных и игровых уведомлений.",
            ["zh-cn"] = "此频道用于发送系统及游戏通知。",
            de = "Dieser Kanal ist für System- und Spielbenachrichtigungen.",
            ko = "이 채널은 시스템 및 게임 알림용이에요.",
            ["pt-br"] = "Este canal é destinado a notificações do sistema e jogo.",
            pt = "Este canal é destinado a notificações do sistema e jogo.",
            ["en-us"] = "This channel is for system and experience notifications.",
            it = "Questo canale è per le notifiche di gioco e del sistema."
        }
    },
    {
        Key = "GameChat_ChatServiceRunner_YouAreNotInChannel",
        Values = {
            es = "No estás en el canal {RBX_NAME}.",
            ja = "あなたはチャンネル {RBX_NAME} にいません。",
            fr = "Vous n'êtes pas sur le canal {RBX_NAME}",
            ["es-es"] = "No estás en el canal {RBX_NAME}.",
            ["zh-cjv"] = "你不在频道“{RBX_NAME}”",
            ["zh-tw"] = "您不在 {RBX_NAME} 頻道",
            ru = "Вы не на канале «{RBX_NAME}»",
            ["zh-cn"] = "你不在频道“{RBX_NAME}”",
            de = "Du befindest dich nicht in Kanal „{RBX_NAME}“.",
            ko = "{RBX_NAME} 채널에 있지 않아요",
            ["pt-br"] = "Você não está no canal {RBX_NAME}",
            pt = "Você não está no canal {RBX_NAME}",
            ["en-us"] = "You are not in channel {RBX_NAME}",
            it = "Non ti trovi nel canale {RBX_NAME}"
        }
    },
    {
        Key = "GameChat_ChatServiceRunner_YouCannotJoinChannel",
        Values = {
            es = "No puedes unirte al canal {RBX_NAME}.",
            ja = "チャンネル {RBX_NAME} に参加することは出来ません。",
            fr = "Vous ne pouvez pas rejoindre le canal {RBX_NAME}",
            ["es-es"] = "No puedes unirte al canal {RBX_NAME}.",
            ["zh-cjv"] = "你无法加入频道“{RBX_NAME}”",
            ["zh-tw"] = "您無法加入{RBX_NAME} 頻道",
            ru = "Вы не можете подключиться к каналу «{RBX_NAME}»",
            ["zh-cn"] = "你无法加入频道“{RBX_NAME}”",
            de = "Du kannst Kanal „{RBX_NAME}“ nicht beitreten.",
            ko = "{RBX_NAME} 채널에 가입할 수 없어요",
            ["pt-br"] = "Você não pode entrar no canal {RBX_NAME}",
            pt = "Você não pode entrar no canal {RBX_NAME}",
            ["en-us"] = "You cannot join channel {RBX_NAME}",
            it = "Non puoi accedere al canale {RBX_NAME}"
        }
    },
    {
        Key = "GameChat_ChatServiceRunner_YouCannotLeaveChannel",
        Values = {
            es = "No puedes salir del canal {RBX_NAME}.",
            ja = "チャンネル {RBX_NAME} を終了できません。",
            fr = "Vous ne pouvez pas quitter le canal {RBX_NAME}",
            ["es-es"] = "No puedes salir del canal {RBX_NAME}.",
            ["zh-cjv"] = "你无法离开频道“{RBX_NAME}”",
            ["zh-tw"] = "您無法離開 {RBX_NAME} 頻道",
            ru = "Вы не можете покинуть канал «{RBX_NAME}».",
            ["zh-cn"] = "你无法离开频道“{RBX_NAME}”",
            de = "Du kannst Kanal „{RBX_NAME}“ nicht verlassen.",
            ko = "{RBX_NAME} 채널에서 나갈 수 없어요",
            ["pt-br"] = "Você não pode sair do canal {RBX_NAME}",
            pt = "Você não pode sair do canal {RBX_NAME}",
            ["en-us"] = "You cannot leave channel {RBX_NAME}",
            it = "Non puoi lasciare il canale {RBX_NAME}"
        }
    },
    {
        Key = "GameChat_ChatService_CannotLeaveChannel",
        Values = {
            es = "No puedes salir de este canal.",
            ja = "このチャンネルを終了できません。",
            fr = "Vous ne pouvez pas quitter ce canal.",
            ["es-es"] = "No puedes salir de este canal.",
            ["zh-cjv"] = "你无法离开此频道。",
            ["zh-tw"] = "您無法離開此頻道。",
            ru = "Вы не можете покинуть этот канал.",
            ["zh-cn"] = "你无法离开此频道。",
            de = "Du kannst diesen Kanal nicht verlassen.",
            ko = "채널에서 나갈 수 없어요.",
            ["pt-br"] = "Você não pode sair deste canal.",
            pt = "Você não pode sair deste canal.",
            ["en-us"] = "You cannot leave this channel.",
            it = "Non puoi lasciare questo canale."
        }
    },
    {
        Key = "GameChat_ChatService_ChatFilterIssues",
        Values = {
            es = "El filtro del chat sufre problemas en este momento y es posible que los mensajes tarden un poco en aparecer.",
            ja = "現在、チャットフィルターに問題があるためメッセージの表示が遅れています。",
            fr = "Le filtre de chat connaît actuellement des problèmes et les messages pourraient mettre du temps à apparaître.",
            ["es-es"] = "El filtro del chat sufre problemas en este momento y es posible que los mensajes tarden un poco en aparecer.",
            ["zh-cjv"] = "聊天过滤器当前遇到问题，消息显示可能出现延迟。",
            ["zh-tw"] = "文字過濾系統發生問題，訊息可能會延遲顯示。",
            ru = "Могут возникать задержки в передаче сообщений из-за проблем с фильтром чата.",
            ["zh-cn"] = "聊天过滤器当前遇到问题，消息显示可能出现延迟。",
            de = "Es gibt derzeit Probleme mit dem Chatfilter. Nachrichten können deshalb mit Verzögerung angezeigt werden.",
            ko = "현재 채팅 필터에 문제가 있어 메시지 표시가 느릴 수 있어요.",
            ["pt-br"] = "O filtro de chat está com problemas no momento e as mensagens podem demorar para aparecer.",
            pt = "O filtro de chat está com problemas no momento e as mensagens podem demorar para aparecer.",
            ["en-us"] = "The chat filter is currently experiencing issues and messages may be slow to appear.",
            it = "Il filtro della chat sta riscontrando dei problemi e i messaggi potrebbero apparire in ritardo."
        }
    },
    {
        Key = "GameChat_ChatService_YouHaveLeftChannel",
        Values = {
            es = "Has salido del canal \"{RBX_NAME}\".",
            ja = "チャンネル 「{RBX_NAME}」を退出しました。",
            fr = "Vous avez quitté le canal {RBX_NAME}",
            ["es-es"] = "Has salido del canal \"{RBX_NAME}\".",
            ["zh-cjv"] = "你已离开频道“{RBX_NAME}”",
            ["zh-tw"] = "您已離開「{RBX_NAME}」頻道",
            ru = "Вы покинули канал «{RBX_NAME}»",
            ["zh-cn"] = "你已离开频道“{RBX_NAME}”",
            de = "Du hast Kanal „{RBX_NAME}“ verlassen.",
            ko = "{RBX_NAME}' 채널에서 나왔어요",
            ["pt-br"] = "Você saiu do canal '%s'",
            pt = "Você saiu do canal '%s'",
            ["en-us"] = "You have left channel '%s'",
            it = "Hai lasciato il canale \"{RBX_NAME}\""
        }
    },
    {
        Key = "GameChat_DoMuteCommand_CannotMuteSelf",
        Values = {
            es = "No puedes silenciarte a ti mismo.",
            ja = "自分をミュートすることは出来ません。",
            fr = "Vous ne pouvez pas vous bâillonner.",
            ["es-es"] = "No puedes silenciarte a ti mismo.",
            ["zh-cjv"] = "你无法将自己禁言。",
            ["zh-tw"] = "您無法將自己靜音。",
            ru = "Невозможно добавить себя в список игнорируемых.",
            ["zh-cn"] = "你无法将自己禁言。",
            de = "Du kannst dich nicht selbst stummschalten.",
            ko = "자신을 음소거할 수 없어요.",
            ["pt-br"] = "Você não pode silenciar a si mesmo.",
            pt = "Você não pode silenciar a si mesmo.",
            ["en-us"] = "You cannot mute yourself.",
            it = "Non puoi togliere la parola a te stesso."
        }
    },
    {
        Key = "GameChat_FriendChatNotifier_JoinMessage",
		Values = {
			es = "Tu amigo %s se ha unido al juego.",
			ja = "あなたの友人、%s さんがゲームに参加しました。",
			fr = "Votre ami %s a rejoint le jeu.",
			["es-es"] = "Tu amigo %s se ha unido al juego.",
			["zh-cjv"] = "你的朋友“%s”已加入挑战。",
			["zh-tw"] = "您的好友 %s 已加入遊戲。",
			ru = "Ваш друг %s присоединился к игре.",
			["zh-cn"] = "你的朋友“%s”已加入游戏。",
			de = "Dein:e Freund:in %s ist dem Spiel beigetreten.",
			ko = "친구 %s님이 게임에 참가했어요.",
			["pt-br"] = "Seu amigo %s juntou-se ao jogo.",
			pt = "Seu amigo %s juntou-se ao jogo.",
			["en-us"] = "Your friend %s has joined the experience.",
			it = "Il tuo amico %s è entrato nel gioco."
		}
    },
    {
        Key = "GameChat_GetVersion_Message",
        Values = {
            es = "Este juego utiliza la versión del chat [{1:int} {1:int}].",
            ja = "このゲームはチャットバージョン [{1:int}.{2:int}]を実行しています。",
            fr = "Le jeu utilise la version de chat [{1:int} {1:int}].",
            ["es-es"] = "Este juego utiliza la versión del chat [{1:int} {1:int}].",
            ["zh-cjv"] = "此挑战正在运行聊天版本 [{1:int}.{2:int}]。",
            ["zh-tw"] = "此遊戲正在使用聊天室版本 [{1:int}.{2:int}]。",
            ru = "Эта игра поддерживает чат версии [{1:int}.{2:int}].",
            ["zh-cn"] = "此游戏正在运行聊天版本 [{1:int}.{2:int}]。",
            de = "Die Chatversion dieses Spiels ist [{1:int}.{2:int}].",
            ko = "이 게임은 채팅 버전 [{1:int}. {1:int}]을(를) 실행합니다.",
            ["pt-br"] = "Este jogo está rodando a versão de chat [{1:int}.{2:int}].",
            pt = "Este jogo está rodando a versão de chat [{1:int}.{2:int}].",
            ["en-us"] = "This experience is running chat version [{1:int}.{2:int}].",
            it = "Questo gioco usa la versione [{1:int}.{2:int}] della chat."
        }
    },
    {
        Key = "GameChat_MuteSpeaker_SpeakerDoesNotExist",
        Values = {
            es = "El usuario \"{RBX_NAME}\" no existe.",
            ja = "「{RBX_NAME}」は存在しません。",
            fr = "L'interlocuteur {RBX_NAME} n'existe pas.",
            ["es-es"] = "El usuario \"{RBX_NAME}\" no existe.",
            ["zh-cjv"] = "发言者“{RBX_NAME}”不存在。",
            ["zh-tw"] = "使用者「{RBX_NAME}」不存在。",
            ru = "Пользователя {RBX_NAME} не существует.",
            ["zh-cn"] = "发言者“{RBX_NAME}”不存在。",
            de = "Sprecher:in „{RBX_NAME}“ existiert nicht.",
            ko = "스피커 '%s'이(가) 없어요.",
            ["pt-br"] = "'%s' não existe.",
            pt = "'%s' não existe.",
            ["en-us"] = "Speaker '%s' does not exist.",
            it = "Il giocatore \"{RBX_NAME}\" non esiste."
        }
    },
    {
        Key = "GameChat_PrivateMessaging_CannotChat",
        Values = {
            es = "No puedes chatear con este jugador.",
            ja = "このプレイヤーとチャットすることは出来ません。",
            fr = "Vous ne pouvez pas discuter avec ce joueur.",
            ["es-es"] = "No puedes chatear con este jugador.",
            ["zh-cjv"] = "你无法与此玩家聊天。",
            ["zh-tw"] = "您無法與此玩家聊天。",
            ru = "Вы не можете общаться в чате с этим игроком.",
            ["zh-cn"] = "你无法与此玩家聊天。",
            de = "Du kannst mit diesem Spieler bzw. dieser Spielerin nicht chatten.",
            ko = "이 플레이어와 채팅할 수 없어요.",
            ["pt-br"] = "Você não pode participar de chat com este jogador.",
            pt = "Você não pode participar de chat com este jogador.",
            ["en-us"] = "You are not able to chat with this person.",
            it = "Non puoi chattare con questo giocatore."
        }
    },
    {
        Key = "GameChat_PrivateMessaging_CannotWhisperToSelf",
        Values = {
            es = "No puedes enviarte mensajes privados a ti mismo.",
            ja = "自分自身に話しかけることは出来ません。",
            fr = "Vous ne pouvez pas murmurer à votre propre oreille.",
            ["es-es"] = "No puedes enviarte mensajes privados a ti mismo.",
            ["zh-cjv"] = "你无法与自己开启私人频道。",
            ["zh-tw"] = "您無法與自己開啟私人頻道。",
            ru = "Нельзя отправлять себе личные сообщения.",
            ["zh-cn"] = "你无法与自己开启私人频道。",
            de = "Du kannst dir nicht selbst etwas zuflüstern.",
            ko = "자신에게 귓속말할 수 없어요.",
            ["pt-br"] = "Você não pode sussurrar para si mesmo.",
            pt = "Você não pode sussurrar para si mesmo.",
            ["en-us"] = "You cannot whisper to yourself.",
            it = "Non puoi aprire un canale privato con te stesso."
        }
    },
    {
        Key = "GameChat_PrivateMessaging_NowChattingWith",
        Values = {
            es = "Estás chateando en privado con {RBX_NAME}.",
            ja = "あなたは現在、{RBX_NAME} さんとプライベートチャット中です。",
            fr = "Maintenant, vous discutez en privé avec {RBX_NAME}",
            ["es-es"] = "Estás chateando en privado con {RBX_NAME}.",
            ["zh-cjv"] = "你正在与“{RBX_NAME}”私聊",
            ["zh-tw"] = "您正在與{RBX_NAME}私聊",
            ru = "Открыт канал для личного общения с пользователем {RBX_NAME}",
            ["zh-cn"] = "你正在与“{RBX_NAME}”私聊",
            de = "Du unterhältst dich nun privat mit {RBX_NAME}.",
            ko = "현재 {RBX_NAME}님과 비공개 채팅 중이에요",
            ["pt-br"] = "Você agora está em um chat privado com {RBX_NAME}",
            pt = "Você agora está em um chat privado com {RBX_NAME}",
            ["en-us"] = "You are now privately chatting with {RBX_NAME}",
            it = "Ora stai chattando in privato con {RBX_NAME}"
        }
    },
    {
        Key = "GameChat_SwallowGuestChat_Message",
        Values = {
            es = "¡Crea una cuenta gratuita para obtener los permisos de acceso al chat!",
            ja = "フリーアカウントを作ってチャット権限にアクセス！",
            fr = "Créez un compte gratuit pour accéder aux permissions de chat !",
            ["es-es"] = "¡Crea una cuenta gratuita para obtener los permisos de acceso al chat!",
            ["zh-cjv"] = "创建免费帐户以获取聊天权限！",
            ["zh-tw"] = "若要使用聊天功能，請建立免費帳號。",
            ru = "Создайте бесплатную учетную запись, чтобы настроить права доступа в чате!",
            ["zh-cn"] = "创建免费帐户以获取聊天权限！",
            de = "Erstelle ein kostenloses Konto, um Zugriff auf Chatberechtigungen zu erhalten!",
            ko = "무료 계정을 생성해 채팅 권한을 이용하세요!",
            ["pt-br"] = "Crie uma conta grátis para ter acesso a permissões de chat!",
            pt = "Crie uma conta grátis para ter acesso a permissões de chat!",
            ["en-us"] = "Create a free account to get access to chat permissions!",
            it = "Crea un account gratuito per avere accesso ai permessi della chat!"
        }
    },
    {
        Key = "GameChat_SwitchChannel_NotInChannel",
        Values = {
            es = "No estás en el canal \"{RBX_NAME}\".",
            ja = "あなたはチャネル: 「{RBX_NAME}」にいません。",
            fr = "Vous n'êtes pas sur le canal : {RBX_NAME}",
            ["es-es"] = "No estás en el canal \"{RBX_NAME}\".",
            ["zh-cjv"] = "你不在频道：“{RBX_NAME}”",
            ["zh-tw"] = "您不在「{RBX_NAME}」頻道",
            ru = "Вы не на канале «{RBX_NAME}»",
            ["zh-cn"] = "你不在频道：“{RBX_NAME}”",
            de = "Du befindest dich nicht in Kanal „{RBX_NAME}“.",
            ko = "{RBX_NAME}' 채널에 있지 않아요",
            ["pt-br"] = "Você não está no canal: '%s'",
            pt = "Você não está no canal: '%s'",
            ["en-us"] = "You are not in channel: '%s'",
            it = "Non ti trovi nel canale: \"{RBX_NAME}\""
        }
    },
    {
        Key = "GameChat_SwitchChannel_NowInChannel",
        Values = {
            es = "Estás chateando en el canal \"{RBX_NAME}\".",
            ja = "あなたの現在のチャットチャンネルは: 「{RBX_NAME}」です。",
            fr = "Maintenant, vous discutez sur le canal : {RBX_NAME}",
            ["es-es"] = "Estás chateando en el canal \"{RBX_NAME}\".",
            ["zh-cjv"] = "你当前的聊天频道为：“{RBX_NAME}”",
            ["zh-tw"] = "您目前在「{RBX_NAME}」頻道聊天",
            ru = "Вы общаетесь на канале «{RBX_NAME}»",
            ["zh-cn"] = "你当前的聊天频道为：“{RBX_NAME}”",
            de = "Du chattest jetzt in Kanal „{RBX_NAME}“.",
            ko = "'%s' 채널에서 채팅 중이에요",
            ["pt-br"] = "Você agora está no canal de chat: '%s'",
            pt = "Você agora está no canal de chat: '%s'",
            ["en-us"] = "You are now chatting in channel: '%s'",
            it = "Ora stai parlando nel canale: \"{RBX_NAME}\""
        }
    },
    {
        Key = "GameChat_TeamChat_CannotTeamChatIfNotInTeam",
        Values = {
            es = "¡No puedes chatear con tu equipo si no formas parte de un equipo!",
            ja = "チームに所属していなければチームチャットは出来ません。",
            fr = "Vous ne pouvez pas avoir de discussion d'équipe si vous n'appartenez pas à une équipe !",
            ["es-es"] = "¡No puedes chatear con tu equipo si no formas parte de un equipo!",
            ["zh-cjv"] = "如果你不在该团队，则无法进行团队聊天。",
            ["zh-tw"] = "若您不在隊伍中，您無法使用隊伍頻道。",
            ru = "Вы не можете общаться в командном чате, если не состоите в команде!",
            ["zh-cn"] = "如果你不在该团队，则无法进行团队聊天。",
            de = "Teamchat ist nur verfügbar, wenn du Mitglied eines Teams bist!",
            ko = "팀에 속하지 않으면 팀 채팅을 이용할 수 없어요!",
            ["pt-br"] = "Você não pode participar de chat de equipe se não estiver em uma!",
            pt = "Você não pode participar de chat de equipe se não estiver em uma!",
            ["en-us"] = "You cannot team chat if you are not on a team!",
            it = "Non puoi chattare con la squadra se non sei in una squadra!"
        }
    },
    {
        Key = "GameChat_TeamChat_NowInTeam",
        Values = {
            es = "Ahora formas parte del equipo \"%s\".",
            ja = "あなたは現在「{RBX_NAME}」チームに所属しています。",
            fr = "Vous êtes désormais dans l'équipe %s.",
            ["es-es"] = "Ahora formas parte del equipo \"%s\".",
            ["zh-cjv"] = "你正在团队“%s”中。",
            ["zh-tw"] = "您在「%s」隊伍。",
            ru = "Вы вступили в команду %s.",
            ["zh-cn"] = "你正在团队“%s”中。",
            de = "Du bist nun Mitglied im Team „%s“.",
            ko = "현재 '%s'팀에 속해 있어요.",
            ["pt-br"] = "Você agora está na equipe '%s'.",
            pt = "Você agora está na equipe '%s'.",
            ["en-us"] = "You are now on the '%s' team.",
            it = "Ora sei nella squadra \"%s\"."
        }
    },
    {
        Key = "GameChat_TeamChat_WelcomeMessage",
        Values = {
            es = "Este es un canal privado entre tú y los miembros de tu equipo.",
            ja = "これはあなたとあなたのチームメンバーとのプライベートチャンネルです。",
            fr = "Ceci est un canal privé entre les membres de votre équipe et vous.",
            ["es-es"] = "Este es un canal privado entre tú y los miembros de tu equipo.",
            ["zh-cjv"] = "这是你与团队成员之间的私人频道。",
            ["zh-tw"] = "這是您與隊伍成員的私人頻道。",
            ru = "Это канал для личного общения участников вашей команды.",
            ["zh-cn"] = "这是你与团队成员之间的私人频道。",
            de = "Dies ist ein privater Kanal für dich und deine Teammitglieder.",
            ko = "회원님과 팀원 간의 비공개 채널이에요.",
            ["pt-br"] = "Este é um canal privado entre você e os membros da sua equipe.",
            pt = "Este é um canal privado entre você e os membros da sua equipe.",
            ["en-us"] = "This is a private channel between you and your team members.",
            it = "Questo è un canale privato tra te e i membri della tua squadra."
        }
    },
    {
        Key = "InGame.Chat.ErrorMessageAnimationPlaying",
        Values = {
            es = "No puedes usar los emotes durante esta acción.",
            ja = "この動作中はエモートを表示できません。",
            fr = "Tu ne peux pas jouer à Emotes pendant cette action.",
            ["es-es"] = "No puedes usar los emotes durante esta acción.",
            ["zh-tw"] = "無法在此動作執行時使用其他動作。",
            ["zh-cjv"] = "无法在此动作进行时使用其他动作。",
            ["zh-cn"] = "无法在此动作进行时使用其他动作。",
            de = "Du kannst das Emote während dieser Aktion nicht abspielen.",
            ko = "이 동작 중에는 감정 표현을 적용할 수 없습니다.",
            ["pt-br"] = "Você não pode usar emotes durante esta ação.",
            pt = "Você não pode usar emotes durante esta ação.",
            ["en-us"] = "You cannot play Emotes during this action.",
            it = "Non puoi giocare Emote durante questa azione."
        }
    },
    {
        Key = "InGame.Chat.ErrorMessageSwitchToR15",
        Values = {
            es = "Cambia tu avatar a R15 para usar los emotes.",
            ja = "エモートを表示するにはR15アバターに切り替えてください。",
            fr = "Passe à ton avatar R15 pour jouer à Emote.",
            ["es-es"] = "Cambia tu avatar a R15 para usar los emotes.",
            ["zh-tw"] = "切換成 R15 虛擬人偶即可使用此動作。",
            ["zh-cjv"] = "切换成 R15 虚拟形象以使用此动作。",
            ["zh-cn"] = "切换成 R15 虚拟形象以使用此动作。",
            de = "Wechsle zu deinem R15-Avatar, um das Emote abzuspielen.",
            ko = "감정 표현을 적용하려면 R15 아바타로 전환하세요.",
            ["pt-br"] = "Mude seu avatar para o modelo R15 para usar emotes.",
            pt = "Mude seu avatar para o modelo R15 para usar emotes.",
            ["en-us"] = "Switch to your R15 avatar to play Emote.",
            it = "Passa al tuo avatar R15 per giocare a Emote."
        }
    },
    {
        Key = "InGame.Chat.Label.From",
        Values = {
            es = "De",
            ja = "から",
            fr = "De",
            ["es-es"] = "De",
            ["zh-cjv"] = "来自于",
            ["zh-tw"] = "自",
            ru = "От ",
            ["zh-cn"] = "来自于",
            de = "Von",
            ko = "발신:",
            ["pt-br"] = "De",
            pt = "De",
            ["en-us"] = "From",
            it = "Da"
        }
    },
    {
        Key = "InGame.Chat.Label.SystemMessagePrefix",
        Values = {
            es = "Sistema",
            ja = "システム",
            fr = "Système",
            ["es-es"] = "Sistema",
            ["zh-cjv"] = "系统",
            ["zh-tw"] = "系統",
            ru = "Система",
            ["zh-cn"] = "系统",
            de = "System",
            ko = "시스템",
            ["pt-br"] = "Sistema",
            pt = "Sistema",
            ["en-us"] = "System",
            it = "Sistema"
        }
    },
    {
        Key = "InGame.Chat.Label.TeamMessagePrefix",
        Values = {
            es = "Equipo",
            ja = "チーム",
            fr = "Équipe",
            ["es-es"] = "Equipo",
            ["zh-cjv"] = "队伍",
            ["zh-tw"] = "隊伍",
            ru = "Команда",
            ["zh-cn"] = "队伍",
            de = "Team",
            ko = "팀",
            ["pt-br"] = "Equipe",
            pt = "Equipe",
            ["en-us"] = "Team",
            it = "Squadra"
        }
    },
    {
        Key = "InGame.Chat.Label.To",
        Values = {
            es = "Para",
            ja = "へ",
            fr = "À",
            ["es-es"] = "Para",
            ["zh-cjv"] = "发送至",
            ["zh-tw"] = "對",
            ru = "Для",
            ["zh-cn"] = "发送至",
            de = "Bis",
            ko = "수신:",
            ["pt-br"] = "Para",
            pt = "Para",
            ["en-us"] = "To",
            it = "A"
        }
    },
    {
        Key = "InGame.Chat.Response.DisplayNameMultipleMatches",
        Values = {
            es = "Advertencia: Los siguientes jugadores tienen este nombre de usuario: ",
            ja = "警告: 以下のユーザーには、この表示名があります: ",
            fr = "Avertissement - Les utilisateurs suivants ont ce nom d'affichage : ",
            ["es-es"] = "Advertencia: Los siguientes jugadores tienen este nombre de usuario: ",
            ["zh-cjv"] = "注意：以下用户正在使用此昵称：",
            ["zh-tw"] = "注意：以下使用者正在使用此顯示名稱：",
            ru = "Внимание! Такое имя есть у нескольких пользователей: ",
            ["zh-cn"] = "注意：以下用户正在使用此昵称：",
            de = "Warnung: Die folgenden Benutzer:innen haben diesen angezeigten Namen: ",
            ko = "주의: 다음 사용자들이 이 표시 이름을 사용하고 있습니다.",
            ["pt-br"] = "Aviso! Os seguintes usuários têm esse nome de exibição: ",
            pt = "Aviso! Os seguintes usuários têm esse nome de exibição: ",
            ["en-us"] = "Warning: The following users have this display name: ",
            it = "Attenzione, i seguenti utenti hanno questo nome: "
        }
    },
    {
        Key = "InGame.Chat.Response.EmoteNotAvailable",
        Values = {
            es = "No puedes usar ese emoticono.",
            ja = "そのエモートは使えません。",
            fr = "Tu ne peux pas utiliser cette Emote.",
            ["es-es"] = "No puedes usar ese emoticono.",
            ["zh-cjv"] = "无法使用该动作。",
            ["zh-tw"] = "無法使用該動作。",
            ru = "Вы не можете использовать эту эмоцию.",
            ["zh-cn"] = "无法使用该动作。",
            de = "Du kannst dieses Emote nicht benutzen.",
            ko = "이 감정 표현은 사용할 수 없어요.",
            ["pt-br"] = "Você não pode usar esse emote.",
            pt = "Você não pode usar esse emote.",
            ["en-us"] = "You can't use that Emote.",
            it = "Non puoi usare quell'emoticon."
        }
    },
    {
        Key = "InGame.Chat.Response.EmotesNotSupported",
        Values = {
            es = "No puedes usar emoticonos aquí.",
            ja = "ここではエモートはここでは使えません。",
            fr = "Tu ne peux pas utiliser les Emotes ici.",
            ["es-es"] = "No puedes usar emoticonos aquí.",
            ["zh-cjv"] = "无法在此挑战中使用动作。",
            ["zh-tw"] = "無法在此遊戲使用動作。",
            ru = "Здесь нельзя использовать эмоции.",
            ["zh-cn"] = "无法在此游戏中使用动作。",
            de = "Du kannst hier keine Emotes verwenden.",
            ko = "여기서는 감정 표현을 사용할 수 없어요.",
            ["pt-br"] = "Você não pode usar emotes aqui.",
            pt = "Você não pode usar emotes aqui.",
            ["en-us"] = "You can't use Emotes here.",
            it = "Qui non puoi usare le emoticon."
        }
    },
    {
        Key = "InGame.Chat.Response.EmotesTemporarilyUnavailable",
        Values = {
            es = "No puedes usar emoticonos en este momento.",
            ja = "今はエモートを使えません。",
            fr = "Tu ne peux pas utiliser d'Emote maintenant.",
            ["es-es"] = "No puedes usar emoticonos en este momento.",
            ["zh-cjv"] = "当前无法使用动作。",
            ["zh-tw"] = "現在無法使用動作。",
            ru = "Вы не можете использовать эмоции прямо сейчас.",
            ["zh-cn"] = "当前无法使用动作。",
            de = "You can't use Emotes right now.",
            ko = "지금은 감정 표현을 사용할 수 없어요.",
            ["pt-br"] = "Você não pode usar emotes no momento.",
            pt = "Você não pode usar emotes no momento.",
            ["en-us"] = "You can't use Emotes right now.",
            it = "Adesso non puoi usare le emoticon."
        }
    },
    {
        Key = "InGame.Chat.Response.EmotesWrongAvatarType",
        Values = {
            es = "Solo los avatares R15 pueden usar emoticonos.",
            ja = "R15指定のアバターのみエモートを使えます。",
            fr = "Seuls les avatars R15 peuvent utiliser les Emotes.",
            ["es-es"] = "Solo los avatares R15 pueden usar emoticonos.",
            ["zh-cjv"] = "只有 R15 虚拟形象可以使用动作。",
            ["zh-tw"] = "只有 R15 虛擬人偶可以使用動作。",
            ru = "Только аватары R15 могут использовать эмоции.",
            ["zh-cn"] = "只有 R15 虚拟形象可以使用动作。",
            de = "Nur R15 Avatars können Emotes verwenden.",
            ko = "R15 아바타만 감정 표현을 사용할 수 있어요.",
            ["pt-br"] = "Apenas avatares R15 podem usar emotes.",
            pt = "Apenas avatares R15 podem usar emotes.",
            ["en-us"] = "Only R15 avatars can use Emotes.",
            it = "Solo gli avatar R15 possono usare le emoticon."
        }
    }
}

return function()
	local localizationTable = Instance.new("LocalizationTable")
	localizationTable.Name = "ChatLocalization"
	localizationTable:SetEntries(entries)
	return localizationTable,entries
end]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a58</UniqueId>
								</Properties>
							</Item>
						</Item>
						<Item class="Folder" referent="RBX41935baa54574128840cb9e42409ba14">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<string name="Name">messages</string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259ac</UniqueId>
							</Properties>
							<Item class="ModuleScript" referent="RBXed4b2f733ae54b9e840572cb855eaae7">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">system</string>
									<string name="ScriptGuid">{6422EFE3-9895-4428-A61C-0C89B7FC24E4}</string>
									<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: system.lua
-- Description: System messages :D

return function(environment,queue)
	local scroller = environment.mainUi.scroller
	local templates = script.Parent:WaitForChild("templates")
	local regular = require(templates:WaitForChild("regular"))
	local rich = environment.richText
	
	return function(speaker,message,order)
		environment:checkScrollerPos()
		local object = regular.new()
		local message = rich:escape(message)
		object.Raw.Text = speaker ~= "" and ("%s %s"):format(rich:colorize(speaker .. ":",Color3.fromRGB(200,200,200)),message) or message
		object.Parent = scroller
		object.LayoutOrder = order and order or (queue[1] and queue[1].LayoutOrder or 0)
		return object
	end
end]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a59</UniqueId>
								</Properties>
							</Item>
							<Item class="Folder" referent="RBX244436e279e34d9383624f72aede90f8">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<string name="Name">templates</string>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259ad</UniqueId>
								</Properties>
								<Item class="ModuleScript" referent="RBX548b5eb620574e67bb570775c3264804">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">regular</string>
										<string name="ScriptGuid">{29A4AF4A-1226-4259-A18D-732F3370DBB3}</string>
										<ProtectedString name="Source"><![CDATA[return {new = function()
	return script:WaitForChild("Message"):Clone();
end}]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a5a</UniqueId>
									</Properties>
									<Item class="Frame" referent="RBX0be3e79416274fe3be97fc073cf36975">
										<Properties>
											<bool name="Active">false</bool>
											<Vector2 name="AnchorPoint">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticSize">2</token>
											<Color3 name="BackgroundColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">
												<R>0.105882362</R>
												<G>0.164705887</G>
												<B>0.207843155</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">1</int>
											<bool name="ClipsDescendants">false</bool>
											<bool name="Draggable">false</bool>
											<int name="LayoutOrder">0</int>
											<string name="Name">Message</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<bool name="Selectable">false</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>16</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<token name="Style">0</token>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259fe</UniqueId>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
										<Item class="TextLabel" referent="RBX9522602c6fa743f187e29b51779b46d0">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>1</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">2</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<token name="Font">18</token>
												<Font name="FontFace"></Font>
												<int name="LayoutOrder">0</int>
												<float name="LineHeight">1</float>
												<int name="MaxVisibleGraphemes">-1</int>
												<string name="Name">Raw</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="RichText">true</bool>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>16</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<string name="Text"></string>
												<Color3 name="TextColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<bool name="TextScaled">false</bool>
												<float name="TextSize">15</float>
												<Color3 name="TextStrokeColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="TextStrokeTransparency">0.899999976</float>
												<float name="TextTransparency">0</float>
												<token name="TextTruncate">0</token>
												<bool name="TextWrapped">true</bool>
												<token name="TextXAlignment">0</token>
												<token name="TextYAlignment">1</token>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025add</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">2</int>
											</Properties>
											<Item class="TextButton" referent="RBXd0daeda8b5464b57882c69067758cd2b">
												<Properties>
													<bool name="Active">true</bool>
													<Vector2 name="AnchorPoint">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoButtonColor">true</bool>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">3</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">1</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<token name="Font">18</token>
													<Font name="FontFace"></Font>
													<int name="LayoutOrder">0</int>
													<float name="LineHeight">1</float>
													<int name="MaxVisibleGraphemes">-1</int>
													<bool name="Modal">false</bool>
													<string name="Name">User</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>0</YO>
													</UDim2>
													<bool name="RichText">true</bool>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">true</bool>
													<bool name="Selected">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>16</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<token name="Style">0</token>
													<BinaryString name="Tags"></BinaryString>
													<string name="Text">Button</string>
													<Color3 name="TextColor3">
														<R>0</R>
														<G>0</G>
														<B>0</B>
													</Color3>
													<bool name="TextScaled">false</bool>
													<float name="TextSize">15</float>
													<Color3 name="TextStrokeColor3">
														<R>0</R>
														<G>0</G>
														<B>0</B>
													</Color3>
													<float name="TextStrokeTransparency">1</float>
													<float name="TextTransparency">1</float>
													<token name="TextTruncate">0</token>
													<bool name="TextWrapped">true</bool>
													<token name="TextXAlignment">2</token>
													<token name="TextYAlignment">1</token>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ac2</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">1</int>
												</Properties>
											</Item>
											<Item class="UIPadding" referent="RBXe012ec0a8c404280ae04555cdf0615cc">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<string name="Name">UIPadding</string>
													<UDim name="PaddingBottom">
														<S>0</S>
														<O>0</O>
													</UDim>
													<UDim name="PaddingLeft">
														<S>0</S>
														<O>0</O>
													</UDim>
													<UDim name="PaddingRight">
														<S>0</S>
														<O>0</O>
													</UDim>
													<UDim name="PaddingTop">
														<S>0</S>
														<O>0</O>
													</UDim>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b38</UniqueId>
												</Properties>
											</Item>
										</Item>
										<Item class="ImageLabel" referent="RBX8957d2e955b04a648839247a10a971be">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">0</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<Content name="Image"><null></null></Content>
												<Color3 name="ImageColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<Vector2 name="ImageRectOffset">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<Vector2 name="ImageRectSize">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<float name="ImageTransparency">0</float>
												<int name="LayoutOrder">0</int>
												<string name="Name">Icon</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<token name="ResampleMode">0</token>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<token name="ScaleType">0</token>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>0</XS>
													<XO>16</XO>
													<YS>0</YS>
													<YO>16</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<Rect2D name="SliceCenter">
													<min>
														<X>0</X>
														<Y>0</Y>
													</min>
													<max>
														<X>0</X>
														<Y>0</Y>
													</max>
												</Rect2D>
												<float name="SliceScale">1</float>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UDim2 name="TileSize">
													<XS>1</XS>
													<XO>0</XO>
													<YS>1</YS>
													<YO>0</YO>
												</UDim2>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a27</UniqueId>
												<bool name="Visible">false</bool>
												<int name="ZIndex">2</int>
											</Properties>
										</Item>
										<Item class="Frame" referent="RBXc07b0ad3307840eb9fe47d4924df595b">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>0.666666687</G>
													<B>0</B>
												</Color3>
												<float name="BackgroundTransparency">0.75</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">0</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<int name="LayoutOrder">0</int>
												<string name="Name">Mentioned</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>1</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259ff</UniqueId>
												<bool name="Visible">false</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="UICorner" referent="RBXddb2380dbce7452394d6fe9791793c97">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<UDim name="CornerRadius">
														<S>0</S>
														<O>4</O>
													</UDim>
													<string name="Name">Ignore</string>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b16</UniqueId>
												</Properties>
											</Item>
											<Item class="Frame" referent="RBX4bbec2c7d2a142bc864880c17ff22817">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>0.666666687</G>
														<B>0</B>
													</Color3>
													<float name="BackgroundTransparency">0</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">0</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<int name="LayoutOrder">0</int>
													<string name="Name">Bar</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>0</YO>
													</UDim2>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0</XS>
														<XO>5</XO>
														<YS>0</YS>
														<YO>16</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<token name="Style">0</token>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a00</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">1</int>
												</Properties>
												<Item class="UICorner" referent="RBX4639c28165ff41fbb8eeb7c9161206db">
													<Properties>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<UDim name="CornerRadius">
															<S>0</S>
															<O>4</O>
														</UDim>
														<string name="Name">UICorner</string>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b17</UniqueId>
													</Properties>
												</Item>
											</Item>
										</Item>
										<Item class="TextBox" referent="RBX9a7b6eab51e04c22be2540854b74641a">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>1</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">2</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClearTextOnFocus">false</bool>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<token name="Font">18</token>
												<Font name="FontFace"></Font>
												<int name="LayoutOrder">0</int>
												<float name="LineHeight">1</float>
												<int name="MaxVisibleGraphemes">-1</int>
												<bool name="MultiLine">false</bool>
												<string name="Name">Edit</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<Color3 name="PlaceholderColor3">
													<R>0.699999988</R>
													<G>0.699999988</G>
													<B>0.699999988</B>
												</Color3>
												<string name="PlaceholderText"></string>
												<UDim2 name="Position">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="RichText">false</bool>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<bool name="ShowNativeInput">true</bool>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>16</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<string name="Text"></string>
												<Color3 name="TextColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<bool name="TextEditable">true</bool>
												<bool name="TextScaled">false</bool>
												<float name="TextSize">15</float>
												<Color3 name="TextStrokeColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="TextStrokeTransparency">0.899999976</float>
												<float name="TextTransparency">0</float>
												<token name="TextTruncate">0</token>
												<bool name="TextWrapped">true</bool>
												<token name="TextXAlignment">0</token>
												<token name="TextYAlignment">1</token>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aab</UniqueId>
												<bool name="Visible">false</bool>
												<int name="ZIndex">1</int>
											</Properties>
										</Item>
									</Item>
								</Item>
								<Item class="ModuleScript" referent="RBX579ed7de8876474ab34ae32af92f13c3">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">reply</string>
										<string name="ScriptGuid">{D420604E-FC89-4C0E-A27D-69B80ABDF634}</string>
										<ProtectedString name="Source"><![CDATA[return {new = function()
	return script:WaitForChild("ReplyMessage"):Clone();
end,Bottom = function()
	return script:WaitForChild("Bottom"):Clone();
end,Middle = function()
	return script:WaitForChild("Middle"):Clone();
end,}]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a5b</UniqueId>
									</Properties>
									<Item class="Frame" referent="RBX715cbec17bed4878bf5564410e7fcd4b">
										<Properties>
											<bool name="Active">false</bool>
											<Vector2 name="AnchorPoint">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticSize">2</token>
											<Color3 name="BackgroundColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">
												<R>0.105882362</R>
												<G>0.164705887</G>
												<B>0.207843155</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">1</int>
											<bool name="ClipsDescendants">false</bool>
											<bool name="Draggable">false</bool>
											<int name="LayoutOrder">0</int>
											<string name="Name">ReplyMessage</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<bool name="Selectable">false</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>16</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<token name="Style">0</token>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a01</UniqueId>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
										<Item class="TextLabel" referent="RBXb83d87c88fc4443b8216cdaf40d3d5c7">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>1</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">2</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<token name="Font">18</token>
												<Font name="FontFace"></Font>
												<int name="LayoutOrder">0</int>
												<float name="LineHeight">1</float>
												<int name="MaxVisibleGraphemes">-1</int>
												<string name="Name">Original</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="RichText">true</bool>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>16</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<string name="Text">Bob: Hello world</string>
												<Color3 name="TextColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<bool name="TextScaled">false</bool>
												<float name="TextSize">12</float>
												<Color3 name="TextStrokeColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="TextStrokeTransparency">0.899999976</float>
												<float name="TextTransparency">0</float>
												<token name="TextTruncate">0</token>
												<bool name="TextWrapped">true</bool>
												<token name="TextXAlignment">0</token>
												<token name="TextYAlignment">1</token>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ade</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">2</int>
											</Properties>
											<Item class="TextButton" referent="RBX33018348561145c88808d18db48c3903">
												<Properties>
													<bool name="Active">true</bool>
													<Vector2 name="AnchorPoint">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoButtonColor">true</bool>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">3</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">1</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<token name="Font">18</token>
													<Font name="FontFace"></Font>
													<int name="LayoutOrder">0</int>
													<float name="LineHeight">1</float>
													<int name="MaxVisibleGraphemes">-1</int>
													<bool name="Modal">false</bool>
													<string name="Name">User</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>0</YO>
													</UDim2>
													<bool name="RichText">true</bool>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">true</bool>
													<bool name="Selected">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>16</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<token name="Style">0</token>
													<BinaryString name="Tags"></BinaryString>
													<string name="Text">Button</string>
													<Color3 name="TextColor3">
														<R>0</R>
														<G>0</G>
														<B>0</B>
													</Color3>
													<bool name="TextScaled">false</bool>
													<float name="TextSize">12</float>
													<Color3 name="TextStrokeColor3">
														<R>0</R>
														<G>0</G>
														<B>0</B>
													</Color3>
													<float name="TextStrokeTransparency">1</float>
													<float name="TextTransparency">1</float>
													<token name="TextTruncate">0</token>
													<bool name="TextWrapped">true</bool>
													<token name="TextXAlignment">2</token>
													<token name="TextYAlignment">1</token>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ac3</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">1</int>
												</Properties>
											</Item>
											<Item class="UIPadding" referent="RBX26624dd3a85e40c2880a68a710074915">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<string name="Name">UIPadding</string>
													<UDim name="PaddingBottom">
														<S>0</S>
														<O>0</O>
													</UDim>
													<UDim name="PaddingLeft">
														<S>0</S>
														<O>0</O>
													</UDim>
													<UDim name="PaddingRight">
														<S>0</S>
														<O>0</O>
													</UDim>
													<UDim name="PaddingTop">
														<S>0</S>
														<O>0</O>
													</UDim>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b39</UniqueId>
												</Properties>
											</Item>
										</Item>
										<Item class="ImageLabel" referent="RBXf3caadf95cb047dc946ac12734f5e89a">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">0</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<Content name="Image"><null></null></Content>
												<Color3 name="ImageColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<Vector2 name="ImageRectOffset">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<Vector2 name="ImageRectSize">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<float name="ImageTransparency">0</float>
												<int name="LayoutOrder">0</int>
												<string name="Name">Icon</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<token name="ResampleMode">0</token>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<token name="ScaleType">0</token>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>0</XS>
													<XO>16</XO>
													<YS>0</YS>
													<YO>16</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<Rect2D name="SliceCenter">
													<min>
														<X>0</X>
														<Y>0</Y>
													</min>
													<max>
														<X>0</X>
														<Y>0</Y>
													</max>
												</Rect2D>
												<float name="SliceScale">1</float>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UDim2 name="TileSize">
													<XS>1</XS>
													<XO>0</XO>
													<YS>1</YS>
													<YO>0</YO>
												</UDim2>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a28</UniqueId>
												<bool name="Visible">false</bool>
												<int name="ZIndex">1</int>
											</Properties>
										</Item>
										<Item class="TextBox" referent="RBX8e4e3bba0bd1422db55d4883a8c5a200">
											<Properties>
												<bool name="Active">true</bool>
												<Vector2 name="AnchorPoint">
													<X>1</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">2</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClearTextOnFocus">false</bool>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<token name="Font">18</token>
												<Font name="FontFace"></Font>
												<int name="LayoutOrder">0</int>
												<float name="LineHeight">1</float>
												<int name="MaxVisibleGraphemes">-1</int>
												<bool name="MultiLine">false</bool>
												<string name="Name">Edit</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<Color3 name="PlaceholderColor3">
													<R>0.699999988</R>
													<G>0.699999988</G>
													<B>0.699999988</B>
												</Color3>
												<string name="PlaceholderText"></string>
												<UDim2 name="Position">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="RichText">false</bool>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<bool name="ShowNativeInput">true</bool>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>16</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<string name="Text"></string>
												<Color3 name="TextColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<bool name="TextEditable">true</bool>
												<bool name="TextScaled">false</bool>
												<float name="TextSize">15</float>
												<Color3 name="TextStrokeColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="TextStrokeTransparency">0.899999976</float>
												<float name="TextTransparency">0</float>
												<token name="TextTruncate">0</token>
												<bool name="TextWrapped">true</bool>
												<token name="TextXAlignment">0</token>
												<token name="TextYAlignment">1</token>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aac</UniqueId>
												<bool name="Visible">false</bool>
												<int name="ZIndex">1</int>
											</Properties>
										</Item>
										<Item class="Frame" referent="RBXe611706612bb4d09ba64ccb3d2c5893e">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">2</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<int name="LayoutOrder">0</int>
												<string name="Name">ReplyChain</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>20</YO>
												</UDim2>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a02</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="UIListLayout" referent="RBXaccd4a73a6c94609bf6b35b1c2713b31">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<token name="FillDirection">1</token>
													<token name="HorizontalAlignment">1</token>
													<string name="Name">UIListLayout</string>
													<UDim name="Padding">
														<S>0</S>
														<O>0</O>
													</UDim>
													<token name="SortOrder">2</token>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b2e</UniqueId>
													<token name="VerticalAlignment">1</token>
												</Properties>
											</Item>
										</Item>
									</Item>
									<Item class="Frame" referent="RBX81bf621eca664154999f80b6eef30782">
										<Properties>
											<bool name="Active">false</bool>
											<Vector2 name="AnchorPoint">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticSize">2</token>
											<Color3 name="BackgroundColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">
												<R>0.105882362</R>
												<G>0.164705887</G>
												<B>0.207843155</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">1</int>
											<bool name="ClipsDescendants">true</bool>
											<bool name="Draggable">false</bool>
											<int name="LayoutOrder">1</int>
											<string name="Name">Bottom</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<bool name="Selectable">false</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<token name="Style">0</token>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a03</UniqueId>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
										<Item class="Frame" referent="RBX2755b0e24b6e4f688385e1a5e2f5449b">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">2</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<int name="LayoutOrder">0</int>
												<string name="Name">ReplyArea</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>30</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>-25</XO>
													<YS>0</YS>
													<YO>15</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a04</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="TextLabel" referent="RBX1194d60c116e4987b91fd50c1c46d587">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>1</X>
														<Y>0</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">2</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">1</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<token name="Font">18</token>
													<Font name="FontFace"></Font>
													<int name="LayoutOrder">0</int>
													<float name="LineHeight">1</float>
													<int name="MaxVisibleGraphemes">-1</int>
													<string name="Name">Reply</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>1</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>0</YO>
													</UDim2>
													<bool name="RichText">true</bool>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>1</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>16</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<string name="Text"></string>
													<Color3 name="TextColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<bool name="TextScaled">false</bool>
													<float name="TextSize">13</float>
													<Color3 name="TextStrokeColor3">
														<R>0</R>
														<G>0</G>
														<B>0</B>
													</Color3>
													<float name="TextStrokeTransparency">0.899999976</float>
													<float name="TextTransparency">0</float>
													<token name="TextTruncate">0</token>
													<bool name="TextWrapped">true</bool>
													<token name="TextXAlignment">0</token>
													<token name="TextYAlignment">2</token>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025adf</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">2</int>
												</Properties>
												<Item class="TextButton" referent="RBXcb2ea784e04b4be3a7fd74dbae3c6678">
													<Properties>
														<bool name="Active">true</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoButtonColor">true</bool>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">3</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<token name="Font">18</token>
														<Font name="FontFace"></Font>
														<int name="LayoutOrder">0</int>
														<float name="LineHeight">1</float>
														<int name="MaxVisibleGraphemes">-1</int>
														<bool name="Modal">false</bool>
														<string name="Name">User</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<bool name="RichText">true</bool>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">true</bool>
														<bool name="Selected">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>16</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<string name="Text">Button</string>
														<Color3 name="TextColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<bool name="TextScaled">false</bool>
														<float name="TextSize">15</float>
														<Color3 name="TextStrokeColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="TextStrokeTransparency">1</float>
														<float name="TextTransparency">1</float>
														<token name="TextTruncate">0</token>
														<bool name="TextWrapped">true</bool>
														<token name="TextXAlignment">2</token>
														<token name="TextYAlignment">1</token>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ac4</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">1</int>
													</Properties>
												</Item>
												<Item class="Frame" referent="RBX864e7a0192844ae9ba2be009caaa1b5f">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>0.666666687</G>
															<B>0</B>
														</Color3>
														<float name="BackgroundTransparency">0.75</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">0</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<int name="LayoutOrder">0</int>
														<string name="Name">Mentioned</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>-8</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>1</XS>
															<XO>10</XO>
															<YS>1</YS>
															<YO>0</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a05</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">1</int>
													</Properties>
													<Item class="UICorner" referent="RBX417d1d731e9443fea34a1f5f50a98a5d">
														<Properties>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<UDim name="CornerRadius">
																<S>0</S>
																<O>8</O>
															</UDim>
															<string name="Name">UICorner</string>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b18</UniqueId>
														</Properties>
													</Item>
													<Item class="Frame" referent="RBXc84aa6f14c9f47f5abab9b670e418bd7">
														<Properties>
															<bool name="Active">false</bool>
															<Vector2 name="AnchorPoint">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">2</token>
															<Color3 name="BackgroundColor3">
																<R>1</R>
																<G>0.666666687</G>
																<B>0</B>
															</Color3>
															<float name="BackgroundTransparency">0</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">0</int>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<int name="LayoutOrder">0</int>
															<string name="Name">Bar</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<UDim2 name="Position">
																<XS>0</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>0</YO>
															</UDim2>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<bool name="Selectable">false</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<UDim2 name="Size">
																<XS>0</XS>
																<XO>5</XO>
																<YS>0</YS>
																<YO>26</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<int64 name="SourceAssetId">-1</int64>
															<token name="Style">0</token>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a06</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">1</int>
														</Properties>
														<Item class="UICorner" referent="RBX0dae1d9bde604088af9b4ace0ffd7a17">
															<Properties>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<UDim name="CornerRadius">
																	<S>0</S>
																	<O>8</O>
																</UDim>
																<string name="Name">UICorner</string>
																<int64 name="SourceAssetId">-1</int64>
																<BinaryString name="Tags"></BinaryString>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b19</UniqueId>
															</Properties>
														</Item>
													</Item>
												</Item>
											</Item>
											<Item class="TextBox" referent="RBXb01a126118b14e9c9e49ffcbc72f5db2">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>1</X>
														<Y>0</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">2</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">1</int>
													<bool name="ClearTextOnFocus">false</bool>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<token name="Font">18</token>
													<Font name="FontFace"></Font>
													<int name="LayoutOrder">0</int>
													<float name="LineHeight">1</float>
													<int name="MaxVisibleGraphemes">-1</int>
													<bool name="MultiLine">false</bool>
													<string name="Name">Edit</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<Color3 name="PlaceholderColor3">
														<R>0.699999988</R>
														<G>0.699999988</G>
														<B>0.699999988</B>
													</Color3>
													<string name="PlaceholderText"></string>
													<UDim2 name="Position">
														<XS>1</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>0</YO>
													</UDim2>
													<bool name="RichText">false</bool>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<bool name="ShowNativeInput">true</bool>
													<UDim2 name="Size">
														<XS>1</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>16</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<string name="Text"></string>
													<Color3 name="TextColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<bool name="TextEditable">true</bool>
													<bool name="TextScaled">false</bool>
													<float name="TextSize">13</float>
													<Color3 name="TextStrokeColor3">
														<R>0</R>
														<G>0</G>
														<B>0</B>
													</Color3>
													<float name="TextStrokeTransparency">0.899999976</float>
													<float name="TextTransparency">1</float>
													<token name="TextTruncate">0</token>
													<bool name="TextWrapped">true</bool>
													<token name="TextXAlignment">0</token>
													<token name="TextYAlignment">2</token>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aad</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">2</int>
												</Properties>
											</Item>
										</Item>
										<Item class="Frame" referent="RBXe1418c08e13449f7bf980e51f2656905">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>1</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">true</bool>
												<bool name="Draggable">false</bool>
												<int name="LayoutOrder">3</int>
												<string name="Name">Bottom</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>1</YS>
													<YO>-5</YO>
												</UDim2>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>0</XS>
													<XO>23</XO>
													<YS>0</YS>
													<YO>10</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a07</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">4</int>
											</Properties>
											<Item class="ImageLabel" referent="RBX6c690c00383a4065a61ad573246b488c">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0</X>
														<Y>1</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">1</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<Content name="Image"><url>rbxassetid://8594890205</url></Content>
													<Color3 name="ImageColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<Vector2 name="ImageRectOffset">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<Vector2 name="ImageRectSize">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<float name="ImageTransparency">0</float>
													<int name="LayoutOrder">3</int>
													<string name="Name">Bottom</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>0</XO>
														<YS>1</YS>
														<YO>0</YO>
													</UDim2>
													<token name="ResampleMode">0</token>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<token name="ScaleType">0</token>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0</XS>
														<XO>23</XO>
														<YS>0</YS>
														<YO>23</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<Rect2D name="SliceCenter">
														<min>
															<X>0</X>
															<Y>0</Y>
														</min>
														<max>
															<X>0</X>
															<Y>0</Y>
														</max>
													</Rect2D>
													<float name="SliceScale">1</float>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UDim2 name="TileSize">
														<XS>1</XS>
														<XO>0</XO>
														<YS>1</YS>
														<YO>0</YO>
													</UDim2>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a29</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">4</int>
												</Properties>
											</Item>
										</Item>
										<Item class="Frame" referent="RBX691864c99552440c8d1dcc0bca9d5896">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>1</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<int name="LayoutOrder">3</int>
												<string name="Name">Middle</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>1</YS>
													<YO>-5</YO>
												</UDim2>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>0</XS>
													<XO>23</XO>
													<YS>0</YS>
													<YO>10</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a08</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">4</int>
											</Properties>
											<Item class="ImageLabel" referent="RBX4f34c076571342aeb33fd1a0979ca9b8">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">1</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<Content name="Image"><url>rbxassetid://8594897232</url></Content>
													<Color3 name="ImageColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<Vector2 name="ImageRectOffset">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<Vector2 name="ImageRectSize">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<float name="ImageTransparency">0</float>
													<int name="LayoutOrder">2</int>
													<string name="Name">Middle</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>0</XO>
														<YS>-100</YS>
														<YO>0</YO>
													</UDim2>
													<token name="ResampleMode">0</token>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<token name="ScaleType">0</token>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0</XS>
														<XO>23</XO>
														<YS>100</YS>
														<YO>0</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<Rect2D name="SliceCenter">
														<min>
															<X>28</X>
															<Y>0</Y>
														</min>
														<max>
															<X>300</X>
															<Y>300</Y>
														</max>
													</Rect2D>
													<float name="SliceScale">1</float>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UDim2 name="TileSize">
														<XS>1</XS>
														<XO>0</XO>
														<YS>1</YS>
														<YO>0</YO>
													</UDim2>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a2a</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">3</int>
												</Properties>
											</Item>
										</Item>
									</Item>
									<Item class="Frame" referent="RBX45f3c5472ba24dfeacb89f3cfe2b3750">
										<Properties>
											<bool name="Active">false</bool>
											<Vector2 name="AnchorPoint">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticSize">2</token>
											<Color3 name="BackgroundColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<float name="BackgroundTransparency">1</float>
											<Color3 name="BorderColor3">
												<R>0.105882362</R>
												<G>0.164705887</G>
												<B>0.207843155</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">1</int>
											<bool name="ClipsDescendants">false</bool>
											<bool name="Draggable">false</bool>
											<int name="LayoutOrder">0</int>
											<string name="Name">Middle</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<bool name="Selectable">false</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<token name="Style">0</token>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a09</UniqueId>
											<bool name="Visible">true</bool>
											<int name="ZIndex">1</int>
										</Properties>
										<Item class="ImageLabel" referent="RBX46e19f87dedb4c3190d600d646305cf2">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<Content name="Image"><url>rbxassetid://8594897232</url></Content>
												<Color3 name="ImageColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<Vector2 name="ImageRectOffset">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<Vector2 name="ImageRectSize">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<float name="ImageTransparency">0</float>
												<int name="LayoutOrder">2</int>
												<string name="Name">Middle</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<token name="ResampleMode">0</token>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<token name="ScaleType">0</token>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>0</XS>
													<XO>23</XO>
													<YS>1</YS>
													<YO>0</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<Rect2D name="SliceCenter">
													<min>
														<X>28</X>
														<Y>0</Y>
													</min>
													<max>
														<X>300</X>
														<Y>300</Y>
													</max>
												</Rect2D>
												<float name="SliceScale">1</float>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UDim2 name="TileSize">
													<XS>1</XS>
													<XO>0</XO>
													<YS>1</YS>
													<YO>0</YO>
												</UDim2>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a2b</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">3</int>
											</Properties>
										</Item>
										<Item class="Frame" referent="RBXc7008b9e5cb74b249f887135179a8366">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">2</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<int name="LayoutOrder">0</int>
												<string name="Name">ReplyArea</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>30</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>-25</XO>
													<YS>0</YS>
													<YO>15</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a0a</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="TextLabel" referent="RBXedee313f37994982be567a8a9871fab8">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>1</X>
														<Y>0</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">2</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">1</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<token name="Font">18</token>
													<Font name="FontFace"></Font>
													<int name="LayoutOrder">0</int>
													<float name="LineHeight">1</float>
													<int name="MaxVisibleGraphemes">-1</int>
													<string name="Name">Reply</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>1</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>0</YO>
													</UDim2>
													<bool name="RichText">true</bool>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>1</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>16</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<string name="Text"></string>
													<Color3 name="TextColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<bool name="TextScaled">false</bool>
													<float name="TextSize">13</float>
													<Color3 name="TextStrokeColor3">
														<R>0</R>
														<G>0</G>
														<B>0</B>
													</Color3>
													<float name="TextStrokeTransparency">0.899999976</float>
													<float name="TextTransparency">0</float>
													<token name="TextTruncate">0</token>
													<bool name="TextWrapped">true</bool>
													<token name="TextXAlignment">0</token>
													<token name="TextYAlignment">1</token>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ae0</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">2</int>
												</Properties>
												<Item class="TextButton" referent="RBX90ea0da69329434d818911b3a013b82b">
													<Properties>
														<bool name="Active">true</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoButtonColor">true</bool>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">3</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="BackgroundTransparency">1</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">1</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<token name="Font">18</token>
														<Font name="FontFace"></Font>
														<int name="LayoutOrder">0</int>
														<float name="LineHeight">1</float>
														<int name="MaxVisibleGraphemes">-1</int>
														<bool name="Modal">false</bool>
														<string name="Name">User</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<bool name="RichText">true</bool>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">true</bool>
														<bool name="Selected">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>16</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<string name="Text">Button</string>
														<Color3 name="TextColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<bool name="TextScaled">false</bool>
														<float name="TextSize">15</float>
														<Color3 name="TextStrokeColor3">
															<R>0</R>
															<G>0</G>
															<B>0</B>
														</Color3>
														<float name="TextStrokeTransparency">1</float>
														<float name="TextTransparency">1</float>
														<token name="TextTruncate">0</token>
														<bool name="TextWrapped">true</bool>
														<token name="TextXAlignment">2</token>
														<token name="TextYAlignment">1</token>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ac5</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">1</int>
													</Properties>
												</Item>
												<Item class="Frame" referent="RBXa0be4a86d7184375869be7fcc9e938c0">
													<Properties>
														<bool name="Active">false</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>1</R>
															<G>0.666666687</G>
															<B>0</B>
														</Color3>
														<float name="BackgroundTransparency">0.75</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">0</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<int name="LayoutOrder">0</int>
														<string name="Name">Mentioned</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>-8</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>1</XS>
															<XO>10</XO>
															<YS>1</YS>
															<YO>0</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a0b</UniqueId>
														<bool name="Visible">false</bool>
														<int name="ZIndex">1</int>
													</Properties>
													<Item class="UICorner" referent="RBX82015a59514246688a90c225784057cf">
														<Properties>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<UDim name="CornerRadius">
																<S>0</S>
																<O>8</O>
															</UDim>
															<string name="Name">UICorner</string>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b1a</UniqueId>
														</Properties>
													</Item>
													<Item class="Frame" referent="RBX613d889139254677ba572daf357877c6">
														<Properties>
															<bool name="Active">false</bool>
															<Vector2 name="AnchorPoint">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">2</token>
															<Color3 name="BackgroundColor3">
																<R>1</R>
																<G>0.666666687</G>
																<B>0</B>
															</Color3>
															<float name="BackgroundTransparency">0</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">0</int>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<int name="LayoutOrder">0</int>
															<string name="Name">Bar</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<UDim2 name="Position">
																<XS>0</XS>
																<XO>0</XO>
																<YS>0</YS>
																<YO>0</YO>
															</UDim2>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<bool name="Selectable">false</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<UDim2 name="Size">
																<XS>0</XS>
																<XO>5</XO>
																<YS>0</YS>
																<YO>26</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<int64 name="SourceAssetId">-1</int64>
															<token name="Style">0</token>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a0c</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">1</int>
														</Properties>
														<Item class="UICorner" referent="RBX4ee75fa075874d9298dfdf2309886f76">
															<Properties>
																<BinaryString name="AttributesSerialize"></BinaryString>
																<UDim name="CornerRadius">
																	<S>0</S>
																	<O>8</O>
																</UDim>
																<string name="Name">UICorner</string>
																<int64 name="SourceAssetId">-1</int64>
																<BinaryString name="Tags"></BinaryString>
																<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b1b</UniqueId>
															</Properties>
														</Item>
													</Item>
												</Item>
											</Item>
											<Item class="TextBox" referent="RBX5faf719b1e684d6d9271403725948f87">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>1</X>
														<Y>0</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">2</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">1</int>
													<bool name="ClearTextOnFocus">false</bool>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<token name="Font">18</token>
													<Font name="FontFace"></Font>
													<int name="LayoutOrder">0</int>
													<float name="LineHeight">1</float>
													<int name="MaxVisibleGraphemes">-1</int>
													<bool name="MultiLine">false</bool>
													<string name="Name">Edit</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<Color3 name="PlaceholderColor3">
														<R>0.699999988</R>
														<G>0.699999988</G>
														<B>0.699999988</B>
													</Color3>
													<string name="PlaceholderText"></string>
													<UDim2 name="Position">
														<XS>1</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>0</YO>
													</UDim2>
													<bool name="RichText">false</bool>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<bool name="ShowNativeInput">true</bool>
													<UDim2 name="Size">
														<XS>1</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>16</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<string name="Text"></string>
													<Color3 name="TextColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<bool name="TextEditable">true</bool>
													<bool name="TextScaled">false</bool>
													<float name="TextSize">13</float>
													<Color3 name="TextStrokeColor3">
														<R>0</R>
														<G>0</G>
														<B>0</B>
													</Color3>
													<float name="TextStrokeTransparency">0.899999976</float>
													<float name="TextTransparency">1</float>
													<token name="TextTruncate">0</token>
													<bool name="TextWrapped">true</bool>
													<token name="TextXAlignment">0</token>
													<token name="TextYAlignment">1</token>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aae</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">2</int>
												</Properties>
											</Item>
										</Item>
									</Item>
								</Item>
							</Item>
							<Item class="ModuleScript" referent="RBXb11a4c9ea963456faacf66532c0db857">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">default</string>
									<string name="ScriptGuid">{CB5FEBDB-1DC3-4FD8-9C57-56B0844215CC}</string>
									<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: default.lua
-- Description: User messages base

local runService = game:GetService("RunService")
local userInput = game:GetService("UserInputService")
local players = game:GetService("Players")
local textService = game:GetService("TextService")
local heartbeat = runService.Heartbeat

local localPlayer = players.LocalPlayer
local label = Instance.new("TextLabel")
label.RichText = true

local getTextContent = function(text)
	label.Text = text
	return label.ContentText
end

local italicize = function(text)
	return("<i>%s</i>"):format(text)
end

local getTextBounds = function(object,text)
	return textService:GetTextSize(getTextContent(text),object.TextSize,object.Font,Vector2.new(object.AbsoluteSize.X,math.huge))
end

return function(environment)
	local useIcons = environment.config.Messages.IncludeIcon

	local editedText = environment.localization:localize("Chat_Edited")
	local editedStamp = ("<font color=\"rgb(200,200,200)\"> (%s)</font>"):format(editedText)
	local systemPrefixColor = environment.config.UI.Colors.SystemPrefixColor
	local meCommandColor = Color3.fromRGB(235, 235, 235)

	local scroller = environment.mainUi.scroller
	local templates = script.Parent:WaitForChild("templates")	
	local rich = environment.richText

	local regular = require(templates:WaitForChild("regular"))
	local functions = require(script:WaitForChild("functions"))(environment)
	local prompt = require(script:WaitForChild("prompt"))(environment,functions)

	local padding = 2
	local mentionString = ("@%s"):format(localPlayer.Name)
	environment.mouseMoved = environment.mouseMoved or {}

	return function(data)
		local editCount = data.edits or 0
		local object = regular.new()
		local id = data.player ~= nil and data.player.UserId or 0
		local canReceiveInput,lastPosition,iconOption,lastInBounds,lastSize,lastInput,lastPrompt = false,nil,nil,nil,nil,nil,nil

		environment:checkScrollerPos()

		local isMentioned = data.message:find(mentionString) and data.mentioningEnabled
		local isMeCommand = data.isMeCommand
		local canEdit = (data.senderId == localPlayer.UserId) and data.editingEnabled
		local canReply = (localPlayer:GetAttribute("Permission") >= data.requiredToReply)

		if(useIcons and (not isMeCommand)) then
			local offset = (isMentioned and UDim2.new(0,8,0,0) or UDim2.new(0,0,0,0))
			if(data.viewportData) then
				task.spawn(function() -- spawned bc it yields and not cool >:(
					local viewport = environment.utility.viewport.new(data.viewportData,16)
					viewport.Parent = object
					viewport.Position = offset
					iconOption = viewport
				end)
			else
				object.Icon.Image = data.imageId ~= "" and data.imageId or functions:getUserThumbnail(id)
				object.Icon.Visible = true
				object.Icon.Position = offset
				iconOption = object.Icon
			end
			object.Raw.Size = UDim2.new(1,(isMentioned and -28 or -20),0,16)
			object.Edit.Size = UDim2.new(1,(isMentioned and -28 or -20),0,16)
		elseif(isMentioned) then
			object.Raw.Size = UDim2.new(1,-8,0,16)
			object.Edit.Size = UDim2.new(1,-8,0,16)
		end

		if(isMentioned) then
			object.Mentioned.Visible = true
		end

		local hasDisplayName = data.displayName ~= data.name

		local tags = ""
		if(not isMeCommand) then
			tags = functions.getTags(data)
		else
			data.message = data.message:sub(5,#data.message)
		end

		local color = (data.teamColor or (hasDisplayName and data.displayNameColor or data.nameColor))
		local userPrefix = rich:colorize(data.displayName .. (isMeCommand and " " or ": "),isMeCommand and meCommandColor or color)
		local markdownEnabled = data.markdownEnabled
		local messageContent = (markdownEnabled and environment.richText:markdown(data.message)) or environment.richText:escape(data.message)		
		local originalContent = messageContent

		if(editCount >= 1) then
			messageContent = messageContent .. editedStamp
		end

		if(isMentioned) then
			messageContent = messageContent:gsub(mentionString,environment.richText:colorize(mentionString,Color3.fromRGB(255, 170, 0)))
		end

		local prefix = tags .. userPrefix
		object.Raw.Text = prefix .. messageContent
		object.Raw.TextColor3 = data.chatColor
		object.Raw.User.Text = prefix
		object.Parent = scroller
		object.LayoutOrder = data.id

		if(isMeCommand) then
			object.Raw.Text = italicize(object.Raw.Text)
		end

		if(isMeCommand) then
			object.Raw.TextColor3 = meCommandColor
		end

		local edit = object.Edit
		local collector = functions.createCollector(object,function() --> RBXScriptConnection collector
			prompt:removeData(object)
		end)
		
		local editCallback = function() end

		if(canEdit) then
			editCallback = function()
				local prefix = getTextContent(prefix)
				local raw = object.Raw
				edit.Text = getTextContent(prefix .. originalContent)
				edit.TextTransparency = 1

				collector:add(object.Raw.Changed:Connect(function()
					edit.Size = UDim2.new(1,0,0,raw.AbsoluteSize.Y)
				end))

				collector:add(edit.Focused:Connect(function()
					if(iconOption) then
						iconOption.Visible = false
					end
					edit.TextTransparency = 0
					object.Raw.TextTransparency = 1
				end))

				collector:add(edit.FocusLost:Connect(function(enterPressed)
					if(iconOption) then
						iconOption.Visible = true
					end
					if(enterPressed) then
						local newText = edit.Text:sub(#prefix+1,#edit.Text)
						environment:onEdit(newText)
						environment.network:fire("editMessage",data.id,data.channelFrom,newText)
					end
					edit.TextTransparency = 1
					object.Raw.TextTransparency = 0
				end))

				collector:add(edit.Changed:Connect(function()
					if(edit.CursorPosition <= #prefix) then
						edit.CursorPosition = #prefix + 1
					end
					if(#edit.Text < #prefix) then
						edit.Text = prefix
					end
				end))

				environment.utility:clampTextLimit(edit,environment.config.Messages.MaximumLength)
			end
		else
			edit:Destroy()
		end

		local user = object.Raw.User
		local mentionedBar = object:WaitForChild("Mentioned"):WaitForChild("Bar")

		local standardCheck = function()
			heartbeat:Wait()
			if(object:GetFullName() ~= object.Name) then
				if(object.AbsoluteSize ~= lastSize) then
					lastSize = object.AbsoluteSize
					local currentPadding = (object.Raw.TextBounds.Y > object.Raw.TextSize and padding or 0)
					mentionedBar.Size = UDim2.new(0,5,0,object.Raw.AbsoluteSize.Y + (currentPadding * 2)) --UDim2.new(0,5,0,object.Raw.TextBounds.Y + (currentPadding * 2))
				end
			else
				lastPosition = nil
				local current = environment.messages[data.id]
				if(current) then
					current = current["data"]["edits"]
					if(current == editCount) then -- wasnt edited when the obj was deleted
						if((tick()-environment.lastRefresh) >= 0.1) then
							environment.messages[data.id] = nil
						end
						data = nil
					end
				end
			end
		end

		collector:add(object.Changed:Connect(standardCheck))
		standardCheck()
				
		local loaded = false
		local load = function()
			loaded = true
			if(object:GetFullName() == object.Name) then
				return
			end
			environment.mouseMoved[object.Raw] = function(position)
				lastPosition = position
				local isInBounds = false
				if(position.X <= (object.AbsolutePosition.X + object.AbsoluteSize.X)) then
					if(position.X >= (object.AbsolutePosition.X)) then
						if(position.Y >= (object.AbsolutePosition.Y)) then
							if(position.Y <= (object.AbsolutePosition.Y + object.AbsoluteSize.Y)) then
								isInBounds = true
							end
						end
					end
				end
				canReceiveInput = isInBounds
			end

			environment.mouseMoved[object] = function(position)
				local inBounds = false
				if(position.X <= (user.AbsolutePosition.X + user.AbsoluteSize.X)) then
					if(position.X >= (user.AbsolutePosition.X)) then
						if(position.X >= (user.AbsolutePosition.X + getTextBounds(user,tags).X)) then
							if(position.Y >= (user.AbsolutePosition.Y)) then
								if(position.Y <= (user.AbsolutePosition.Y + user.AbsoluteSize.Y)) then
									inBounds = true
								end
							end
						end
					end
				end
				if(lastInBounds ~= inBounds) then
					lastInBounds = inBounds
					if(hasDisplayName) then
						if(inBounds) then
							userPrefix = rich:colorize(data.name .. ": ",(data.teamColor or data.nameColor))
						else
							userPrefix = rich:colorize(data.displayName .. ": ",(data.teamColor or data.displayNameColor))
						end
					end
					local text = tags .. userPrefix .. messageContent
					object.Raw.Text = isMeCommand and italicize(text) or text
					if(canEdit and (not edit:IsFocused())) then
						object.Edit.Visible = (not inBounds)
					end
				end
			end

			local bools = {canEdit,canReply}
			local enabled = bools[1] or bools[2]

			if(enabled) then
				prompt:set(object,canEdit,canReply)

				collector:add(userInput.InputBegan:Connect(function(input)
					if(lastPrompt) then
						task.delay(0.1,function()
							if(lastPrompt) then
								lastPrompt:Destroy()
								lastPrompt = nil
							end
						end)
					end
					if(input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton2) then
						heartbeat:Wait()
						if(canReceiveInput) then
							local key = tick()
							lastInput = key
							task.delay((userInput.TouchEnabled and 0.7 or 0),function()
								if(lastInput == key and (canReceiveInput)) then
									prompt:open(object,data,collector,edit)
								end
							end)
						end
					end
				end))
			end

			collector:add(object.Raw.User.MouseButton1Click:Connect(function()
				functions:initWhisper(players:GetPlayerByUserId(data.senderId))
			end))
			
			task.spawn(editCallback)
		end
		
		collector:add(object.MouseEnter:Connect(function()
			if(not loaded) then
				load()
			end
		end))
		
		return object
	end
end]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a5c</UniqueId>
								</Properties>
								<Item class="ModuleScript" referent="RBX96f9525b20534f47a8235ef85c6664d1">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">functions</string>
										<string name="ScriptGuid">{38B711BA-D337-443A-A3D5-A73A2C9AAC03}</string>
										<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: functions.lua
-- Descriptions: Function serving for messages

return function(environment)
	local players = game:GetService("Players")

	local rich = environment.richText
	local systemPrefixColor = environment.config.UI.Colors.SystemPrefixColor

	local localPlayer = players.LocalPlayer

	local functions = {}

	functions.getTags = function(data)
		local tagsList = data.tags or {}
		if(data.isWhisper) then
			data.tags = {}
			tagsList = data.tags
			local from = players:GetPlayerByUserId(data.from_user)
			if(from ~= nil) then
				local prefix = environment.localization:getMessagePrefix(from == localPlayer and "To" or "From")
				table.insert(tagsList,1,{
					text = ("%s %s"):format(prefix,from:GetAttribute("DisplayName")),
					color = systemPrefixColor
				})
			end
		elseif(data.isTeam) then
			table.insert(tagsList,1,{
				text = environment.localization:getMessagePrefix("Team"),
				color = systemPrefixColor
			})
		end
		local tags = ""
		for _,tag in pairs(tagsList) do
			local tag = rich:colorize(("[TEXTHERE]"):format(tag.text),tag.color):gsub("TEXTHERE",rich:markdown(tag.text))
			tags = tags .. tag .. " "
		end
		return tags
	end

	function functions:getUserThumbnail(userId)
		return("rbxthumb://type=AvatarHeadShot&id=%s&w=150&h=150"):format(userId)
	end

	function functions.createCollector(object,onEnd)
		local collector = {signals = {}}

		function collector:add(signal)
			table.insert(collector.signals,signal)
		end

		local changed;
		changed = object.Changed:Connect(function()
			if(object:GetFullName() == object.Name) then
				changed:Disconnect()
				for _,signal in pairs(collector.signals) do
					signal:Disconnect()
				end
				collector.signals = nil
				collector = nil
				pcall(onEnd or function() end)
			end
		end)

		return collector
	end

	function functions:initReply(data)
		environment:setChannel(environment:generateReplyCode(data.id),true)
	end

	function functions:initWhisper(player)
		if(player and environment.config.Messages.Private.WhispersEnabled) then
			environment:whisper(player)
		end
	end

	return functions
end]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a5d</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX6aa3262f4637420196581b660868771d">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">prompt</string>
										<string name="ScriptGuid">{DA29588A-4911-4816-8373-039EE554A8FB}</string>
										<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: prompt.lua
-- Description: Message context menu prompt

return function(environment,functions)
	local quickChatEnabled = environment.config.Messages.QuickChat
	local localPlayer = game:GetService("Players").LocalPlayer
	local options = {}
	local lastPrompt;
	
	return {open = function(self,object,data,collector,edit)
		for _,obj in pairs(environment.gui:GetChildren()) do
			if(obj.Name == "EditPrompt") then
				obj:Destroy()
			end
		end
		
		local prompt = script:WaitForChild("EditPrompt"):Clone()
		prompt.Parent = environment.gui
		prompt.Visible = true
		
		prompt.Edit.Visible = options[object]["canEdit"]
		prompt.Reply.Visible = options[object]["canReply"]
		prompt.QuickChat.Visible = (data.senderId == localPlayer.UserId) and quickChatEnabled

		for _,obj in pairs(prompt:GetChildren()) do
			if(obj:IsA("TextButton")) then
				obj.MouseButton1Down:Connect(function()
					if(obj.Name == "Reply") then
						functions:initReply(data)
					elseif(obj.Name == "Edit") then
						edit:CaptureFocus()
					else
						environment:openSaveChat(data.message)
					end
					lastPrompt:Destroy()
					lastPrompt = nil
				end)
			end
		end

		collector:add(object.Changed:Connect(function()
			if(lastPrompt == prompt) then
				prompt.Position = UDim2.fromOffset(
					object.AbsolutePosition.X,object.AbsolutePosition.Y + object.AbsoluteSize.Y
				)
			end
		end))

		lastPrompt = prompt
		object.ZIndex += 1
		object.ZIndex -= 1
	end,set = function(self,object,canEdit,canReply)
		options[object] = {
			canEdit = canEdit,
			canReply = canReply
		}
	end,removeData = function(self,object)
		options[object] = nil
	end}
end]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a5e</UniqueId>
									</Properties>
									<Item class="Frame" referent="RBX67a6ab4c891346409e39683b8712ce44">
										<Properties>
											<bool name="Active">false</bool>
											<Vector2 name="AnchorPoint">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticSize">3</token>
											<Color3 name="BackgroundColor3">
												<R>0</R>
												<G>0</G>
												<B>0</B>
											</Color3>
											<float name="BackgroundTransparency">0.75</float>
											<Color3 name="BorderColor3">
												<R>0.105882362</R>
												<G>0.164705887</G>
												<B>0.207843155</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">0</int>
											<bool name="ClipsDescendants">false</bool>
											<bool name="Draggable">false</bool>
											<int name="LayoutOrder">0</int>
											<string name="Name">EditPrompt</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>500</XO>
												<YS>0</YS>
												<YO>50</YO>
											</UDim2>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<bool name="Selectable">false</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>0</XS>
												<XO>25</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<token name="Style">0</token>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a0d</UniqueId>
											<bool name="Visible">false</bool>
											<int name="ZIndex">3</int>
										</Properties>
										<Item class="UIListLayout" referent="RBXe0cf68412c364b0faad04e8073b606c1">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<token name="FillDirection">1</token>
												<token name="HorizontalAlignment">0</token>
												<string name="Name">UIListLayout</string>
												<UDim name="Padding">
													<S>0</S>
													<O>3</O>
												</UDim>
												<token name="SortOrder">2</token>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b2f</UniqueId>
												<token name="VerticalAlignment">0</token>
											</Properties>
										</Item>
										<Item class="TextButton" referent="RBXcf9bb217f1b547ec90d633357412f3e3">
											<Properties>
												<bool name="Active">true</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoButtonColor">true</bool>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="BackgroundTransparency">0.75</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">0</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<token name="Font">18</token>
												<Font name="FontFace"></Font>
												<int name="LayoutOrder">0</int>
												<float name="LineHeight">1</float>
												<int name="MaxVisibleGraphemes">-1</int>
												<bool name="Modal">false</bool>
												<string name="Name">Reply</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="RichText">false</bool>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">true</bool>
												<bool name="Selected">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>0</XS>
													<XO>25</XO>
													<YS>0</YS>
													<YO>25</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<string name="Text"></string>
												<Color3 name="TextColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<bool name="TextScaled">false</bool>
												<float name="TextSize">14</float>
												<Color3 name="TextStrokeColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="TextStrokeTransparency">1</float>
												<float name="TextTransparency">0</float>
												<token name="TextTruncate">0</token>
												<bool name="TextWrapped">false</bool>
												<token name="TextXAlignment">0</token>
												<token name="TextYAlignment">1</token>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ac6</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">5</int>
											</Properties>
											<Item class="ImageLabel" referent="RBX2de548b2b49e4b408b63e597497504b0">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0.5</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>0.639215708</R>
														<G>0.635294139</G>
														<B>0.647058845</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">0</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<Content name="Image"><url>rbxassetid://8595302757</url></Content>
													<Color3 name="ImageColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<Vector2 name="ImageRectOffset">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<Vector2 name="ImageRectSize">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<float name="ImageTransparency">0</float>
													<int name="LayoutOrder">0</int>
													<string name="Name">ImageLabel</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0.5</XS>
														<XO>0</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<token name="ResampleMode">0</token>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<token name="ScaleType">0</token>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0</XS>
														<XO>20</XO>
														<YS>0</YS>
														<YO>20</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<Rect2D name="SliceCenter">
														<min>
															<X>0</X>
															<Y>0</Y>
														</min>
														<max>
															<X>0</X>
															<Y>0</Y>
														</max>
													</Rect2D>
													<float name="SliceScale">1</float>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UDim2 name="TileSize">
														<XS>1</XS>
														<XO>0</XO>
														<YS>1</YS>
														<YO>0</YO>
													</UDim2>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a2c</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">5</int>
												</Properties>
											</Item>
										</Item>
										<Item class="UIPadding" referent="RBXb98a8d9ff321441eb3843d8cba7a4d48">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<string name="Name">UIPadding</string>
												<UDim name="PaddingBottom">
													<S>0</S>
													<O>2</O>
												</UDim>
												<UDim name="PaddingLeft">
													<S>0</S>
													<O>10</O>
												</UDim>
												<UDim name="PaddingRight">
													<S>0</S>
													<O>10</O>
												</UDim>
												<UDim name="PaddingTop">
													<S>0</S>
													<O>2</O>
												</UDim>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b3a</UniqueId>
											</Properties>
										</Item>
										<Item class="TextButton" referent="RBXee8d2dc705c949a9a7dfcf711ac58556">
											<Properties>
												<bool name="Active">true</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoButtonColor">true</bool>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="BackgroundTransparency">0.75</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">0</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<token name="Font">18</token>
												<Font name="FontFace"></Font>
												<int name="LayoutOrder">1</int>
												<float name="LineHeight">1</float>
												<int name="MaxVisibleGraphemes">-1</int>
												<bool name="Modal">false</bool>
												<string name="Name">Edit</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="RichText">false</bool>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">true</bool>
												<bool name="Selected">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>0</XS>
													<XO>25</XO>
													<YS>0</YS>
													<YO>25</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<string name="Text"></string>
												<Color3 name="TextColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<bool name="TextScaled">false</bool>
												<float name="TextSize">14</float>
												<Color3 name="TextStrokeColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="TextStrokeTransparency">1</float>
												<float name="TextTransparency">0</float>
												<token name="TextTruncate">0</token>
												<bool name="TextWrapped">false</bool>
												<token name="TextXAlignment">0</token>
												<token name="TextYAlignment">1</token>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ac7</UniqueId>
												<bool name="Visible">false</bool>
												<int name="ZIndex">5</int>
											</Properties>
											<Item class="ImageLabel" referent="RBXd981144958624bf1999a9fbfb538f400">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0.5</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>0.639215708</R>
														<G>0.635294139</G>
														<B>0.647058845</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">0</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<Content name="Image"><url>rbxassetid://8603600017</url></Content>
													<Color3 name="ImageColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<Vector2 name="ImageRectOffset">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<Vector2 name="ImageRectSize">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<float name="ImageTransparency">0</float>
													<int name="LayoutOrder">0</int>
													<string name="Name">ImageLabel</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0.5</XS>
														<XO>0</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<token name="ResampleMode">0</token>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<token name="ScaleType">0</token>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0</XS>
														<XO>20</XO>
														<YS>0</YS>
														<YO>20</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<Rect2D name="SliceCenter">
														<min>
															<X>0</X>
															<Y>0</Y>
														</min>
														<max>
															<X>0</X>
															<Y>0</Y>
														</max>
													</Rect2D>
													<float name="SliceScale">1</float>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UDim2 name="TileSize">
														<XS>1</XS>
														<XO>0</XO>
														<YS>1</YS>
														<YO>0</YO>
													</UDim2>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a2d</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">5</int>
												</Properties>
											</Item>
										</Item>
										<Item class="TextButton" referent="RBXfe6f7abb8c5e4470bf7c85da4670da03">
											<Properties>
												<bool name="Active">true</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoButtonColor">true</bool>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="BackgroundTransparency">0.75</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">0</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<token name="Font">18</token>
												<Font name="FontFace"></Font>
												<int name="LayoutOrder">2</int>
												<float name="LineHeight">1</float>
												<int name="MaxVisibleGraphemes">-1</int>
												<bool name="Modal">false</bool>
												<string name="Name">QuickChat</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="RichText">false</bool>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">true</bool>
												<bool name="Selected">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>0</XS>
													<XO>25</XO>
													<YS>0</YS>
													<YO>25</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<string name="Text"></string>
												<Color3 name="TextColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<bool name="TextScaled">false</bool>
												<float name="TextSize">14</float>
												<Color3 name="TextStrokeColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="TextStrokeTransparency">1</float>
												<float name="TextTransparency">0</float>
												<token name="TextTruncate">0</token>
												<bool name="TextWrapped">false</bool>
												<token name="TextXAlignment">0</token>
												<token name="TextYAlignment">1</token>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ac8</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">5</int>
											</Properties>
											<Item class="ImageLabel" referent="RBXf7ac965d97e24536b0ab294ddfb56fb8">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0.5</X>
														<Y>0.5</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>0.639215708</R>
														<G>0.635294139</G>
														<B>0.647058845</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">0</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<Content name="Image"><url>rbxassetid://6031243319</url></Content>
													<Color3 name="ImageColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<Vector2 name="ImageRectOffset">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<Vector2 name="ImageRectSize">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<float name="ImageTransparency">0</float>
													<int name="LayoutOrder">0</int>
													<string name="Name">ImageLabel</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0.5</XS>
														<XO>0</XO>
														<YS>0.5</YS>
														<YO>0</YO>
													</UDim2>
													<token name="ResampleMode">0</token>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<token name="ScaleType">0</token>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>0</XS>
														<XO>20</XO>
														<YS>0</YS>
														<YO>20</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<Rect2D name="SliceCenter">
														<min>
															<X>0</X>
															<Y>0</Y>
														</min>
														<max>
															<X>0</X>
															<Y>0</Y>
														</max>
													</Rect2D>
													<float name="SliceScale">1</float>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UDim2 name="TileSize">
														<XS>1</XS>
														<XO>0</XO>
														<YS>1</YS>
														<YO>0</YO>
													</UDim2>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a2e</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">5</int>
												</Properties>
											</Item>
										</Item>
									</Item>
								</Item>
							</Item>
							<Item class="ModuleScript" referent="RBXbf42af7463794cfb9989702ca8eaa3c2">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">reply</string>
									<string name="ScriptGuid">{7C6DA704-BB9C-4930-9CC3-686A9383332E}</string>
									<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: reply.lua
-- Description: Message reply template
-- Note: This literally destroyed my brain cells to create lmao you better like it

local players = game:GetService("Players")
local runService = game:GetService("RunService")
local heartbeat = runService.Heartbeat
local localPlayer = players.LocalPlayer

return function(environment)
	local scroller = environment.mainUi.scroller
	local templates = script.Parent:WaitForChild("templates")
	local replyMessage = require(templates:WaitForChild("reply"))
	local rich = environment.richText
	local editedStamp = ("<font color=\"rgb(200,200,200)\"> (%s)</font>"):format(environment.localization:localize("Chat_Edited"))
	
	local getText = function(data,wasEdited)
		local editStamp = (wasEdited and editedStamp or "")
		local hasDisplayName = data.displayName ~= data.name
		local userPrefix = rich:colorize(data.displayName .. ": ",(data.teamColor or (hasDisplayName and data.displayNameColor or data.nameColor)))
		local messageContent = (data.markdownEnabled and environment.richText:markdown(data.message)) or environment.richText:escape(data.message)
		return userPrefix .. messageContent .. editStamp,userPrefix,messageContent ..editStamp
	end
	
	local label = Instance.new("TextLabel")
	label.RichText = true
	local getContent = function(text)
		label.Text = text
		return label.ContentText
	end

	local internal = {}
	local threadApis = {}
	local threadConnections = {}
	local lastChain

	local push = function(object,newReply)
		if(not object:FindFirstChild("ReplyChain")) then
			return false
		end
		local replyChain = object.ReplyChain
		local id = object:GetAttribute("ID")
		internal[id] = internal[id] or {}
		if(newReply) then
			table.insert(internal[id],newReply)
		end
		local isAtBottom = environment:atBottom()
		for _,child in pairs(replyChain:GetChildren()) do
			if(child:IsA("Frame")) then
				child:Destroy()
			end
		end
		local endIdx = #internal[id]

		for key,reply in pairs(internal[id]) do
			local template = replyMessage[key < endIdx and "Middle" or "Bottom"]()
			local content,userPrefix,raw = getText(reply,(reply.edits and reply.edits >= 1 and true or false))
			local isMentioned = raw:find(("@"..localPlayer.Name))
			local isOwner = (reply.senderId == localPlayer.UserId)
			local canEdit = isOwner and reply.editingEnabled
			local editBox = template.ReplyArea.Edit
			local connected
			template.ReplyArea.Reply.Text = content
			template.ReplyArea.Reply.TextColor3 = reply.chatColor
			
			if(editBox and canEdit) then
				local prefix = getContent(userPrefix)
				local signals = {}
				editBox.Text = prefix .. reply.message
				editBox.TextTransparency = 1
				
				local connect = function(sig)
					table.insert(signals,sig)
					if(not connected) then
						connected = template.Changed:Connect(function()
							if(template:GetFullName() == template.Name) then
								connected:Disconnect()
								for _,signal in pairs(signals) do 
									signal:Disconnect()
								end
								signals = {}
							end
						end)
					end
				end
				
				connect(editBox.Focused:Connect(function()
					editBox.TextTransparency = 0
					template.ReplyArea.Reply.TextTransparency = 1
				end))

				connect(editBox.FocusLost:Connect(function(enterPressed)
					if(enterPressed) then
						local newText = editBox.Text:sub(#prefix+1,#editBox.Text)
						environment:onEdit(newText)
						environment.network:fire("editMessage",reply.id,reply.channelFrom,newText)
					end
					editBox.TextTransparency = 1
					template.ReplyArea.Reply.TextTransparency = 0
				end))

				connect(editBox.Changed:Connect(function()
					if(editBox.CursorPosition <= #prefix) then
						editBox.CursorPosition = #prefix + 1
					end
					if(#editBox.Text < #prefix) then
						editBox.Text = prefix
					end
				end))
				
				environment.utility:clampTextLimit(editBox,environment.config.Messages.MaximumLength)
			else
				editBox:Destroy()
			end
			if(isMentioned) then
				template.ReplyArea.Reply.Mentioned.Visible = true
				local changed
				changed = template.Changed:Connect(function()
					template.ReplyArea.Reply.Mentioned.Bar.Size = UDim2.fromOffset(5,0)
					heartbeat:Wait()
					if(template:GetFullName() ~= template.Name) then
						template.ReplyArea.Reply.Mentioned.Bar.Size = UDim2.fromOffset(5,template.ReplyArea.Reply.Mentioned.AbsoluteSize.Y)
					else
						changed:Disconnect()
					end
				end)
			else
				template.ReplyArea.Reply.Mentioned:Destroy()
			end
			template.Parent = replyChain
		end
		if(isAtBottom) then
			environment:checkScrollerPos(true,0.1)
		end
		return true
	end

	environment.threads = {}
	function environment:checkThread(id)
		return environment.threads[id] and threadApis[id]
	end
	
	--[[
		Complex flow:
		1. If a message is being replied to, check if there's an existing thread on that message
		1A. If there's not an existing thread, create one and continue
		1B. If there is, continue
		2. Push reply into message stack/thread
		
		Also, rebuild the thread if a message is edited and stuff
	--]]
	
	local main
	main = function(dta,queue)
		if(environment.threads[dta.replyingTo.id] == queue[1]) then
			push(queue[1],dta)
			return environment.threads[dta.replyingTo.id],threadApis[dta.replyingTo.id]
		elseif(environment.threads[dta.replyingTo.id] ~= nil) then
			internal[dta.replyingTo.id] = {}
			threadApis = {}
		end
		environment:checkScrollerPos()
		local object = replyMessage.new()
		local id = dta.replyingTo.id
		local originalMessage = dta.replyingTo
		local _,userPrefix,textContent = getText(originalMessage)
		local user = object.Original.User
		local lastInBounds = false
		
		object.Original.Text = userPrefix .. textContent
		object.LayoutOrder = dta.id
		object.Parent = scroller
		object:SetAttribute("ID",id)
		object.Original.User.Text = userPrefix
		object.Original.TextColor3 = originalMessage.chatColor

		local hasDisplayName = originalMessage.displayName ~= originalMessage.name
		local update = function()
			if(hasDisplayName) then
				if(lastInBounds) then
					userPrefix = rich:colorize(originalMessage.name .. ": ",(originalMessage.teamColor or originalMessage.nameColor))
				else
					userPrefix = rich:colorize(originalMessage.displayName .. ": ",(originalMessage.teamColor or originalMessage.displayNameColor))
				end
			end
			object.Original.Text = userPrefix .. textContent
		end
		
		environment.mouseMoved[object] = function(position)
			local inBounds = false
			if(position.X <= (user.AbsolutePosition.X + user.AbsoluteSize.X)) then
				if(position.X >= (user.AbsolutePosition.X)) then
					if(position.Y >= (user.AbsolutePosition.Y)) then
						if(position.Y <= (user.AbsolutePosition.Y + user.AbsoluteSize.Y)) then
							inBounds = true
						end
					end
				end
			end
			if(lastInBounds ~= inBounds) then
				lastInBounds = inBounds
				update()
			end
		end
		
		environment.threads[dta.replyingTo.id] = object
		push(object,dta)
		local changed,repaired = nil,false
		changed = object.Changed:Connect(function()
			if(object:GetFullName() == object.Name) then
				changed:Disconnect()
				internal[dta.replyingTo.id] = nil
				for _,conn in pairs(threadConnections[dta.replyingTo.id] or {}) do
					conn:Disconnect()
				end
				task.delay(3,function()
					if(not repaired) then
						lastChain = nil
					end
				end)
			end
		end)
		local repair = function(chain)
			repaired = true
			pcall(function()
				environment.threads[dta.replyingTo.id]:Destroy()
			end)
			if(chain) then
				internal[dta.replyingTo.id] = chain
			end
			environment.threads[dta.replyingTo.id] = nil
			local obj = main(dta,queue)
			table.insert(queue,1,obj)
		end
		local threadApi = {
			replace = function(data,queue)
				local replyChain = internal[id]
				if(not replyChain) then
					repair(lastChain)
					return
				else
					lastChain = replyChain
				end
				for key,child in pairs(replyChain) do
					if(child.id == data.id) then
						replyChain[key] = data
					end
				end
				local success = push(object,nil)
				if(not success) then
					repair(lastChain)
				end
			end,
			editBaseMessage = function(self,new)
				local _,_,newText = getText(new)
				textContent = newText .. editedStamp
				update()
			end,
		}
		threadApis[dta.replyingTo.id] = threadApi
		return object,threadApi
	end

	return main
end]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a5f</UniqueId>
								</Properties>
							</Item>
						</Item>
						<Item class="Folder" referent="RBX8fa941d65476400ba06db6784e5102dd">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<string name="Name">formatting</string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259ae</UniqueId>
							</Properties>
							<Item class="ModuleScript" referent="RBX98f965a4a22e4daba455d90915d78662">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">richText</string>
									<string name="ScriptGuid">{152D1898-AE44-4651-8ABF-2606FC49C41F}</string>
									<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: richText.lua
-- Description: Rich text formatting

local richText = {}
local f = math.floor
local markdown = require(script:WaitForChild("markdown"))(richText)

function richText:escape(text) -- like one of the most important functions lol
	return text:gsub(".",{
		["<"] = "&lt;",
		[">"] = "&gt;",
		["\""] = "&quot;",
		["'"] = "&apos;",
		["&"] = "&amp;"
	})
end

function richText:colorize(text,rgb)
	return("<font color=\"rgb(%s)\">%s</font>"):format(richText:tostringRgb(rgb),richText:escape(text))
end

local parse = function(hex,...)
	local packed = {}
	for _,pos in pairs({...}) do
		table.insert(packed,tonumber(("0x%s"):format(hex:sub(unpack(pos)))))
	end
	return unpack(packed)
end

function richText:tostringRgb(rgb)
	return("%s,%s,%s"):format(f(rgb.R * 255),f(rgb.G * 255),f(rgb.B * 255))
end

function richText:hexToRgb(hex)
	return Color3.fromRGB(parse(hex:gsub("#",""),{1,2},{3,4},{5,6}))
end

function richText:markdown(text)
	return markdown:format(text)
end

return richText]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a60</UniqueId>
								</Properties>
								<Item class="ModuleScript" referent="RBXa296e9516cd041e18dce6d2f9299930d">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">markdown</string>
										<string name="ScriptGuid">{20762F84-37D5-4CEA-AF52-6760949E6CEB}</string>
										<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: markdown.lua
-- Description: Chat system text formatting system, eg: **bold** --> (imagine this is now bold text)
-- Note: I added a ton of comments to this to try to explain what in the world is my wacky-looking code is even attempting to do
-- Edit like 3 months later: yea thank god I added those comments lol I don't even know what this says AND I WROTE IT

local colorModule = require(script:WaitForChild("color"))

return function(rich_text)
	local parse_color = function(color)
		color = color:gsub(" ","") -- remove spaces
		local default = Color3.fromRGB(255,255,255)
		if(color:sub(1,1) == "#" and #color >= 7) then -- check if they passed a hex value
			return colorModule.rgb_to_hex(colorModule.hex_to_rgb(color))
		elseif(color:find(",")) then -- check if they passed a RGB value
			local rgb = {}
			for _,num in pairs(string.split(color,",")) do -- R,G,B --> {R,G,B}
				table.insert(rgb,math.clamp((tonumber(num) or 0),0,255))
			end
			return colorModule.rgb_to_hex(Color3.fromRGB(unpack(rgb)))
		else
			return colorModule.rgb_to_hex(colorModule.matchBrickcolor(color))
		end
	end

	local color_tag = function(text,color) -- place text in a rich text color tag with the specified color
		return ('<font color="%s">%s</font>'):format(parse_color(color),text)
	end

	local main = {}
	local regulartag = function(text,tag,format)
		main = {}
		local from = function(t,c) --> generates a XML tag for opening and closing (c -> true = closing): eg: <a> </a>
			return ("<%s%s>"):format((c and "/" or ""),t)
		end
		local opening = ""
		local closing = ""
		for i = 1,#tag do
			table.insert(main,1,tag:sub(i,i)) -- insert this in the reversed order of the tags
			-- when using multiple tags, to close it you need to close it with the same tags but backwards (this table manages that)
			-- ex: <i><b>hi</b></i>
			opening = opening .. from(tag:sub(i,i))
		end
		for _,v in pairs(main) do
			closing = closing .. from(v,true)
		end
		return (opening .. (text) .. closing)
	end

	local customcolor = function(b)
		-- color format ex: (255,0,0 / hi)
		local s,e = string.find(b,"/") -- look for the separator as seen in the example
		if(s and e and b:sub(1,1) ~= "<") then -- if it has the separator, then make sure it wasn't also falsified by a closing tag like </i>
			local split = {b:sub(1,e - 1),b:sub(e + 1,#b)} -- don't use string.split because of the other formats like *italics* would throw it off with the closing tags.
			local color = split[1]
			local awaitingClose = (split[2]:sub(1,1) == string.char(32)) -- see if we need to remove spaces at the start from when it's separated by the '/' (so messages arent padded out weirdly)
			local text = split[2]:gsub(".",function(c)
				if(awaitingClose) then
					local is_space = (c == string.char(32))
					awaitingClose = is_space
					return(is_space and "" or c)
				else
					return c
				end
			end)
			return color_tag(text,color) -- actually use this information lol
		else -- if it was a false alarm by someone just using text like "im murderer (im not)" then make sure to return it properly
			return "(" .. b .. ")"
		end
	end

	local formats = {
		-- don't change the order of these
		-- they're priority-based so things like *** would be grabbed before ** etc
		{"***","ib",regulartag}, --> ***hello*** means italic and bold
		{"**","b",regulartag}, --> **bold** means bold
		{"*","i",regulartag}, --> *italics* means italic ofc
		{"__","u",regulartag}, --> __under__ underlines your text
		{"_","i",regulartag}, --> _hi_ makes italics
		{"~~","s",regulartag}, --> ~~hi~~ makes the text crossed through
		{"(","",customcolor,")"} --> (255,0,0 / red) (#FF0000 / red) (Really red / red) --> red text
	}

	local escapePattern = function(pattern)
		return({
			pattern:gsub("%*","%%*")
			:gsub("%?","%%?")
			:gsub("%(","%%(")
			:gsub("%)","%%)")}
		)[1]
	end

	local new = function(p1,p2) -- generates the pattern needed to find text
		return(escapePattern(p1) .. "(.-)" .. escapePattern(p2))
	end

	local markdownFormat
	markdownFormat = function(text,depth)
		if(not depth) then
			text = rich_text:escape(text)
		end
		local base = text
		local matches = {gsub = {},count = 0}
		for _,info in pairs(formats) do
			text = text:gsub(new(info[1],info[4] or info[1]),function(between)
				-- we found some text between a pattern like '*hi*' and now we reassemble it so that it can be removed later
				-- this whole thing makes sure that: *yo* -> <i>yo</i>
				local matched = info[1] .. between .. (info[4] or info[1])
				-- this checks to make sure that the pattern isn't just something like ________ (in my past system this just removed the whole thing)
				local doContinue = not (matched == string.rep(matched:sub(1,1),#matched))
				if(doContinue) then
					-- at the end all the info in the 'gsub' table will be ran
					table.insert(matches.gsub,{
						escapePattern(matched), -- the text we want to remove
						info[3](between,info[2],info[1]) -- this is the text we'll replace like '<i>hi</i>'
					})
					matches.count += 1 -- later we do recursive checks to make sure that we get all of the patterns and if this never goes above zero then the recursive check ends
					return ""
				end
			end)
		end
		-- if anything is passed we'll replace all the text to be formatted properly

		for _,rep in pairs(matches.gsub) do
			base = base:gsub(unpack(rep))
		end

		-- when this function is first called, it won't have the 'depth' argument and it can do another check

		-- since when text is detected like "*__underline but italics__*" it'll only get the italics part but then we run this to make sure it also gets the underline
		if(not depth) then
			local layers = 0
			if(matches.count >= 1) then -- then we'll check again if there ever was some text found like *italics*
				repeat -- repeat this whole code 25 times or until there's no more *special text* found
					layers += 1
					base,matches = markdownFormat(base,layers)
				until(layers >= 25 or matches.count == 0)
			end
		end
		return base,matches
	end

	return {
		format = function(_,text) -- :format("*italics*") -> "<i>italics</i>"
			local formatted,matches = markdownFormat(text)
			return formatted
		end
	}
end]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a61</UniqueId>
									</Properties>
									<Item class="ModuleScript" referent="RBX50c25801aea8434ca97cb2495efbd65e">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">color</string>
											<string name="ScriptGuid">{1D1B3C9B-6651-44F8-B785-1A0C36B64173}</string>
											<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: color.lua
-- Description: Color functions
-- Credit: @Blockzez - hex stuff lol

local brickColors = {}
local blank = {}

for i = 1,1032 do -- iirc there's around 1032 brick colors (this gets all of them and adds them to a list)
	local col = BrickColor.new(i)
	local n = col.Name
	local s = n:sub(1,1):lower()
	-- the list is ordered by first character (to prevent it from running ~= 1,032 checks every time this is parsed)
	brickColors[s] = brickColors[s] or {}
	brickColors[s][n] = col.Color
end

local rgb_to_hex = function(color)
	return string.format("#%02X%02X%02X",color.R * 0xFF,color.G * 0xFF,color.B * 0xFF)
end

local hex_to_rgb = function(hex) -- hex to rgb
	local r,g,b = string.match(hex,"^#?(%w%w)(%w%w)(%w%w)$")
	return Color3.fromRGB(tonumber(r,16),tonumber(g,16),tonumber(b,16))
end

local matchBrickcolor = function(toMatch)
	local defaultColor = Color3.fromRGB(0,0,0)
	if(string.len(toMatch) >= 1) then
		for name,col in pairs(brickColors[toMatch:sub(1,1):lower()] or blank) do
			if(name:gsub(string.char(32),""):sub(1,#toMatch):lower() == toMatch:lower()) then
				return(col)
			end
		end
	end
	return(defaultColor)
end

return {
	hex_to_rgb = hex_to_rgb,
	rgb_to_hex = rgb_to_hex,
	matchBrickcolor = matchBrickcolor
}]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a62</UniqueId>
										</Properties>
									</Item>
								</Item>
							</Item>
						</Item>
						<Item class="Folder" referent="RBXdb49c7f683c8436799ff361504e77d8b">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<string name="Name">commands</string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259af</UniqueId>
							</Properties>
							<Item class="Folder" referent="RBXd0103f8ffec04395a2504953e9e617e1">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<string name="Name">list</string>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259b0</UniqueId>
								</Properties>
								<Item class="ModuleScript" referent="RBXbc80e2d497974b3cb77afb2e1d4024d8">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">console</string>
										<string name="ScriptGuid">{04C6CD08-E4E1-4301-B717-A6216F8CDCE5}</string>
										<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: developerConsole.lua
-- Description: Ability to open developer console via /console

local starterGui = game:GetService("StarterGui")
local command = {}
command.name = "console"
command.aliases = {}
command.call = function()
	local devConsoleVisible = game.StarterGui:GetCore("DevConsoleVisible")
	game:GetService("StarterGui"):SetCore("DevConsoleVisible",not devConsoleVisible)
end

return command]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a63</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXaa637139fc074f488fb2ef077a1f8839">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">dance</string>
										<string name="ScriptGuid">{884CA1F4-A4CC-48DE-82E7-A42582C16B67}</string>
										<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: dance.lua
-- Description: Emote support

local command = {}
command.name = "e"
command.aliases = {"emote"}
command.call = function(message)
	local defaultEmotes = {
		wave = true,point = true,dance = true,
		dance2 = true,dance3 = true,laugh = true,
		cheer = true
	}

	local function getEmoteName()
		if(string.sub(message,1,3) == "/e ") then
			return message:sub(4,#message)
		elseif(string.sub(message,1,7) == "/emote ") then
			return message:sub(8,#message)
		end
		return nil
	end

	local systemMessage = function(message)
		print("system message",message)
	end

	local emoteName = getEmoteName()
	if(defaultEmotes[emoteName]) then
		return
	end

	local character = game:GetService("Players").LocalPlayer.Character
	if(not character) then
		systemMessage("You can't use emotes right now.")
		return
	end

	local animateScript = character:FindFirstChild("Animate")
	if(not animateScript) then
		systemMessage("You can't use emotes here.")
		return
	end

	local playEmoteBindable = animateScript:FindFirstChild("PlayEmote")
	if(not playEmoteBindable) then
		systemMessage("You can't use emotes here.")
		return
	end

	local humanoid = character:FindFirstChildOfClass("Humanoid")
	if(not humanoid) then
		systemMessage("You can't use emotes right now.")
		return
	end

	if(humanoid.RigType ~= Enum.HumanoidRigType.R15) then
		systemMessage("Only R15 avatars can use emotes.")
		return
	end

	local humanoidDescription = humanoid:FindFirstChildOfClass("HumanoidDescription")
	if(not humanoidDescription) then
		systemMessage("You can't use emotes here.")
		return true
	end

	local index = {}
	for name,value in pairs(humanoidDescription:GetEmotes()) do
		index[string.lower(name)] = name
	end

	local slot = tonumber(emoteName)
	if(slot) then
		for _,information in pairs(humanoidDescription:GetEquippedEmotes()) do
			if(information.Slot == slot) then
				emoteName = information.Name
			end
		end
	end

	emoteName = index[emoteName:lower()]
	if(not emoteName) then
		systemMessage("You can't use that emote.")
		return
	end

	coroutine.wrap(function()
		local ok,didPlay = pcall(function() 
			return humanoid:PlayEmote(emoteName)
		end)

		if(not ok) then
			systemMessage("You can't use emotes here.")
		elseif(not didPlay) then
			systemMessage("You can't use emotes right now.")
		end
	end)()
end

return command]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a64</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXa2feb1b86e4345f88145a65475023e33">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">help</string>
										<string name="ScriptGuid">{C31BF161-DF24-44D6-AA54-92AA717ED6AD}</string>
										<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: help.lua
-- Description: /help command

local starterGui = game:GetService("StarterGui")
local keys = {
	"GameChat_ChatCommandsTeller_Desc",
	"GameChat_ChatCommandsTeller_MeCommand",
	"GameChat_ChatCommandsTeller_MuteCommand",
	"GameChat_ChatCommandsTeller_SwitchChannelCommand",
	"GameChat_ChatCommandsTeller_TeamCommand",
	"GameChat_ChatCommandsTeller_UnMuteCommand",
	"GameChat_ChatCommandsTeller_WhisperCommand"
}

local command = {}
command.name = "help"
command.aliases = {}
command.security = "internal"
command.call = function(text,environment)
	local msg = ""
	for _,key in pairs(keys) do
		msg = msg .. environment.localization:localize(key) .. "\n"
	end
	environment:sendSystemMessage(msg:sub(1,#msg-1))
end

return command]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a65</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXfd3e443fa45a46079f06d88f7a0d5b7c">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">mute</string>
										<string name="ScriptGuid">{72997F09-97B1-4FD5-9258-0920501C4AB1}</string>
										<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: mute.lua
-- Description: Ability to mute users

local players = game:GetService("Players")

local command = {}
command.name = "mute"
command.aliases = {"m"}
command.security = "internal"

command.call = function(text,env)
	local user = text:sub(string.find(text," ")+1,#text)
	if(user:sub(#user,#user) == " ") then
		user = user:sub(1,#user-1)
	end
	local player = players:FindFirstChild(user)
	if(player) then
		env:mute(player)
	end
end

return command]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a66</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX7c44fb9bd0384b8cb9bd6decf58e6b68">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">unmute</string>
										<string name="ScriptGuid">{815414BD-9F24-4187-93F2-766ECF93B525}</string>
										<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: unmute.lua
-- Description: Ability to unmute users

local players = game:GetService("Players")

local command = {}
command.name = "unmute"
command.aliases = {"unm"}
command.security = "internal"

command.call = function(text,env)
	local user = text:sub(string.find(text," ") + 1,#text)
	if(user:sub(#user,#user) == " ") then
		user = user:sub(1,#user-1)
	end
	local player = players:FindFirstChild(user)
	if(player) then
		env:unmute(player)
	end
end

return command]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a67</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBXf93724f8f91644dc8e13165cd85d9780">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">settings</string>
										<string name="ScriptGuid">{2B9B66AD-5B8B-40E2-901B-1EECFD736343}</string>
										<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: settings.lua
-- Description: Open settings menu

local starterGui = game:GetService("StarterGui");
local command = {};
command.name = "settings";
command.aliases = {"s"};
command.security = "internal"
command.call = function(_,environment)
	pcall(function()
		if(environment.config.SettingsMenu.Enabled and (not environment.config.SettingsMenu.ApiEnabledAndUIDisabled)) then
			environment:openSettingsMenu()
		end
	end)
end

return command;]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a68</UniqueId>
									</Properties>
								</Item>
								<Item class="ModuleScript" referent="RBX96f6d18e82cb4888813148c53ab28c76">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">quickChat</string>
										<string name="ScriptGuid">{8C677EC6-FF9A-45EB-8A90-3F04321F9606}</string>
										<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: quickChat.lua
-- Description: Quick chat commands

local starterGui = game:GetService("StarterGui")
local command = {}
command.name = "1"
command.security = "internal"
command.aliases = {}

for i = 1,19 do
	table.insert(command.aliases,tostring(i + 1))
end

command.call = function(text,environment)
	if(environment.config.Messages.QuickChat) then
		local number = tonumber(text:sub(2,3))
		local slot = environment:getQuickChatSlot(number)
		if(slot ~= "") then
			environment:sendMessageInternally(slot)
		end
	end
end

return command]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a69</UniqueId>
									</Properties>
								</Item>
							</Item>
							<Item class="ModuleScript" referent="RBX03532ad9d6024bb1ab1a203d3e8864cc">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">processor</string>
									<string name="ScriptGuid">{53ADC5C9-8AAC-408F-9942-E64FE115DA72}</string>
									<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: processor.lua
-- Description: Command processor

local commands = {}
local onCommandLoaded = function(command)
	local module = require(command)
	commands[module.name] = module
end
script.Parent:WaitForChild("list").ChildAdded:Connect(onCommandLoaded)
for _,child in pairs(script.Parent.list:GetChildren()) do
	task.spawn(onCommandLoaded,child)
end

return function(environment)
	return {
		parse = function(self,text)
			if(text:sub(1,1) == "/") then
				local commandName = text:split(string.char(32))[1]:gsub("/","")
				for name,data in pairs(commands) do
					if(name == commandName or (table.find(data.aliases,commandName))) then
						local args = {}
						if(data.security == "internal") then
							table.insert(args,environment)
						end
						task.spawn(data.call,text,unpack(args))
						return true
					end
				end
			end
		end,
	}
end]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a6a</UniqueId>
								</Properties>
							</Item>
						</Item>
						<Item class="Folder" referent="RBX4a4c4b08756d4bc9a45f162d1231e60a">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<string name="Name">constructors</string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259b1</UniqueId>
							</Properties>
							<Item class="ModuleScript" referent="RBX4cfc993688b44929bb172a535c50cda1">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">slider</string>
									<string name="ScriptGuid">{B7138EDB-CE63-4BA4-8DE3-61236EB2B1B8}</string>
									<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: slider.lua
-- Description: Slider gui controller

local slider = {}
local userInput = game:GetService("UserInputService")
local runService = game:GetService("RunService")

function slider.new(main,min,max,default,on)
	local object = main:WaitForChild("Center"):WaitForChild("Actual")
	local box = object:WaitForChild("Amount")
	local bar = object:WaitForChild("Bar")
	local button = bar:WaitForChild("Button")
	local progress = bar:WaitForChild("Progress")
	local holding,lastText = false,nil

	button.InputBegan:Connect(function(input)
		if((input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1) and (not holding)) then
			local ended
			holding = true
			ended = input.Changed:Connect(function()
				if(input.UserInputState == Enum.UserInputState.End) then
					ended:Disconnect()
					holding = false
				end
			end)
		end
	end)

	local handlePositioning = function(percentage)
		local xMin = ((button.AbsoluteSize.X / 2)/bar.AbsoluteSize.X)
		local xMax = ((bar.AbsoluteSize.X - (button.AbsoluteSize.X / 2)) / bar.AbsoluteSize.X)
		local positionPercentage = math.clamp(percentage,xMin,xMax)
		button.Position = UDim2.fromScale(positionPercentage,0.5)
		progress.Size = UDim2.fromScale(positionPercentage,1)
	end
	
	local handle = function(num)
		on(math.clamp(num,min,max))
	end
	
	local getNumberFromPercentage = function(percentage)
		return math.clamp((min + ((max - min) * percentage)),min,max)
	end
	
	local rescale = function()
		local newNumber = tonumber(box.Text) or 0
		local percentage = (newNumber - min) / (max - min)
		handlePositioning(percentage)
		local rawNumber = getNumberFromPercentage(percentage)
		handle(rawNumber)
		lastText = tostring(rawNumber)
		box.Text = tonumber(rawNumber)
	end

	runService.Heartbeat:Connect(function()
		if(holding) then
			local mouseLocation = userInput:GetMouseLocation()
			local relativePosition = mouseLocation - object.AbsolutePosition
			local percentage = math.clamp(relativePosition.X / bar.AbsoluteSize.X,0,1)
			local rawNumber = getNumberFromPercentage(percentage)
			box.Text = tostring(math.floor(rawNumber))
			handlePositioning(percentage)
			handle(rawNumber)
		end
	end)
	
	box.FocusLost:Connect(rescale)
	box.Changed:Connect(function()
		if(not holding and (box.Text ~= lastText) and (box.Text ~= "")) then
			if(not box:IsFocused()) then
				rescale()
			end
		end
	end)

	box.Text = tostring(default)
	return {
		set = function(self,new)
			box.Text = tostring(math.floor(new))
			rescale()
		end,
	}
end

return slider]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a6b</UniqueId>
								</Properties>
							</Item>
							<Item class="ModuleScript" referent="RBX93e1b73b90f841d6bf735c21d2830ebf">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">toggle</string>
									<string name="ScriptGuid">{F2DBC042-321A-4D0D-BBFB-67F4E665A21B}</string>
									<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: toggle.lua
-- Description: Toggle ui controller

local toggle = {}
local tweenService = game:GetService("TweenService")
local length,style = 0.16,Enum.EasingStyle.Linear
local tweenInfo = TweenInfo.new(length,style)
local offset = 3

function toggle.new(object,default,callback)
	local container = object:WaitForChild("Toggle")
	local zone = container:WaitForChild("Zone")
	local switch = container:WaitForChild("Rounded")
	local state = default

	local handle = function(doCall)
		tweenService:Create(container,tweenInfo,{["BackgroundColor3"] = (state and Color3.fromRGB(72,175,240) or Color3.fromRGB(171,171,171))}):Play()
		switch:TweenPosition(UDim2.new((state and 1 or 0),(state and -offset or (switch.AbsoluteSize.X + offset)),0.5,0),Enum.EasingDirection.InOut,style,length,true)
		if(doCall) then
			callback(state)
		end
	end

	zone.MouseButton1Click:Connect(function()
		state = not state
		handle(true)
	end)

	handle()
	return {
		set = function(self,new)
			self.value = new
			state = new
			handle(true)
		end
	}
end

return toggle]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a6c</UniqueId>
								</Properties>
							</Item>
							<Item class="ModuleScript" referent="RBX9eb76896d1c54f3fa22386e2c5c3fb4d">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">dropdown</string>
									<string name="ScriptGuid">{BA673289-D7B7-4DAF-940A-A3FECFB2CD48}</string>
									<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: dropdown.lua
-- Description: UI dropdown controller

local dropdown = {}

local newOption = function(text)
	local option = Instance.new("TextButton")
	local padding = Instance.new("UIPadding")

	option.Name = "Option"
	option.BackgroundColor3 = Color3.fromRGB(30,30,30)
	option.BackgroundTransparency = 1
	option.BorderColor3 = Color3.fromRGB(27,42,53)
	option.BorderSizePixel = 0
	option.Size = UDim2.new(1,-10,0,25)
	option.ZIndex = 15
	option.Font = Enum.Font.GothamSemibold
	option.Text = text
	option.TextColor3 = Color3.fromRGB(255,255,255)
	option.TextSize = 14
	option.TextXAlignment = Enum.TextXAlignment.Left

	padding.Parent = option
	padding.PaddingLeft = UDim.new(0,5)
	return option
end

local images = {
	[false] = "rbxassetid://8677555693",
	[true] = "rbxassetid://8677748645"
}

function dropdown.new(gui,options,callback,main)
	main = main or function() end
	local optionContainer = gui:WaitForChild("Dropdown"):WaitForChild("Options")
	local top = gui:WaitForChild("TopContainer")
	local button = gui:WaitForChild("Title"):WaitForChild("Drop")
	local selected = gui:WaitForChild("Title"):WaitForChild("Selected")
	local state,last = false,nil

	local setOpen = function()
		local key = tick()
		last = key
		button.Icon.Image = images[state]
		local set = function()
			top.Flat.Visible = state
			top.Background.ClipsDescendants = state
		end
		if(state) then
			set()
		end
		gui:TweenSize(UDim2.new(1,-10,0,(30 + (state and (25 * #options + (#options >= 2 and ((#options - 1)*3) or 0)) or 0))),Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.25,true,function()
			if(last == key and (not state)) then
				set()
			end
		end)
	end

	local toggle = function()
		state = not state
		setOpen()
	end

	button.MouseButton1Click:Connect(toggle)
	for _,option in pairs(options) do
		local button = newOption(option)
		button.Parent = optionContainer
		button.MouseButton1Click:Connect(function()
			selected.Text = option
			toggle()
			callback(option)
		end)
		main(button)
	end

	selected.Text = options[1]
	setOpen()
	return {
		set = function(self,option)
			if(table.find(options,option)) then
				selected.Text = option
				callback(option)
			end
		end,
	}
end

return dropdown]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a6d</UniqueId>
								</Properties>
							</Item>
							<Item class="ModuleScript" referent="RBX80cde4daa94d4a8a8c607a51449b54a4">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">quickChatDropdown</string>
									<string name="ScriptGuid">{EE172558-D38A-41AB-83B8-4B77BEC7A0BD}</string>
									<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: quickChatDropdown.lua
-- Description: Quick chat individual option component function

local boxScale = {}
local textService = game:GetService("TextService")
local tweenService = game:GetService("TweenService")

function boxScale.new(box,callback)
	local scale = function()
		local text = (box.Text ~= "" and box.Text or box.PlaceholderText)
		local bounds = textService:GetTextSize(text,box.TextSize,box.Font,Vector2.new(box.AbsoluteSize.X-10,math.huge))
		box.Size = UDim2.new(1,0,0,bounds.Y + 10)
		callback(0)
	end
	box:GetPropertyChangedSignal("Text"):Connect(scale)
	scale()
end

local tween = function(object,properties,length)
	local info = TweenInfo.new(length,Enum.EasingStyle.Linear,Enum.EasingDirection.Out)
	tweenService:Create(object,info,properties):Play()
end

local quickChatDropdown = {}

local images = {
	[false] = "rbxassetid://8677555693",
	[true] = "rbxassetid://8677748645";
}

function quickChatDropdown.new(text,title,callback)
	local object = script:WaitForChild("Dropdown"):Clone()
	local container = object:WaitForChild("Container")
	local scroller = container:WaitForChild("Scroller")
	local box = scroller:WaitForChild("Box")
	local layout = scroller:WaitForChild("UIListLayout")
	local state = false
		
	scroller.Command.Text = ("Send in chat using '/%s'"):format(title)
	object.Title.Text = title
	box.Text = text

	local scale = function(length)
		local size = (state and UDim2.new(1,0,0,layout.AbsoluteContentSize.Y + 15) or UDim2.fromScale(1,0))
		tween(container,{
			Size = size
		},length)
		tween(object,{
			Size = UDim2.new(1,-10,0,30 + math.clamp(size.Y.Offset-5,0,math.huge))
		},length)
	end

	boxScale.new(box,scale)

	local button = object:WaitForChild("Title"):WaitForChild("Icon")
	button.MouseButton1Click:Connect(function()
		state = not state
		button.Image = images[state]
		scale(0.2)
	end)

	local options = {
		scroller:WaitForChild("Options"):WaitForChild("Save"),
		scroller:WaitForChild("Options"):WaitForChild("Delete")
	}

	local api = {
		setText = function(self,text)
			box.Text = text
		end,
		getText = function()
			return box.Text
		end,
		getBox = function()
			return box
		end,
		reparent = function(self,parent)
			object.Parent = parent
		end,
	}

	for _,option in pairs(options) do
		option.MouseButton1Click:Connect(function()
			callback(option.Name,api)
		end)
	end

	return api
end

return quickChatDropdown]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a6e</UniqueId>
								</Properties>
								<Item class="Frame" referent="RBX5d592a63ba85408089c9d9a1f9254891">
									<Properties>
										<bool name="Active">false</bool>
										<Vector2 name="AnchorPoint">
											<X>0</X>
											<Y>0</Y>
										</Vector2>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<bool name="AutoLocalize">true</bool>
										<token name="AutomaticSize">0</token>
										<Color3 name="BackgroundColor3">
											<R>1</R>
											<G>1</G>
											<B>1</B>
										</Color3>
										<float name="BackgroundTransparency">1</float>
										<Color3 name="BorderColor3">
											<R>0.105882362</R>
											<G>0.164705887</G>
											<B>0.207843155</B>
										</Color3>
										<token name="BorderMode">0</token>
										<int name="BorderSizePixel">0</int>
										<bool name="ClipsDescendants">false</bool>
										<bool name="Draggable">false</bool>
										<int name="LayoutOrder">0</int>
										<string name="Name">Dropdown</string>
										<Ref name="NextSelectionDown">null</Ref>
										<Ref name="NextSelectionLeft">null</Ref>
										<Ref name="NextSelectionRight">null</Ref>
										<Ref name="NextSelectionUp">null</Ref>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>1</YS>
											<YO>0</YO>
										</UDim2>
										<Ref name="RootLocalizationTable">null</Ref>
										<float name="Rotation">0</float>
										<bool name="Selectable">false</bool>
										<Ref name="SelectionImageObject">null</Ref>
										<UDim2 name="Size">
											<XS>1</XS>
											<XO>-10</XO>
											<YS>0</YS>
											<YO>30</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<int64 name="SourceAssetId">-1</int64>
										<token name="Style">0</token>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a0e</UniqueId>
										<bool name="Visible">true</bool>
										<int name="ZIndex">8</int>
									</Properties>
									<Item class="Frame" referent="RBXd78fd7bef6b144f9aeeda0533be912b4">
										<Properties>
											<bool name="Active">false</bool>
											<Vector2 name="AnchorPoint">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticSize">0</token>
											<Color3 name="BackgroundColor3">
												<R>0.117647059</R>
												<G>0.117647059</G>
												<B>0.117647059</B>
											</Color3>
											<float name="BackgroundTransparency">0</float>
											<Color3 name="BorderColor3">
												<R>0.105882362</R>
												<G>0.164705887</G>
												<B>0.207843155</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">0</int>
											<bool name="ClipsDescendants">true</bool>
											<bool name="Draggable">false</bool>
											<int name="LayoutOrder">0</int>
											<string name="Name">Container</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>25</YO>
											</UDim2>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<bool name="Selectable">false</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<token name="Style">0</token>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a0f</UniqueId>
											<bool name="Visible">true</bool>
											<int name="ZIndex">8</int>
										</Properties>
										<Item class="Frame" referent="RBX6f7d928976a94468a5474499887357f2">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>0.5</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">0</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<int name="LayoutOrder">0</int>
												<string name="Name">Scroller</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0.5</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>5</YO>
												</UDim2>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>-10</XO>
													<YS>1</YS>
													<YO>-5</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a10</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">8</int>
											</Properties>
											<Item class="UIListLayout" referent="RBX4004d429799845059834bcf2c44d8052">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<token name="FillDirection">1</token>
													<token name="HorizontalAlignment">0</token>
													<string name="Name">UIListLayout</string>
													<UDim name="Padding">
														<S>0</S>
														<O>5</O>
													</UDim>
													<token name="SortOrder">2</token>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b30</UniqueId>
													<token name="VerticalAlignment">1</token>
												</Properties>
											</Item>
											<Item class="TextBox" referent="RBXbf360b2504ea42bc9522332e420c9c32">
												<Properties>
													<bool name="Active">true</bool>
													<Vector2 name="AnchorPoint">
														<X>0</X>
														<Y>1</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>0.196078435</R>
														<G>0.196078435</G>
														<B>0.196078435</B>
													</Color3>
													<float name="BackgroundTransparency">0</float>
													<Color3 name="BorderColor3">
														<R>0.105882354</R>
														<G>0.164705887</G>
														<B>0.20784314</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">0</int>
													<bool name="ClearTextOnFocus">false</bool>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<token name="Font">18</token>
													<Font name="FontFace"></Font>
													<int name="LayoutOrder">0</int>
													<float name="LineHeight">1</float>
													<int name="MaxVisibleGraphemes">-1</int>
													<bool name="MultiLine">false</bool>
													<string name="Name">Box</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<Color3 name="PlaceholderColor3">
														<R>0.699999988</R>
														<G>0.699999988</G>
														<B>0.699999988</B>
													</Color3>
													<string name="PlaceholderText">Lorem ipsum dolor sit amet, consectetur adipiscing elit</string>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>0</YO>
													</UDim2>
													<bool name="RichText">false</bool>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">true</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<bool name="ShowNativeInput">true</bool>
													<UDim2 name="Size">
														<XS>1</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>56</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<string name="Text"></string>
													<Color3 name="TextColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<bool name="TextEditable">true</bool>
													<bool name="TextScaled">false</bool>
													<float name="TextSize">14</float>
													<Color3 name="TextStrokeColor3">
														<R>0</R>
														<G>0</G>
														<B>0</B>
													</Color3>
													<float name="TextStrokeTransparency">1</float>
													<float name="TextTransparency">0</float>
													<token name="TextTruncate">0</token>
													<bool name="TextWrapped">true</bool>
													<token name="TextXAlignment">0</token>
													<token name="TextYAlignment">0</token>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aaf</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">8</int>
												</Properties>
												<Item class="UIPadding" referent="RBX6ba0b9880c014672a6ea442ec101aca7">
													<Properties>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<string name="Name">UIPadding</string>
														<UDim name="PaddingBottom">
															<S>0</S>
															<O>5</O>
														</UDim>
														<UDim name="PaddingLeft">
															<S>0</S>
															<O>5</O>
														</UDim>
														<UDim name="PaddingRight">
															<S>0</S>
															<O>5</O>
														</UDim>
														<UDim name="PaddingTop">
															<S>0</S>
															<O>5</O>
														</UDim>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b3b</UniqueId>
													</Properties>
												</Item>
												<Item class="UICorner" referent="RBXa02979b67732480b8f35e8513f96d1e2">
													<Properties>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<UDim name="CornerRadius">
															<S>0</S>
															<O>8</O>
														</UDim>
														<string name="Name">UICorner</string>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b1c</UniqueId>
													</Properties>
												</Item>
											</Item>
											<Item class="UIPadding" referent="RBXd532f5e87ef24d178becd36000c7f73a">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<string name="Name">UIPadding</string>
													<UDim name="PaddingBottom">
														<S>0</S>
														<O>0</O>
													</UDim>
													<UDim name="PaddingLeft">
														<S>0</S>
														<O>0</O>
													</UDim>
													<UDim name="PaddingRight">
														<S>0</S>
														<O>0</O>
													</UDim>
													<UDim name="PaddingTop">
														<S>0</S>
														<O>5</O>
													</UDim>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b3c</UniqueId>
												</Properties>
											</Item>
											<Item class="Frame" referent="RBX1884eefdc4264913bb3fea76b1db7e3d">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">0</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">1</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<int name="LayoutOrder">0</int>
													<string name="Name">Options</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>0</YO>
													</UDim2>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>1</XS>
														<XO>-10</XO>
														<YS>0</YS>
														<YO>30</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<token name="Style">0</token>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a11</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">1</int>
												</Properties>
												<Item class="UIListLayout" referent="RBX49bc607b1f8a475b96537b83fcb4deb0">
													<Properties>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<token name="FillDirection">0</token>
														<token name="HorizontalAlignment">0</token>
														<string name="Name">UIListLayout</string>
														<UDim name="Padding">
															<S>0</S>
															<O>5</O>
														</UDim>
														<token name="SortOrder">2</token>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b31</UniqueId>
														<token name="VerticalAlignment">1</token>
													</Properties>
												</Item>
												<Item class="TextButton" referent="RBX469c4198d70e4d0bb131b6cfc60c3467">
													<Properties>
														<bool name="Active">true</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoButtonColor">true</bool>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>0.0392156877</R>
															<G>0.0392156877</G>
															<B>0.0392156877</B>
														</Color3>
														<float name="BackgroundTransparency">0</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">0</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<token name="Font">18</token>
														<Font name="FontFace"></Font>
														<int name="LayoutOrder">0</int>
														<float name="LineHeight">1</float>
														<int name="MaxVisibleGraphemes">-1</int>
														<bool name="Modal">false</bool>
														<string name="Name">Save</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<bool name="RichText">false</bool>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">true</bool>
														<bool name="Selected">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0.5</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>30</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<string name="Text">Save</string>
														<Color3 name="TextColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<bool name="TextScaled">false</bool>
														<float name="TextSize">14</float>
														<Color3 name="TextStrokeColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="TextStrokeTransparency">1</float>
														<float name="TextTransparency">0</float>
														<token name="TextTruncate">0</token>
														<bool name="TextWrapped">false</bool>
														<token name="TextXAlignment">0</token>
														<token name="TextYAlignment">1</token>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ac9</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">8</int>
													</Properties>
													<Item class="ImageLabel" referent="RBXf4063253f3ce4850911efbd1733959a9">
														<Properties>
															<bool name="Active">false</bool>
															<Vector2 name="AnchorPoint">
																<X>0</X>
																<Y>0.5</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">0</token>
															<Color3 name="BackgroundColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<float name="BackgroundTransparency">1</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">1</int>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<Content name="Image"><url>rbxassetid://6035067857</url></Content>
															<Color3 name="ImageColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<Vector2 name="ImageRectOffset">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<Vector2 name="ImageRectSize">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<float name="ImageTransparency">0</float>
															<int name="LayoutOrder">0</int>
															<string name="Name">Icon</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<UDim2 name="Position">
																<XS>0</XS>
																<XO>-25</XO>
																<YS>0.5</YS>
																<YO>0</YO>
															</UDim2>
															<token name="ResampleMode">0</token>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<token name="ScaleType">0</token>
															<bool name="Selectable">false</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<UDim2 name="Size">
																<XS>0</XS>
																<XO>20</XO>
																<YS>0</YS>
																<YO>20</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<Rect2D name="SliceCenter">
																<min>
																	<X>0</X>
																	<Y>0</Y>
																</min>
																<max>
																	<X>0</X>
																	<Y>0</Y>
																</max>
															</Rect2D>
															<float name="SliceScale">1</float>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UDim2 name="TileSize">
																<XS>1</XS>
																<XO>0</XO>
																<YS>1</YS>
																<YO>0</YO>
															</UDim2>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a2f</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">9</int>
														</Properties>
													</Item>
													<Item class="UICorner" referent="RBXefa8b142a1b342c3861506004c8edcfb">
														<Properties>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<UDim name="CornerRadius">
																<S>0</S>
																<O>8</O>
															</UDim>
															<string name="Name">UICorner</string>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b1d</UniqueId>
														</Properties>
													</Item>
													<Item class="UIPadding" referent="RBXc625d915c08c4499b96f40aae8538fe6">
														<Properties>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<string name="Name">UIPadding</string>
															<UDim name="PaddingBottom">
																<S>0</S>
																<O>0</O>
															</UDim>
															<UDim name="PaddingLeft">
																<S>0</S>
																<O>30</O>
															</UDim>
															<UDim name="PaddingRight">
																<S>0</S>
																<O>0</O>
															</UDim>
															<UDim name="PaddingTop">
																<S>0</S>
																<O>0</O>
															</UDim>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b3d</UniqueId>
														</Properties>
													</Item>
												</Item>
												<Item class="TextButton" referent="RBX9021c26c0b2a46bdbaddffbfab96e2da">
													<Properties>
														<bool name="Active">true</bool>
														<Vector2 name="AnchorPoint">
															<X>0</X>
															<Y>0</Y>
														</Vector2>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<bool name="AutoButtonColor">true</bool>
														<bool name="AutoLocalize">true</bool>
														<token name="AutomaticSize">0</token>
														<Color3 name="BackgroundColor3">
															<R>0.0392156877</R>
															<G>0.0392156877</G>
															<B>0.0392156877</B>
														</Color3>
														<float name="BackgroundTransparency">0</float>
														<Color3 name="BorderColor3">
															<R>0.105882362</R>
															<G>0.164705887</G>
															<B>0.207843155</B>
														</Color3>
														<token name="BorderMode">0</token>
														<int name="BorderSizePixel">0</int>
														<bool name="ClipsDescendants">false</bool>
														<bool name="Draggable">false</bool>
														<token name="Font">18</token>
														<Font name="FontFace"></Font>
														<int name="LayoutOrder">0</int>
														<float name="LineHeight">1</float>
														<int name="MaxVisibleGraphemes">-1</int>
														<bool name="Modal">false</bool>
														<string name="Name">Delete</string>
														<Ref name="NextSelectionDown">null</Ref>
														<Ref name="NextSelectionLeft">null</Ref>
														<Ref name="NextSelectionRight">null</Ref>
														<Ref name="NextSelectionUp">null</Ref>
														<UDim2 name="Position">
															<XS>0</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>0</YO>
														</UDim2>
														<bool name="RichText">false</bool>
														<Ref name="RootLocalizationTable">null</Ref>
														<float name="Rotation">0</float>
														<bool name="Selectable">true</bool>
														<bool name="Selected">false</bool>
														<Ref name="SelectionImageObject">null</Ref>
														<UDim2 name="Size">
															<XS>0.5</XS>
															<XO>0</XO>
															<YS>0</YS>
															<YO>30</YO>
														</UDim2>
														<token name="SizeConstraint">0</token>
														<int64 name="SourceAssetId">-1</int64>
														<token name="Style">0</token>
														<BinaryString name="Tags"></BinaryString>
														<string name="Text">Delete</string>
														<Color3 name="TextColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<bool name="TextScaled">false</bool>
														<float name="TextSize">14</float>
														<Color3 name="TextStrokeColor3">
															<R>1</R>
															<G>1</G>
															<B>1</B>
														</Color3>
														<float name="TextStrokeTransparency">1</float>
														<float name="TextTransparency">0</float>
														<token name="TextTruncate">0</token>
														<bool name="TextWrapped">false</bool>
														<token name="TextXAlignment">0</token>
														<token name="TextYAlignment">1</token>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025aca</UniqueId>
														<bool name="Visible">true</bool>
														<int name="ZIndex">8</int>
													</Properties>
													<Item class="ImageLabel" referent="RBX77b166a9112043dca1251cc1124a6140">
														<Properties>
															<bool name="Active">false</bool>
															<Vector2 name="AnchorPoint">
																<X>0</X>
																<Y>0.5</Y>
															</Vector2>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<bool name="AutoLocalize">true</bool>
															<token name="AutomaticSize">0</token>
															<Color3 name="BackgroundColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<float name="BackgroundTransparency">1</float>
															<Color3 name="BorderColor3">
																<R>0.105882362</R>
																<G>0.164705887</G>
																<B>0.207843155</B>
															</Color3>
															<token name="BorderMode">0</token>
															<int name="BorderSizePixel">1</int>
															<bool name="ClipsDescendants">false</bool>
															<bool name="Draggable">false</bool>
															<Content name="Image"><url>http://www.roblox.com/asset/?id=6022668885</url></Content>
															<Color3 name="ImageColor3">
																<R>1</R>
																<G>1</G>
																<B>1</B>
															</Color3>
															<Vector2 name="ImageRectOffset">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<Vector2 name="ImageRectSize">
																<X>0</X>
																<Y>0</Y>
															</Vector2>
															<float name="ImageTransparency">0</float>
															<int name="LayoutOrder">0</int>
															<string name="Name">Icon</string>
															<Ref name="NextSelectionDown">null</Ref>
															<Ref name="NextSelectionLeft">null</Ref>
															<Ref name="NextSelectionRight">null</Ref>
															<Ref name="NextSelectionUp">null</Ref>
															<UDim2 name="Position">
																<XS>0</XS>
																<XO>-25</XO>
																<YS>0.5</YS>
																<YO>0</YO>
															</UDim2>
															<token name="ResampleMode">0</token>
															<Ref name="RootLocalizationTable">null</Ref>
															<float name="Rotation">0</float>
															<token name="ScaleType">0</token>
															<bool name="Selectable">false</bool>
															<Ref name="SelectionImageObject">null</Ref>
															<UDim2 name="Size">
																<XS>0</XS>
																<XO>20</XO>
																<YS>0</YS>
																<YO>20</YO>
															</UDim2>
															<token name="SizeConstraint">0</token>
															<Rect2D name="SliceCenter">
																<min>
																	<X>0</X>
																	<Y>0</Y>
																</min>
																<max>
																	<X>0</X>
																	<Y>0</Y>
																</max>
															</Rect2D>
															<float name="SliceScale">1</float>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UDim2 name="TileSize">
																<XS>1</XS>
																<XO>0</XO>
																<YS>1</YS>
																<YO>0</YO>
															</UDim2>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a30</UniqueId>
															<bool name="Visible">true</bool>
															<int name="ZIndex">9</int>
														</Properties>
													</Item>
													<Item class="UICorner" referent="RBX265a5acfd321481186de24a8d30ab4e4">
														<Properties>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<UDim name="CornerRadius">
																<S>0</S>
																<O>8</O>
															</UDim>
															<string name="Name">UICorner</string>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b1e</UniqueId>
														</Properties>
													</Item>
													<Item class="UIPadding" referent="RBX002cab54ce8d4abc968ed650e94f6271">
														<Properties>
															<BinaryString name="AttributesSerialize"></BinaryString>
															<string name="Name">UIPadding</string>
															<UDim name="PaddingBottom">
																<S>0</S>
																<O>0</O>
															</UDim>
															<UDim name="PaddingLeft">
																<S>0</S>
																<O>30</O>
															</UDim>
															<UDim name="PaddingRight">
																<S>0</S>
																<O>0</O>
															</UDim>
															<UDim name="PaddingTop">
																<S>0</S>
																<O>0</O>
															</UDim>
															<int64 name="SourceAssetId">-1</int64>
															<BinaryString name="Tags"></BinaryString>
															<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b3e</UniqueId>
														</Properties>
													</Item>
												</Item>
											</Item>
											<Item class="TextLabel" referent="RBX72292fd57a9f486d8dd27a101b272271">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0</X>
														<Y>0</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">1</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<token name="Font">18</token>
													<Font name="FontFace"></Font>
													<int name="LayoutOrder">0</int>
													<float name="LineHeight">1</float>
													<int name="MaxVisibleGraphemes">-1</int>
													<string name="Name">Command</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>0</YO>
													</UDim2>
													<bool name="RichText">false</bool>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>1</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>20</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<string name="Text">Send in chat using &apos;/1&apos;</string>
													<Color3 name="TextColor3">
														<R>0.784313738</R>
														<G>0.784313738</G>
														<B>0.784313738</B>
													</Color3>
													<bool name="TextScaled">false</bool>
													<float name="TextSize">14</float>
													<Color3 name="TextStrokeColor3">
														<R>0</R>
														<G>0</G>
														<B>0</B>
													</Color3>
													<float name="TextStrokeTransparency">1</float>
													<float name="TextTransparency">0</float>
													<token name="TextTruncate">0</token>
													<bool name="TextWrapped">false</bool>
													<token name="TextXAlignment">0</token>
													<token name="TextYAlignment">1</token>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ae1</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">8</int>
												</Properties>
												<Item class="UIPadding" referent="RBX8215cd56840e401c9e7473dea88367b0">
													<Properties>
														<BinaryString name="AttributesSerialize"></BinaryString>
														<string name="Name">UIPadding</string>
														<UDim name="PaddingBottom">
															<S>0</S>
															<O>0</O>
														</UDim>
														<UDim name="PaddingLeft">
															<S>0</S>
															<O>5</O>
														</UDim>
														<UDim name="PaddingRight">
															<S>0</S>
															<O>0</O>
														</UDim>
														<UDim name="PaddingTop">
															<S>0</S>
															<O>0</O>
														</UDim>
														<int64 name="SourceAssetId">-1</int64>
														<BinaryString name="Tags"></BinaryString>
														<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b3f</UniqueId>
													</Properties>
												</Item>
											</Item>
										</Item>
									</Item>
									<Item class="TextLabel" referent="RBXdfeb772c4e4f4df6b3d439c3319841c5">
										<Properties>
											<bool name="Active">true</bool>
											<Vector2 name="AnchorPoint">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticSize">0</token>
											<Color3 name="BackgroundColor3">
												<R>0.0784313753</R>
												<G>0.0784313753</G>
												<B>0.0784313753</B>
											</Color3>
											<float name="BackgroundTransparency">0</float>
											<Color3 name="BorderColor3">
												<R>0.105882354</R>
												<G>0.164705887</G>
												<B>0.20784314</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">0</int>
											<bool name="ClipsDescendants">false</bool>
											<bool name="Draggable">false</bool>
											<token name="Font">18</token>
											<Font name="FontFace"></Font>
											<int name="LayoutOrder">0</int>
											<float name="LineHeight">1</float>
											<int name="MaxVisibleGraphemes">-1</int>
											<string name="Name">Title</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>0</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<bool name="RichText">false</bool>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<bool name="Selectable">true</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>30</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<string name="Text">1</string>
											<Color3 name="TextColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<bool name="TextScaled">false</bool>
											<float name="TextSize">14</float>
											<Color3 name="TextStrokeColor3">
												<R>0</R>
												<G>0</G>
												<B>0</B>
											</Color3>
											<float name="TextStrokeTransparency">1</float>
											<float name="TextTransparency">0</float>
											<token name="TextTruncate">0</token>
											<bool name="TextWrapped">false</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ae2</UniqueId>
											<bool name="Visible">true</bool>
											<int name="ZIndex">8</int>
										</Properties>
										<Item class="UICorner" referent="RBXe361a581a9b342ecaced5aba6252bafb">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<UDim name="CornerRadius">
													<S>0</S>
													<O>8</O>
												</UDim>
												<string name="Name">UICorner</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b1f</UniqueId>
											</Properties>
										</Item>
										<Item class="ImageButton" referent="RBX02022ccefb8f4b9f864e7db71fbbc644">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>1</X>
													<Y>0.5</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoButtonColor">true</bool>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<Content name="HoverImage"><null></null></Content>
												<Content name="Image"><url>rbxassetid://8677555693</url></Content>
												<Color3 name="ImageColor3">
													<R>1</R>
													<G>1</G>
													<B>1</B>
												</Color3>
												<Vector2 name="ImageRectOffset">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<Vector2 name="ImageRectSize">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<float name="ImageTransparency">0</float>
												<int name="LayoutOrder">0</int>
												<bool name="Modal">false</bool>
												<string name="Name">Icon</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>1</XS>
													<XO>-5</XO>
													<YS>0.5</YS>
													<YO>0</YO>
												</UDim2>
												<Content name="PressedImage"><null></null></Content>
												<token name="ResampleMode">0</token>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<token name="ScaleType">0</token>
												<bool name="Selectable">false</bool>
												<bool name="Selected">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>0</XS>
													<XO>30</XO>
													<YS>0</YS>
													<YO>30</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<Rect2D name="SliceCenter">
													<min>
														<X>0</X>
														<Y>0</Y>
													</min>
													<max>
														<X>0</X>
														<Y>0</Y>
													</max>
												</Rect2D>
												<float name="SliceScale">1</float>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<UDim2 name="TileSize">
													<XS>1</XS>
													<XO>0</XO>
													<YS>1</YS>
													<YO>0</YO>
												</UDim2>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a13</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">10</int>
											</Properties>
										</Item>
									</Item>
								</Item>
							</Item>
						</Item>
						<Item class="ModuleScript" referent="RBX86abdeb2bd9246cfa37b380181f14051">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">settingsMenu</string>
								<string name="ScriptGuid">{F8AE6CBD-E6DF-4C73-9317-10ED4854BBA3}</string>
								<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: settingsMenu.lua
-- Description: Settings menu for the GUI controller

local constructors = {}
local folder = script.Parent:WaitForChild("constructors")
local starterGui = game:GetService("StarterGui")
local topbar = require(script:WaitForChild("topbar"):WaitForChild("icons"))

constructors.dropdown = require(folder:WaitForChild("dropdown"))
constructors.toggle = require(folder:WaitForChild("toggle"))
constructors.slider = require(folder:WaitForChild("slider"))
constructors.quickChatDropdown = require(folder:WaitForChild("quickChatDropdown"))

return function(environment)
	local quickChatEnabled = environment.config.Messages.QuickChat

	local ui = environment.gui:WaitForChild("Settings")
	local config = environment.config
	local state = false

	environment.settingChanged = environment.signal.new()

	function environment:toggleSettingsMenu()
		state = not state
		environment.container.Visible = not state
		local position = state and UDim2.new(0.5,0,0.5,0) or UDim2.new(0.5,0,-1.5,0)
		ui:TweenPosition(position,Enum.EasingDirection.Out,Enum.EasingStyle.Linear,0.16,true)
		environment:setChatLocked(state)
	end

	local pages = {"UI","BubbleChat","QuickChat"}
	if(not quickChatEnabled) then
		table.remove(pages,3)
	end

	local pageContainer = ui:WaitForChild("Pages")
	local navigation = pageContainer:WaitForChild("Navigation")
	local args = {Enum.EasingDirection.In,Enum.EasingStyle.Quad,0.16,true}
	local outPosition = UDim2.fromScale(-1,0)
	local inPosition = UDim2.fromScale(0,0)

	local selectPage = function(page)
		navigation:TweenPosition(outPosition,unpack(args))
		page.Position = UDim2.fromScale(1,0)
		page:TweenPosition(inPosition,unpack(args))
	end

	local back = function(page)
		navigation:TweenPosition(inPosition,unpack(args))
		page:TweenPosition(UDim2.fromScale(1,0),unpack(args))
	end

	for _,pageName in pairs(pages) do
		local button = navigation:WaitForChild("Content"):WaitForChild(pageName)
		button.MouseButton1Click:Connect(function()
			selectPage(pageContainer[pageName])
		end)
		pageContainer:WaitForChild(pageName):WaitForChild("Title"):WaitForChild("Back").MouseButton1Click:Connect(function()
			back(pageContainer[pageName])
		end)
	end

	local getTableFromIdx = function(tbl,idx)
		local ret = {}
		for _,option in pairs(tbl) do
			table.insert(ret,option[idx])
		end
		return ret
	end

	local getFontsList = function(priority)
		local list = Enum.Font:GetEnumItems()
		local key = table.find(list,priority)
		table.remove(list,key)
		table.insert(list,1,priority)
		local ret = {}
		for k,v in pairs(list) do
			ret[k] = v.Name
		end
		return ret
	end

	local animationStyles = {}
	for _,style in pairs(Enum.EasingStyle:GetEnumItems()) do
		table.insert(animationStyles,{style.Name,style})
	end
	environment.bubbleChatAnimationStyle = environment.config.BubbleChat.Config.EasingStyle

	local userConfig = environment.network:invoke("fetchUserConfig")

	local getConfig = function(path,name)
		local idx = userConfig[path] or {}
		return idx[name]
	end
	local apis = {["UI"] = {},["BubbleChat"] = {}}
	environment.apis = apis

	local newSetting = function(class,path,...)
		local changed = environment.signal.new()
		local setting

		if(class == "slider") then
			local limit,api,value = unpack({...})
			setting = {
				value = value,
				["type"] = "number",
				["limits"] = limit,
				changed = changed
			} 

			function setting:set(new)
				api:set(new)
			end
		elseif(class == "toggle") then
			local api,value = unpack({...})
			setting = {
				value = value,
				["type"] = "boolean",
				changed = changed
			}

			function setting:set(new)
				api:set(new)
			end
		elseif(class == "dropdown") then
			local api,value,list = unpack({...})
			setting = {
				value = value,
				["type"] = "string",
				changed = changed,
				options = list
			}

			function setting:set(new)
				api:set(new)
			end
		end

		environment.settingChanged:Connect(function(a,b,new)
			if(path[1] == a and (path[2] == b)) then
				if(setting.value ~= new) then
					setting.value = new
					changed:Fire(new)
				end
			end
		end)

		return setting
	end

	local guiOptions = { -- I'm so sorry for what happened below
		UI = {
			Resizable = function(object)
				local default = config.UI.Resizable
				local last = getConfig("UI","Resizable")
				if(typeof(last) ~= "boolean") then
					last = default
				end

				local button = environment.resizeButton
				local api = constructors.toggle.new(object,last,function(new)
					button.Visible = new
					environment.settingChanged:Fire("UI","Resizable",new)
					environment.network:invoke("writeConfig","UI","Resizable",new)
				end)

				if(last) then
					button.Visible = true
				end

				apis["UI"]["Resizable"] = newSetting("toggle",{"UI","Resizable"},api,last)
			end,
			Roundness = function(object)
				local default = config.UI.Rounding
				local last = getConfig("UI","Roundness") or default
				if(typeof(last) ~= "number") then
					last = default
				end

				local api = constructors.slider.new(object,0,12,last,function(new)
					if(environment.refreshRounding) then
						config.UI.Rounding = new
						environment:refreshRounding()
						environment.settingChanged:Fire("UI","Roundness",new)
						environment.network:invoke("writeConfig","UI","Roundness",new)
					end
				end)

				apis["UI"]["Roundness"] = newSetting("slider",{"UI","Roundness"},{0,12},api,last)
			end,
			TextSize = function(object)
				local default = config.UI.BaseTextSize
				local last = getConfig("UI","TextSize") or default
				if(typeof(last) ~= "number") then
					last = default
				end

				local api = constructors.slider.new(object,10,20,math.clamp(last,10,20),function(new)
					if(environment.setTextSize) then
						config.UI.BaseTextSize = new
						environment:setTextSize(new)
						environment.settingChanged:Fire("UI","TextSize",new)
						environment.network:invoke("writeConfig","UI","TextSize",new)
					end
				end)

				apis["UI"]["TextSize"] = newSetting("slider",{"UI","TextSize"},{10,20},api,last)
			end
		},
		BubbleChat = {
			Enabled = function(object)
				local chatDefault = (config.BubbleChat.Enabled or game:GetService("Chat").BubbleChatEnabled)
				local defaultUser = getConfig("BubbleChat","Enabled")
				local default
				if(defaultUser == nil) then
					default = chatDefault
				else
					default = defaultUser
				end

				environment.bubbleChatEnabled = default
				local api = constructors.toggle.new(object,default,function(new)
					environment.bubbleChatEnabled = new
					if(environment.bubbleChatContainer) then
						environment.bubbleChatContainer.Enabled = new
					end
					environment.settingChanged:Fire("BubbleChat","Enabled",new)
					environment.network:invoke("writeConfig","BubbleChat","Enabled",new)
				end)

				api:set(default)
				apis["BubbleChat"]["Resizable"] = newSetting("toggle",{"BubbleChat","Enabled"},api,default)
			end,
			AnimationStyle = function(object)
				local dropdownOptions = getTableFromIdx(animationStyles,1)
				local dropdownTranslations = getTableFromIdx(animationStyles,2)
				local from = function(optionName)
					return dropdownTranslations[table.find(dropdownOptions,optionName)]
				end
				local default = getConfig("BubbleChat","AnimationStyle")

				local api = constructors.dropdown.new(object,dropdownOptions,function(picked)
					local selection = from(picked)
					environment.bubbleChatAnimationStyle = selection
					environment.network:invoke("writeConfig","BubbleChat","AnimationStyle",picked)
				end)
				if(default ~= nil) then
					environment.bubbleChatAnimationStyle = from(default)
					api:set(default)
				end
				apis["BubbleChat"]["AnimationStyle"] = newSetting("dropdown",{"BubbleChat","AnimationStyle"},api,default,dropdownOptions)
			end,
			FadeoutTime = function(object)
				local default
				default = getConfig("BubbleChat","FadeoutTime")
				if(default == nil) then
					default = environment.config.BubbleChat.Config.FadeoutTime
				else
					environment.config.BubbleChat.Config.FadeoutTime = default	
				end

				local api = constructors.slider.new(object,3,25,default,function(new)
					environment.config.BubbleChat.Config.FadeoutTime = new	
					environment.settingChanged:Fire("BubbleChat","FadeoutTime",new)
					environment.network:invoke("writeConfig","BubbleChat","FadeoutTime",new)
				end)

				apis["BubbleChat"]["FadeoutTime"] = newSetting("slider",{"UI","FadeoutTime"},{3,25},api,default)
			end,
			["Font"] = function(object)
				local default
				default = getConfig("BubbleChat","Font")
				if(default == nil) then
					default = environment.config.BubbleChat.Config.BubbleFont
				else
					default = Enum.Font[default]
				end

				environment.config.BubbleChat.Config.Font = default

				local fonts = getFontsList(default)
				local api = constructors.dropdown.new(object,fonts,function(picked)
					local currentFont = Enum.Font[picked]
					environment.config.BubbleChat.Config.BubbleFont = currentFont
					environment.settingChanged:Fire("BubbleChat","Font",picked)
					environment.network:invoke("writeConfig","BubbleChat","Font",picked)
				end,function(object)
					object.Font = Enum.Font[object.text]
				end)

				apis["BubbleChat"]["Font"] = newSetting("dropdown",{"BubbleChat","Font"},api,fonts[1],fonts)
			end,
		},
		QuickChat = {}
	}

	if(not quickChatEnabled) then
		guiOptions["QuickChat"] = nil
		navigation:WaitForChild("Content"):WaitForChild("QuickChat"):Destroy()
	end

	if(not config.BubbleChat.Enabled) then
		guiOptions["BubbleChat"] = nil
		navigation:WaitForChild("Content"):WaitForChild("BubbleChat"):Destroy()
	end

	for pageName,opts in pairs(guiOptions) do
		local page = pageContainer:WaitForChild(pageName)
		local scroller = page:WaitForChild("Scroller")
		for optionName,callback in pairs(opts) do
			task.spawn(callback,scroller:WaitForChild(optionName))
		end
		local listLayout = scroller:FindFirstChildOfClass("UIListLayout")
		if(listLayout) then
			local rescale = function()
				scroller.CanvasSize = UDim2.fromOffset(0,listLayout.AbsoluteContentSize.Y)
			end
			listLayout.Changed:Connect(rescale)
			rescale()
		end
	end

	task.spawn(topbar,environment)

	navigation:WaitForChild("Title"):WaitForChild("Close").MouseButton1Click:Connect(function()
		environment.settingIcon:deselect()
	end)

	if(quickChatEnabled) then
		local slots = {}
		local apis = {}

		for i = 1,20 do
			local text = (getConfig("QuickChats",i) or "")
			slots[i] = text

			local callback = function(option,api)
				if(option == "Save") then
					local new = environment.network:invoke("writeConfig","QuickChats",i,api:getText())
					slots[i] = new
					api:setText(new)
				elseif(option == "Delete") then
					slots[i] = ""
					api:setText(environment.network:invoke("writeConfig","QuickChats",i,""))
				end
			end
			local api = constructors.quickChatDropdown.new(text,tostring(i),callback)

			apis[i] = function(text)
				api:setText(text)
				callback("Save",api)
			end

			api:reparent(pageContainer:WaitForChild("QuickChat"):WaitForChild("Scroller"))
			environment.utility:clampTextLimit(api:getBox(),config.Messages.MaximumLength)
		end

		function environment:getQuickChatSlot(i)
			return slots[i]
		end

		function environment:saveToSlot(i,text)
			apis[i](text)
		end
	end
end]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a6f</UniqueId>
							</Properties>
							<Item class="Folder" referent="RBXc8a3bcb52f21445ba96d60afe666b4d5">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<string name="Name">topbar</string>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259b2</UniqueId>
								</Properties>
								<Item class="ModuleScript" referent="RBX7df54675aa25462db38e4f0ea04d5607">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">topbarPlus</string>
										<string name="ScriptGuid">{3A736161-C043-4DEA-A32B-6D35666544A0}</string>
										<ProtectedString name="Source"><![CDATA[--[[ icon:header
[themes]: https://1foreverhd.github.io/TopbarPlus/features/#themes
[set method]: https://1foreverhd.github.io/TopbarPlus/api/icon/#set

## Construtors

#### new
```lua
local icon = Icon.new()
```
Constructs an empty ``32x32`` icon on the topbar.

----



## Methods

#### set
{chainable}
```lua
icon:set(settingName, value, iconState)
```
Applies a specific setting to an icon. All settings can be found [here](https://github.com/1ForeverHD/TopbarPlus/blob/main/src/Icon/Themes/Default.lua). If the setting falls under the 'toggleable' category then an iconState can be specified. For most scenarious it's recommended instead to apply settings using [themes].

----
#### get
```lua
local value = icon:get(settingName, iconState)
```
Retrieves the given settings value. If the setting falls under the 'toggleable' category then an iconState can be specified.

----
#### getToggleState
```lua
local selectedOrDeselectedString = icon:getToggleState()
```
Returns the current toggleState, either "deselected" or "selected".

----
#### setTheme
{chainable}
```lua
icon:setTheme(theme)
```
Applies a theme to the given icon. See [themes] for more information.

----
#### setEnabled
{chainable}
```lua
icon:setEnabled(bool)
```
When set to ``false``, the icon will be disabled and hidden.

----
#### setName
{chainable}
```lua
icon:setName(string)
```
Associates the given name to the icon which enables it to be retrieved with ``IconController.getIcon(name)``.

----
#### setProperty
{chainable}
```lua
icon:setProperty(propertyName, value)
```
An alternative way of doing ``zone[propertyName] = value``. This enables the easy-configuration of icon properties within chained methods.

----
#### select
{chainable}
```lua
icon:select()
```
Selects the icon (as if it were clicked once).

----
#### deselect
{chainable}
```lua
icon:deselect()
```
Deselects the icon (as if it were clicked, then clicked again).

----
#### notify
{chainable}
```lua
icon:notify(clearNoticeEvent)
```
Prompts a notice bubble which accumulates the further it is prompted. If the icon belongs to a dropdown or menu, then the notice will appear on the parent icon when the parent icon is deselected.

----
#### clearNotices
{chainable}
```lua
icon:clearNotices()
```

----
#### disableStateOverlay
{chainable}
```lua
icon:disableStateOverlay(bool)
```
When set to ``true``, disables the shade effect which appears when the icon is pressed and released.

----
#### convertLabelToNumberSpinner
{chainable}
```lua
icon:convertLabelToNumberSpinner(numberSpinner)
```
Takes a [NumberSpinner](https://devforum.roblox.com/t/numberspinner-module/1105961) object (by boatbomber) and converts it into the icons label.

Example usage:

```lua
Icon.new()
    :setName("CashSpinnerIcon")
    :setRight()
    :lock()
    :setSize(100, 32)
    :give(function(icon)
        local NumberSpinner = require(replicatedStorage.NumberSpinner)
        local labelSpinner = NumberSpinner.new()
        icon:convertLabelToNumberSpinner(labelSpinner)
        labelSpinner.Name = "LabelSpinner"
        labelSpinner.Decimals = 3
        labelSpinner.Duration = 0.25
        coroutine.wrap(function()
            while wait(0.5) do
                labelSpinner.Value = math.random(100000)/1000
            end
        end)()
    end)
```

----
#### setImage
{chainable} {toggleable}
```lua
icon:setImage(imageId, iconState)
```
Applies an image to the icon based on the given ``imaageId``. ``imageId`` can be an assetId or a complete asset string.

----
#### setLabel
{chainable} {toggleable}
```lua
icon:setLabel(text, iconState)
```

----
#### setOrder
{chainable} {toggleable}
```lua
icon:setOrder(order, iconState)
```

----
#### setCornerRadius
{chainable} {toggleable}
```lua
icon:setCornerRadius(scale, offset, iconState)
```

----
#### setLeft
{chainable} {toggleable}
```lua
icon:setLeft(iconState)
```

----
#### setMid
{chainable} {toggleable}
```lua
icon:setMid(iconState)
```

----
#### setRight
{chainable} {toggleable}
```lua
icon:setRight(iconState)
```

----
#### setImageYScale
{chainable} {toggleable}
```lua
icon:setImageYScale(YScale, iconState)
```
Defines the proportional space the icons image takes up within the icons container.

----
#### setImageRatio
{chainable} {toggleable}
```lua
icon:setImageRatio(ratio, iconState)
```
Defines the x:y ratio dimensions as a number. By default ``ratio`` is ``1.00``.

----
#### setLabelYScale
{chainable} {toggleable}
```lua
icon:setLabelYScale(YScale, iconState)
```
Defines how large label text appears.By default ``YScale`` is ``0.45``.

----
#### setBaseZIndex
{chainable} {toggleable}
```lua
icon:setBaseZIndex(ZIndex, iconState)
```
Calculates the difference between the existing baseZIndex (i.e. ``instances.iconContainer.ZIndex``) and new value, then updates the ZIndex of all objects within the icon accoridngly using this difference.

----
#### setSize
{chainable} {toggleable}
```lua
icon:setSize(XOffset, YOffset, iconState)
```
Determines the icons container size. By default ``XOffset`` and ``YOffset`` are ``32``.

----
#### bindToggleItem
{chainable}
```lua
icon:bindToggleItem(guiObjectOrLayerCollector)
```
Binds a GuiObject or LayerCollector to appear and disappeared when the icon is toggled.

----
#### unbindToggleItem
{chainable}
```lua
icon:unbindToggleItem(guiObjectOrLayerCollector)
```
Unbinds the given GuiObject or LayerCollector from the toggle.

----
#### bindEvent
{chainable}
```lua
icon:bindEvent(iconEventName, eventFunction)
```
Connects to an [icon event](https://1foreverhd.github.io/TopbarPlus/api/icon/#events) based upon the given ``iconEventName`` and call ``eventFunction`` with arguments ``(self, ...)`` when the event is triggered.

----
#### unbindEvent
{chainable}
```lua
icon:unbindEvent(iconEventName)
```
Unbinds the connection of the associated ``iconEventName``.

----
#### bindToggleKey
{chainable}
```lua
icon:bindToggleKey(keyCodeEnum)
```
Binds a [keycode](https://developer.roblox.com/en-us/api-reference/enum/KeyCode) which toggles the icon when pressed.

----
#### unbindToggleKey
{chainable}
```lua
icon:unbindToggleKey(keyCodeEnum)
```
Unbinds the given keycode.

----
#### give
{chainable}
```lua
icon:give(userdata)
```
Passes the given userdata to the Icons maid to be destroyed/disconnected on the icons destruction. If a function is passed, it will be executed right away with its self (the icon) being passed as the first argument. The return value is then given to the maid (instead of the function).

----
#### lock
{chainable}
```lua
icon:lock()
```
Prevents the icon from being pressed and toggled.

----
#### unlock
{chainable}
```lua
icon:unlock()
```
Enables the icon to be pressed and toggled.

----
#### setTopPadding
{chainable}
```lua
icon:setTopPadding(offset, scale)
```
The gap between the top of the screen and the icon.

----
#### setTip
{chainable}
```lua
icon:setTip(text)
```
Sets a tip. To remove, pass ``nil`` as ``text``.

----
#### setCaption
{chainable}
```lua
icon:setCaption(text)
```
Sets a caption. To remove, pass ``nil`` as ``text``.

----
#### join
{chainable}
```lua
icon:join(parentIcon, featureName)
```
Parents the icon to the given parentIcon under the specified feature, either "dropdown" or "menu".

----
#### leave
{chainable}
```lua
icon:leave()
```
Unparents an icon from a parentIcon if it belongs to a dropdown or menu.

----
#### setDropdown
{chainable}
```lua
icon:setDropdown(arrayOfIcons)
```
Creates a vertical dropdown based upon the given ``table array`` of ``icons``. Pass an empty table ``{}`` to remove the dropdown. Dropdown settings can be configured using [themes] or the [set method].

----
#### setMenu
{chainable}
```lua
icon:setMenu(arrayOfIcons)
```
Creates a horizontal menu based upon the given ``table array`` of ``icons``. Pass an empty table ``{}`` to remove the menu. Menu settings can be configured using [themes] or the [set method].

----
#### destroy
{chainable}
```lua
icon:destroy()
```
Clears all connections and destroys all instances associated with the icon.

----



## Events
#### selected 
```lua
icon.selected:Connect(function()
    print("The icon was selected")
end)
```

----
#### deselected 
```lua
icon.deselected:Connect(function()
    print("The icon was deselected")
end)
```

----
#### toggled 
```lua
icon.toggled:Connect(function(isSelected)
    print(("The icon was %s"):format(icon:getToggleState(isSelected)))
end)
```

----
#### hoverStarted 
```lua
icon.hoverStarted:Connect(function()
    print("A mouse, finger or controller selection is hovering over the icon")
end)
```

----
#### hoverEnded 
```lua
icon.hoverEnded:Connect(function()
    print("The item is no longer hovering over the icon")
end)
```

----
#### dropdownOpened 
```lua
icon.dropdownOpened:Connect(function()
    print("The dropdown was opened")
end)
```

----
#### dropdownClosed 
```lua
icon.dropdownClosed:Connect(function()
    print("The dropdown was closed")
end)
```

----
#### menuOpened 
```lua
icon.menuOpened:Connect(function()
    print("The menu was opened")
end)
```

----
#### menuClosed 
```lua
icon.menuClosed:Connect(function()
    print("The menu was closed")
end)
```

----
#### notified 
```lua
icon.notified:Connect(function()
    print("New notice")
end)
```

----



## Properties
#### deselectWhenOtherIconSelected
```lua
local bool = icon.deselectWhenOtherIconSelected --[default: 'true']
```
A bool deciding whether the icon will be deselected when another icon is selected. Defaults to ``true``.

----
#### accountForWhenDisabled
```lua
local bool = icon.accountForWhenDisabled --[default: 'false']
```
A bool deciding whether to continue accounting for and updating the icons position on the topbar when disabled

----
#### name
{read-only}
```lua
local string = icon.name --[default: '"Unnamed Icon"']
```

----
#### isSelected
{read-only}
```lua
local bool = icon.isSelected
```

----
#### enabled
{read-only}
```lua
local bool = icon.enabled
```

----
#### hovering
{read-only}
```lua
local bool = icon.hovering
```

----
#### tipText
{read-only}
```lua
local stringOrNil = icon.tipText
```

----
#### captionText
{read-only}
```lua
local stringOrNil = icon.captionText
```

----
#### totalNotices
{read-only}
```lua
local int = icon.totalNotices
```

----
#### dropdownIcons
{read-only}
```lua
local arrayOfIcons = icon.dropdownIcons
```

----
#### menuIcons
{read-only}
```lua
local arrayOfIcons = icon.menuIcons
```

----
#### dropdownOpen
{read-only}
```lua
local bool = icon.dropdownOpen
```

----
#### menuOpen
{read-only}
```lua
local bool = icon.menuOpen
```

----
#### locked
{read-only}
```lua
local bool = icon.locked
```

----
#### topPadding
{read-only}
```lua
local udim = icon.topPadding
```

----
#### targetPosition
{read-only}
```lua
local udim2 = icon.targetPosition
```
The position the icon is at or aims to move to.
--]]



-- LOCAL
local tweenService = game:GetService("TweenService")
local replicatedStorage = game:GetService("ReplicatedStorage")
local debris = game:GetService("Debris")
local userInputService = game:GetService("UserInputService")
local httpService = game:GetService("HttpService") -- This is to generate GUIDs
local runService = game:GetService("RunService")
local textService = game:GetService("TextService")
local guiService = game:GetService("GuiService")
local starterGui = game:GetService("StarterGui")
local players = game:GetService("Players")
local IconController = require(script.IconController)
local Signal = require(script.Signal)
local Maid = require(script.Maid)
local TopbarPlusGui = require(script.TopbarPlusGui)
local TopbarPlusReference = require(script.TopbarPlusReference)
local referenceObject = TopbarPlusReference.getObject()
local Themes = require(script.Themes)
local activeItems = TopbarPlusGui.ActiveItems
local topbarContainer = TopbarPlusGui.TopbarContainer
local iconTemplate = topbarContainer["IconContainer"]
local DEFAULT_THEME = Themes.Default
local THUMB_OFFSET = 55
local DEFAULT_FORCED_GROUP_VALUES = {}
local Icon = (referenceObject and require(referenceObject.Value)) or {}
Icon.__index = Icon
if not referenceObject then
	TopbarPlusReference.addToReplicatedStorage()
end



-- CONSTRUCTORS
function Icon.new()
	local self = {}
	setmetatable(self, Icon)

	-- Maids (for autocleanup)
	local maid = Maid.new()
	self._maid = maid
	self._hoveringMaid = maid:give(Maid.new())
	self._dropdownClippingMaid = maid:give(Maid.new())
	self._menuClippingMaid = maid:give(Maid.new())

	-- These are the GuiObjects that make up the icon
	local instances = {}
	self.instances = instances
	local iconContainer = maid:give(iconTemplate:Clone())
	iconContainer.Visible = true
	iconContainer.Parent = topbarContainer
	instances["iconContainer"] = iconContainer
	instances["iconButton"] = iconContainer.IconButton
	instances["iconImage"] = instances.iconButton.IconImage
	instances["iconLabel"] = instances.iconButton.IconLabel
	instances["iconGradient"] = instances.iconButton.IconGradient
	instances["iconCorner"] = instances.iconButton.IconCorner
	instances["iconOverlay"] = iconContainer.IconOverlay
	instances["iconOverlayCorner"] = instances.iconOverlay.IconOverlayCorner
	instances["noticeFrame"] = instances.iconButton.NoticeFrame
	instances["noticeLabel"] = instances.noticeFrame.NoticeLabel
	instances["captionContainer"] = iconContainer.CaptionContainer
	instances["captionFrame"] = instances.captionContainer.CaptionFrame
	instances["captionLabel"] = instances.captionContainer.CaptionLabel
	instances["captionCorner"] = instances.captionFrame.CaptionCorner
	instances["captionOverlineContainer"] = instances.captionContainer.CaptionOverlineContainer
	instances["captionOverline"] = instances.captionOverlineContainer.CaptionOverline
	instances["captionOverlineCorner"] = instances.captionOverline.CaptionOverlineCorner
	instances["captionVisibilityBlocker"] = instances.captionFrame.CaptionVisibilityBlocker
	instances["captionVisibilityCorner"] = instances.captionVisibilityBlocker.CaptionVisibilityCorner
	instances["tipFrame"] = iconContainer.TipFrame
	instances["tipLabel"] = instances.tipFrame.TipLabel
	instances["tipCorner"] = instances.tipFrame.TipCorner
	instances["dropdownContainer"] = iconContainer.DropdownContainer
	instances["dropdownFrame"] = instances.dropdownContainer.DropdownFrame
	instances["dropdownList"] = instances.dropdownFrame.DropdownList
	instances["menuContainer"] = iconContainer.MenuContainer
	instances["menuFrame"] = instances.menuContainer.MenuFrame
	instances["menuList"] = instances.menuFrame.MenuList
	instances["clickSound"] = iconContainer.ClickSound

	-- These determine and describe how instances behave and appear
	self._settings = {
		action = {
			["toggleTransitionInfo"] = {},
			["resizeInfo"] = {},
			["repositionInfo"] = {},
			["captionFadeInfo"] = {},
			["tipFadeInfo"] = {},
			["dropdownSlideInfo"] = {},
			["menuSlideInfo"] = {},
		},
		toggleable = {
			["iconBackgroundColor"] = {instanceNames = {"iconButton"}, propertyName = "BackgroundColor3"},
			["iconBackgroundTransparency"] = {instanceNames = {"iconButton"}, propertyName = "BackgroundTransparency"},
			["iconCornerRadius"] = {instanceNames = {"iconCorner", "iconOverlayCorner"}, propertyName = "CornerRadius"},
			["iconGradientColor"] = {instanceNames = {"iconGradient"}, propertyName = "Color"},
			["iconGradientRotation"] = {instanceNames = {"iconGradient"}, propertyName = "Rotation"},
			["iconImage"] = {callMethods = {self._updateIconSize}, instanceNames = {"iconImage"}, propertyName = "Image"},
			["iconImageColor"] = {instanceNames = {"iconImage"}, propertyName = "ImageColor3"},
			["iconImageTransparency"] = {instanceNames = {"iconImage"}, propertyName = "ImageTransparency"},
			["iconScale"] = {instanceNames = {"iconButton"}, propertyName = "Size"},
			["forcedIconSize"] = {},
			["iconSize"] = {callSignals = {self.updated}, callMethods = {self._updateIconSize}, instanceNames = {"iconContainer"}, propertyName = "Size", tweenAction = "resizeInfo"},
			["iconOffset"] = {instanceNames = {"iconButton"}, propertyName = "Position"},
			["iconText"] = {callMethods = {self._updateIconSize}, instanceNames = {"iconLabel"}, propertyName = "Text"},
			["iconTextColor"] = {instanceNames = {"iconLabel"}, propertyName = "TextColor3"},
			["iconFont"] = {instanceNames = {"iconLabel"}, propertyName = "Font"},
			["iconImageYScale"] = {callMethods = {self._updateIconSize}},
			["iconImageRatio"] = {callMethods = {self._updateIconSize}},
			["iconLabelYScale"] = {callMethods = {self._updateIconSize}},
			["noticeCircleColor"] = {instanceNames = {"noticeFrame"}, propertyName = "ImageColor3"},
			["noticeCircleImage"] = {instanceNames = {"noticeFrame"}, propertyName = "Image"},
			["noticeTextColor"] = {instanceNames = {"noticeLabel"}, propertyName = "TextColor3"},
			["noticeImageTransparency"] = {instanceNames = {"noticeFrame"}, propertyName = "ImageTransparency"},
			["noticeTextTransparency"] = {instanceNames = {"noticeLabel"}, propertyName = "TextTransparency"},
			["baseZIndex"] = {callMethods = {self._updateBaseZIndex}},
			["order"] = {callSignals = {self.updated}, instanceNames = {"iconContainer"}, propertyName = "LayoutOrder"},
			["alignment"] = {callSignals = {self.updated}, callMethods = {self._updateDropdown}},
			["iconImageVisible"] = {instanceNames = {"iconImage"}, propertyName = "Visible"},
			["iconImageAnchorPoint"] = {instanceNames = {"iconImage"}, propertyName = "AnchorPoint"},
			["iconImagePosition"] = {instanceNames = {"iconImage"}, propertyName = "Position", tweenAction = "resizeInfo"},
			["iconImageSize"] = {instanceNames = {"iconImage"}, propertyName = "Size", tweenAction = "resizeInfo"},
			["iconImageTextXAlignment"] = {instanceNames = {"iconImage"}, propertyName = "TextXAlignment"},
			["iconLabelVisible"] = {instanceNames = {"iconLabel"}, propertyName = "Visible"},
			["iconLabelAnchorPoint"] = {instanceNames = {"iconLabel"}, propertyName = "AnchorPoint"},
			["iconLabelPosition"] = {instanceNames = {"iconLabel"}, propertyName = "Position", tweenAction = "resizeInfo"},
			["iconLabelSize"] = {instanceNames = {"iconLabel"}, propertyName = "Size", tweenAction = "resizeInfo"},
			["iconLabelTextXAlignment"] = {instanceNames = {"iconLabel"}, propertyName = "TextXAlignment"},
			["iconLabelTextSize"] = {instanceNames = {"iconLabel"}, propertyName = "TextSize"},
			["noticeFramePosition"] = {instanceNames = {"noticeFrame"}, propertyName = "Position"},
			["clickSoundId"] = {instanceNames = {"clickSound"}, propertyName = "SoundId"},
			["clickVolume"] = {instanceNames = {"clickSound"}, propertyName = "Volume"},
			["clickPlaybackSpeed"] = {instanceNames = {"clickSound"}, propertyName = "PlaybackSpeed"},
			["clickTimePosition"] = {instanceNames = {"clickSound"}, propertyName = "TimePosition"},
		},
		other = {
			["captionBackgroundColor"] = {instanceNames = {"captionFrame"}, propertyName = "BackgroundColor3"},
			["captionBackgroundTransparency"] = {instanceNames = {"captionFrame"}, propertyName = "BackgroundTransparency", group = "caption"},
			["captionBlockerTransparency"] = {instanceNames = {"captionVisibilityBlocker"}, propertyName = "BackgroundTransparency", group = "caption"},
			["captionOverlineColor"] = {instanceNames = {"captionOverline"}, propertyName = "BackgroundColor3"},
			["captionOverlineTransparency"] = {instanceNames = {"captionOverline"}, propertyName = "BackgroundTransparency", group = "caption"},
			["captionTextColor"] = {instanceNames = {"captionLabel"}, propertyName = "TextColor3"},
			["captionTextTransparency"] = {instanceNames = {"captionLabel"}, propertyName = "TextTransparency", group = "caption"},
			["captionFont"] = {instanceNames = {"captionLabel"}, propertyName = "Font"},
			["captionCornerRadius"] = {instanceNames = {"captionCorner", "captionOverlineCorner", "captionVisibilityCorner"}, propertyName = "CornerRadius"},
			["tipBackgroundColor"] = {instanceNames = {"tipFrame"}, propertyName = "BackgroundColor3"},
			["tipBackgroundTransparency"] = {instanceNames = {"tipFrame"}, propertyName = "BackgroundTransparency", group = "tip"},
			["tipTextColor"] = {instanceNames = {"tipLabel"}, propertyName = "TextColor3"},
			["tipTextTransparency"] = {instanceNames = {"tipLabel"}, propertyName = "TextTransparency", group = "tip"},
			["tipFont"] = {instanceNames = {"tipLabel"}, propertyName = "Font"},
			["tipCornerRadius"] = {instanceNames = {"tipCorner"}, propertyName = "CornerRadius"},
			["dropdownSize"] = {instanceNames = {"dropdownContainer"}, propertyName = "Size", unique = "dropdown"},
			["dropdownCanvasSize"] = {instanceNames = {"dropdownFrame"}, propertyName = "CanvasSize"},
			["dropdownMaxIconsBeforeScroll"] = {callMethods = {self._updateDropdown}},
			["dropdownMinWidth"] = {callMethods = {self._updateDropdown}},
			["dropdownSquareCorners"] = {callMethods = {self._updateDropdown}},
			["dropdownBindToggleToIcon"] = {},
			["dropdownToggleOnLongPress"] = {},
			["dropdownToggleOnRightClick"] = {},
			["dropdownCloseOnTapAway"] = {},
			["dropdownHidePlayerlistOnOverlap"] = {},
			["dropdownListPadding"] = {callMethods = {self._updateDropdown}, instanceNames = {"dropdownList"}, propertyName = "Padding"},
			["dropdownAlignment"] = {callMethods = {self._updateDropdown}},
			["dropdownScrollBarColor"] = {instanceNames = {"dropdownFrame"}, propertyName = "ScrollBarImageColor3"},
			["dropdownScrollBarTransparency"] = {instanceNames = {"dropdownFrame"}, propertyName = "ScrollBarImageTransparency"},
			["dropdownScrollBarThickness"] = {instanceNames = {"dropdownFrame"}, propertyName = "ScrollBarThickness"},
			["dropdownIgnoreClipping"] = {callMethods = {self._dropdownIgnoreClipping}},
			["menuSize"] = {instanceNames = {"menuContainer"}, propertyName = "Size", unique = "menu"},
			["menuCanvasSize"] = {instanceNames = {"menuFrame"}, propertyName = "CanvasSize"},
			["menuMaxIconsBeforeScroll"] = {callMethods = {self._updateMenu}},
			["menuBindToggleToIcon"] = {},
			["menuToggleOnLongPress"] = {},
			["menuToggleOnRightClick"] = {},
			["menuCloseOnTapAway"] = {},
			["menuListPadding"] = {callMethods = {self._updateMenu}, instanceNames = {"menuList"}, propertyName = "Padding"},
			["menuDirection"] = {callMethods = {self._updateMenu}},
			["menuScrollBarColor"] = {instanceNames = {"menuFrame"}, propertyName = "ScrollBarImageColor3"},
			["menuScrollBarTransparency"] = {instanceNames = {"menuFrame"}, propertyName = "ScrollBarImageTransparency"},
			["menuScrollBarThickness"] = {instanceNames = {"menuFrame"}, propertyName = "ScrollBarThickness"},
			["menuIgnoreClipping"] = {callMethods = {self._menuIgnoreClipping}},
		}
	}

	---------------------------------
	self._groupSettings = {}
	for _, settingsDetails in pairs(self._settings) do
		for settingName, settingDetail in pairs(settingsDetails) do
			local group = settingDetail.group
			if group then
				local groupSettings = self._groupSettings[group]
				if not groupSettings then
					groupSettings = {}
					self._groupSettings[group] = groupSettings
				end
				table.insert(groupSettings, settingName)
				settingDetail.forcedGroupValue = DEFAULT_FORCED_GROUP_VALUES[group]
				settingDetail.useForcedGroupValue = true
			end
		end
	end
	---------------------------------

	-- The setting values themselves will be set within _settings
	-- Setup a dictionary to make it quick and easy to reference setting by name
	self._settingsDictionary = {}
	-- Some instances require unique behaviours. These are defined with the 'unique' key
	-- for instance, we only want caption transparency effects to be applied on hovering
	self._uniqueSettings = {}
	self._uniqueSettingsDictionary = {}
	self.uniqueValues = {}
	local uniqueBehaviours = {
		["dropdown"] = function(settingName, instance, propertyName, value)
			local tweenInfo = self:get("dropdownSlideInfo")
			local bindToggleToIcon = self:get("dropdownBindToggleToIcon")
			local hidePlayerlist = self:get("dropdownHidePlayerlistOnOverlap") == true and self:get("alignment") == "right"
			local dropdownContainer = self.instances.dropdownContainer
			local dropdownFrame = self.instances.dropdownFrame
			local newValue = value
			local isOpen = true
			local isDeselected = not self.isSelected
			if bindToggleToIcon == false then
				isDeselected = not self.dropdownOpen
			end
			local isSpecialPressing = self._longPressing or self._rightClicking
			if self._tappingAway or (isDeselected and not isSpecialPressing) or (isSpecialPressing and self.dropdownOpen) then 
				local dropdownSize = self:get("dropdownSize")
				local XOffset = (dropdownSize and dropdownSize.X.Offset/1) or 0
				newValue = UDim2.new(0, XOffset, 0, 0)
				isOpen = false
			end
			if #self.dropdownIcons > 0 and isOpen and hidePlayerlist then
				if starterGui:GetCoreGuiEnabled(Enum.CoreGuiType.PlayerList) then
					starterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, false)
				end
				IconController._bringBackPlayerlist = (IconController._bringBackPlayerlist and IconController._bringBackPlayerlist + 1) or 1
				self._bringBackPlayerlist = true
			elseif self._bringBackPlayerlist and not isOpen and IconController._bringBackPlayerlist then
				IconController._bringBackPlayerlist -= 1
				if IconController._bringBackPlayerlist <= 0 then
					IconController._bringBackPlayerlist = nil
					starterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, true)
				end
				self._bringBackPlayerlist = nil
			end
			local tween = tweenService:Create(instance, tweenInfo, {[propertyName] = newValue})
			local connection
			connection = tween.Completed:Connect(function()
				connection:Disconnect()
				--dropdownContainer.ClipsDescendants = not self.dropdownOpen
			end)
			tween:Play()
			if isOpen then
				dropdownFrame.CanvasPosition = self._dropdownCanvasPos
			else
				self._dropdownCanvasPos = dropdownFrame.CanvasPosition
			end
			self.dropdownOpen = isOpen
			self:_decideToCallSignal("dropdown")
		end,
		["menu"] = function(settingName, instance, propertyName, value)
			local tweenInfo = self:get("menuSlideInfo")
			local bindToggleToIcon = self:get("menuBindToggleToIcon")
			local menuContainer = self.instances.menuContainer
			local menuFrame = self.instances.menuFrame
			local newValue = value
			local isOpen = true
			local isDeselected = not self.isSelected
			if bindToggleToIcon == false then
				isDeselected = not self.menuOpen
			end
			local isSpecialPressing = self._longPressing or self._rightClicking
			if self._tappingAway or (isDeselected and not isSpecialPressing) or (isSpecialPressing and self.menuOpen) then 
				local menuSize = self:get("menuSize")
				local YOffset = (menuSize and menuSize.Y.Offset/1) or 0
				newValue = UDim2.new(0, 0, 0, YOffset)
				isOpen = false
			end
			if isOpen ~= self.menuOpen then
				self.updated:Fire()
			end
			if isOpen and tweenInfo.EasingDirection == Enum.EasingDirection.Out then
				tweenInfo = TweenInfo.new(tweenInfo.Time, tweenInfo.EasingStyle, Enum.EasingDirection.In)
			end
			local tween = tweenService:Create(instance, tweenInfo, {[propertyName] = newValue})
			local connection
			connection = tween.Completed:Connect(function()
				connection:Disconnect()
				--menuContainer.ClipsDescendants = not self.menuOpen
			end)
			tween:Play()
			if isOpen then
				if self._menuCanvasPos then
					menuFrame.CanvasPosition = self._menuCanvasPos
				end
			else
				self._menuCanvasPos = menuFrame.CanvasPosition
			end
			self.menuOpen = isOpen
			self:_decideToCallSignal("menu")
		end,
	}
	for settingsType, settingsDetails in pairs(self._settings) do
		for settingName, settingDetail in pairs(settingsDetails) do
			if settingsType == "toggleable" then
				settingDetail.values = settingDetail.values or {
					deselected = nil,
					selected = nil,
				}
			else
				settingDetail.value = nil
			end
			settingDetail.additionalValues = {}
			settingDetail.type = settingsType
			self._settingsDictionary[settingName] = settingDetail
			--
			local uniqueCat = settingDetail.unique
			if uniqueCat then
				local uniqueCatArray = self._uniqueSettings[uniqueCat] or {}
				table.insert(uniqueCatArray, settingName)
				self._uniqueSettings[uniqueCat] = uniqueCatArray
				self._uniqueSettingsDictionary[settingName] = uniqueBehaviours[uniqueCat]
			end
			--
		end
	end
	
	-- Signals (events)
	self.updated = maid:give(Signal.new())
	self.selected = maid:give(Signal.new())
    self.deselected = maid:give(Signal.new())
    self.toggled = maid:give(Signal.new())
	self.hoverStarted = maid:give(Signal.new())
	self.hoverEnded = maid:give(Signal.new())
	self.dropdownOpened = maid:give(Signal.new())
	self.dropdownClosed = maid:give(Signal.new())
	self.menuOpened = maid:give(Signal.new())
	self.menuClosed = maid:give(Signal.new())
	self.notified = maid:give(Signal.new())
	self._endNotices = maid:give(Signal.new())
	self._ignoreClippingChanged = maid:give(Signal.new())
	
	-- Connections
	-- This enables us to chain icons and features like menus and dropdowns together without them being hidden by parent frame with ClipsDescendants enabled
	local function setFeatureChange(featureName, value)
		local parentIcon = self._parentIcon
		self:set(featureName.."IgnoreClipping", value)
		if value == true and parentIcon then
			local connection = parentIcon._ignoreClippingChanged:Connect(function(_, value)
				self:set(featureName.."IgnoreClipping", value)
			end)
			local endConnection
			endConnection = self[featureName.."Closed"]:Connect(function()
				endConnection:Disconnect()
				connection:Disconnect()
			end)
		end
	end
	self.dropdownOpened:Connect(function()
		setFeatureChange("dropdown", true)
	end)
	self.dropdownClosed:Connect(function()
		setFeatureChange("dropdown", false)
	end)
	self.menuOpened:Connect(function()
		setFeatureChange("menu", true)
	end)
	self.menuClosed:Connect(function()
		setFeatureChange("menu", false)
	end)
	--]]

	-- Properties
	self.deselectWhenOtherIconSelected = true
	self.name = ""
	self.isSelected = false
	self.presentOnTopbar = true
	self.accountForWhenDisabled = false
	self.enabled = true
	self.hovering = false
	self.tipText = nil
	self.captionText = nil
	self.totalNotices = 0
	self.notices = {}
	self.dropdownIcons = {}
	self.menuIcons = {}
	self.dropdownOpen = false
	self.menuOpen = false
	self.locked = false
	self.topPadding = UDim.new(0, 4)
	self.targetPosition = nil
	self.toggleItems = {}
	self.lockedSettings = {}
	
	-- Private Properties
	self._draggingFinger = false
	self._updatingIconSize = true
	self._previousDropdownOpen = false
	self._previousMenuOpen = false
	self._bindedToggleKeys = {}
	self._bindedEvents = {}
	
	-- Apply start values
	self:setName("UnnamedIcon")
	self:setTheme(DEFAULT_THEME, true)

	-- Input handlers
	-- Calls deselect/select when the icon is clicked
	--[[instances.iconButton.MouseButton1Click:Connect(function()
		if self._draggingFinger then
			return false
		elseif self.isSelected then
			self:deselect()
			return true
		end
		self:select()
	end)--]]
	instances.iconButton.MouseButton1Click:Connect(function()
		if self.isSelected then
			self:deselect()
			return true
		end
		self:select()
	end)
	instances.iconButton.MouseButton2Click:Connect(function()
		self._rightClicking = true
		if self:get("dropdownToggleOnRightClick") == true then
			self:_update("dropdownSize")
		end
		if self:get("menuToggleOnRightClick") == true then
			self:_update("menuSize")
		end
		self._rightClicking = false
	end)

	-- Shows/hides the dark overlay when the icon is presssed/released
	instances.iconButton.MouseButton1Down:Connect(function()
		if self.locked then return end
		self:_updateStateOverlay(0.7, Color3.new(0, 0, 0))
	end)
	instances.iconButton.MouseButton1Up:Connect(function()
		if self.locked then return end
		self:_updateStateOverlay(0.9, Color3.new(1, 1, 1))
	end)

	-- Tap away + KeyCode toggles
	userInputService.InputBegan:Connect(function(input, touchingAnObject)
		local validTapAwayInputs = {
			[Enum.UserInputType.MouseButton1] = true,
			[Enum.UserInputType.MouseButton2] = true,
			[Enum.UserInputType.MouseButton3] = true,
			[Enum.UserInputType.Touch] = true,
		}
		if not touchingAnObject and validTapAwayInputs[input.UserInputType] then
			self._tappingAway = true
			if self.dropdownOpen and self:get("dropdownCloseOnTapAway") == true then
				self:_update("dropdownSize")
			end
			if self.menuOpen and self:get("menuCloseOnTapAway") == true then
				self:_update("menuSize")
			end
			self._tappingAway = false
		end
		--
		if self._bindedToggleKeys[input.KeyCode] and not touchingAnObject then
			if self.isSelected then
				self:deselect()
			else
				self:select()
			end
		end
		--
	end)
	
	-- hoverStarted and hoverEnded triggers and actions
	-- these are triggered when a mouse enters/leaves the icon with a mouse, is highlighted with
	-- a controller selection box, or dragged over with a touchpad
	self.hoverStarted:Connect(function(x, y)
		self.hovering = true
		if not self.locked then
			self:_updateStateOverlay(0.9, Color3.fromRGB(255, 255, 255))
		end
		self:_updateHovering()
	end)
	self.hoverEnded:Connect(function()
		self.hovering = false
		self:_updateStateOverlay(1)
		self._hoveringMaid:clean()
		self:_updateHovering()
	end)
	instances.iconButton.MouseEnter:Connect(function(x, y) -- Mouse (started)
		self.hoverStarted:Fire(x, y)
	end)
	instances.iconButton.MouseLeave:Connect(function() -- Mouse (ended)
		self.hoverEnded:Fire()
	end)
	instances.iconButton.SelectionGained:Connect(function() -- Controller (started)
		self.hoverStarted:Fire()
	end)
	instances.iconButton.SelectionLost:Connect(function() -- Controller (ended)
		self.hoverEnded:Fire()
	end)
	instances.iconButton.MouseButton1Down:Connect(function() -- TouchPad (started)
		if self._draggingFinger then
			self.hoverStarted:Fire()
		end
		-- Long press check
		local heartbeatConnection
		local releaseConnection
		local longPressTime = 0.7
		local endTick = tick() + longPressTime
		heartbeatConnection = runService.Heartbeat:Connect(function()
			if tick() >= endTick then
				releaseConnection:Disconnect()
				heartbeatConnection:Disconnect()
				self._longPressing = true
				if self:get("dropdownToggleOnLongPress") == true then
					self:_update("dropdownSize")
				end
				if self:get("menuToggleOnLongPress") == true then
					self:_update("menuSize")
				end
				self._longPressing = false
			end
		end)
		releaseConnection = instances.iconButton.MouseButton1Up:Connect(function()
			releaseConnection:Disconnect()
			heartbeatConnection:Disconnect()
		end)
	end)
	if userInputService.TouchEnabled then
		instances.iconButton.MouseButton1Up:Connect(function() -- TouchPad (ended), this was originally enabled for non-touchpads too
			if self.hovering then
				self.hoverEnded:Fire()
			end
		end)
		-- This is used to highlight when a mobile/touch device is dragging their finger accross the screen
		-- this is important for determining the hoverStarted and hoverEnded events on mobile
		local dragCount = 0
		userInputService.TouchMoved:Connect(function(touch, touchingAnObject)
			if touchingAnObject then
				return
			end
			self._draggingFinger = true
		end)
		userInputService.TouchEnded:Connect(function()
			self._draggingFinger = false
		end)
	end

	-- Finish
	self._updatingIconSize = false
	self:_updateIconSize()
	IconController.iconAdded:Fire(self)
	
	return self
end

-- This is the same as Icon.new(), except it adds additional behaviour for certain specified names designed to mimic core icons, such as 'Chat'
function Icon.mimic(coreIconToMimic)
	local iconName = coreIconToMimic.."Mimic"
	local icon = IconController.getIcon(iconName)
	if icon then
		return icon
	end
	icon = Icon.new()
	icon:setName(iconName)

	if coreIconToMimic == "Chat" then
		icon:setOrder(-1)
		icon:setImage("rbxasset://textures/ui/TopBar/chatOff.png", "deselected")
		icon:setImage("rbxasset://textures/ui/TopBar/chatOn.png", "selected")
		icon:setImageYScale(0.625)
		-- Since roblox's core gui api sucks melons I reverted to listening for signals within the chat modules
		-- unfortunately however they've just gone and removed *these* signals therefore 
		-- this mimic chat and similar features are now impossible to recreate accurately, so I'm disabling for now
		-- ill go ahead and post a feature request; fingers crossed we get something by the next decade

		--[[
		-- Setup maid and cleanup actioon
		local maid = icon._maid
		icon._fakeChatMaid = maid:give(Maid.new())
		maid.chatMimicCleanup = function()
			starterGui:SetCoreGuiEnabled("Chat", icon.enabled)
		end
		-- Tap into chat module
		local chatMainModule = players.LocalPlayer.PlayerScripts:WaitForChild("ChatScript").ChatMain
		local ChatMain = require(chatMainModule)
		local function displayChatBar(visibility)
			icon.ignoreVisibilityStateChange = true
			ChatMain.CoreGuiEnabled:fire(visibility)
			ChatMain.IsCoreGuiEnabled = false
			ChatMain:SetVisible(visibility)
			icon.ignoreVisibilityStateChange = nil
		end
		local function setIconEnabled(visibility)
			icon.ignoreVisibilityStateChange = true
			ChatMain.CoreGuiEnabled:fire(visibility)
			icon:setEnabled(visibility)
			starterGui:SetCoreGuiEnabled("Chat", false)
			icon:deselect()
			icon.updated:Fire()
			icon.ignoreVisibilityStateChange = nil
		end
		-- Open chat via Slash key
		icon._fakeChatMaid:give(userInputService.InputEnded:Connect(function(inputObject, gameProcessedEvent)
			if gameProcessedEvent then
				return "Another menu has priority"
			elseif not(inputObject.KeyCode == Enum.KeyCode.Slash or inputObject.KeyCode == Enum.SpecialKey.ChatHotkey) then
				return "No relavent key pressed"
			elseif ChatMain.IsFocused() then
				return "Chat bar already open"
			elseif not icon.enabled then
				return "Icon disabled"
			end
			ChatMain:FocusChatBar(true)
			icon:select()
		end))
		-- ChatActive
		icon._fakeChatMaid:give(ChatMain.VisibilityStateChanged:Connect(function(visibility)
			if not icon.ignoreVisibilityStateChange then
				if visibility == true then
					icon:select()
				else
					icon:deselect()
				end
			end
		end))
		-- Keep when other icons selected
		icon.deselectWhenOtherIconSelected = false
		-- Mimic chat notifications
		icon._fakeChatMaid:give(ChatMain.MessagesChanged:connect(function()
			if ChatMain:GetVisibility() == true then
				return "ChatWindow was open"
			end
			icon:notify(icon.selected)
		end))
		-- Mimic visibility when StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Chat, state) is called
		coroutine.wrap(function()
			runService.Heartbeat:Wait()
			icon._fakeChatMaid:give(ChatMain.CoreGuiEnabled:connect(function(newState)
				if icon.ignoreVisibilityStateChange then
					return "ignoreVisibilityStateChange enabled"
				end
				local topbarEnabled = starterGui:GetCore("TopbarEnabled")
				if topbarEnabled ~= IconController.previousTopbarEnabled then
					return "SetCore was called instead of SetCoreGuiEnabled"
				end
				if not icon.enabled and userInputService:IsKeyDown(Enum.KeyCode.LeftShift) and userInputService:IsKeyDown(Enum.KeyCode.P) then
					icon:setEnabled(true)
				else
					setIconEnabled(newState)
				end
			end))
		end)()
		icon.deselected:Connect(function()
			displayChatBar(false)
		end)
		icon.selected:Connect(function()
			displayChatBar(true)
		end)
		setIconEnabled(starterGui:GetCoreGuiEnabled("Chat"))
		--]]
	end
	return icon
end



-- CORE UTILITY METHODS
function Icon:set(settingName, value, iconState, setAdditional)
	local settingDetail = self._settingsDictionary[settingName]
	assert(settingDetail ~= nil, ("setting '%s' does not exist"):format(settingName))
	if type(iconState) == "string" then
		iconState = iconState:lower()
	end
	local previousValue = self:get(settingName, iconState)

	if iconState == "hovering" then
		-- Apply hovering state if valid
		settingDetail.hoveringValue = value
		if setAdditional ~= "_ignorePrevious" then
			settingDetail.additionalValues["previous_"..iconState] = previousValue
		end
		if type(setAdditional) == "string" then
			settingDetail.additionalValues[setAdditional.."_"..iconState] = previousValue
		end
		self:_update(settingName)

	else
		-- Update the settings value
		local toggleState = iconState
		local settingType = settingDetail.type
		if settingType == "toggleable" then
			local valuesToSet = {}
			if toggleState == "deselected" or toggleState == "selected" then
				table.insert(valuesToSet, toggleState)
			else
				table.insert(valuesToSet, "deselected")
				table.insert(valuesToSet, "selected")
				toggleState = nil
			end
			for i, v in pairs(valuesToSet) do
				settingDetail.values[v] = value
				if setAdditional ~= "_ignorePrevious" then
					settingDetail.additionalValues["previous_"..v] = previousValue
				end
				if type(setAdditional) == "string" then
					settingDetail.additionalValues[setAdditional.."_"..v] = previousValue
				end
			end
		else
			settingDetail.value = value
			if type(setAdditional) == "string" then
				if setAdditional ~= "_ignorePrevious" then
					settingDetail.additionalValues["previous"] = previousValue
				end
				settingDetail.additionalValues[setAdditional] = previousValue
			end
		end

		-- Check previous and new are not the same
		if previousValue == value then
			return self, "Value was already set"
		end

		-- Update appearances of associated instances
		local currentToggleState = self:getToggleState()
		if not self._updateAfterSettingAll and settingDetail.instanceNames and (currentToggleState == toggleState or toggleState == nil) then
			local ignoreTweenAction = (settingName == "iconSize" and previousValue and previousValue.X.Scale == 1)
			local tweenInfo = (settingDetail.tweenAction and not ignoreTweenAction and self:get(settingDetail.tweenAction)) or TweenInfo.new(0)
			self:_update(settingName, currentToggleState, tweenInfo)
		end
	end

	-- Call any methods present
	if settingDetail.callMethods then
		for _, callMethod in pairs(settingDetail.callMethods) do
			callMethod(self, value, iconState)
		end
	end
	
	-- Call any signals present
	if settingDetail.callSignals then
		for _, callSignal in pairs(settingDetail.callSignals) do
			callSignal:Fire()
		end
	end
	return self
end

function Icon:setAdditionalValue(settingName, setAdditional, value, iconState)
	local settingDetail = self._settingsDictionary[settingName]
	assert(settingDetail ~= nil, ("setting '%s' does not exist"):format(settingName))
	local stringMatch = setAdditional.."_"
	if iconState then
		stringMatch = stringMatch..iconState
	end
	for key, _ in pairs(settingDetail.additionalValues) do
		if string.match(key, stringMatch) then
			settingDetail.additionalValues[key] = value
		end
	end
end

function Icon:get(settingName, iconState, getAdditional)
	local settingDetail = self._settingsDictionary[settingName]
	assert(settingDetail ~= nil, ("setting '%s' does not exist"):format(settingName))
	local valueToReturn, additionalValueToReturn
	if typeof(iconState) == "string" then
		iconState = iconState:lower()
	end

	--if ((self.hovering and settingDetail.hoveringValue) or iconState == "hovering") and getAdditional == nil then
	if (iconState == "hovering") and getAdditional == nil then
		valueToReturn = settingDetail.hoveringValue
		additionalValueToReturn = type(getAdditional) == "string" and settingDetail.additionalValues[getAdditional.."_"..iconState]
	end

	local settingType = settingDetail.type
	if settingType == "toggleable" then
		local toggleState = ((iconState == "deselected" or iconState == "selected") and iconState) or self:getToggleState()
		if additionalValueToReturn == nil then
			additionalValueToReturn = type(getAdditional) == "string" and settingDetail.additionalValues[getAdditional.."_"..toggleState]
		end
		if valueToReturn == nil then
			valueToReturn = settingDetail.values[toggleState]
		end
	
	else
		if additionalValueToReturn == nil then
			additionalValueToReturn = type(getAdditional) == "string" and settingDetail.additionalValues[getAdditional]
		end
		if valueToReturn == nil then
			valueToReturn = settingDetail.value
		end
	end

	return valueToReturn, additionalValueToReturn
end

function Icon:getHovering(settingName)
	local settingDetail = self._settingsDictionary[settingName]
	assert(settingDetail ~= nil, ("setting '%s' does not exist"):format(settingName))
	return settingDetail.hoveringValue
end

function Icon:getToggleState(isSelected)
	isSelected = isSelected or self.isSelected
	return (isSelected and "selected") or "deselected"
end

function Icon:getIconState()
	if self.hovering then
		return "hovering"
	else
		return self:getToggleState()
	end
end

function Icon:_update(settingName, toggleState, customTweenInfo)
	local settingDetail = self._settingsDictionary[settingName]
	assert(settingDetail ~= nil, ("setting '%s' does not exist"):format(settingName))
	toggleState = toggleState or self:getToggleState()
	local value = settingDetail.value or (settingDetail.values and settingDetail.values[toggleState])
	if self.hovering and settingDetail.hoveringValue then
		value = settingDetail.hoveringValue
	end
	if value == nil then return end
	local tweenInfo = customTweenInfo or (settingDetail.tweenAction and settingDetail.tweenAction ~= "" and self:get(settingDetail.tweenAction)) or self:get("toggleTransitionInfo") or TweenInfo.new(0.15)
	local propertyName = settingDetail.propertyName
	local invalidPropertiesTypes = {
		["string"] = true,
		["NumberSequence"] = true,
		["Text"] = true,
		["EnumItem"] = true,
		["ColorSequence"] = true,
	}
	local uniqueSetting = self._uniqueSettingsDictionary[settingName]
	local newValue = value
	if settingDetail.useForcedGroupValue then
		newValue = settingDetail.forcedGroupValue
	end
	if settingDetail.instanceNames then
		for _, instanceName in pairs(settingDetail.instanceNames) do
			local instance = self.instances[instanceName]
			local propertyType = typeof(instance[propertyName])
			local cannotTweenProperty = invalidPropertiesTypes[propertyType] or typeof(instance) == "table"
			if uniqueSetting then
				uniqueSetting(settingName, instance, propertyName, newValue)
			elseif cannotTweenProperty then
				instance[propertyName] = value
			else
				tweenService:Create(instance, tweenInfo, {[propertyName] = newValue}):Play()
			end
			--
			if settingName == "iconSize" and instance[propertyName] ~= newValue then
				self.updated:Fire()
			end
			--
		end
	end
end

function Icon:_updateAll(iconState, customTweenInfo)
	for settingName, settingDetail in pairs(self._settingsDictionary) do
		if settingDetail.instanceNames then
			self:_update(settingName, iconState, customTweenInfo)
		end
	end
end

function Icon:_updateHovering(customTweenInfo)
	for settingName, settingDetail in pairs(self._settingsDictionary) do
		if settingDetail.instanceNames and settingDetail.hoveringValue ~= nil then
			self:_update(settingName, nil, customTweenInfo)
		end
	end
end

function Icon:_updateStateOverlay(transparency, color)
	local stateOverlay = self.instances.iconOverlay
	stateOverlay.BackgroundTransparency = transparency or 1
	stateOverlay.BackgroundColor3 = color or Color3.new(1, 1, 1)
end

function Icon:setTheme(theme, updateAfterSettingAll)
	self._updateAfterSettingAll = updateAfterSettingAll
	for settingsType, settingsDetails in pairs(theme) do
		if settingsType == "toggleable" then
			for settingName, settingValue in pairs(settingsDetails.deselected) do
				if not self.lockedSettings[settingName] then
					self:set(settingName, settingValue, "both")
				end
			end
			for settingName, settingValue in pairs(settingsDetails.selected) do
				if not self.lockedSettings[settingName] then
					self:set(settingName, settingValue, "selected")
				end
			end
		else
			for settingName, settingValue in pairs(settingsDetails) do
				if not self.lockedSettings[settingName] then
					local settingDetail = self._settingsDictionary[settingName]
					if settingsType == "action" and settingDetail == nil then
						settingDetail = {}
						self._settingsDictionary[settingName] = {}
					end
					self:set(settingName, settingValue)
				end
			end
		end
	end
	self._updateAfterSettingAll = nil
	if updateAfterSettingAll then
		self:_updateAll()
	end
	return self
end

function Icon:getInstance(instanceName)
	return self.instances[instanceName]
end

function Icon:setInstance(instanceName, instance)
	local originalInstance = self.instances[instanceName]
	self.instances[instanceName] = instance
	if originalInstance then
		originalInstance:Destroy()
	end
	return self
end

function Icon:getSettingDetail(targetSettingName)
	for _, settingsDetails in pairs(self._settings) do
		for settingName, settingDetail in pairs(settingsDetails) do
			if settingName == targetSettingName then
				return settingDetail
			end
		end
	end
	return false
end

function Icon:modifySetting(settingName, dictionary)
	local settingDetail = self:getSettingDetail(settingName)
	for key, value in pairs(dictionary) do
		settingDetail[key] = value
	end
	return self
end

function Icon:convertLabelToNumberSpinner(numberSpinner)
	-- This updates the number spinners appearance
	self:set("iconLabelSize", UDim2.new(1,0,1,0))
	numberSpinner.Parent = self:getInstance("iconButton")

	-- This creates a fake iconLabel which updates the property of all descendant spinner TextLabels when indexed
	local textLabel = {}
	setmetatable(textLabel, {__newindex = function(_, index, value)
		for _, label in pairs(numberSpinner.Frame:GetDescendants()) do
			if label:IsA("TextLabel") then
				label[index] = value
			end
		end
	end})

	-- This overrides existing instances and settings so that they update the spinners properties (instead of the old textlabel)
	local iconButton = self:getInstance("iconButton")
	iconButton.ZIndex = 0
	self:setInstance("iconLabel", textLabel)
	self:modifySetting("iconText", {instanceNames = {}}) -- We do this to prevent text being modified within the metatable above
	self:setInstance("iconLabelSpinner", numberSpinner.Frame)
	local settingsToConvert = {"iconLabelVisible", "iconLabelAnchorPoint", "iconLabelPosition", "iconLabelSize"}
	for _, settingName in pairs(settingsToConvert) do
		self:modifySetting(settingName, {instanceNames = {"iconLabelSpinner"}})
	end

	-- This applies all the values we just updated
	self:_updateAll()
	return self
end

function Icon:setEnabled(bool)
	self.enabled = bool
	self.instances.iconContainer.Visible = bool
	self.updated:Fire()
	return self
end

function Icon:setName(string)
	self.name = string
	self.instances.iconContainer.Name = string
	return self
end

function Icon:setProperty(propertyName, value)
	self[propertyName] = value
	return self
end

function Icon:_playClickSound()
	local clickSound = self.instances.clickSound
	if clickSound.SoundId ~= nil and #clickSound.SoundId > 0 and clickSound.Volume > 0 then
		local clickSoundCopy = clickSound:Clone()
		clickSoundCopy.Parent = clickSound.Parent
		clickSoundCopy:Play()
		debris:AddItem(clickSoundCopy, clickSound.TimeLength)
	end
end

function Icon:select(byIcon)
	if self.locked then return self end
	self.isSelected = true
	self:_setToggleItemsVisible(true, byIcon)
	self:_updateNotice()
	self:_updateAll()
	self:_playClickSound()
	if #self.dropdownIcons > 0 or #self.menuIcons > 0 then
		IconController:_updateSelectionGroup()
	end
    self.selected:Fire()
    self.toggled:Fire(self.isSelected)
	return self
end

function Icon:deselect(byIcon)
	if self.locked then return self end
	self.isSelected = false
	self:_setToggleItemsVisible(false, byIcon)
	self:_updateNotice()
	self:_updateAll()
	self:_playClickSound()
	if #self.dropdownIcons > 0 or #self.menuIcons > 0 then
		IconController:_updateSelectionGroup()
	end
    self.deselected:Fire()
    self.toggled:Fire(self.isSelected)
	return self
end

function Icon:notify(clearNoticeEvent, noticeId)
	coroutine.wrap(function()
		if not clearNoticeEvent then
			clearNoticeEvent = self.deselected
		end
		if self._parentIcon then
			self._parentIcon:notify(clearNoticeEvent)
		end
		
		local notifComplete = Signal.new()
		local endEvent = self._endNotices:Connect(function()
			notifComplete:Fire()
		end)
		local customEvent = clearNoticeEvent:Connect(function()
			notifComplete:Fire()
		end)
		
		noticeId = noticeId or httpService:GenerateGUID(true)
		self.notices[noticeId] = {
			completeSignal = notifComplete,
			clearNoticeEvent = clearNoticeEvent,
		}
		self.totalNotices += 1
		self:_updateNotice()

		self.notified:Fire(noticeId)
		notifComplete:Wait()
		
		endEvent:Disconnect()
		customEvent:Disconnect()
		notifComplete:Disconnect()
		
		self.totalNotices -= 1
		self.notices[noticeId] = nil
		self:_updateNotice()
	end)()
	return self
end

function Icon:_updateNotice()
	local enabled = true
	if self.totalNotices < 1 then
		enabled = false
	end
	-- Deselect
	if not self.isSelected then
		if (#self.dropdownIcons > 0 or #self.menuIcons > 0) and self.totalNotices > 0 then
			enabled = true
		end
	end
	-- Select
	if self.isSelected then
		if #self.dropdownIcons > 0 or #self.menuIcons > 0 then
			enabled = false
		end
	end
	local value = (enabled and 0) or 1
	self:set("noticeImageTransparency", value)
	self:set("noticeTextTransparency", value)
	self.instances.noticeLabel.Text = (self.totalNotices < 100 and self.totalNotices) or "99+"
end

function Icon:clearNotices()
	self._endNotices:Fire()
	return self
end

function Icon:disableStateOverlay(bool)
	if bool == nil then
		bool = true
	end
	local stateOverlay = self.instances.iconOverlay
	stateOverlay.Visible = not bool
	return self
end



-- TOGGLEABLE METHODS
function Icon:setLabel(text, iconState)
	text = text or ""
	self:set("iconText", text, iconState)
	return self
end

function Icon:setCornerRadius(scale, offset, iconState)
	local oldCornerRadius = self.instances.iconCorner.CornerRadius
	local newCornerRadius = UDim.new(scale or oldCornerRadius.Scale, offset or oldCornerRadius.Offset)
	self:set("iconCornerRadius", newCornerRadius, iconState)
	return self
end

function Icon:setImage(imageId, iconState)
	local textureId = (tonumber(imageId) and "http://www.roblox.com/asset/?id="..imageId) or imageId or ""
	return self:set("iconImage", textureId, iconState)
end

function Icon:setOrder(order, iconState)
	local newOrder = tonumber(order) or 1
	return self:set("order", newOrder, iconState)
end

function Icon:setLeft(iconState)
	return self:set("alignment", "left", iconState)
end

function Icon:setMid(iconState)
	return self:set("alignment", "mid", iconState)
end

function Icon:setRight(iconState)
	if not self.internalIcon then
		IconController.setupHealthbar()
	end
	return self:set("alignment", "right", iconState)
end

function Icon:setImageYScale(YScale, iconState)
	local newYScale = tonumber(YScale) or 0.63
	return self:set("iconImageYScale", newYScale, iconState)
end

function Icon:setImageRatio(ratio, iconState)
	local newRatio = tonumber(ratio) or 1
	return self:set("iconImageRatio", newRatio, iconState)
end

function Icon:setLabelYScale(YScale, iconState)
	local newYScale = tonumber(YScale) or 0.45
	return self:set("iconLabelYScale", newYScale, iconState)
end
	
function Icon:setBaseZIndex(ZIndex, iconState)
	local newBaseZIndex = tonumber(ZIndex) or 1
	return self:set("baseZIndex", newBaseZIndex, iconState)
end

function Icon:_updateBaseZIndex(baseValue)
	local container = self.instances.iconContainer
	local newBaseValue = tonumber(baseValue) or container.ZIndex
	local difference = newBaseValue - container.ZIndex
	if difference == 0 then return "The baseValue is the same" end
	for _, object in pairs(self.instances) do
		object.ZIndex = object.ZIndex + difference
	end
	return true
end

function Icon:setSize(XOffset, YOffset, iconState)
	local newXOffset = tonumber(XOffset) or 32
	local newYOffset = tonumber(YOffset) or newXOffset
	self:set("forcedIconSize", UDim2.new(0, newXOffset, 0, newYOffset), iconState)
	self:set("iconSize", UDim2.new(0, newXOffset, 0, newYOffset), iconState)
	return self
end

function Icon:_updateIconSize(_, iconState)
	if self._destroyed then return end
	-- This is responsible for handling the appearance and size of the icons label and image, in additon to its own size
	local X_MARGIN = 12
	local X_GAP = 8

	local values = {
		iconImage = self:get("iconImage", iconState) or "_NIL",
		iconText = self:get("iconText", iconState) or "_NIL",
		iconFont = self:get("iconFont", iconState) or "_NIL",
		iconSize = self:get("iconSize", iconState) or "_NIL",
		forcedIconSize = self:get("forcedIconSize", iconState) or "_NIL",
		iconImageYScale = self:get("iconImageYScale", iconState) or "_NIL",
		iconImageRatio = self:get("iconImageRatio", iconState) or "_NIL",
		iconLabelYScale = self:get("iconLabelYScale", iconState) or "_NIL",
	}
	for k,v in pairs(values) do
		if v == "_NIL" then
			return
		end
	end

	local iconContainer = self.instances.iconContainer
	if not iconContainer.Parent then return end

	-- We calculate the cells dimensions as apposed to reading because there's a possibility the cells dimensions were changed at the exact time and have not yet updated
	-- this essentially saves us from waiting a heartbeat which causes additonal complications
	local cellSizeXOffset = values.iconSize.X.Offset
	local cellSizeXScale = values.iconSize.X.Scale
	local cellWidth = cellSizeXOffset + (cellSizeXScale * iconContainer.Parent.AbsoluteSize.X)
	local minCellWidth = values.forcedIconSize.X.Offset--cellWidth
	local maxCellWidth = (cellSizeXScale > 0 and cellWidth) or 9999
	local cellSizeYOffset = values.iconSize.Y.Offset
	local cellSizeYScale = values.iconSize.Y.Scale
	local cellHeight = cellSizeYOffset + (cellSizeYScale * iconContainer.Parent.AbsoluteSize.Y)
	local labelHeight = cellHeight * values.iconLabelYScale
	local labelWidth = textService:GetTextSize(values.iconText, labelHeight, values.iconFont, Vector2.new(10000, labelHeight)).X
	local imageWidth = cellHeight * values.iconImageYScale * values.iconImageRatio
	
	local usingImage = values.iconImage ~= ""
	local usingText = values.iconText ~= ""
	local notifPosYScale = 0.5
	local desiredCellWidth
	local preventClippingOffset = labelHeight/2
	
	if usingImage and not usingText then
		notifPosYScale = 0.45
		self:set("iconImageVisible", true, iconState)
		self:set("iconImageAnchorPoint", Vector2.new(0.5, 0.5), iconState)
		self:set("iconImagePosition", UDim2.new(0.5, 0, 0.5, 0), iconState)
		self:set("iconImageSize", UDim2.new(values.iconImageYScale*values.iconImageRatio, 0, values.iconImageYScale, 0), iconState)
		self:set("iconLabelVisible", false, iconState)

	elseif not usingImage and usingText then
		desiredCellWidth = labelWidth+(X_MARGIN*2)
		self:set("iconLabelVisible", true, iconState)
		self:set("iconLabelAnchorPoint", Vector2.new(0, 0.5), iconState)
		self:set("iconLabelPosition", UDim2.new(0, X_MARGIN, 0.5, 0), iconState)
		self:set("iconLabelSize", UDim2.new(1, -X_MARGIN*2, values.iconLabelYScale, preventClippingOffset), iconState)
		self:set("iconLabelTextXAlignment", Enum.TextXAlignment.Center, iconState)
		self:set("iconImageVisible", false, iconState)

	elseif usingImage and usingText then
		local labelGap = X_MARGIN + imageWidth + X_GAP
		desiredCellWidth = labelGap + labelWidth + X_MARGIN
		self:set("iconImageVisible", true, iconState)
		self:set("iconImageAnchorPoint", Vector2.new(0, 0.5), iconState)
		self:set("iconImagePosition", UDim2.new(0, X_MARGIN, 0.5, 0), iconState)
		self:set("iconImageSize", UDim2.new(0, imageWidth, values.iconImageYScale, 0), iconState)
		----
		self:set("iconLabelVisible", true, iconState)
		self:set("iconLabelAnchorPoint", Vector2.new(0, 0.5), iconState)
		self:set("iconLabelPosition", UDim2.new(0, labelGap, 0.5, 0), iconState)
		self:set("iconLabelSize", UDim2.new(1, -labelGap-X_MARGIN, values.iconLabelYScale, preventClippingOffset), iconState)
		self:set("iconLabelTextXAlignment", Enum.TextXAlignment.Left, iconState)
	end
	if desiredCellWidth then
		if not self._updatingIconSize then
			self._updatingIconSize = true
			local widthScale = (cellSizeXScale > 0 and cellSizeXScale) or 0
			local widthOffset = (cellSizeXScale > 0 and 0) or math.clamp(desiredCellWidth, minCellWidth, maxCellWidth)
			self:set("iconSize", UDim2.new(widthScale, widthOffset, values.iconSize.Y.Scale, values.iconSize.Y.Offset), iconState, "_ignorePrevious")

			-- This ensures that if an icon is within a dropdown or menu, its container adapts accordingly with this new iconSize value
			local parentIcon = self._parentIcon
			if parentIcon then
				local originalIconSize = UDim2.new(0, desiredCellWidth, 0, values.iconSize.Y.Offset)
				if #parentIcon.dropdownIcons > 0 then
					self:setAdditionalValue("iconSize", "beforeDropdown", originalIconSize, iconState)
					parentIcon:_updateDropdown()
				end
				if #parentIcon.menuIcons > 0 then
					self:setAdditionalValue("iconSize", "beforeMenu", originalIconSize, iconState)
					parentIcon:_updateMenu()
				end
			end

			self._updatingIconSize = false
		end
	end
	self:set("iconLabelTextSize", labelHeight, iconState)
	self:set("noticeFramePosition", UDim2.new(notifPosYScale, 0, 0, -2), iconState)

	self._updatingIconSize = false
end



-- FEATURE METHODS
function Icon:bindEvent(iconEventName, eventFunction)
	local event = self[iconEventName]
	assert(event and typeof(event) == "table" and event.Connect, "argument[1] must be a valid topbarplus icon event name!")
	assert(typeof(eventFunction) == "function", "argument[2] must be a function!")
	self._bindedEvents[iconEventName] = event:Connect(function(...)
		eventFunction(self, ...)
	end)
	return self
end

function Icon:unbindEvent(iconEventName)
	local eventConnection = self._bindedEvents[iconEventName]
	if eventConnection then
		eventConnection:Disconnect()
		self._bindedEvents[iconEventName] = nil
	end
	return self
end

function Icon:bindToggleKey(keyCodeEnum)
	assert(typeof(keyCodeEnum) == "EnumItem", "argument[1] must be a KeyCode EnumItem!")
	self._bindedToggleKeys[keyCodeEnum] = true
	return self
end

function Icon:unbindToggleKey(keyCodeEnum)
	assert(typeof(keyCodeEnum) == "EnumItem", "argument[1] must be a KeyCode EnumItem!")
	self._bindedToggleKeys[keyCodeEnum] = nil
	return self
end

function Icon:lock()
	self.locked = true
	return self
end

function Icon:unlock()
	self.locked = false
	return self
end

function Icon:setTopPadding(offset, scale)
	local newOffset = offset or 4
	local newScale = scale or 0
	self.topPadding = UDim.new(newScale, newOffset)
	self.updated:Fire()
	return self
end

function Icon:bindToggleItem(guiObjectOrLayerCollector)
	if not guiObjectOrLayerCollector:IsA("GuiObject") and not guiObjectOrLayerCollector:IsA("LayerCollector") then
		error("Toggle item must be a GuiObject or LayerCollector!")
	end
	self.toggleItems[guiObjectOrLayerCollector] = true
	return self
end

function Icon:unbindToggleItem(guiObjectOrLayerCollector)
	self.toggleItems[guiObjectOrLayerCollector] = nil
	return self
end

function Icon:_setToggleItemsVisible(bool, byIcon)
	for toggleItem, _ in pairs(self.toggleItems) do
		if not byIcon or byIcon.toggleItems[toggleItem] == nil then
			local property = "Visible"
			if toggleItem:IsA("LayerCollector") then
				property = "Enabled"
			end
			toggleItem[property] = bool
		end
	end
end

function Icon:give(userdata)
	local valueToGive = userdata
	if typeof(userdata) == "function" then
		local returnValue = userdata(self)
		if typeof(userdata) ~= "function" then
			valueToGive = returnValue
		else
			valueToGive = nil
		end
	end
	if valueToGive ~= nil then
		self._maid:give(valueToGive)
	end
	return self
end

-- Tips
DEFAULT_FORCED_GROUP_VALUES["tip"] = 1

function Icon:setTip(text)
	assert(typeof(text) == "string" or text == nil, "Expected string, got "..typeof(text))
	local realText = text or ""
	local isVisible = realText ~= ""
	local textSize = textService:GetTextSize(realText, 12, Enum.Font.GothamSemibold, Vector2.new(1000, 20-6))
	self.instances.tipLabel.Text = realText
	self.instances.tipFrame.Size = (isVisible and UDim2.new(0, textSize.X+6, 0, 20)) or UDim2.new(0, 0, 0, 0)
	self.instances.tipFrame.Parent = (isVisible and activeItems) or self.instances.iconContainer
	self._maid.tipFrame = self.instances.tipFrame
	self.tipText = text
	
	local tipMaid = Maid.new()
	self._maid.tipMaid = tipMaid
	if isVisible then
		tipMaid:give(self.hoverStarted:Connect(function()
			if not self.isSelected then
				self:displayTip(true)
			end
		end))
		tipMaid:give(self.hoverEnded:Connect(function()
			self:displayTip(false)
		end))
		tipMaid:give(self.selected:Connect(function()
			if self.hovering then
				self:displayTip(false)
			end
		end))
	end
	self:displayTip(self.hovering and isVisible)
	return self
end

function Icon:displayTip(bool)
	if userInputService.TouchEnabled and not self._draggingFinger then return end

	-- Determine caption visibility
	local isVisible = self.tipVisible or false
	if typeof(bool) == "boolean" then
		isVisible = bool
	end
	self.tipVisible = isVisible

	-- Have tip position track mouse or finger
	local tipFrame = self.instances.tipFrame
	if isVisible then
		-- When the user moves their cursor/finger, update tip to match the position
		local function updateTipPositon(x, y)
			local newX = x
			local newY = y
			local camera = workspace.CurrentCamera
			local viewportSize = camera and camera.ViewportSize
			if userInputService.TouchEnabled then
				--tipFrame.AnchorPoint = Vector2.new(0.5, 0.5)
				local desiredX = newX - tipFrame.Size.X.Offset/2
				local minX = 0
				local maxX = viewportSize.X - tipFrame.Size.X.Offset
				local desiredY = newY + THUMB_OFFSET + 60
				local minY = tipFrame.AbsoluteSize.Y + THUMB_OFFSET + 64 + 3
				local maxY = viewportSize.Y - tipFrame.Size.Y.Offset
				newX = math.clamp(desiredX, minX, maxX)
				newY = math.clamp(desiredY, minY, maxY)
			elseif IconController.controllerModeEnabled then
				local indicator = TopbarPlusGui.Indicator
				local newPos = indicator.AbsolutePosition
				newX = newPos.X - tipFrame.Size.X.Offset/2 + indicator.AbsoluteSize.X/2
				newY = newPos.Y + 90
			else
				local desiredX = newX
				local minX = 0
				local maxX = viewportSize.X - tipFrame.Size.X.Offset - 48
				local desiredY = newY
				local minY = tipFrame.Size.Y.Offset+3
				local maxY = viewportSize.Y
				newX = math.clamp(desiredX, minX, maxX)
				newY = math.clamp(desiredY, minY, maxY)
			end
			--local difX = tipFrame.AbsolutePosition.X - tipFrame.Position.X.Offset
			--local difY = tipFrame.AbsolutePosition.Y - tipFrame.Position.Y.Offset
			--local globalX = newX - difX
			--local globalY = newY - difY
			--tipFrame.Position = UDim2.new(0, globalX, 0, globalY-55)
			tipFrame.Position = UDim2.new(0, newX, 0, newY-20)
		end
		local cursorLocation = userInputService:GetMouseLocation()
		if cursorLocation then
			updateTipPositon(cursorLocation.X, cursorLocation.Y)
		end
		self._hoveringMaid:give(self.instances.iconButton.MouseMoved:Connect(updateTipPositon))
	end

	-- Change transparency of relavent tip instances
	for _, settingName in pairs(self._groupSettings.tip) do
		local settingDetail = self._settingsDictionary[settingName]
		settingDetail.useForcedGroupValue = not isVisible
		self:_update(settingName)
	end
end

-- Captions
DEFAULT_FORCED_GROUP_VALUES["caption"] = 1

function Icon:setCaption(text)
	assert(typeof(text) == "string" or text == nil, "Expected string, got "..typeof(text))
	local realText = text or ""
	local isVisible = realText ~= ""
	self.captionText = text
	self.instances.captionLabel.Text = realText
	self.instances.captionContainer.Parent = (isVisible and activeItems) or self.instances.iconContainer
	self._maid.captionContainer = self.instances.captionContainer
	self:_updateIconSize(nil, self:getIconState())
	local captionMaid = Maid.new()
	self._maid.captionMaid = captionMaid
	if isVisible then
		captionMaid:give(self.hoverStarted:Connect(function()
			if not self.isSelected then
				self:displayCaption(true)
			end
		end))
		captionMaid:give(self.hoverEnded:Connect(function()
			self:displayCaption(false)
		end))
		captionMaid:give(self.selected:Connect(function()
			if self.hovering then
				self:displayCaption(false)
			end
		end))
		local iconContainer = self.instances.iconContainer
		captionMaid:give(iconContainer:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
			if self.hovering then
				self:displayCaption()
			end
		end))
		captionMaid:give(iconContainer:GetPropertyChangedSignal("AbsolutePosition"):Connect(function()
			if self.hovering then
				self:displayCaption()
			end
		end))
	end

	-- This adapts the caption size
	local CAPTION_X_MARGIN = 6
	local CAPTION_CONTAINER_Y_SIZE_SCALE = 0.8
	local CAPTION_LABEL_Y_SCALE = 0.58
	local iconSize = self:get("iconSize")
	local labelFont = self:get("captionFont")
	if iconSize and labelFont then
		local cellSizeYOffset = iconSize.Y.Offset
		local cellSizeYScale = iconSize.Y.Scale
		local iconContainer = self.instances.iconContainer
		local captionContainer = self.instances.captionContainer
		if isVisible then
			local cellHeight = cellSizeYOffset + (cellSizeYScale * iconContainer.Parent.AbsoluteSize.Y)
			local captionLabel = self.instances.captionLabel
			local captionContainerHeight = cellHeight * CAPTION_CONTAINER_Y_SIZE_SCALE
			local captionLabelHeight = captionContainerHeight * CAPTION_LABEL_Y_SCALE
			local textWidth = textService:GetTextSize(self.captionText, captionLabelHeight, labelFont, Vector2.new(10000, captionLabelHeight)).X
			captionLabel.TextSize = captionLabelHeight
			captionLabel.Size = UDim2.new(0, textWidth, CAPTION_LABEL_Y_SCALE, 0)
			captionContainer.Size = UDim2.new(0, textWidth + CAPTION_X_MARGIN*2, 0, cellHeight*CAPTION_CONTAINER_Y_SIZE_SCALE)
		else
			captionContainer.Size = UDim2.new(0, 0, 0, 0)
		end
	end

	self:displayCaption(self.hovering and isVisible)
	return self
end

function Icon:displayCaption(bool)
	if userInputService.TouchEnabled and not self._draggingFinger then return end
	local yOffset = 8
	
	-- Determine caption position
	if self._draggingFinger then
		yOffset = yOffset + THUMB_OFFSET
	end
	local iconContainer = self.instances.iconContainer
	local captionContainer = self.instances.captionContainer
	local newPos = UDim2.new(0, iconContainer.AbsolutePosition.X+iconContainer.AbsoluteSize.X/2-captionContainer.AbsoluteSize.X/2, 0, iconContainer.AbsolutePosition.Y+(iconContainer.AbsoluteSize.Y*2)+yOffset)
	captionContainer.Position = newPos

	-- Determine caption visibility
	local isVisible = self.captionVisible or false
	if typeof(bool) == "boolean" then
		isVisible = bool
	end
	self.captionVisible = isVisible

	-- Change transparency of relavent caption instances
	local captionFadeInfo = self:get("captionFadeInfo")
	for _, settingName in pairs(self._groupSettings.caption) do
		local settingDetail = self._settingsDictionary[settingName]
		settingDetail.useForcedGroupValue = not isVisible
		self:_update(settingName)
	end
end

-- Join or leave a special feature such as a Dropdown or Menu
function Icon:join(parentIcon, featureName, dontUpdate)
	if self._parentIcon then
		self:leave()
	end
	local newFeatureName = (featureName and featureName:lower()) or "dropdown"
	local beforeName = "before"..featureName:sub(1,1):upper()..featureName:sub(2)
	local parentFrame = parentIcon.instances[featureName.."Frame"]
	self.presentOnTopbar = false
	self.joinedFeatureName = featureName
	self._parentIcon = parentIcon
	self.instances.iconContainer.Parent = parentFrame
	for noticeId, noticeDetail in pairs(self.notices) do
		parentIcon:notify(noticeDetail.clearNoticeEvent, noticeId)
		--parentIcon:notify(noticeDetail.completeSignal, noticeId)
	end
	
	if featureName == "dropdown" then
		local squareCorners = parentIcon:get("dropdownSquareCorners")
		self:set("iconSize", UDim2.new(1, 0, 0, self:get("iconSize", "deselected").Y.Offset), "deselected", beforeName)
		self:set("iconSize", UDim2.new(1, 0, 0, self:get("iconSize", "selected").Y.Offset), "selected", beforeName)
		if squareCorners then
			self:set("iconCornerRadius", UDim.new(0, 0), "deselected", beforeName)
			self:set("iconCornerRadius", UDim.new(0, 0), "selected", beforeName)
		end
		self:set("captionBlockerTransparency", 0.4, nil, beforeName)
	end
	local array = parentIcon[newFeatureName.."Icons"]
	table.insert(array, self)
	if not dontUpdate then
		parentIcon:_updateDropdown()
	end
	parentIcon.deselectWhenOtherIconSelected = false
	--
	IconController:_updateSelectionGroup()
	self:_decideToCallSignal("dropdown")
	self:_decideToCallSignal("menu")
	--
	return self
end

function Icon:leave()
	if self._destroyed or self.instances.iconContainer.Parent == nil then
		return
	end
	local settingsToReset = {"iconSize", "captionBlockerTransparency", "iconCornerRadius"}
	local parentIcon = self._parentIcon
	self.instances.iconContainer.Parent = topbarContainer
	self.presentOnTopbar = true
	self.joinedFeatureName = nil
	local function scanFeature(t, prevReference, updateMethod)
		for i, otherIcon in pairs(t) do
			if otherIcon == self then
				for _, settingName in pairs(settingsToReset) do
					local states = {"deselected", "selected"}
					for _, toggleState in pairs(states) do
						local currentSetting, previousSetting = self:get(settingName, toggleState, prevReference)
						if previousSetting then
							self:set(settingName, previousSetting, toggleState)
						end
					end
				end
				table.remove(t, i)
				updateMethod(parentIcon)
				if #t == 0 then
					self._parentIcon.deselectWhenOtherIconSelected = true
				end
				break
			end
		end
	end
	scanFeature(parentIcon.dropdownIcons, "beforeDropdown", parentIcon._updateDropdown)
	scanFeature(parentIcon.menuIcons, "beforeMenu", parentIcon._updateMenu)
	--
	for noticeId, noticeDetail in pairs(self.notices) do
		local parentIconNoticeDetail = parentIcon.notices[noticeId]
		if parentIconNoticeDetail then
			parentIconNoticeDetail.completeSignal:Fire()
		end
	end
	--
	self._parentIcon = nil
	--
	IconController:_updateSelectionGroup()
	self:_decideToCallSignal("dropdown")
	self:_decideToCallSignal("menu")
	--
	return self
end

function Icon:_decideToCallSignal(featureName)
	local isOpen = self[featureName.."Open"]
	local previousIsOpenName = "_previous"..string.sub(featureName, 1, 1):upper()..featureName:sub(2).."Open"
	local previousIsOpen = self[previousIsOpenName]
	local totalIcons = #self[featureName.."Icons"]
	if isOpen and totalIcons > 0 and previousIsOpen == false then
		self[previousIsOpenName] = true
		self[featureName.."Opened"]:Fire()
	elseif (not isOpen or totalIcons == 0) and previousIsOpen == true then
		self[previousIsOpenName] = false
		self[featureName.."Closed"]:Fire()
	end
end

function Icon:_ignoreClipping(featureName)
	local ignoreClipping = self:get(featureName.."IgnoreClipping")
	if self._parentIcon then
		local maid = self["_"..featureName.."ClippingMaid"]
		local frame = self.instances[featureName.."Container"]
		maid:clean()
		if ignoreClipping then
			local fakeFrame = Instance.new("Frame")
			fakeFrame.Name = frame.Name.."FakeFrame"
			fakeFrame.ClipsDescendants = true
			fakeFrame.BackgroundTransparency = 1
			fakeFrame.Size = frame.Size
			fakeFrame.Position = frame.Position
			fakeFrame.Parent = activeItems
			--
			for a,b in pairs(frame:GetChildren()) do
				b.Parent = fakeFrame
			end
			--
			local function updateSize()
				local absoluteSize = frame.AbsoluteSize
				fakeFrame.Size = UDim2.new(0, absoluteSize.X, 0, absoluteSize.Y)
			end
			maid:give(frame:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
				updateSize()
			end))
			updateSize()
			local function updatePos()
				local absolutePosition = frame.absolutePosition
				fakeFrame.Position = UDim2.new(0, absolutePosition.X, 0, absolutePosition.Y+36)
			end
			maid:give(frame:GetPropertyChangedSignal("AbsolutePosition"):Connect(function()
				updatePos()
			end))
			updatePos()
			maid:give(function()
				for a,b in pairs(fakeFrame:GetChildren()) do
					b.Parent = frame
				end
				fakeFrame.Name = "Destroying..."
				fakeFrame:Destroy()
			end)
		end
	end
	self._ignoreClippingChanged:Fire(featureName, ignoreClipping)
end

-- Dropdowns
function Icon:setDropdown(arrayOfIcons)
	-- Reset any previous icons
	for i, otherIcon in pairs(self.dropdownIcons) do
		otherIcon:leave()
	end
	-- Apply new icons
	if type(arrayOfIcons) == "table" then
		for i, otherIcon in pairs(arrayOfIcons) do
			otherIcon:join(self, "dropdown", true)
		end
	end
	-- Update dropdown
	self:_updateDropdown()
	return self
end

function Icon:_updateDropdown()
	local values = {
		maxIconsBeforeScroll = self:get("dropdownMaxIconsBeforeScroll") or "_NIL",
		minWidth = self:get("dropdownMinWidth") or "_NIL",
		padding = self:get("dropdownListPadding") or "_NIL",
		dropdownAlignment = self:get("dropdownAlignment") or "_NIL",
		iconAlignment = self:get("alignment") or "_NIL",
		scrollBarThickness = self:get("dropdownScrollBarThickness") or "_NIL",
	}
	for k, v in pairs(values) do if v == "_NIL" then return end end
	
	local YPadding = values.padding.Offset
	local dropdownContainer = self.instances.dropdownContainer
	local dropdownFrame = self.instances.dropdownFrame
	local dropdownList = self.instances.dropdownList
	local totalIcons = #self.dropdownIcons

	local lastVisibleIconIndex = (totalIcons > values.maxIconsBeforeScroll and values.maxIconsBeforeScroll) or totalIcons
	local newCanvasSizeY = -YPadding
	local newFrameSizeY = 0
	local newMinWidth = values.minWidth
	table.sort(self.dropdownIcons, function(a,b) return a:get("order") < b:get("order") end)
	for i = 1, totalIcons do
		local otherIcon = self.dropdownIcons[i]
		local _, otherIconSize = otherIcon:get("iconSize", nil, "beforeDropdown")
		local increment = otherIconSize.Y.Offset + YPadding
		if i <= lastVisibleIconIndex then
			newFrameSizeY = newFrameSizeY + increment
		end
		if i == totalIcons then
			newFrameSizeY = newFrameSizeY + increment/4
		end
		newCanvasSizeY = newCanvasSizeY + increment
		local otherIconWidth = otherIconSize.X.Offset --+ 4 + 100 -- the +100 is to allow for notices
		if otherIconWidth > newMinWidth then
			newMinWidth = otherIconWidth
		end
	end

	local finalCanvasSizeY = (lastVisibleIconIndex == totalIcons and 0) or newCanvasSizeY
	self:set("dropdownCanvasSize", UDim2.new(0, 0, 0, finalCanvasSizeY))
	self:set("dropdownSize", UDim2.new(0, (newMinWidth+4)*2, 0, newFrameSizeY))

	-- Set alignment while considering screen bounds
	local dropdownAlignment = values.dropdownAlignment:lower()
	local alignmentDetails = {
		left = {
			AnchorPoint = Vector2.new(0, 0),
			PositionXScale = 0,
			ThicknessMultiplier = 0,
		},
		mid = {
			AnchorPoint = Vector2.new(0.5, 0),
			PositionXScale = 0.5,
			ThicknessMultiplier = 0.5,
		},
		right = {
			AnchorPoint = Vector2.new(0.5, 0),
			PositionXScale = 1,
			FrameAnchorPoint = Vector2.new(0, 0),
			FramePositionXScale = 0,
			ThicknessMultiplier = 1,
		}
	}
	local alignmentDetail = alignmentDetails[dropdownAlignment]
	if not alignmentDetail then
		alignmentDetail = alignmentDetails[values.iconAlignment:lower()]
	end
	dropdownContainer.AnchorPoint = alignmentDetail.AnchorPoint
	dropdownContainer.Position = UDim2.new(alignmentDetail.PositionXScale, 0, 1, YPadding+0)
	local scrollbarThickness = values.scrollBarThickness
	local newThickness = scrollbarThickness * alignmentDetail.ThicknessMultiplier
	local additionalOffset = (dropdownFrame.VerticalScrollBarPosition == Enum.VerticalScrollBarPosition.Right and newThickness) or -newThickness
	dropdownFrame.AnchorPoint = alignmentDetail.FrameAnchorPoint or alignmentDetail.AnchorPoint
	dropdownFrame.Position = UDim2.new(alignmentDetail.FramePositionXScale or alignmentDetail.PositionXScale, additionalOffset, 0, 0)
	self._dropdownCanvasPos = Vector2.new(0, 0)
end

function Icon:_dropdownIgnoreClipping()
	self:_ignoreClipping("dropdown")
end


-- Menus
function Icon:setMenu(arrayOfIcons)
	-- Reset any previous icons
	for i, otherIcon in pairs(self.menuIcons) do
		otherIcon:leave()
	end
	-- Apply new icons
	if type(arrayOfIcons) == "table" then
		for i, otherIcon in pairs(arrayOfIcons) do
			otherIcon:join(self, "menu", true)
		end
	end
	-- Update menu
	self:_updateMenu()
	return self
end

function Icon:_getMenuDirection()
	local direction = (self:get("menuDirection") or "_NIL"):lower()
	local alignment = (self:get("alignment") or "_NIL"):lower()
	if direction ~= "left" and direction ~= "right" then
		direction = (alignment == "left" and "right") or "left" 
	end
	return direction
end

function Icon:_updateMenu()
	local values = {
		maxIconsBeforeScroll = self:get("menuMaxIconsBeforeScroll") or "_NIL",
		direction = self:get("menuDirection") or "_NIL",
		iconAlignment = self:get("alignment") or "_NIL",
		scrollBarThickness = self:get("menuScrollBarThickness") or "_NIL",
	}
	for k, v in pairs(values) do if v == "_NIL" then return end end
	
	local XPadding = IconController[values.iconAlignment.."Gap"]--12
	local menuContainer = self.instances.menuContainer
	local menuFrame = self.instances.menuFrame
	local menuList = self.instances.menuList
	local totalIcons = #self.menuIcons

	local direction = self:_getMenuDirection()
	local lastVisibleIconIndex = (totalIcons > values.maxIconsBeforeScroll and values.maxIconsBeforeScroll) or totalIcons
	local newCanvasSizeX = -XPadding
	local newFrameSizeX = 0
	local newMinHeight = 0
	local sortFunc = (direction == "right" and function(a,b) return a:get("order") < b:get("order") end) or function(a,b) return a:get("order") > b:get("order") end
	table.sort(self.menuIcons, sortFunc)
	for i = 1, totalIcons do
		local otherIcon = self.menuIcons[i]
		local otherIconSize = otherIcon:get("iconSize")
		local increment = otherIconSize.X.Offset + XPadding
		if i <= lastVisibleIconIndex then
			newFrameSizeX = newFrameSizeX + increment
		end
		if i == lastVisibleIconIndex and i ~= totalIcons then
			newFrameSizeX = newFrameSizeX -2--(increment/4)
		end
		newCanvasSizeX = newCanvasSizeX + increment
		local otherIconHeight = otherIconSize.Y.Offset
		if otherIconHeight > newMinHeight then
			newMinHeight = otherIconHeight
		end
	end

	local canvasSize = (lastVisibleIconIndex == totalIcons and 0) or newCanvasSizeX + XPadding
	self:set("menuCanvasSize", UDim2.new(0, canvasSize, 0, 0))
	self:set("menuSize", UDim2.new(0, newFrameSizeX, 0, newMinHeight + values.scrollBarThickness + 3))

	-- Set direction
	local directionDetails = {
		left = {
			containerAnchorPoint = Vector2.new(1, 0),
			containerPosition = UDim2.new(0, -4, 0, 0),
			canvasPosition = Vector2.new(canvasSize, 0)
		},
		right = {
			containerAnchorPoint = Vector2.new(0, 0),
			containerPosition = UDim2.new(1, XPadding-2, 0, 0),
			canvasPosition = Vector2.new(0, 0),
		}
	}
	local directionDetail = directionDetails[direction]
	menuContainer.AnchorPoint = directionDetail.containerAnchorPoint
	menuContainer.Position = directionDetail.containerPosition
	menuFrame.CanvasPosition = directionDetail.canvasPosition
	self._menuCanvasPos = directionDetail.canvasPosition

	menuList.Padding = UDim.new(0, XPadding)
end

function Icon:_menuIgnoreClipping()
	self:_ignoreClipping("menu")
end



-- DESTROY/CLEANUP METHOD
function Icon:destroy()
	if self._destroyed then return end
	IconController.iconRemoved:Fire(self)
	self:clearNotices()
	if self._parentIcon then
		self:leave()
	end
	self:setDropdown()
	self:setMenu()
	self._destroyed = true
	self._maid:clean()
end
Icon.Destroy = Icon.destroy -- an alias for you maid-using Pascal lovers



return Icon]]></ProtectedString>
										<int64 name="SourceAssetId">6311707237</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a70</UniqueId>
									</Properties>
									<Item class="ModuleScript" referent="RBX8e081e1a03b84847acb42a9ba1732a10">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">IconController</string>
											<string name="ScriptGuid">{035290B0-B247-43A8-85C4-4F0F296E8323}</string>
											<ProtectedString name="Source"><![CDATA[--[[ icon_controller:header
## Functions

#### setGameTheme
```lua
IconController.setGameTheme(theme)
```
Sets the default theme which is applied to all existing and future icons.

----
#### setDisplayOrder
```lua
IconController.setDisplayOrder(number)
```
Changes the DisplayOrder of the TopbarPlus ScreenGui to the given value.

----
#### setTopbarEnabled
```lua
IconController.setTopbarEnabled(bool)
```
When set to ``false``, hides all icons created with TopbarPlus. This can also be achieved by calling ``starterGui:SetCore("TopbarEnabled", false)``.

----
#### setGap
```lua
IconController.setGap(integer, alignment)
```
Defines the offset width (i.e. gap) between each icon for the given alignment, ``left``, ``mid``, ``right``, or all alignments if not specified. 

----
#### setLeftOffset
```lua
IconController.setLeftOffset(integer)
```
Defines the offset from the left side of the screen to the nearest left-set icon. 

----
#### setRightOffset
```lua
IconController.setRightOffset(integer)
```
Defines the offset from the right side of the screen to the nearest right-set icon. 

----
#### updateTopbar
```lua
IconController.updateTopbar()
```
Determines how icons should be positioned on the topbar and moves them accordingly.  

----
#### clearIconOnSpawn
```lua
IconController.clearIconOnSpawn(icon)
```
Calls destroy on the given icon when the player respawns. This is useful for scenarious where you wish to cleanup icons that are constructed within a Gui with ``ResetOnSpawn`` set to ``true``. For example:

```lua
-- Place at the bottom of your icon creator localscript
local icons = IconController.getIcons()
for _, icon in pairs(icons) do
	IconController.clearIconOnSpawn(icon)
end
```

----
#### getIcons
```lua
local arrayOfIcons = IconController.getIcons()
```
Returns all icons as an array.

----
#### getIcon
```lua
local icon = IconController.getIcon(name)
```
Returns the icon with the given name (or ``false`` if not found). If multiple icons have the same name, then one will be returned randomly.

----
#### disableHealthbar
```lua
IconController.disableHealthbar(bool)
```
Hides the fake healthbar (if currently visible) and prevents it becoming visible again (which normally occurs when the player takes damage).

----



## Properties
#### mimicCoreGui
```lua
local bool = IconController.mimicCoreGui --[default: 'true']
```
Set to ``false`` to have the topbar persist even when ``game:GetService("StarterGui"):SetCore("TopbarEnabled", false)`` is called.

----
#### controllerModeEnabled
{read-only}
```lua
local bool = IconController.controllerModeEnabled
```

----
#### leftGap
{read-only}
```lua
local gapNumber = IconController.leftGap --[default: '12']
```

----
#### midGap
{read-only}
```lua
local gapNumber = IconController.midGap --[default: '12']
```

----
#### rightGap
{read-only}
```lua
local gapNumber = IconController.rightGap --[default: '12']
```

----
#### leftOffset
{read-only}
```lua
local offset = IconController.leftGap --[default: '0']
```

----
#### rightOffset
{read-only}
```lua
local offset = IconController.rightGap --[default: '0']
```
--]]



-- LOCAL
local starterGui = game:GetService("StarterGui")
local guiService = game:GetService("GuiService")
local hapticService = game:GetService("HapticService")
local runService = game:GetService("RunService")
local userInputService = game:GetService("UserInputService")
local tweenService = game:GetService("TweenService")
local players = game:GetService("Players")
local IconController = {}
local replicatedStorage = game:GetService("ReplicatedStorage")
local Signal = require(script.Parent.Signal)
local TopbarPlusGui = require(script.Parent.TopbarPlusGui)
local topbarIcons = {}
local fakeChatName = "_FakeChat"
local forceTopbarDisabled = false
local menuOpen
local topbarUpdating = false
local STUPID_CONTROLLER_OFFSET = 32



-- LOCAL FUNCTIONS
local function checkTopbarEnabled()
	local success, bool = xpcall(function()
		return starterGui:GetCore("TopbarEnabled")
	end,function(err)
		--has not been registered yet, but default is that is enabled
		return true	
	end)
	return (success and bool)
end

local function checkTopbarEnabledAccountingForMimic()
	local topbarEnabledAccountingForMimic = (checkTopbarEnabled() or not IconController.mimicCoreGui)
	return topbarEnabledAccountingForMimic
end



-- OFFSET HANDLERS
local alignmentDetails = {}
alignmentDetails["left"] = {
	startScale = 0,
	getOffset = function()
		local offset = 48 + IconController.leftOffset
		if checkTopbarEnabled() and starterGui:GetCoreGuiEnabled("Chat") then
			offset += 12 + 32
		end
		return offset
	end,
	getStartOffset = function()
		local alignmentGap = IconController["leftGap"]
		local startOffset = alignmentDetails.left.getOffset() + alignmentGap
		return startOffset
	end,
	records = {}
}
alignmentDetails["mid"] = {
	startScale = 0.5,
	getOffset = function()
		return 0
	end,
	getStartOffset = function(totalIconX) 
		local alignmentGap = IconController["midGap"]
		return -totalIconX/2 + (alignmentGap/2)
	end,
	records = {}
}
alignmentDetails["right"] = {
	startScale = 1,
	getOffset = function()
		local offset = IconController.rightOffset
		if checkTopbarEnabled() and (starterGui:GetCoreGuiEnabled(Enum.CoreGuiType.PlayerList) or starterGui:GetCoreGuiEnabled(Enum.CoreGuiType.Backpack) or starterGui:GetCoreGuiEnabled(Enum.CoreGuiType.EmotesMenu)) then
			offset += 48
		end
		return offset
	end,
	getStartOffset = function(totalIconX)
		local startOffset = -totalIconX - alignmentDetails.right.getOffset()
		return startOffset
	end,
	records = {}
	--reverseSort = true
}



-- PROPERTIES
IconController.topbarEnabled = true
IconController.controllerModeEnabled = false
IconController.previousTopbarEnabled = checkTopbarEnabled()
IconController.leftGap = 12
IconController.midGap = 12
IconController.rightGap = 12
IconController.leftOffset = 0
IconController.rightOffset = 0
IconController.mimicCoreGui = true
IconController.healthbarDisabled = false



-- EVENTS
IconController.iconAdded = Signal.new()
IconController.iconRemoved = Signal.new()
IconController.controllerModeStarted = Signal.new()
IconController.controllerModeEnded = Signal.new()
IconController.healthbarDisabledSignal = Signal.new()



-- CONNECTIONS
local iconCreationCount = 0
IconController.iconAdded:Connect(function(icon)
	topbarIcons[icon] = true
	if IconController.gameTheme then
		icon:setTheme(IconController.gameTheme)
	end
	icon.updated:Connect(function()
		IconController.updateTopbar()
	end)
	-- When this icon is selected, deselect other icons if necessary
	icon.selected:Connect(function()
		local allIcons = IconController.getIcons()
		for _, otherIcon in pairs(allIcons) do
			if icon.deselectWhenOtherIconSelected and otherIcon ~= icon and otherIcon.deselectWhenOtherIconSelected and otherIcon:getToggleState() == "selected" then
				otherIcon:deselect(icon)
			end
		end
	end)
	-- Order by creation if no order specified
	iconCreationCount = iconCreationCount + 1
	icon:setOrder(iconCreationCount)
	-- Apply controller view if enabled
	if IconController.controllerModeEnabled then
		IconController._enableControllerModeForIcon(icon, true)
	end
	IconController:_updateSelectionGroup()
	IconController.updateTopbar()
end)

IconController.iconRemoved:Connect(function(icon)
	topbarIcons[icon] = nil
	icon:setEnabled(false)
	icon:deselect()
	icon.updated:Fire()
	IconController:_updateSelectionGroup()
end)



-- METHODS
function IconController.setGameTheme(theme)
	IconController.gameTheme = theme
	local icons = IconController.getIcons()
	for _, icon in pairs(icons) do
		icon:setTheme(theme)
	end
end

function IconController.setDisplayOrder(value)
	value = tonumber(value) or TopbarPlusGui.DisplayOrder
	TopbarPlusGui.DisplayOrder = value
end
IconController.setDisplayOrder(10)

function IconController.getIcons()
	local allIcons = {}
	for otherIcon, _ in pairs(topbarIcons) do
		table.insert(allIcons, otherIcon)
	end
	return allIcons
end

function IconController.getIcon(name)
	for otherIcon, _ in pairs(topbarIcons) do
		if otherIcon.name == name then
			return otherIcon
		end
	end
	return false
end

function IconController.disableHealthbar(bool)
	local finalBool = (bool == nil or bool)
	IconController.healthbarDisabled = finalBool
	IconController.healthbarDisabledSignal:Fire(finalBool)
end

function IconController.canShowIconOnTopbar(icon)
	if (icon.enabled == true or icon.accountForWhenDisabled) and icon.presentOnTopbar then
		return true
	end
	return false
end

function IconController.getMenuOffset(icon)
	local alignment = icon:get("alignment")
	local alignmentGap = IconController[alignment.."Gap"]
	local iconSize = icon:get("iconSize") or UDim2.new(0, 32, 0, 32)
	local sizeX = iconSize.X.Offset
	local iconWidthAndGap = (sizeX + alignmentGap)
	local extendLeft = 0
	local extendRight = 0
	local additionalRight = 0
	if icon.menuOpen then
		local menuSize = icon:get("menuSize")
		local menuSizeXOffset = menuSize.X.Offset
		local direction = icon:_getMenuDirection()
		if direction == "right" then
			extendRight += menuSizeXOffset + alignmentGap/6--2
		elseif direction == "left" then
			extendLeft = menuSizeXOffset + 4
			extendRight += alignmentGap/3--4
			additionalRight = menuSizeXOffset
		end
	end
	return extendLeft, extendRight, additionalRight
end

-- This is responsible for positioning the topbar icons
local requestedTopbarUpdate = false
function IconController.updateTopbar()
	local function getIncrement(otherIcon, alignment)
		--local container = otherIcon.instances.iconContainer
		--local sizeX = container.Size.X.Offset
		local iconSize = otherIcon:get("iconSize", otherIcon:getIconState()) or UDim2.new(0, 32, 0, 32)
		local sizeX = iconSize.X.Offset
		local alignmentGap = IconController[alignment.."Gap"]
		local iconWidthAndGap = (sizeX + alignmentGap)
		local increment = iconWidthAndGap
		local preOffset = 0
		if otherIcon._parentIcon == nil then
			local extendLeft, extendRight, additionalRight = IconController.getMenuOffset(otherIcon)
			preOffset += extendLeft
			increment += extendRight + additionalRight
		end
		return increment, preOffset
	end
	if topbarUpdating then -- This prevents the topbar updating and shifting icons more than it needs to
		requestedTopbarUpdate = true
		return false
	end
	coroutine.wrap(function()
		topbarUpdating = true
		runService.Heartbeat:Wait()
		topbarUpdating = false
		
		for alignment, alignmentInfo in pairs(alignmentDetails) do
			alignmentInfo.records = {}
		end

		for otherIcon, _ in pairs(topbarIcons) do
			if IconController.canShowIconOnTopbar(otherIcon) then
				local alignment = otherIcon:get("alignment")
				table.insert(alignmentDetails[alignment].records, otherIcon)
			end
		end
		local viewportSize = workspace.CurrentCamera.ViewportSize
		for alignment, alignmentInfo in pairs(alignmentDetails) do
			local records = alignmentInfo.records
			if #records > 1 then
				if alignmentInfo.reverseSort then
					table.sort(records, function(a,b) return a:get("order") > b:get("order") end)
				else
					table.sort(records, function(a,b) return a:get("order") < b:get("order") end)
				end
			end
			local totalIconX = 0
			for i, otherIcon in pairs(records) do
				local increment = getIncrement(otherIcon, alignment)
				totalIconX = totalIconX + increment
			end
			local offsetX = alignmentInfo.getStartOffset(totalIconX, alignment)
			local preOffsetX = offsetX
			local containerX = TopbarPlusGui.TopbarContainer.AbsoluteSize.X
			for i, otherIcon in pairs(records) do
				local increment, preOffset = getIncrement(otherIcon, alignment)
				local newAbsoluteX = alignmentInfo.startScale*containerX + preOffsetX+preOffset
				preOffsetX = preOffsetX + increment
			end
			for i, otherIcon in pairs(records) do
				local container = otherIcon.instances.iconContainer
				local increment, preOffset = getIncrement(otherIcon, alignment)
				local topPadding = otherIcon.topPadding
				local newPositon = UDim2.new(alignmentInfo.startScale, offsetX+preOffset, topPadding.Scale, topPadding.Offset)
				local isAnOverflowIcon = string.match(otherIcon.name, "_overflowIcon-")
				local repositionInfo = otherIcon:get("repositionInfo")
				if repositionInfo then
					tweenService:Create(container, repositionInfo, {Position = newPositon}):Play()
				else
					container.Position = newPositon
				end
				offsetX = offsetX + increment
				otherIcon.targetPosition = UDim2.new(0, (newPositon.X.Scale*viewportSize.X) + newPositon.X.Offset, 0, (newPositon.Y.Scale*viewportSize.Y) + newPositon.Y.Offset)
			end
		end

		-- OVERFLOW HANDLER
		--------
		local START_LEEWAY = 10 -- The additional offset where the end icon will be converted to ... without an apparant change in position
		local function getBoundaryX(iconToCheck, side, gap)
			local additionalGap = gap or 0
			local currentSize = iconToCheck:get("iconSize", iconToCheck:getIconState())
			local sizeX = currentSize.X.Offset
			local extendLeft, extendRight = IconController.getMenuOffset(iconToCheck)
			local boundaryXOffset = (side == "left" and (-additionalGap-extendLeft)) or (side == "right" and sizeX+additionalGap+extendRight)
			local boundaryX = iconToCheck.targetPosition.X.Offset + boundaryXOffset
			return boundaryX
		end
		local function getSizeX(iconToCheck, usePrevious)
			local currentSize, previousSize = iconToCheck:get("iconSize", iconToCheck:getIconState(), "beforeDropdown")
			local hoveringSize = iconToCheck:get("iconSize", "hovering")
			if iconToCheck.wasHoveringBeforeOverflow and previousSize and hoveringSize and hoveringSize.X.Offset > previousSize.X.Offset then
				-- This prevents hovering icons flicking back and forth, demonstrated at thread/1017485/191.
				previousSize = hoveringSize
			end
			local newSize = (usePrevious and previousSize) or currentSize
			local extendLeft, extendRight = IconController.getMenuOffset(iconToCheck)
			local sizeX = newSize.X.Offset + extendLeft + extendRight
			return sizeX
		end

		for alignment, alignmentInfo in pairs(alignmentDetails) do
			local overflowIcon = alignmentInfo.overflowIcon
			if overflowIcon then
				local alignmentGap = IconController[alignment.."Gap"]
				local oppositeAlignment = (alignment == "left" and "right") or "left"
				local oppositeAlignmentInfo = alignmentDetails[oppositeAlignment]
				local oppositeOverflowIcon = IconController.getIcon("_overflowIcon-"..oppositeAlignment)
				
				-- This determines whether any icons (from opposite or mid alignment) are overlapping with this alignment
				local overflowBoundaryX = getBoundaryX(overflowIcon, alignment)
				if overflowIcon.enabled then
					overflowBoundaryX = getBoundaryX(overflowIcon, oppositeAlignment, alignmentGap)
				end
				local function doesExceed(givenBoundaryX)
					local exceeds = (alignment == "left" and givenBoundaryX < overflowBoundaryX) or (alignment == "right" and givenBoundaryX > overflowBoundaryX)
					return exceeds
				end
				local alignmentOffset = oppositeAlignmentInfo.getOffset()
				if not overflowIcon.enabled then
					alignmentOffset += START_LEEWAY
				end
				local alignmentBorderX = (alignment == "left" and viewportSize.X - alignmentOffset) or (alignment == "right" and alignmentOffset)
				local closestBoundaryX = alignmentBorderX
				local exceededCriticalBoundary = doesExceed(closestBoundaryX)
				local function checkBoundaryExceeded(recordToCheck)
					local totalIcons = #recordToCheck
					for i = 1, totalIcons do
						local endIcon = recordToCheck[totalIcons+1 - i]
						if IconController.canShowIconOnTopbar(endIcon) then
							local isAnOverflowIcon = string.match(endIcon.name, "_overflowIcon-")
							if isAnOverflowIcon and totalIcons ~= 1 then
								break
							elseif isAnOverflowIcon and not endIcon.enabled then
								continue
							end
							local additionalMyX = 0
							if not overflowIcon.enabled then
								additionalMyX = START_LEEWAY
							end
							local myBoundaryX = getBoundaryX(endIcon, alignment, additionalMyX)
							local isNowClosest = (alignment == "left" and myBoundaryX < closestBoundaryX) or (alignment == "right" and myBoundaryX > closestBoundaryX)
							if isNowClosest then
								closestBoundaryX = myBoundaryX
								if doesExceed(myBoundaryX) then
									exceededCriticalBoundary = true
								end
							end
						end
					end
				end
				checkBoundaryExceeded(alignmentDetails[oppositeAlignment].records)
				checkBoundaryExceeded(alignmentDetails.mid.records)

				-- This determines which icons to give to the overflow if an overlap is present
				if exceededCriticalBoundary then
					local recordToCheck = alignmentInfo.records
					local totalIcons = #recordToCheck
					for i = 1, totalIcons do
						local endIcon = (alignment == "left" and recordToCheck[totalIcons+1 - i]) or (alignment == "right" and recordToCheck[i])
						if endIcon ~= overflowIcon and IconController.canShowIconOnTopbar(endIcon) then
							local additionalGap = alignmentGap
							local overflowIconSizeX = overflowIcon:get("iconSize", overflowIcon:getIconState()).X.Offset
							if overflowIcon.enabled then
								additionalGap += alignmentGap + overflowIconSizeX
							end
							local myBoundaryXPlusGap = getBoundaryX(endIcon, oppositeAlignment, additionalGap)
							local exceeds = (alignment == "left" and myBoundaryXPlusGap >= closestBoundaryX) or (alignment == "right" and myBoundaryXPlusGap <= closestBoundaryX)
							if exceeds then
								if not overflowIcon.enabled then
									local overflowContainer = overflowIcon.instances.iconContainer
									local yPos = overflowContainer.Position.Y
									local appearXAdditional = (alignment == "left" and -overflowContainer.Size.X.Offset) or 0
									local appearX = getBoundaryX(endIcon, oppositeAlignment, appearXAdditional)
									overflowContainer.Position = UDim2.new(0, appearX, yPos.Scale, yPos.Offset)
									overflowIcon:setEnabled(true)
								end
								if #endIcon.dropdownIcons > 0 then
									endIcon._overflowConvertedToMenu = true
									local wasSelected = endIcon.isSelected
									endIcon:deselect()
									local iconsToConvert = {}
									for _, dIcon in pairs(endIcon.dropdownIcons) do
										table.insert(iconsToConvert, dIcon)
									end
									for _, dIcon in pairs(endIcon.dropdownIcons) do
										dIcon:leave()
									end
									endIcon:setMenu(iconsToConvert)
									if wasSelected and overflowIcon.isSelected then
										endIcon:select()
									end
								end
								if endIcon.hovering then
									endIcon.wasHoveringBeforeOverflow = true
								end
								endIcon:join(overflowIcon, "dropdown")
								if #endIcon.menuIcons > 0 and endIcon.menuOpen then
									endIcon:deselect()
									endIcon:select()
									overflowIcon:select()
								end
							end
							break
						end
					end
				
				else
					
					-- This checks to see if the lowest/highest (depending on left/right) ordered overlapping icon is no longer overlapping, removes from the dropdown, and repeats if valid
					local winningOrder, winningOverlappedIcon
					local totalOverlappingIcons = #overflowIcon.dropdownIcons
					if not (oppositeOverflowIcon and oppositeOverflowIcon.enabled and #alignmentInfo.records == 1 and #oppositeAlignmentInfo.records ~= 1) then
						for _, overlappedIcon in pairs(overflowIcon.dropdownIcons) do
							local iconOrder = overlappedIcon:get("order")
							if winningOverlappedIcon == nil or (alignment == "left" and iconOrder < winningOrder) or (alignment == "right" and iconOrder > winningOrder) then
								winningOrder = iconOrder
								winningOverlappedIcon = overlappedIcon
							end
						end
					end
					if winningOverlappedIcon then
						local sizeX = getSizeX(winningOverlappedIcon, true)
						local myForesightBoundaryX = getBoundaryX(overflowIcon, oppositeAlignment)
						if totalOverlappingIcons == 1 then
							myForesightBoundaryX = getBoundaryX(overflowIcon, alignment, alignmentGap-START_LEEWAY)
						end
						local availableGap = math.abs(closestBoundaryX - myForesightBoundaryX) - (alignmentGap*2)
						local noLongerExeeds = (sizeX < availableGap)
						if noLongerExeeds then
							if #overflowIcon.dropdownIcons == 1 then
								overflowIcon:setEnabled(false)
							end
							local overflowContainer = overflowIcon.instances.iconContainer
							local yPos = overflowContainer.Position.Y
							overflowContainer.Position = UDim2.new(0, myForesightBoundaryX, yPos.Scale, yPos.Offset)
							winningOverlappedIcon:leave()
							winningOverlappedIcon.wasHoveringBeforeOverflow = nil
							--
							if winningOverlappedIcon._overflowConvertedToMenu then
								winningOverlappedIcon._overflowConvertedToMenu = nil
								local iconsToConvert = {}
								for _, dIcon in pairs(winningOverlappedIcon.menuIcons) do
									table.insert(iconsToConvert, dIcon)
								end
								for _, dIcon in pairs(winningOverlappedIcon.menuIcons) do
									dIcon:leave()
								end
								winningOverlappedIcon:setDropdown(iconsToConvert)
							end
							--
						end
					end

				end
			end
		end
		--------
		if requestedTopbarUpdate then
			requestedTopbarUpdate = false
			IconController.updateTopbar()
		end
		return true
	end)()
end

function IconController.setTopbarEnabled(bool, forceBool)
	if forceBool == nil then
		forceBool = true
	end
	local indicator = TopbarPlusGui.Indicator
	if forceBool and not bool then
		forceTopbarDisabled = true
	elseif forceBool and bool then
		forceTopbarDisabled = false
	end
	local topbarEnabledAccountingForMimic = checkTopbarEnabledAccountingForMimic()
	if IconController.controllerModeEnabled then
		if bool then
			if TopbarPlusGui.TopbarContainer.Visible or forceTopbarDisabled or menuOpen or not topbarEnabledAccountingForMimic then return end
			if forceBool then
				indicator.Visible = topbarEnabledAccountingForMimic
			else
				if hapticService:IsVibrationSupported(Enum.UserInputType.Gamepad1) and hapticService:IsMotorSupported(Enum.UserInputType.Gamepad1,Enum.VibrationMotor.Small) then
					hapticService:SetMotor(Enum.UserInputType.Gamepad1,Enum.VibrationMotor.Small,1)
					delay(0.2,function()
						pcall(function()
							hapticService:SetMotor(Enum.UserInputType.Gamepad1,Enum.VibrationMotor.Small,0)
						end)
					end)
				end
				TopbarPlusGui.TopbarContainer.Visible = true
				TopbarPlusGui.TopbarContainer:TweenPosition(
					UDim2.new(0,0,0,5 + STUPID_CONTROLLER_OFFSET),
					Enum.EasingDirection.Out,
					Enum.EasingStyle.Quad,
					0.1,
					true
				)
				
				
				local selectIcon
				local targetOffset = 0
				IconController:_updateSelectionGroup()
				runService.Heartbeat:Wait()
				local indicatorSizeTrip = 50 --indicator.AbsoluteSize.Y * 2
				for otherIcon, _ in pairs(topbarIcons) do
					if IconController.canShowIconOnTopbar(otherIcon) and (selectIcon == nil or otherIcon:get("order") > selectIcon:get("order")) then
						selectIcon = otherIcon
					end
					local container = otherIcon.instances.iconContainer
					local newTargetOffset = -27 + container.AbsoluteSize.Y + indicatorSizeTrip
					if newTargetOffset > targetOffset then
						targetOffset = newTargetOffset
					end
				end
				if guiService:GetEmotesMenuOpen() then
					guiService:SetEmotesMenuOpen(false)
				end
				if guiService:GetInspectMenuEnabled() then
					guiService:CloseInspectMenu()
				end
				local newSelectedObject = IconController._previousSelectedObject or selectIcon.instances.iconButton
				IconController._setControllerSelectedObject(newSelectedObject)
				indicator.Image = "rbxassetid://5278151071"
				indicator:TweenPosition(
					UDim2.new(0.5,0,0,targetOffset + STUPID_CONTROLLER_OFFSET),
					Enum.EasingDirection.Out,
					Enum.EasingStyle.Quad,
					0.1,
					true
				)
			end
		else
			if forceBool then
				indicator.Visible = false
			else
				indicator.Visible = topbarEnabledAccountingForMimic
			end
			if not TopbarPlusGui.TopbarContainer.Visible then return end
			guiService.AutoSelectGuiEnabled = true
			IconController:_updateSelectionGroup(true)
			TopbarPlusGui.TopbarContainer:TweenPosition(
				UDim2.new(0,0,0,-TopbarPlusGui.TopbarContainer.Size.Y.Offset + STUPID_CONTROLLER_OFFSET),
				Enum.EasingDirection.Out,
				Enum.EasingStyle.Quad,
				0.1,
				true,
				function()
					TopbarPlusGui.TopbarContainer.Visible = false
				end
			)
			indicator.Image = "rbxassetid://5278151556"
			indicator:TweenPosition(
				UDim2.new(0.5,0,0,5),
				Enum.EasingDirection.Out,
				Enum.EasingStyle.Quad,
				0.1,
				true
			)
		end
	else
		local topbarContainer = TopbarPlusGui.TopbarContainer
		if topbarEnabledAccountingForMimic then
			topbarContainer.Visible = bool
		else
			topbarContainer.Visible = false
		end
	end
end

function IconController.setGap(value, alignment)
	local newValue = tonumber(value) or 12
	local newAlignment = tostring(alignment):lower()
	if newAlignment == "left" or newAlignment == "mid" or newAlignment == "right" then
		IconController[newAlignment.."Gap"] = newValue
		IconController.updateTopbar()
		return
	end
	IconController.leftGap = newValue
	IconController.midGap = newValue
	IconController.rightGap = newValue
	IconController.updateTopbar()
end

function IconController.setLeftOffset(value)
	IconController.leftOffset = tonumber(value) or 0
	IconController.updateTopbar()
end

function IconController.setRightOffset(value)
	IconController.rightOffset = tonumber(value) or 0
	IconController.updateTopbar()
end

local localPlayer = players.LocalPlayer
local iconsToClearOnSpawn = {}
localPlayer.CharacterAdded:Connect(function()
	for _, icon in pairs(iconsToClearOnSpawn) do
		icon:destroy()
	end
	iconsToClearOnSpawn = {}
end)
function IconController.clearIconOnSpawn(icon)
	coroutine.wrap(function()
		local char = localPlayer.Character or localPlayer.CharacterAdded:Wait()
		table.insert(iconsToClearOnSpawn, icon)
	end)()
end



-- PRIVATE METHODS
function IconController:_updateSelectionGroup(clearAll)
	if IconController._navigationEnabled then
		guiService:RemoveSelectionGroup("TopbarPlusIcons")
	end
	if clearAll then
		guiService.CoreGuiNavigationEnabled = IconController._originalCoreGuiNavigationEnabled
		guiService.GuiNavigationEnabled = IconController._originalGuiNavigationEnabled
		IconController._navigationEnabled = nil
	elseif IconController.controllerModeEnabled then
		local icons = IconController.getIcons()
		local iconContainers = {}
		for i, otherIcon in pairs(icons) do
			local featureName = otherIcon.joinedFeatureName
			if not featureName or otherIcon._parentIcon[otherIcon.joinedFeatureName.."Open"] == true then
				table.insert(iconContainers, otherIcon.instances.iconButton)
			end
		end
		guiService:AddSelectionTuple("TopbarPlusIcons", table.unpack(iconContainers))
		if not IconController._navigationEnabled then
			IconController._originalCoreGuiNavigationEnabled = guiService.CoreGuiNavigationEnabled
			IconController._originalGuiNavigationEnabled = guiService.GuiNavigationEnabled
			guiService.CoreGuiNavigationEnabled = false
			guiService.GuiNavigationEnabled = true
			IconController._navigationEnabled = true
		end
	end
end

local function getScaleMultiplier()
	if guiService:IsTenFootInterface() then
		return 3
	else
		return 1.3
	end
end

function IconController._setControllerSelectedObject(object)
	local startId = (IconController._controllerSetCount and IconController._controllerSetCount + 1) or 0
	IconController._controllerSetCount = startId
	guiService.SelectedObject = object
	delay(0.1, function() -- blame the roblox guiservice its a piece of doo doo
		local finalId = IconController._controllerSetCount
		if startId == finalId then
			guiService.SelectedObject = object
		end
	end)
end

function IconController._enableControllerMode(bool)
	local indicator = TopbarPlusGui.Indicator
	local controllerOptionIcon = IconController.getIcon("_TopbarControllerOption")
	if IconController.controllerModeEnabled == bool then
		return
	end
	IconController.controllerModeEnabled = bool
	if bool then
		TopbarPlusGui.TopbarContainer.Position = UDim2.new(0,0,0,5)
		TopbarPlusGui.TopbarContainer.Visible = false
		local scaleMultiplier = getScaleMultiplier()
		indicator.Position = UDim2.new(0.5,0,0,5)
		indicator.Size = UDim2.new(0, 18*scaleMultiplier, 0, 18*scaleMultiplier)
		indicator.Image = "rbxassetid://5278151556"
		indicator.Visible = checkTopbarEnabledAccountingForMimic()
		indicator.Position = UDim2.new(0.5,0,0,5)
	else
		TopbarPlusGui.TopbarContainer.Position = UDim2.new(0,0,0,0)
		TopbarPlusGui.TopbarContainer.Visible = checkTopbarEnabledAccountingForMimic()
		indicator.Visible = false
		IconController._setControllerSelectedObject(nil)
	end
	for icon, _ in pairs(topbarIcons) do
		IconController._enableControllerModeForIcon(icon, bool)
	end
end

function IconController._enableControllerModeForIcon(icon, bool)
	local parentIcon = icon._parentIcon
	local featureName = icon.joinedFeatureName
	if parentIcon then
		icon:leave()
	end
	if bool then
		local scaleMultiplier = getScaleMultiplier()
		local currentSizeDeselected = icon:get("iconSize", "deselected")
		local currentSizeSelected = icon:get("iconSize", "selected")
		local currentSizeHovering = icon:getHovering("iconSize")
		icon:set("iconSize", UDim2.new(0, currentSizeDeselected.X.Offset*scaleMultiplier, 0, currentSizeDeselected.Y.Offset*scaleMultiplier), "deselected", "controllerMode")
		icon:set("iconSize", UDim2.new(0, currentSizeSelected.X.Offset*scaleMultiplier, 0, currentSizeSelected.Y.Offset*scaleMultiplier), "selected", "controllerMode")
		if currentSizeHovering then
			icon:set("iconSize", UDim2.new(0, currentSizeSelected.X.Offset*scaleMultiplier, 0, currentSizeSelected.Y.Offset*scaleMultiplier), "hovering", "controllerMode")
		end
		icon:set("alignment", "mid", "deselected", "controllerMode")
		icon:set("alignment", "mid", "selected", "controllerMode")
	else
		local states = {"deselected", "selected", "hovering"}
		for _, iconState in pairs(states) do
			local _, previousAlignment = icon:get("alignment", iconState, "controllerMode")
			if previousAlignment then
				icon:set("alignment", previousAlignment, iconState)
			end
			local currentSize, previousSize = icon:get("iconSize", iconState, "controllerMode")
			if previousSize then
				icon:set("iconSize", previousSize, iconState)
			end
		end
	end
	if parentIcon then
		icon:join(parentIcon, featureName)
	end
end

local createdFakeHealthbarIcon = false
function IconController.setupHealthbar()

	if createdFakeHealthbarIcon then
		return
	end
	createdFakeHealthbarIcon = true

	-- Create a fake healthbar icon to mimic the core health gui
	task.defer(function()
		runService.Heartbeat:Wait()
		local Icon = require(script.Parent)

		Icon.new()
			:setProperty("internalIcon", true)
			:setName("_FakeHealthbar")
			:setRight()
			:setOrder(-420)
			:setSize(80, 32)
			:lock()
			:set("iconBackgroundTransparency", 1)
			:give(function(icon)

				local healthContainer = Instance.new("Frame")
				healthContainer.Name = "HealthContainer"
				healthContainer.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
				healthContainer.BorderSizePixel = 0
				healthContainer.AnchorPoint = Vector2.new(0, 0.5)
				healthContainer.Position = UDim2.new(0, 0, 0.5, 0)
				healthContainer.Size = UDim2.new(1, 0, 0.2, 0)
				healthContainer.Visible = true
				healthContainer.ZIndex = 11
				healthContainer.Parent = icon.instances.iconButton

				local corner = Instance.new("UICorner")
				corner.CornerRadius = UDim.new(1, 0)
				corner.Parent = healthContainer

				local healthFrame = healthContainer:Clone()
				healthFrame.Name = "HealthFrame"
				healthFrame.BackgroundColor3 = Color3.fromRGB(167, 167, 167)
				healthFrame.BorderSizePixel = 0
				healthFrame.AnchorPoint = Vector2.new(0.5, 0.5)
				healthFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
				healthFrame.Size = UDim2.new(1, -2, 1, -2)
				healthFrame.Visible = true
				healthFrame.ZIndex = 12
				healthFrame.Parent = healthContainer

				local healthBar = healthFrame:Clone()
				healthBar.Name = "HealthBar"
				healthBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				healthBar.BorderSizePixel = 0
				healthBar.AnchorPoint = Vector2.new(0, 0.5)
				healthBar.Position = UDim2.new(0, 0, 0.5, 0)
				healthBar.Size = UDim2.new(0.5, 0, 1, 0)
				healthBar.Visible = true
				healthBar.ZIndex = 13
				healthBar.Parent = healthFrame

				local START_HEALTHBAR_COLOR = Color3.fromRGB(27, 252, 107)
				local MID_HEALTHBAR_COLOR = Color3.fromRGB(250, 235, 0)
				local END_HEALTHBAR_COLOR = Color3.fromRGB(255, 28, 0)

				local function powColor3(color, pow)
					return Color3.new(
						math.pow(color.R, pow),
						math.pow(color.G, pow),
						math.pow(color.B, pow)
					)
				end

				local function lerpColor(colorA, colorB, frac, gamma)
					gamma = gamma or 2.0
					local CA = powColor3(colorA, gamma)
					local CB = powColor3(colorB, gamma)
					return powColor3(CA:Lerp(CB, frac), 1/gamma)
				end

				local firstTimeEnabling = true
				local function listenToHealth(character)
					if not character then
						return
					end
					local humanoid = character:WaitForChild("Humanoid", 10)
					if not humanoid then
						return
					end

					local function updateHealthBar()
						local realHealthbarEnabled = starterGui:GetCoreGuiEnabled(Enum.CoreGuiType.Health)
						local healthInterval = humanoid.Health / humanoid.MaxHealth
						if healthInterval == 1 or IconController.healthbarDisabled or (firstTimeEnabling and realHealthbarEnabled == false) then
							if icon.enabled then
								icon:setEnabled(false)
							end
							return
						elseif healthInterval < 1 then
							if not icon.enabled then
								icon:setEnabled(true)
							end
							firstTimeEnabling = false
							if realHealthbarEnabled then
								starterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Health, false)
							end
						end
						local startInterval = 0.9
						local endInterval = 0.1
						local m = 1/(startInterval - endInterval)
						local c = -m*endInterval
						local colorIntervalAbsolute = (m*healthInterval) + c
						local colorInterval = (colorIntervalAbsolute > 1 and 1) or (colorIntervalAbsolute < 0 and 0) or colorIntervalAbsolute
						local firstColor = (healthInterval > 0.5 and START_HEALTHBAR_COLOR) or MID_HEALTHBAR_COLOR
						local lastColor = (healthInterval > 0.5 and MID_HEALTHBAR_COLOR) or END_HEALTHBAR_COLOR
						local doubleSubtractor = (1-colorInterval)*2
						local modifiedColorInterval = (healthInterval > 0.5 and (1-doubleSubtractor)) or (2-doubleSubtractor)
						local newHealthFillColor = lerpColor(lastColor, firstColor, modifiedColorInterval)
						local newHealthFillSize = UDim2.new(healthInterval, 0, 1, 0)
						healthBar.BackgroundColor3 = newHealthFillColor
						healthBar.Size = newHealthFillSize
					end

					humanoid.HealthChanged:Connect(updateHealthBar)
					IconController.healthbarDisabledSignal:Connect(updateHealthBar)
					updateHealthBar()
				end
				localPlayer.CharacterAdded:Connect(function(character)
					listenToHealth(character)
				end)
				task.spawn(listenToHealth, localPlayer.Character)
			end)
	end)
end



-- BEHAVIOUR
--Controller support
coroutine.wrap(function()
	
	-- Create PC 'Enter Controller Mode' Icon
	runService.Heartbeat:Wait() -- This is required to prevent an infinite recursion
	local Icon = require(script.Parent)
	local controllerOptionIcon = Icon.new()
		:setProperty("internalIcon", true)
		:setName("_TopbarControllerOption")
		:setOrder(100)
		:setImage("rbxassetid://5278150942")
		:setRight()
		:setEnabled(false)
		:setTip("Controller mode")
		:setProperty("deselectWhenOtherIconSelected", false)

	-- This decides what controller widgets and displays to show based upon their connected inputs
	-- For example, if on PC with a controller, give the player the option to enable controller mode with a toggle
	-- While if using a console (no mouse, but controller) then bypass the toggle and automatically enable controller mode
	local function determineDisplay()
		local mouseEnabled = userInputService.MouseEnabled
		local controllerEnabled = userInputService.GamepadEnabled
		local iconIsSelected = controllerOptionIcon.isSelected
		if mouseEnabled and controllerEnabled then
			-- Show icon
			controllerOptionIcon:setEnabled(true)
		elseif mouseEnabled and not controllerEnabled then
			-- Hide icon, disableControllerMode
			controllerOptionIcon:setEnabled(false)
			IconController._enableControllerMode(false)
			controllerOptionIcon:deselect()
		elseif not mouseEnabled and controllerEnabled then
			-- Hide icon, _enableControllerMode
			controllerOptionIcon:setEnabled(false)
			IconController._enableControllerMode(true)
		end
	end
	userInputService:GetPropertyChangedSignal("MouseEnabled"):Connect(determineDisplay)
	userInputService.GamepadConnected:Connect(determineDisplay)
	userInputService.GamepadDisconnected:Connect(determineDisplay)
	determineDisplay()

	-- Enable/Disable Controller Mode when icon clicked
	local function iconClicked()
		local isSelected = controllerOptionIcon.isSelected
		local iconTip = (isSelected and "Normal mode") or "Controller mode"
		controllerOptionIcon:setTip(iconTip)
		IconController._enableControllerMode(isSelected)
	end
	controllerOptionIcon.selected:Connect(iconClicked)
	controllerOptionIcon.deselected:Connect(iconClicked)

	-- Hide/show topbar when indicator action selected in controller mode
	userInputService.InputBegan:Connect(function(input,gpe)
		if not IconController.controllerModeEnabled then return end
		if input.KeyCode == Enum.KeyCode.DPadDown then
			if not guiService.SelectedObject and checkTopbarEnabledAccountingForMimic() then
				IconController.setTopbarEnabled(true,false)
			end
		elseif input.KeyCode == Enum.KeyCode.ButtonB then
			IconController._previousSelectedObject = guiService.SelectedObject
			IconController._setControllerSelectedObject(nil)
			IconController.setTopbarEnabled(false,false)
		end
		input:Destroy()
	end)

	-- Setup overflow icons
	for alignment, detail in pairs(alignmentDetails) do
		if alignment ~= "mid" then
			local overflowName = "_overflowIcon-"..alignment
			local overflowIcon = Icon.new()
				:setProperty("internalIcon", true)
				:setImage(6069276526)
				:setName(overflowName)
				:setEnabled(false)
			detail.overflowIcon = overflowIcon
			overflowIcon.accountForWhenDisabled = true
			if alignment == "left" then
				overflowIcon:setOrder(math.huge)
				overflowIcon:setLeft()
				overflowIcon:set("dropdownAlignment", "right")
			elseif alignment == "right" then
				overflowIcon:setOrder(-math.huge)
				overflowIcon:setRight()
				overflowIcon:set("dropdownAlignment", "left")
			end
			overflowIcon.lockedSettings = {
				["iconImage"] = true,
				["order"] = true,
				["alignment"] = true,
			}
		end
	end
end)()

-- Mimic the enabling of the topbar when StarterGui:SetCore("TopbarEnabled", state) is called
coroutine.wrap(function()
	local chatScript = players.LocalPlayer.PlayerScripts:WaitForChild("ChatScript", 4) or game:GetService("Chat"):WaitForChild("ChatScript", 4)
	if not chatScript then return end
	local chatMain = chatScript:FindFirstChild("ChatMain")
	if not chatMain then return end
	local ChatMain = require(chatMain)
	ChatMain.CoreGuiEnabled:connect(function()
		local topbarEnabled = checkTopbarEnabled()
		if topbarEnabled == IconController.previousTopbarEnabled then
			IconController.updateTopbar()
			return "SetCoreGuiEnabled was called instead of SetCore"
		end
		if IconController.mimicCoreGui then
			IconController.previousTopbarEnabled = topbarEnabled
			if IconController.controllerModeEnabled then
				IconController.setTopbarEnabled(false,false)
			else
				IconController.setTopbarEnabled(topbarEnabled,false)
			end
		end
		IconController.updateTopbar()
	end)
	local makeVisible = checkTopbarEnabled()
	if not makeVisible and not IconController.mimicCoreGui then
		makeVisible = true
	end
	IconController.setTopbarEnabled(makeVisible, false)
end)()

-- Mimic roblox menu when opened and closed
guiService.MenuClosed:Connect(function()
	menuOpen = false
	if not IconController.controllerModeEnabled then
		IconController.setTopbarEnabled(IconController.topbarEnabled,false)
	end
end)
guiService.MenuOpened:Connect(function()
	menuOpen = true
	IconController.setTopbarEnabled(false,false)
end)

-- Add icons to an overflow if they overlap the screen bounds or other icons
workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(function()
	IconController.updateTopbar()
end)



return IconController]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a71</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBXbd0e49eabc36442c9cdbb01cb591991c">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Maid</string>
											<string name="ScriptGuid">{E1B38BFD-6F9D-4505-B385-E92C8F385540}</string>
											<ProtectedString name="Source"><![CDATA[-- Maid
-- Author: Quenty
-- Source: https://github.com/Quenty/NevermoreEngine/blob/8ef4242a880c645b2f82a706e8074e74f23aab06/Modules/Shared/Events/Maid.lua
-- License: MIT (https://github.com/Quenty/NevermoreEngine/blob/version2/LICENSE.md)


---	Manages the cleaning of events and other things.
-- Useful for encapsulating state and make deconstructors easy
-- @classmod Maid
-- @see Signal

local Maid = {}
Maid.ClassName = "Maid"

--- Returns a new Maid object
-- @constructor Maid.new()
-- @treturn Maid
function Maid.new()
	return setmetatable({
		_tasks = {}
	}, Maid)
end

function Maid.isMaid(value)
	return type(value) == "table" and value.ClassName == "Maid"
end

--- Returns Maid[key] if not part of Maid metatable
-- @return Maid[key] value
function Maid:__index(index)
	if Maid[index] then
		return Maid[index]
	else
		return self._tasks[index]
	end
end

--- Add a task to clean up. Tasks given to a maid will be cleaned when
--  maid[index] is set to a different value.
-- @usage
-- Maid[key] = (function)         Adds a task to perform
-- Maid[key] = (event connection) Manages an event connection
-- Maid[key] = (Maid)             Maids can act as an event connection, allowing a Maid to have other maids to clean up.
-- Maid[key] = (Object)           Maids can cleanup objects with a `Destroy` method
-- Maid[key] = nil                Removes a named task. If the task is an event, it is disconnected. If it is an object,
--                                it is destroyed.
function Maid:__newindex(index, newTask)
	if Maid[index] ~= nil then
		error(("'%s' is reserved"):format(tostring(index)), 2)
	end

	local tasks = self._tasks
	local oldTask = tasks[index]

	if oldTask == newTask then
		return
	end

	tasks[index] = newTask

	if oldTask then
		if type(oldTask) == "function" then
			oldTask()
		elseif typeof(oldTask) == "RBXScriptConnection" then
			oldTask:Disconnect()
		elseif oldTask.Destroy then
			oldTask:Destroy()
		elseif oldTask.destroy then
			oldTask:destroy()
		end
	end
end

--- Same as indexing, but uses an incremented number as a key.
-- @param task An item to clean
-- @treturn number taskId
function Maid:giveTask(task)
	if not task then
		error("Task cannot be false or nil", 2)
	end

	local taskId = #self._tasks+1
	self[taskId] = task

	if type(task) == "table" and (not (task.Destroy or task.destroy)) then
		warn("[Maid.GiveTask] - Gave table task without .Destroy\n\n" .. debug.traceback())
	end

	return taskId
end

--[[ I wont' be using promises for TopbarPlus so we can ignore this method
function Maid:givePromise(promise)
	if (promise:getStatus() ~= Promise.Status.Started) then
		return promise
	end

	local newPromise = Promise.resolve(promise)
	local id = self:giveTask(newPromise)

	-- Ensure GC
	newPromise:finally(function()
		self[id] = nil
	end)

	return newPromise, id
end--]]

function Maid:give(taskOrPromise)
	local taskId
	if type(taskOrPromise) == "table" and taskOrPromise.isAPromise then
		_, taskId = self:givePromise(taskOrPromise)
	else
		taskId = self:giveTask(taskOrPromise)
	end
	return taskOrPromise, taskId
end

--- Cleans up all tasks.
-- @alias Destroy
function Maid:doCleaning()
	local tasks = self._tasks

	-- Disconnect all events first as we know this is safe
	for index, task in pairs(tasks) do
		if typeof(task) == "RBXScriptConnection" then
			tasks[index] = nil
			task:Disconnect()
		end
	end

	-- Clear out tasks table completely, even if clean up tasks add more tasks to the maid
	local index, task = next(tasks)
	while task ~= nil do
		tasks[index] = nil
		if type(task) == "function" then
			task()
		elseif typeof(task) == "RBXScriptConnection" then
			task:Disconnect()
		elseif task.Destroy then
			task:Destroy()
		elseif task.destroy then
			task:destroy()
		end
		index, task = next(tasks)
	end
end

--- Alias for DoCleaning()
-- @function Destroy
Maid.destroy = Maid.doCleaning
Maid.clean = Maid.doCleaning

return Maid]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a72</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBXa6bf19bdbf27469db8ae9ca0b0216f45">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Signal</string>
											<string name="ScriptGuid">{FFD350CD-FA93-4027-8300-31D4B5BEB888}</string>
											<ProtectedString name="Source"><![CDATA[local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local heartbeat = RunService.Heartbeat
local Signal = {}
Signal.__index = Signal
Signal.ClassName = "Signal"
Signal.totalConnections = 0



-- CONSTRUCTOR
function Signal.new(createConnectionsChangedSignal)
	local self = setmetatable({}, Signal)
	
	if createConnectionsChangedSignal then
		self.connectionsChanged = Signal.new()
	end

	self.connections = {}
	self.totalConnections = 0
	self.waiting = {}
	self.totalWaiting = 0

	return self
end



-- METHODS
function Signal:Fire(...)
	for _, connection in pairs(self.connections) do
		connection.Handler(...)
	end
	if self.totalWaiting > 0 then
		local packedArgs = table.pack(...)
		for waitingId, _ in pairs(self.waiting) do
			self.waiting[waitingId] = packedArgs
		end
	end
end
Signal.fire = Signal.Fire

function Signal:Connect(handler)
	if not (type(handler) == "function") then
		error(("connect(%s)"):format(typeof(handler)), 2)
	end
	
	local signal = self
	local connectionId = HttpService:GenerateGUID(false)
	local connection = {}
	connection.Connected = true
	connection.ConnectionId = connectionId
	connection.Handler = handler
	self.connections[connectionId] = connection

	function connection:Disconnect()
		signal.connections[connectionId] = nil
		connection.Connected = false
		signal.totalConnections -= 1
		if signal.connectionsChanged then
			signal.connectionsChanged:Fire(-1)
		end
	end
	connection.Destroy = connection.Disconnect
	connection.destroy = connection.Disconnect
	connection.disconnect = connection.Disconnect
	self.totalConnections += 1
	if self.connectionsChanged then
		self.connectionsChanged:Fire(1)
	end

	return connection
end
Signal.connect = Signal.Connect

function Signal:Wait()
	local waitingId = HttpService:GenerateGUID(false)
	self.waiting[waitingId] = true
	self.totalWaiting += 1
	repeat heartbeat:Wait() until self.waiting[waitingId] ~= true
	self.totalWaiting -= 1
	local args = self.waiting[waitingId]
	self.waiting[waitingId] = nil
	return unpack(args)
end
Signal.wait = Signal.Wait

function Signal:Destroy()
	if self.bindableEvent then
		self.bindableEvent:Destroy()
		self.bindableEvent = nil
	end
	if self.connectionsChanged then
		self.connectionsChanged:Fire(-self.totalConnections)
		self.connectionsChanged:Destroy()
		self.connectionsChanged = nil
	end
	self.totalConnections = 0
	for connectionId, connection in pairs(self.connections) do
		self.connections[connectionId] = nil
	end
end
Signal.destroy = Signal.Destroy
Signal.Disconnect = Signal.Destroy
Signal.disconnect = Signal.Destroy



return Signal]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a73</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBX7b06b960eea647ed881d4c9691a852ff">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">Themes</string>
											<string name="ScriptGuid">{20CEDA21-4177-4E39-8657-2D24CCBF9642}</string>
											<ProtectedString name="Source"><![CDATA[-- Require all children and return their references
local Themes = {}
for _, module in pairs(script:GetChildren()) do
    if module:IsA("ModuleScript") then
        Themes[module.Name] = require(module)
    end
end
return Themes]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a74</UniqueId>
										</Properties>
										<Item class="ModuleScript" referent="RBXc9d01ef4a1364cd68f68afd424f10cdc">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<Content name="LinkedSource"><null></null></Content>
												<string name="Name">BlueGradient</string>
												<string name="ScriptGuid">{4BE1ACC0-4EBD-49FC-9073-663ABC6A41BC}</string>
												<ProtectedString name="Source"><![CDATA[-- BlueGradient by ForeverHD
local selectedColor = Color3.fromRGB(0, 170, 255)
local selectedColorDarker = Color3.fromRGB(0, 120, 180)
local neutralColor = Color3.fromRGB(255, 255, 255)
return {
    
    -- Settings which describe how an item behaves or transitions between states
    action =  {
        resizeInfo = TweenInfo.new(0.2, Enum.EasingStyle.Back),
        repositionInfo = TweenInfo.new(0.2, Enum.EasingStyle.Back),
    },
    
    -- Settings which describe how an item appears when 'deselected' and 'selected'
    toggleable = {
        -- How items appear normally (i.e. when they're 'deselected')
        deselected = {
            iconGradientColor = ColorSequence.new(selectedColor, selectedColorDarker),
            iconGradientRotation = 90,
            noticeCircleColor = selectedColor,
            noticeCircleImage = "http://www.roblox.com/asset/?id=4882430005",
            noticeTextColor = neutralColor,
            captionOverlineColor = selectedColor,
        },
        -- How items appear after the icon has been clicked (i.e. when they're 'selected')
        -- If a selected value is not specified, it will default to the deselected value
        selected = {
            iconBackgroundColor = Color3.fromRGB(255, 255, 255),
            iconBackgroundTransparency = 0.1,
            iconGradientColor = ColorSequence.new(selectedColor, selectedColorDarker),
            iconGradientRotation = 90,
            iconImageColor = Color3.fromRGB(255, 255, 255),
            iconTextColor = Color3.fromRGB(255, 255, 255),
            noticeCircleColor = neutralColor,
            noticeTextColor = selectedColor,
        }
    },
    
    -- Settings where toggleState doesn't matter (they have a singular state)
    other =  {},
    
}
]]></ProtectedString>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a75</UniqueId>
											</Properties>
										</Item>
										<Item class="ModuleScript" referent="RBX376cf3bf7a154dde867c8a2fd8f2c08d">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<Content name="LinkedSource"><null></null></Content>
												<string name="Name">Default</string>
												<string name="ScriptGuid">{02F83D90-8890-4502-B654-0BE74382500D}</string>
												<ProtectedString name="Source"><![CDATA[--[[
This file is necessary for constructing the default Icon template
Do not remove this module otherwise TopbarPlus will break
Modifying this file may also cause TopbarPlus to break
It's recommended instead to create a separate theme module and use that instead

To apply your theme after creating it, do:
```lua
local IconController = require(pathway.to.IconController)
local Themes = require(pathway.to.Themes)
IconController.setGameTheme(Themes.YourThemeName)
```

or by applying to an individual icon:
```lua
local Icon = require(pathway.to.Icon)
local Themes = require(pathway.to.Themes)
local newIcon = Icon.new()
    :setTheme(Themes.YourThemeName)
```
--]]

return {
    
    -- Settings which describe how an item behaves or transitions between states
    action =  {
        toggleTransitionInfo = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        resizeInfo = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        repositionInfo = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        captionFadeInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        tipFadeInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        dropdownSlideInfo = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        menuSlideInfo = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
    },

    -- Settings which describe how an item appears when 'deselected' and 'selected'
    toggleable = {
        -- How items appear normally (i.e. when they're 'deselected')
        deselected = {
            iconBackgroundColor = Color3.fromRGB(0, 0, 0),
            iconBackgroundTransparency = 0.5,
            iconCornerRadius = UDim.new(0.25, 0),
            iconGradientColor = ColorSequence.new(Color3.fromRGB(255, 255, 255)),
            iconGradientRotation = 0,
            iconImage = "",
            iconImageColor =Color3.fromRGB(255, 255, 255),
            iconImageTransparency = 0,
            iconImageYScale = 0.63,
            iconImageRatio = 1,
            iconLabelYScale = 0.45,
            iconScale = UDim2.new(1, 0, 1, 0),
            forcedIconSize = UDim2.new(0, 32, 0, 32);
            iconSize = UDim2.new(0, 32, 0, 32),
            iconOffset = UDim2.new(0, 0, 0, 0),
            iconText = "",
            iconTextColor = Color3.fromRGB(255, 255, 255),
            iconFont = Enum.Font.GothamSemibold,
            noticeCircleColor = Color3.fromRGB(255, 255, 255),
            noticeCircleImage = "http://www.roblox.com/asset/?id=4871790969",
            noticeTextColor = Color3.fromRGB(31, 33, 35),
            baseZIndex = 1,
            order = 1,
            alignment = "left",
            clickSoundId = "rbxassetid://5273899897",
            clickVolume = 0,
            clickPlaybackSpeed = 1,
            clickTimePosition = 0.12
        },
        -- How items appear after the icon has been clicked (i.e. when they're 'selected')
        -- If a selected value is not specified, it will default to the deselected value
        selected = {
            iconBackgroundColor = Color3.fromRGB(245, 245, 245),
            iconBackgroundTransparency = 0.1,
            iconImageColor = Color3.fromRGB(57, 60, 65),
            iconTextColor = Color3.fromRGB(57, 60, 65),
            clickPlaybackSpeed = 1.5,
        }
    },

    -- Settings where toggleState doesn't matter (they have a singular state)
    other = {
        -- Caption settings
        captionBackgroundColor = Color3.fromRGB(0, 0, 0),
        captionBackgroundTransparency = 0.5,
        captionTextColor = Color3.fromRGB(255, 255, 255),
        captionTextTransparency = 0,
        captionFont = Enum.Font.GothamSemibold,
        captionOverlineColor = Color3.fromRGB(0, 170, 255),
        captionOverlineTransparency = 0,
        captionCornerRadius = UDim.new(0.25, 0),
        -- Tip settings
        tipBackgroundColor = Color3.fromRGB(255, 255, 255),
        tipBackgroundTransparency = 0.1,
        tipTextColor = Color3.fromRGB(27, 42, 53),
        tipTextTransparency = 0,
        tipFont = Enum.Font.GothamSemibold,
        tipCornerRadius = UDim.new(0.175, 0),
        -- Dropdown settings
        dropdownAlignment = "auto", -- 'left', 'mid', 'right' or 'auto' (auto is where the dropdown alignment matches the icons alignment)
        dropdownMaxIconsBeforeScroll = 3,
        dropdownMinWidth = 32,
        dropdownSquareCorners = false,
        dropdownBindToggleToIcon = true,
        dropdownToggleOnLongPress = false,
        dropdownToggleOnRightClick = false,
        dropdownCloseOnTapAway = false,
        dropdownHidePlayerlistOnOverlap = true,
        dropdownListPadding = UDim.new(0, 2),
        dropdownScrollBarColor = Color3.fromRGB(25, 25, 25),
        dropdownScrollBarTransparency = 0.2,
        dropdownScrollBarThickness = 4,
        -- Menu settings
        menuDirection = "auto", -- 'left', 'right' or 'auto' (for auto, if alignment is 'left' or 'mid', menuDirection will be 'right', else menuDirection is 'left')
        menuMaxIconsBeforeScroll = 4,
        menuBindToggleToIcon = true,
        menuToggleOnLongPress = false,
        menuToggleOnRightClick = false,
        menuCloseOnTapAway = false,
        menuScrollBarColor = Color3.fromRGB(25, 25, 25),
        menuScrollBarTransparency = 0.2,
        menuScrollBarThickness = 4,
    },
    
}]]></ProtectedString>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a76</UniqueId>
											</Properties>
										</Item>
									</Item>
									<Item class="ModuleScript" referent="RBX1d8c6a8962364ae0b8f6884e899757a6">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">TopbarPlusGui</string>
											<string name="ScriptGuid">{83AA4A4C-2860-43B4-A3F6-3A0DB71339AF}</string>
											<ProtectedString name="Source"><![CDATA[-- SETUP ICON TEMPLATE
local topbarPlusGui = Instance.new("ScreenGui")
topbarPlusGui.Enabled = true
topbarPlusGui.DisplayOrder = 0
topbarPlusGui.IgnoreGuiInset = true
topbarPlusGui.ResetOnSpawn = false
topbarPlusGui.Name = "TopbarPlus"

local activeItems = Instance.new("Folder")
activeItems.Name = "ActiveItems"
activeItems.Parent = topbarPlusGui

local topbarContainer = Instance.new("Frame")
topbarContainer.BackgroundTransparency = 1
topbarContainer.Name = "TopbarContainer"
topbarContainer.Position = UDim2.new(0, 0, 0, 0)
topbarContainer.Size = UDim2.new(1, 0, 0, 36)
topbarContainer.Visible = true
topbarContainer.ZIndex = 1
topbarContainer.Parent = topbarPlusGui
topbarContainer.Active = false

local iconContainer = Instance.new("Frame")
iconContainer.BackgroundTransparency = 1
iconContainer.Name = "IconContainer"
iconContainer.Position = UDim2.new(0, 104, 0, 4)
iconContainer.Visible = false
iconContainer.ZIndex = 1
iconContainer.Parent = topbarContainer
iconContainer.Active = false

local iconButton = Instance.new("TextButton")
iconButton.Name = "IconButton"
iconButton.Visible = true
iconButton.Text = ""
iconButton.ZIndex = 10--2
iconButton.BorderSizePixel = 0
iconButton.AutoButtonColor = false
iconButton.Parent = iconContainer
iconButton.Active = true

local iconImage = Instance.new("ImageLabel")
iconImage.BackgroundTransparency = 1
iconImage.Name = "IconImage"
iconImage.AnchorPoint = Vector2.new(0, 0.5)
iconImage.Visible = true
iconImage.ZIndex = 11--3
iconImage.ScaleType = Enum.ScaleType.Fit
iconImage.Parent = iconButton
iconImage.Active = false

local iconLabel = Instance.new("TextLabel")
iconLabel.BackgroundTransparency = 1
iconLabel.Name = "IconLabel"
iconLabel.AnchorPoint = Vector2.new(0, 0.5)
iconLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
iconLabel.Text = ""
iconLabel.RichText = true
iconLabel.TextScaled = false
iconLabel.ClipsDescendants = true
iconLabel.ZIndex = 11--3
iconLabel.Parent = iconButton
iconLabel.Active = false

local iconGradient = Instance.new("UIGradient")
iconGradient.Name = "IconGradient"
iconGradient.Enabled = true
iconGradient.Parent = iconButton

local iconCorner = Instance.new("UICorner")
iconCorner.Name = "IconCorner"
iconCorner.Parent = iconButton

local iconOverlay = Instance.new("Frame")
iconOverlay.Name = "IconOverlay"
iconOverlay.BackgroundTransparency = 1
iconOverlay.Position = iconButton.Position
iconOverlay.Size = UDim2.new(1, 0, 1, 0)
iconOverlay.Visible = true
iconOverlay.ZIndex = iconButton.ZIndex + 1
iconOverlay.BorderSizePixel = 0
iconOverlay.Parent = iconContainer
iconOverlay.Active = false

local iconOverlayCorner = iconCorner:Clone()
iconOverlayCorner.Name = "IconOverlayCorner"
iconOverlayCorner.Parent = iconOverlay


-- Notice prompts
local noticeFrame = Instance.new("ImageLabel")
noticeFrame.BackgroundTransparency = 1
noticeFrame.Name = "NoticeFrame"
noticeFrame.Position = UDim2.new(0.45, 0, 0, -2)
noticeFrame.Size = UDim2.new(1, 0, 0.7, 0)
noticeFrame.Visible = true
noticeFrame.ZIndex = 12--4
noticeFrame.ImageTransparency = 1
noticeFrame.ScaleType = Enum.ScaleType.Fit
noticeFrame.Parent = iconButton
noticeFrame.Active = false

local noticeLabel = Instance.new("TextLabel")
noticeLabel.Name = "NoticeLabel"
noticeLabel.BackgroundTransparency = 1
noticeLabel.Position = UDim2.new(0.25, 0, 0.15, 0)
noticeLabel.Size = UDim2.new(0.5, 0, 0.7, 0)
noticeLabel.Visible = true
noticeLabel.ZIndex = 13--5
noticeLabel.Font = Enum.Font.Arial
noticeLabel.Text = "0"
noticeLabel.TextTransparency = 1
noticeLabel.TextScaled = true
noticeLabel.Parent = noticeFrame
noticeLabel.Active = false


-- Captions
local captionContainer = Instance.new("Frame")
captionContainer.Name = "CaptionContainer"
captionContainer.BackgroundTransparency = 1
captionContainer.AnchorPoint = Vector2.new(0, 0)
captionContainer.ClipsDescendants = true
captionContainer.ZIndex = 30
captionContainer.Visible = true
captionContainer.Parent = iconContainer
captionContainer.Active = false

local captionFrame = Instance.new("Frame")
captionFrame.Name = "CaptionFrame"
captionFrame.BorderSizePixel = 0
captionFrame.AnchorPoint = Vector2.new(0.5,0.5)
captionFrame.Position = UDim2.new(0.5,0,0.5,0)
captionFrame.Size = UDim2.new(1,0,1,0)
captionFrame.ZIndex = 31
captionFrame.Parent = captionContainer
captionFrame.Active = false

local captionLabel = Instance.new("TextLabel")
captionLabel.Name = "CaptionLabel"
captionLabel.BackgroundTransparency = 1
captionLabel.AnchorPoint = Vector2.new(0.5,0.5)
captionLabel.Position = UDim2.new(0.5,0,0.56,0)
captionLabel.TextXAlignment = Enum.TextXAlignment.Center
captionLabel.RichText = true
captionLabel.ZIndex = 32
captionLabel.Parent = captionContainer
captionLabel.Active = false

local captionCorner = Instance.new("UICorner")
captionCorner.Name = "CaptionCorner"
captionCorner.Parent = captionFrame

local captionOverlineContainer = Instance.new("Frame")
captionOverlineContainer.Name = "CaptionOverlineContainer"
captionOverlineContainer.BackgroundTransparency = 1
captionOverlineContainer.AnchorPoint = Vector2.new(0.5,0.5)
captionOverlineContainer.Position = UDim2.new(0.5,0,-0.5,3)
captionOverlineContainer.Size = UDim2.new(1,0,1,0)
captionOverlineContainer.ZIndex = 33
captionOverlineContainer.ClipsDescendants = true
captionOverlineContainer.Parent = captionContainer
captionOverlineContainer.Active = false

local captionOverline = Instance.new("Frame")
captionOverline.Name = "CaptionOverline"
captionOverline.AnchorPoint = Vector2.new(0.5,0.5)
captionOverline.Position = UDim2.new(0.5,0,1.5,-3)
captionOverline.Size = UDim2.new(1,0,1,0)
captionOverline.ZIndex = 34
captionOverline.Parent = captionOverlineContainer
captionOverline.Active = false

local captionOverlineCorner = captionCorner:Clone()
captionOverlineCorner.Name = "CaptionOverlineCorner"
captionOverlineCorner.Parent = captionOverline

local captionVisibilityBlocker = captionFrame:Clone()
captionVisibilityBlocker.Name = "CaptionVisibilityBlocker"
captionVisibilityBlocker.BackgroundTransparency = 1
captionVisibilityBlocker.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
captionVisibilityBlocker.ZIndex -= 1
captionVisibilityBlocker.Parent = captionFrame
captionVisibilityBlocker.Active = false

local captionVisibilityCorner = captionVisibilityBlocker.CaptionCorner
captionVisibilityCorner.Name = "CaptionVisibilityCorner"


-- Tips
local tipFrame = Instance.new("Frame")
tipFrame.Name = "TipFrame"
tipFrame.BorderSizePixel = 0
tipFrame.AnchorPoint = Vector2.new(0, 0)
tipFrame.Position = UDim2.new(0,50,0,50)
tipFrame.Size = UDim2.new(1,0,1,-8)
tipFrame.ZIndex = 40
tipFrame.Parent = iconContainer
tipFrame.Active = false

local tipCorner = Instance.new("UICorner")
tipCorner.Name = "TipCorner"
tipCorner.CornerRadius = UDim.new(0.25,0)
tipCorner.Parent = tipFrame

local tipLabel = Instance.new("TextLabel")
tipLabel.Name = "TipLabel"
tipLabel.BackgroundTransparency = 1
tipLabel.TextScaled = false
tipLabel.TextSize = 12
tipLabel.Position = UDim2.new(0,3,0,3)
tipLabel.Size = UDim2.new(1,-6,1,-6)
tipLabel.ZIndex = 41
tipLabel.Parent = tipFrame
tipLabel.Active = false


-- Dropdowns
local dropdownContainer = Instance.new("Frame")
dropdownContainer.Name = "DropdownContainer"
dropdownContainer.BackgroundTransparency = 1
dropdownContainer.BorderSizePixel = 0
dropdownContainer.AnchorPoint = Vector2.new(0.5, 0)
dropdownContainer.ZIndex = -2
dropdownContainer.ClipsDescendants = true
dropdownContainer.Visible = true
dropdownContainer.Parent = iconContainer
dropdownContainer.Active = false

local dropdownFrame = Instance.new("ScrollingFrame")
dropdownFrame.Name = "DropdownFrame"
dropdownFrame.BackgroundTransparency = 1
dropdownFrame.BorderSizePixel = 0
dropdownFrame.AnchorPoint = Vector2.new(0.5, 0)
dropdownFrame.Position = UDim2.new(0.5, 0, 0, 0)
dropdownFrame.Size = UDim2.new(0.5, 2, 1, 0)
dropdownFrame.ZIndex = -1
dropdownFrame.ClipsDescendants = false
dropdownFrame.Visible = true
dropdownFrame.TopImage = dropdownFrame.MidImage
dropdownFrame.BottomImage = dropdownFrame.MidImage
dropdownFrame.VerticalScrollBarInset = Enum.ScrollBarInset.Always
dropdownFrame.VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Right
dropdownFrame.Parent = dropdownContainer
dropdownFrame.Active = false

local dropdownList = Instance.new("UIListLayout")
dropdownList.Name = "DropdownList"
dropdownList.FillDirection = Enum.FillDirection.Vertical
dropdownList.SortOrder = Enum.SortOrder.LayoutOrder
dropdownList.Parent = dropdownFrame

local dropdownPadding = Instance.new("UIPadding")
dropdownPadding.Name = "DropdownPadding"
dropdownPadding.PaddingRight = UDim.new(0, 2)
dropdownPadding.Parent = dropdownFrame


-- Menus
local menuContainer = Instance.new("Frame")
menuContainer.Active = true
menuContainer.Selectable = false
menuContainer.Name = "MenuContainer"
menuContainer.BackgroundTransparency = 1
menuContainer.BorderSizePixel = 0
menuContainer.AnchorPoint = Vector2.new(1, 0)
menuContainer.Size = UDim2.new(0, 500, 0, 50)
menuContainer.ZIndex = -2
menuContainer.ClipsDescendants = true
menuContainer.Visible = true
menuContainer.Parent = iconContainer
menuContainer.Active = false

local menuFrame = Instance.new("ScrollingFrame")
menuFrame.Active = true
menuFrame.Selectable = true
menuFrame.Name = "MenuFrame"
menuFrame.BackgroundTransparency = 1
menuFrame.BorderSizePixel = 0
menuFrame.AnchorPoint = Vector2.new(0, 0)
menuFrame.Position = UDim2.new(0, 0, 0, 0)
menuFrame.Size = UDim2.new(1, 0, 1, 0)
menuFrame.ZIndex = -1 + 10
menuFrame.ClipsDescendants = false
menuFrame.Visible = true
menuFrame.TopImage = ""--menuFrame.MidImage
menuFrame.BottomImage = ""--menuFrame.MidImage
menuFrame.HorizontalScrollBarInset = Enum.ScrollBarInset.Always
menuFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
menuFrame.Parent = menuContainer
menuFrame.Active = false

local menuList = Instance.new("UIListLayout")
menuList.Name = "MenuList"
menuList.FillDirection = Enum.FillDirection.Horizontal
menuList.HorizontalAlignment = Enum.HorizontalAlignment.Right
menuList.SortOrder = Enum.SortOrder.LayoutOrder
menuList.Parent = menuFrame

local menuInvisBlocker = Instance.new("Frame")
menuInvisBlocker.Name = "MenuInvisBlocker"
menuInvisBlocker.BackgroundTransparency = 1
menuInvisBlocker.Size = UDim2.new(0, -2, 1, 0)
menuInvisBlocker.Visible = true
menuInvisBlocker.LayoutOrder = 999999999
menuInvisBlocker.Parent = menuFrame
menuInvisBlocker.Active = false


-- Click Sound
local clickSound = Instance.new("Sound")
clickSound.Name = "ClickSound"
clickSound.Volume = 0
clickSound.Parent = iconContainer


-- Other
local indicator = Instance.new("ImageLabel")
indicator.Name = "Indicator"
indicator.BackgroundTransparency = 1
indicator.Image = "rbxassetid://5278151556"
indicator.Size = UDim2.new(0,32,0,32)
indicator.AnchorPoint = Vector2.new(0.5,0)
indicator.Position = UDim2.new(0.5,0,0,5)
indicator.ScaleType = Enum.ScaleType.Fit
indicator.Visible = false
indicator.Active = true
indicator.Parent = topbarPlusGui
indicator.Active = false



-- PARENT
local localPlayer = game:GetService("Players").LocalPlayer
local playerGui = localPlayer.PlayerGui
topbarPlusGui.Parent = playerGui



return topbarPlusGui]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a77</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBX22736a3884da41fb88f635c0580913b2">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">TopbarPlusReference</string>
											<string name="ScriptGuid">{9C636A04-4F18-4849-8A95-580966D7EA5E}</string>
											<ProtectedString name="Source"><![CDATA[-- This module enables you to place Icon wherever you like within the data model while
-- still enabling third-party applications (such as HDAdmin/Nanoblox) to locate it
-- This is necessary to prevent two TopbarPlus applications initiating at runtime which would
-- cause icons to overlap with each other

local replicatedStorage = game:GetService("ReplicatedStorage")
local TopbarPlusReference = {}

function TopbarPlusReference.addToReplicatedStorage()
    local existingItem = replicatedStorage:FindFirstChild(script.Name)
    if existingItem then
        return false
    end
    local objectValue = Instance.new("ObjectValue")
    objectValue.Name = script.Name
    objectValue.Value = script.Parent
    objectValue.Parent = replicatedStorage
    return objectValue
end

function TopbarPlusReference.getObject()
    local objectValue = replicatedStorage:FindFirstChild(script.Name)
    if objectValue then
        return objectValue
    end
    return false
end

return TopbarPlusReference]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a78</UniqueId>
										</Properties>
									</Item>
									<Item class="ModuleScript" referent="RBX20543e88563f441d87cfcf5d22b98889">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">VERSION</string>
											<string name="ScriptGuid">{5CBF6836-9FF2-4808-BB3F-2ED367F017B0}</string>
											<ProtectedString name="Source">-- v2.7.5</ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a79</UniqueId>
										</Properties>
									</Item>
								</Item>
								<Item class="ModuleScript" referent="RBXe57198b110f14cfb969b96e669f5337e">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">icons</string>
										<string name="ScriptGuid">{1F5491ED-78E1-475B-A3D1-77495FDF19F9}</string>
										<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Credit: @ForeverHD (topbarPlus)
-- Name: icons.lua
-- Description: Topbar icons for the chat

local replicatedStorage = game:GetService("ReplicatedStorage")
local runService = game:GetService("RunService")
local starterGui = game:GetService("StarterGui")

return function(environment)
	local topbarPlusReference = replicatedStorage:FindFirstChild("TopbarPlusReference")
	local iconModule = script.Parent:WaitForChild("topbarPlus")
	if(topbarPlusReference) then
		iconModule = topbarPlusReference.Value
	end

	local icon = require(iconModule)
	local controller = require(iconModule.IconController)
	local callback = environment.toggleSettingsMenu
	local settingIcon = icon.new():setImage(environment.config.SettingsMenu.TopbarButton.Icon)
	settingIcon.selected:Connect(callback)
	settingIcon.deselected:Connect(callback)
	if(environment.config.SettingsMenu.ApiEnabledAndUIDisabled == true) then
		settingIcon:setEnabled(false)
	end
	
	if(not environment.config.SettingsMenu.TopbarButton.Enabled) then
		settingIcon:setEnabled(false)
	end
	
	environment.settingIcon = settingIcon
	
	function environment:toggleSettingsTopbar()
		settingIcon:deselect()
	end
	
	function environment:openSettingsMenu()
		settingIcon:select()
	end
	
	local types = Enum.CoreGuiType:GetEnumItems()
	local cache = {}
	
	runService.Heartbeat:Connect(function()
		for _,class in pairs(types) do
			local current = starterGui:GetCoreGuiEnabled(class)
			if(cache[class] ~= current) then
				if(cache[class] ~= nil) then
					controller.updateTopbar()
				end
				cache[class] = current
			end
		end
	end)
end]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a7a</UniqueId>
									</Properties>
								</Item>
							</Item>
						</Item>
						<Item class="ModuleScript" referent="RBX3a79e875f53e4d938bdabe02ee2c6585">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">chat</string>
								<string name="ScriptGuid">{1F5E317B-6368-486F-9189-A3891606A264}</string>
								<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: chat.lua
-- Description: Manage chat component modules

local container = script
local load = function(name,...)
	return require(container:WaitForChild(name))(...)
end

local parse = function(array)
	local returnValue = {}
	for _,module in pairs(array) do
		for key,value in pairs(module) do
			returnValue[key] = value
		end
	end
	return returnValue
end

return function(...)
	return parse({
		{chatWindow = load("chatWindow",...)},
		{chatbar = load("chatbar",...)}
	})
end]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a7b</UniqueId>
							</Properties>
							<Item class="ModuleScript" referent="RBXee8962ee5c2f4b979a0fbdb7e07df71d">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">chatWindow</string>
									<string name="ScriptGuid">{273C2064-6E56-456B-B23A-D99333188896}</string>
									<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: chatWindow.lua
-- Description: Set up the main chat window

local userInput = game:GetService("UserInputService")
local runService = game:GetService("RunService")
local heartbeat = runService.Heartbeat
local currentCamera = workspace.CurrentCamera
local channelBar = require(script.Parent:WaitForChild("channelBar"))

local resizeInputs,endInputs = {
	[Enum.UserInputType.MouseMovement] = true,
	[Enum.UserInputType.Touch] = true
},{
	[Enum.UserInputType.MouseButton1] = true,
	[Enum.UserInputType.Touch] = true
}

local touchEnabled = userInput.TouchEnabled

return function(environment)
	-- channel bar:

	local separate = environment.config.UI.SeparateChatbarFromMenu

	task.spawn(channelBar,environment)

	local chatWindow = {}
	local utility = environment.utility
	local api = {}
	local mainUi
	local currentState = true
	local currentlyFocused
	local zone
	local currentStateForMouse = nil

	-------- Fade: --------

	local fadeState = function(length,state)
		utility:tween({
			mainUi.window,length,{
				["BackgroundTransparency"] = state and 3/4 or 1
			}
		},{
			mainUi.bar,length,{
				["BackgroundTransparency"] = separate and (state and 3/4 or 1) or 1
			}
		},{
			mainUi.box.Parent,length,{
				["BackgroundTransparency"] = state and 0 or 1
			}
		},{
			mainUi.box,length,{
				["TextColor3"] = state and Color3.fromRGB(100,100,100) or Color3.fromRGB(255,255,255),
				["PlaceholderColor3"] = state and Color3.fromRGB(80,80,80) or Color3.fromRGB(200,200,200)
			}
		},{
			environment.resizeButton,length,{
				["BackgroundTransparency"] = state and 0 or 1
			}
		},{
			environment.resizeButton.Icon,length,{
				["ImageTransparency"] = state and 0 or 1
			}
		},{
			mainUi.channelBar.Main.Container,length,{
				["BackgroundTransparency"] = (state and 3/4 or 1)
			}
		},{
			mainUi.channelButton,length,{
				["BackgroundTransparency"] = (state and 0 or 1)
			}
		},{
			mainUi.scroller.Parent,length,{
				["ScrollBarThickness"] = (state and 5 or 0),
				["ScrollBarImageTransparency"] = (state and 0 or 1)
			}
		},{
			mainUi.autofillContainer,length,{
				["BackgroundTransparency"] = (state and 3/4 or 1)
			}
		})
		currentState = state
	end

	local fade = function(state)
		if(not state) then
			currentStateForMouse = nil
		end
		fadeState(0.16,state)
	end

	local getChatbarSize = function()
		return(mainUi.chatbarContainer.Main.AbsoluteSize.Y)
	end

	-------- Focus area for mouse: --------

	local last
	local offset
	local uiVariable;

	local corners = {
		["BottomRight"] = function(offsetBottom)
			mainUi.channelBar.Visible = true
			mainUi.resizeButton.Parent = mainUi.channelBar.Main
			return  UDim2.new(1,-8,1,offsetBottom),Vector2.new(1,1)
		end,
		["TopLeft"] = function()
			return UDim2.fromOffset(16,8),Vector2.new(0,0)
		end,
		["TopRight"] = function()
			return UDim2.new(1,-16,0,8),Vector2.new(1,0)
		end,
		["BottomLeft"] = function(offsetBottom)
			mainUi.channelBar.Visible = true
			mainUi.resizeButton.Parent = mainUi.channelBar.Main
			return UDim2.new(0,16,1,offsetBottom),Vector2.new(0,1)
		end,
	}

	local corner = environment.config.UI.CornerPosition or "TopLeft"
	local calculatePosition = corners[corner] or corners["TopLeft"]
	environment.cornerPosition = corners[corner] and corner or "TopLeft"

	local recalculateFocusZone = function()
		--[[
		local size = mainUi.autofillContainer.AbsoluteSize
		local vis = mainUi.chatWindow.Visible
		local offset = (5 + (mainUi.bar.Parent.AbsoluteSize.Y - (vis and 35 or -0)) + size.Y + (size.Y > 0 and 5 or 0))
		local base = UDim2.new(1,0,(vis and 1 or 0),offset)
		zone.Size = base
		]]

		local chatWindowSizeBase = (mainUi.chatbarContainer.Position.Y.Offset)
		local s2 = mainUi.chatbarContainer.Main.Autofill.Container.AbsoluteSize.Y
		local totaled = chatWindowSizeBase + getChatbarSize() + (s2) + (s2 > 0 and 5 or 0)
		local new = UDim2.new(1,0,0,totaled)

		if(zone.Size ~= new) then
			last = new
			zone.Size = new
			local position,anchorPoint = calculatePosition(-((totaled - zone.Parent.AbsoluteSize.Y)+5))
			zone.Parent.AnchorPoint = anchorPoint
			zone.Parent.Position = position
			offset = uiVariable.AbsolutePosition
		end		
	end

	local mouseEnterState = function(state)
		if((not currentlyFocused) and (not state)) then
			if(currentState) then
				fade(false)
			end
		elseif((not currentlyFocused) and (state) and (not currentState)) then
			fade(true)
		end
	end

	local focusState = function(state,doContinue)
		currentlyFocused = state
		if(doContinue) then
			if(state) then
				fade(true)
			elseif(currentState and (not state)) then
				fade(false)
			end
		end
	end

	function chatWindow:setup(ui,chatbar)
		uiVariable = ui
		local channelBar = ui:WaitForChild("Channelbar")
		mainUi = {
			chatWindow = ui:WaitForChild("ChatWindow"),
			window = ui:WaitForChild("ChatWindow"):WaitForChild("Main"),
			bar = chatbar.chatbox.Parent.Parent,
			box = chatbar.chatbox,
			scroller = ui:WaitForChild("ChatWindow"):WaitForChild("Main"):WaitForChild("Scroller"):WaitForChild("MessageContainer"),
			channelBar = channelBar,
			channelButton = chatbar.chatbox.Parent.Parent.Container.Channel,
			chatbarContainer = ui:WaitForChild("ChatBarContainer")
		}		
		mainUi.autofillContainer = mainUi.box.Parent.Parent.Parent:WaitForChild("Autofill")
		environment.mainUi = mainUi
		zone = mainUi.window.Parent.Parent:WaitForChild("Zone")
		local resizeButton = chatbar.chatbox.Parent.Parent:WaitForChild("Resize")
		environment.resizeButton = resizeButton
		mainUi.resizeButton = resizeButton
		mainUi.box.Changed:Connect(recalculateFocusZone)
		mainUi.autofillContainer.Changed:Connect(recalculateFocusZone)

		if(environment.cornerPosition:find("Bottom") and (not environment.config.UI.ChannelBarEnabled)) then
			resizeButton.Changed:Connect(function()
				mainUi.channelBar.Visible = resizeButton.Visible
			end)
		end

		-------- Mouse event custom: --------

		local mouseIn = false
		local positionBounds = {}
		local holdingResize = false

		local mouseEnter = function()
			mouseIn = true
			mouseEnterState(true)
		end

		local mouseLeave = function()
			mouseIn = false
			if(not holdingResize) then
				mouseEnterState(false)
			end
		end

		local checkBounds = function(input)
			if(not offset or (not zone)) then
				return
			end
			local position = input.Position
			local chatSize = ui.AbsoluteSize
			if(environment.mouseMoved) then
				for object,callback in pairs(environment.mouseMoved) do
					if(object:GetFullName() ~= object.Name) then
						task.spawn(environment.mouseMoved[object],position)
					else
						environment.mouseMoved[object] = nil
					end
				end
			end
			positionBounds = {
				x  = {
					offset.X,(offset.X + zone.AbsoluteSize.X)
				},y = {
					offset.Y,(offset.Y + zone.AbsoluteSize.Y)
				}
			}
			local inBounds = false
			if(position.X >= positionBounds.x[1] and position.X <= positionBounds.x[2]) then
				if(position.Y >= positionBounds.y[1] and position.Y <= positionBounds.y[2]) then
					inBounds = true
				end
			end
			if(currentStateForMouse ~= inBounds) then
				currentStateForMouse = inBounds
				local func = (inBounds and mouseEnter or mouseLeave)
				func()
			end
		end

		if(not touchEnabled) then
			userInput.InputChanged:Connect(function(input)
				if(input.UserInputType == Enum.UserInputType.MouseMovement) then
					checkBounds(input)
				end
			end)
		else
			userInput.InputBegan:Connect(function(input,gameProcessed)
				if(input.UserInputType == Enum.UserInputType.Touch) then
					local ended
					ended = input.Changed:Connect(function()
						if(input.UserInputState == Enum.UserInputState.End) then
							ended:Disconnect()
						end
						checkBounds(input)
					end)
					checkBounds(input)
				end
			end)
		end

		-------- Resize button: --------

		local resizeConnection
		local baseSize = ui.AbsoluteSize
		local minX,maxX = baseSize.X/2,baseSize.X * 1.75
		local minY,maxY = baseSize.Y/2,baseSize.Y * 1.75
		local scroller = mainUi.scroller.Parent

		resizeButton.MouseButton1Down:Connect(function()
			holdingResize = true
			resizeConnection = userInput.InputChanged:Connect(function(input)
				if(resizeInputs[input.UserInputType]) then
					scroller.Size = UDim2.fromOffset(scroller.AbsoluteSize.X,scroller.AbsoluteSize.Y)
					-- since each button is in a different corner they all need to be calculated differently :cry:
					if(corner == "TopLeft") then
						ui:TweenSize(UDim2.fromOffset(
							math.clamp(input.Position.X,minX,maxX),
							math.clamp(input.Position.Y + (separate and 0 or getChatbarSize()),minY,maxY)
							),Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.015,true)
					elseif(corner == "BottomRight") then
						local viewportSize = workspace.CurrentCamera.ViewportSize
						local xAxis = (viewportSize.X - input.Position.X) + resizeButton.AbsoluteSize.X/2
						local yAxis = (viewportSize.Y - input.Position.Y) - resizeButton.AbsoluteSize.Y
						ui:TweenSize(UDim2.fromOffset(
							math.clamp(xAxis,minX,maxX),
							math.clamp(yAxis,minY,maxY)
							),Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.015,true)
					elseif(corner == "TopRight") then
						local viewportSize = workspace.CurrentCamera.ViewportSize
						local xAxis = (viewportSize.X - input.Position.X)
						local yAxis = (input.Position.Y + resizeButton.AbsoluteSize.Y/2) 
						ui:TweenSize(UDim2.fromOffset(
							math.clamp(xAxis,minX,maxX),
							math.clamp(yAxis,minY,maxY)
							),Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.015,true)
					elseif(corner == "BottomLeft") then
						local viewportSize = workspace.CurrentCamera.ViewportSize
						local yAxis = (viewportSize.Y - input.Position.Y) - resizeButton.AbsoluteSize.Y
						ui:TweenSize(UDim2.fromOffset(
							math.clamp(input.Position.X + 8,minX,maxX),
							math.clamp(yAxis,minY,maxY)
							),Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.015,true)
					end
					heartbeat:Wait()
					environment.textChanged()
				end
			end)
		end)

		userInput.InputEnded:Connect(function(input)
			if(endInputs[input.UserInputType] and holdingResize) then
				holdingResize = false
				if(not currentStateForMouse) then
					mouseEnterState(false)
				end
				resizeConnection:Disconnect()
				scroller.Size = UDim2.new(1,-15,1,-10)
			end
		end)

		-------- Channel bar: --------

		local padding = 5

		local handleChannelbar = function()
			local size = environment:getChannelBarSize()

			if(channelBar.Visible) then
				channelBar.Size = UDim2.new(1,0,0,0)
				channelBar:TweenSize(UDim2.new(1,0,0,size),Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.16,true)
				mainUi.window.Parent:TweenSizeAndPosition(
					UDim2.new(1,0,1,(-size - (size + padding))),
					UDim2.new(0,0,0,size + padding),
					Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.16,true
				)
			else
				mainUi.window.Parent:TweenSizeAndPosition(
					UDim2.new(1,0,1,(-size)),
					UDim2.new(0,0,0,0),
					Enum.EasingDirection.In,Enum.EasingStyle.Quad,0.16,true
				)
			end
		end

		mainUi.chatWindow.Changed:Connect(function()
			if(environment.chatWindowVisible) then
				if(separate) then
					mainUi.chatbarContainer.Position = UDim2.fromOffset(0,(mainUi.window.Parent.Position.Y.Offset + (mainUi.window.Parent.AbsoluteSize.Y) + 5))
				else
					mainUi.chatbarContainer.Position = UDim2.fromOffset(0,(mainUi.window.Parent.Position.Y.Offset + (mainUi.window.Parent.AbsoluteSize.Y)) - (mainUi.chatbarContainer.AbsoluteSize.Y))
				end
			end
		end)

		channelBar:GetPropertyChangedSignal("Visible"):Connect(handleChannelbar)
		handleChannelbar()

		-------- Focus detection: --------

		mainUi.box.Focused:Connect(function()
			focusState(true,true)
		end)
		mainUi.box.FocusLost:Connect(function()
			focusState(false,(not mouseIn))
		end)
		fade(false)
	end

	return chatWindow
end]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a7c</UniqueId>
								</Properties>
							</Item>
							<Item class="ModuleScript" referent="RBX4772aba516be49899cd09c75ebe60467">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">chatbar</string>
									<string name="ScriptGuid">{EC81EB57-C6FC-48EA-8A19-FE74D9B6C6FD}</string>
									<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: chatbar.lua
-- Description: Set up the chatbar :D

local textService = game:GetService("TextService")
local runService = game:GetService("RunService")
local userInput = game:GetService("UserInputService")
local players = game:GetService("Players")

local localPlayer = players.LocalPlayer
local heartbeat = runService.Heartbeat
local space = string.char(32)
local history = require(script:WaitForChild("history"))
local autofillFolder = script:WaitForChild("autofill")
local initCommandProcessor = require(script.Parent.Parent:WaitForChild("commands"):WaitForChild("processor"))
local autofillModule = require(autofillFolder:WaitForChild("autofill"))
local autofillManager = require(autofillFolder:WaitForChild("manager"))
local autofillListFolder = autofillFolder:WaitForChild("autofills")
local extraData

local getWhisperChannel = function(id)
	local array = {math.abs(id),math.abs(localPlayer.UserId)}
	table.sort(array)
	return "whisper_" .. table.concat(array,"_")
end

return function(environment)
	-------- Variables: --------

	local utility,connections,localization = environment.utility,environment.connections,environment.localization
	local chatbar,messageHistory = {},{}
	local pointer,padding,idx = 0,4,0
	local chatbarContainer,chatbox,count,chatboxApi = nil,nil,nil,nil
	local commandProcessor = initCommandProcessor(environment)
	local separate = environment.config.UI.SeparateChatbarFromMenu

	-------- Functions: --------

	function environment:getExtraData()
		return extraData
	end

	local fixWhitespace = function(message)
		local disallowedWhitespace = environment.config.Messages.DisallowedWhitespace
		for _,character in pairs(disallowedWhitespace) do
			if(character == "\t") then
				message = message:gsub(character,string.char(32))
			else
				message = message:gsub(character,"")
			end
		end
		message = message:gsub("\n","")
		message = message:gsub("[ ]+"," ")
		return message
	end

	local getRawTextSizeInPx = function(chatbox,text,inf)
		local text,textSize,font = (text or chatbox.Text),chatbox.TextSize,chatbox.Font
		local sizeClamp = Vector2.new((inf and math.huge or chatbox.AbsoluteSize.X),math.huge)
		return textService:GetTextSize(text,textSize,font,sizeClamp)
	end

	local setplaceholderText = function(message)
		chatbox.PlaceholderText = message or chatbox.PlaceholderText
	end

	local sendMessage = function(message)
		table.insert(messageHistory,1,message)
		if(#messageHistory >= 100) then
			table.remove(messageHistory,#messageHistory)
		end
		chatbox.Text = chatboxApi:CalculateText("")
		local isCommand = commandProcessor:parse(message)
		if(not isCommand) then
			local success,hasResponse,localizationData = environment.network:invoke("requestMessage",fixWhitespace(message),environment.currentChannel,extraData)
			if(hasResponse and (not success)) then
				environment:addMessageToQueue(environment.message_senders.makeSm(localization:localizeResponse(unpack(localizationData))))
			elseif(success) then
				connections:Fire("ChatWindow","MessagePosted",message)
			end
		else
			connections:Fire("ChatWindow","MessagePosted",message)
		end
	end

	function environment:onEdit(message)
		connections:Fire("ChatWindow","MessagePosted",message)
	end

	local base = function()
		return(chatbox.TextSize * (2 + 1/3))
	end

	-------- Setup: --------

	function chatbar:setup(a,b)
		chatbarContainer,chatbox = a,b

		local autofill = autofillModule(environment,chatbox)
		local resize = chatbox.Parent.Parent:WaitForChild("Resize")
		local icon = resize:WaitForChild("Icon")
		local channelButton = resize.Parent:WaitForChild("Container"):WaitForChild("Channel")
		local label = channelButton:WaitForChild("Label")
		local offset = 10
		local single,isReply = nil,nil
		environment.currentChannel = "Main"

		function environment:setChannel(name,is,display,extra)
			extraData = extra
			environment.currentChannel = name
			isReply = is
			channelButton.ReplyIcon.Visible = (is == true)

			if(not isReply) then
				if(not name) then
					channelButton.Visible = false
				else
					label.Text = (display or name)
					channelButton.Visible = true
				end
			else
				label.Text = ""
				channelButton.Visible = true
				channelButton.Size = UDim2.new(0,20,0,20)
			end

			pcall(function()
				environment:clearChannelNotifications(name)
				if(environment.currentChannel ~= name) then
					environment:openChannelFromBar(name)
				end
			end)
		end

		function environment:whisper(user)
			if(user ~= localPlayer) then
				local displayName = user:GetAttribute("DisplayName")
				environment:setChannel(getWhisperChannel(user.UserId),false,environment.localization:getMessagePrefix("To") .. " " .. displayName)
			end
		end

		local typingIndicator = function()
			return environment.bubbleChatEnabled and environment.bubbleChatConfig.TypingIndicator
		end

		-------- API: --------

		local locked = false
		chatboxApi = {
			CalculateText = function(self,text)
				return string.rep(string.char(32),(count or 0)) .. text
			end,
			GetText = function()
				return chatbox.Text:sub(idx,#chatbox.Text)
			end,
			LockChatbar = function(text)
				setplaceholderText(localization:getChatbarPlaceholder(true))
				chatbox.TextEditable = false
				locked = true
			end,
			UnlockChatbar = function()
				setplaceholderText(localization:getChatbarPlaceholder())
				chatbox.TextEditable = true
				locked = false
			end,
		}

		environment.chatboxApi = chatboxApi

		chatbox.Focused:Connect(function()
			if(locked) then
				chatbox:ReleaseFocus()
			end
		end)

		environment.network.onClientEvent("receiveMuteUpdate",function(muted)
			chatboxApi[muted and "LockChatbar" or "UnlockChatbar"]()
		end)

		-------- Up/down message --------

		local on = function()
			chatbox.Text = chatboxApi:CalculateText(messageHistory[pointer])
			chatbox.CursorPosition = 10000
		end

		userInput.InputBegan:Connect(function(input)
			pcall(function()
				if(chatbox:IsFocused()) then
					if(not environment.autofillOpen) then
						if(input.KeyCode == Enum.KeyCode.Up) then
							pointer = math.clamp(pointer + 1,1,#messageHistory)
							on()
						elseif(input.KeyCode == Enum.KeyCode.Down) then
							pointer = math.clamp(pointer - 1,1,#messageHistory)
							on()
						end
					end
				end
			end)
		end)

		-------- More functions: --------

		local get = function(t)
			return getRawTextSizeInPx(label,t,true)
		end

		local getSpaces = function(text)
			local spaceCount = 3
			local minSize = get(text) + get(string.rep(space,spaceCount))
			local lastSize
			repeat
				spaceCount += 1
				lastSize = get(string.rep(space,spaceCount))
			until(spaceCount >= 1000 or (lastSize.X >= minSize.X)) 
			return spaceCount
		end

		local lastText,expiresAt = "",0

		local timeout = function()
			task.spawn(function()
				local current = expiresAt
				task.wait((expiresAt-tick()))
				if(current == expiresAt) then
					environment.network:fire("typingIndicator",false)
				end
			end)
		end

		local logChange = function()
			if(typingIndicator() and chatbox:IsFocused() and (not locked)) then
				environment.network:fire("typingIndicator",true)
				expiresAt = tick() + 5
				timeout()
			end
		end

		local textChanged

		local newVisibility = function(recurse)
			local isVis = resize.Visible
			offset = (isVis and -(resize.AbsoluteSize.X * 1.6) or -10)
			if(environment.cornerPosition:find("Bottom")) then
				offset = -10
			end
			if(not recurse) then
				textChanged()
			end
		end

		local container = resize.Parent:WaitForChild("Container")

		textChanged = function()
			if(utf8.len(utf8.nfcnormalize(chatbox.Text)) > environment.config.Messages.MaximumLength) then
				chatbox.Text = lastText
				return
			end
			logChange()
			lastText = chatbox.Text
			local size = getRawTextSizeInPx(chatbox)

			-- buttons:

			local baseSize = (base() - (chatbox.TextSize)) + (chatbox.TextSize) + padding
			container.Position = UDim2.new(0.5,0,0,baseSize/2)

			local sizeForResize = math.ceil(baseSize * 25/36)
			resize.Size = UDim2.fromOffset(sizeForResize,sizeForResize)
			local paddingLeft = (10 + sizeForResize + 5)
			if(environment.mainUi) then
				local scroller = environment.mainUi.channelBar.Main.Container.Scroller
				if(environment.cornerPosition == "TopLeft") then
					resize.AnchorPoint = Vector2.new(1,0.5)
					resize.Position = UDim2.new(1,-5,0,baseSize/2)
				elseif(environment.cornerPosition == "BottomRight") then
					resize.AnchorPoint = Vector2.new(0,0.5)
					resize.Position = UDim2.new(0,5,0,baseSize/2)
					if(resize.Visible) then
						scroller.Size = UDim2.new(1,-paddingLeft,1,0)
					else
						scroller.Size = UDim2.new(1,-10,1,0)
					end
				elseif(environment.cornerPosition == "TopRight") then
					resize.AnchorPoint = Vector2.new(0,0.5)
					resize.Position = UDim2.new(0,5,0,baseSize/2)
					chatbox.Parent.Position = UDim2.new(0,paddingLeft-5,0.5,0)
				elseif(environment.cornerPosition == "BottomLeft") then
					resize.AnchorPoint = Vector2.new(1,0.5)
					resize.Position = UDim2.new(1,-5,0,baseSize/2)
					if(resize.Visible) then
						scroller.Position = UDim2.new(0,5,0.5,0)
						scroller.AnchorPoint = Vector2.new(0,0.5)
						scroller.Size = UDim2.new(1,-paddingLeft,1,0)
					else
						scroller.Position = UDim2.new(1,-5,0.5,0)
						scroller.AnchorPoint = Vector2.new(1,0.5)
						scroller.Size = UDim2.new(1,-10,1,0)
					end
				end
			end
			newVisibility(true)

			if(environment.refreshChannelSizes) then
				environment.refreshChannelSizes(chatbox.TextSize)
			end

			-- chatbar scaling:

			local totalSize = UDim2.new(1,0,0,(base() - (chatbox.TextSize)) + (size.Y) + padding)
			utility:tween({chatbox.Parent,0.05,{ -- white box
				Size = UDim2.new(1,offset,0,(base() - (chatbox.TextSize * 2)) + (size.Y) + (padding * 2))
			}},{chatbox,0.05,{ -- actual box
				Size = UDim2.new(1,-10,0,size.Y),
			}},{chatbox.Parent.Parent.Parent,0.05,{ -- main thing
				Size = totalSize
			}})

			if(not separate) then
				local window = chatbox.Parent.Parent.Parent.Parent.Parent.ChatWindow
				window.Main.Size = UDim2.new(1,0,1,(totalSize.Y.Offset - (baseSize)))
				window.Main.Scroller.Size = UDim2.new(1,-15,1,-(totalSize.Y.Offset + 5))
			end
		end

		local deselectChannel = function()
			channelButton.Visible = false
		end

		local calculateCursor = function()
			heartbeat:Wait()
			local cursor,start = chatbox.CursorPosition,chatbox.SelectionStart
			local max = math.max(cursor,start)
			if(channelButton.Visible) then
				if(max < idx and (chatbox:IsFocused())) then
					deselectChannel()
				elseif(chatbox:IsFocused()) then
					local min = math.min(cursor,start)
					if(min ~= -1 and min < idx) then
						chatbox.SelectionStart = idx
					end
				end
			end
		end

		local onChannel = function()
			heartbeat:Wait()
			if(channelButton.Visible) then --> vomit code below
				-- fetch text size for channel button
				local textSize = isReply and {X = 25} or getRawTextSizeInPx(label,nil,true)
				-- set the size of the button
				label.Size = UDim2.new(0,textSize.X,1,0)
				channelButton.Size = (not isReply and UDim2.new(0,textSize.X + 10,0,20) or channelButton.Size)
				-- forgot what this does but it's important
				idx = 1 + (count or 0)
				-- get the spaces for the chatbar (eg: 'hello' -> '    ' if that makes sense)
				count = getSpaces(isReply and "   " or label.Text)
				chatbox.Text = string.rep(string.char(32),count) .. chatbox.Text:sub(idx,#chatbox.Text)
				-- set it to only get text after the spaces and put the cursor at the end when a channel's selected
				idx = count + 1
				chatbox.CursorPosition += 1000
				chatbox:CaptureFocus()
			else
				environment.currentChannel = "Main"
				if(idx > 1) then
					chatbox.Text = chatbox.Text:sub(idx,#chatbox.Text)
				end
				count = nil
				extraData = nil
				idx = 1
			end
		end

		-------- Connections: --------

		chatbox:GetPropertyChangedSignal("TextSize"):Connect(textChanged)
		chatbox:GetPropertyChangedSignal("Text"):Connect(textChanged)
		textChanged()

		setplaceholderText(localization:getChatbarPlaceholder())
		chatbox.Focused:Connect(logChange)
		chatbox.FocusLost:Connect(function(enterPressed,input)
			if(typingIndicator()) then
				environment.network:fire("typingIndicator",false)
			end
			if(enterPressed) then
				sendMessage(chatbox.Text:sub(idx,#chatbox.Text))
			end
		end)

		-- WARNING: USING THIS TO FAKE MESSAGES WILL LAND YOU IN MODERATION TROUBLE.
		-- THIS IS ONLY USED FOR QUICKCHAT

		function environment:sendMessageInternally(text)
			if(typingIndicator()) then
				environment.network:fire("typingIndicator",false)
			end
			sendMessage(text)
		end

		chatbox:GetPropertyChangedSignal("CursorPosition"):Connect(calculateCursor)
		chatbox:GetPropertyChangedSignal("SelectionStart"):Connect(calculateCursor)
		environment.textChanged = textChanged

		resize:GetPropertyChangedSignal("Visible"):Connect(newVisibility)
		newVisibility()

		label:GetPropertyChangedSignal("Text"):Connect(onChannel)
		channelButton:GetPropertyChangedSignal("Visible"):Connect(onChannel)
		onChannel()

		-------- Undo / redo support: --------

		history(chatbox,chatboxApi)

		-------- Autofills: --------

		local autofillsList = {}

		local onAutofill = function(rawModule)
			local module = require(rawModule)
			if(type(module) == "function") then
				module = module(environment.config)
			end
			autofillsList[rawModule.Name] = module
		end

		autofillListFolder.ChildAdded:Connect(onAutofill)
		for _,child in pairs(autofillListFolder:GetChildren()) do
			task.spawn(onAutofill,child)
		end

		autofillManager(autofill,autofillsList,chatbox,environment)

		-------- Return: --------

		return {
			chatbox = chatbox,
			chatbar = chatbox.Parent.Parent.Parent
		}
	end

	-------- Core connections: --------

	local focusChatbar = function(state)
		if(environment.main_ui.Visible) then
			if(typeof(state) == "EnumItem") then
				state = true
			end
			if(state) then
				chatbox:CaptureFocus()
			else
				chatbox:ReleaseFocus()
			end
		end
	end

	connections:Connect("ChatWindow","SpecialKeyPressed",focusChatbar)
	connections:Connect("ChatWindow","ChatBarFocusChanged",focusChatbar)

	return chatbar
end]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a7d</UniqueId>
								</Properties>
								<Item class="ModuleScript" referent="RBX8a8a1f6722f741748fe3aed73b445b04">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<Content name="LinkedSource"><null></null></Content>
										<string name="Name">history</string>
										<string name="ScriptGuid">{77E9DFBC-07A0-4DAC-9011-15F95F7B527D}</string>
										<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: history.lua
-- Description: Ctrl+Y / Ctrl+Z support
-- Credit: @boatbomber for TextBox+'s undo/redo system base

return function(box,api)
	-------- Services: --------

	local userInput = game:GetService("UserInputService")
	local runService = game:GetService("RunService")

	-------- Variables: --------

	local lastChange,lastSnap,lastText = tick(),tick(),""
	local holdingCtrl,held,controller,ignores,stacks = false,{},{},{},{
		undo = {},
		redo = {}
	}

	-------- Functions: --------

	local apply = function(waypoint)
		for property,value in pairs(waypoint) do
			box[property] = (property == "Text" and api:CalculateText(value) or value)
		end
	end

	-------- History controller: --------

	function controller:snap()
		table.insert(stacks.undo,{
			Text = api:GetText(),
			CursorPosition = box.CursorPosition,
			SelectionStart = box.SelectionStart
		})
		if(#stacks.redo > 0) then
			stacks.redo = {}
		end
		while(#stacks.undo > 30) do
			table.remove(stacks.undo,1)
		end
	end

	controller[Enum.KeyCode.Z] = function()
		if(#stacks.undo > 1) then
			local waypoint = stacks.undo[#stacks.undo - 1]
			apply(waypoint)
			ignores[box] = true
			table.insert(stacks.redo,stacks.undo[#stacks.undo])
			table.remove(stacks.undo,#stacks.undo)
		end
	end

	controller[Enum.KeyCode.Y] = function()
		if(#stacks.redo > 0) then
			local waypoint = stacks.redo[#stacks.redo]
			apply(waypoint)
			ignores[box] = true
			table.insert(stacks.undo,waypoint)
			table.remove(stacks.redo,#stacks.redo)
		end
	end

	-------- Connections: --------

	userInput.InputBegan:Connect(function(input)
		if(box:IsFocused()) then
			if(input.KeyCode == Enum.KeyCode.LeftControl or input.KeyCode == Enum.KeyCode.RightControl) then
				if(not holdingCtrl) then
					holdingCtrl = true
					local signal
					signal = input.Changed:Connect(function()
						if(input.UserInputState == Enum.UserInputState.End) then
							signal:Disconnect()
							holdingCtrl = false
						end
					end)
				end
			elseif(input.KeyCode == Enum.KeyCode.Y or input.KeyCode == Enum.KeyCode.Z) then
				if(holdingCtrl and not held[input.KeyCode]) then
					local signal
					held[input] = true
					held[input.KeyCode] = true
					signal = input.Changed:Connect(function()
						if(input.UserInputState == Enum.UserInputState.End) then
							signal:Disconnect()
							held[input] = false
							held[input.KeyCode] = false
						end
					end)
					local began = tick()
					while(held[input]) do
						local elapsed = tick() - began
						controller[input.KeyCode]()
						task.wait(math.clamp((0.5 - (elapsed / 8)),0.1,math.huge))
					end
				end
			end
		end
	end)

	box:GetPropertyChangedSignal("Text"):Connect(function()
		lastChange = tick()
	end)

	runService.Heartbeat:Connect(function()
		if(lastText == box.Text) then
			return
		end
		if(ignores[box]) then
			ignores[box] = nil
			lastText = box.Text
			return
		end
		if(tick() - lastChange > 0.5) or (tick() - lastSnap > 2) or (math.abs(#lastText - #box.Text) > 10) then
			lastSnap = tick()
			lastText = box.Text
			controller:snap()
		end
	end)

	controller:snap()
end]]></ProtectedString>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a7e</UniqueId>
									</Properties>
								</Item>
								<Item class="Folder" referent="RBXf64bdafe38fc42bb938d3d58f2796e6a">
									<Properties>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<string name="Name">autofill</string>
										<int64 name="SourceAssetId">-1</int64>
										<BinaryString name="Tags"></BinaryString>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259b3</UniqueId>
									</Properties>
									<Item class="Folder" referent="RBX1ae4b270584e42ba8bfac67c774931b1">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<string name="Name">autofills</string>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000259b4</UniqueId>
										</Properties>
										<Item class="ModuleScript" referent="RBX7c27b2f37baf44ecad756f80a828b0b4">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<Content name="LinkedSource"><null></null></Content>
												<string name="Name">mention</string>
												<string name="ScriptGuid">{070686FC-5AFE-4DD5-A210-83C6451DC176}</string>
												<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: mention.lua
-- Description: User mention system

local players = game:GetService("Players")
local autofill = {}
autofill.beginsWith = "@"
autofill.endsWith = " "

autofill.onCapture = function(matches)
	local fill = {}
	local match = matches[#matches]
	if(match and (not match.hasClosing)) then
		for _,player in pairs(players:GetPlayers()) do
			if(player.Name:sub(1,#match.text) == match.text) then
				local display = (player.Name ~= player:GetAttribute("DisplayName") and ("(%s)"):format(player:GetAttribute("DisplayName")))
				local username = ("@%s %s"):format(player.Name,display or "")
				table.insert(fill,{
					text = (username),
					autofillBar = match.before .. "@".. player.Name,
					gsub = {"@"..match.text,"@"..player.Name.." "}
				})
			elseif(player:GetAttribute("DisplayName"):sub(1,#match.text) == match.text) then
				local username = ("@%s (%s)"):format(player:GetAttribute("DisplayName"),player.Name)
				table.insert(fill,{
					text = (username),
					autofillBar = match.before .. "@".. player:GetAttribute("DisplayName"),
					gsub = {"@"..match.text,"@"..player.Name.." "}
				})
			end
		end
	end
	if(#fill == 0) then
		fill = nil
	end
	return {},fill
end

return autofill]]></ProtectedString>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a7f</UniqueId>
											</Properties>
										</Item>
										<Item class="ModuleScript" referent="RBXe48dbb6c09054c5e96753bd5f5af2697">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<Content name="LinkedSource"><null></null></Content>
												<string name="Name">userAutofill</string>
												<string name="ScriptGuid">{A2BE70E2-22C6-4B23-82ED-887297B7ABFB}</string>
												<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: userAutofill.lua
-- Description: User autofill system

return function(config)
	local players = game:GetService("Players")
	local localPlayer = players.LocalPlayer

	local autofill = {}
	autofill.beginsWith = "/"
	autofill.endsWith = nil
	autofill.security = "internal"
	
	local autofillNameCommands = {
		["/mute"] = true,
		["/m"] = true,
		["/unmute"] = true,
		["/unm"] = true
	}
	
	if(config.Messages.Private.WhispersEnabled) then
		autofillNameCommands["/whisper"] = true
		autofillNameCommands["/w"] = true
	end

	autofill.onCapture = function(matches,environment)
		local fill,gsub,callback = {},{},nil
		local match = matches[#matches]
		local detect = function(player,name,base,command,isDisplayName)
			if(player ~= localPlayer) then
				table.insert(fill,{
					text = (isDisplayName and name .. " @"..player.Name or name),
					autofillBar = match.before .. command .. name,
					gsub = { --> replace (eg: /w Jump) with (/w Jumpathy)
						command..base,
						command..player.Name.." "
					}
				})
			end
		end
		if(match) then
			local startIdx = match.text:find(" ")
			if(startIdx) then
				local text = match.text:sub(startIdx + 1,#match.text)
				local command = "/" .. match.text:sub(1,startIdx)
				if(autofillNameCommands[command:gsub(" ","")]) then				
					if(string.len(text) >= 1) then
						for _,player in pairs(players:GetPlayers()) do
							if(player.Name:sub(1,#text) == text) then
								detect(player,player.Name,text,command)
							elseif(player:GetAttribute("DisplayName"):sub(1,#text) == text) then
								detect(player,player:GetAttribute("DisplayName"),text,command,true)
							end
						end
					end
					if(#match.text:split(" ") >= 3) then
						text = text:gsub(" ","")
						if(players:FindFirstChild(text) and command:sub(1,2) == "/w") then
							gsub[command .. text .. " "] = ""
							local target = players[text]
							callback = function()
								environment:whisper(target)
							end
						end
					end
				end
			end
		end
		return gsub,fill,callback
	end

	return autofill
end]]></ProtectedString>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a80</UniqueId>
											</Properties>
										</Item>
										<Item class="ModuleScript" referent="RBX502f44fd981c48e395f38774b2c16a1e">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<Content name="LinkedSource"><null></null></Content>
												<string name="Name">team</string>
												<string name="ScriptGuid">{03C9BF76-620B-4D21-8101-30D977568CBC}</string>
												<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: team.lua
-- Description: Team channel system

return function(config)
	if(not config.Teams.TeamChat) then
		return
	end
	
	local players = game:GetService("Players")
	local localPlayer = players.LocalPlayer

	local autofill = {}
	local env
	autofill.beginsWith = ""
	autofill.endsWith = nil
	autofill.security = "internal"

	autofill.onCapture = function(matches,environment)
		if(not env) then
			env = environment
		end
		
		local gsub,fill,callback = {},{},nil
		if(matches:sub(1,1) == "/") then
			local commandName = matches:split("/")[2]
			if(commandName:find(" ")) then
				commandName = commandName:split(" ")[1]
				if(commandName == "t" or commandName == "team") then
					if(localPlayer.Team ~= nil and (not localPlayer.Neutral)) then
						gsub["/" .. commandName .. " "] = ""
						callback = function()
							local teamPrefix = environment.localization:getMessagePrefix("Team")
							environment:setChannel(teamPrefix,false,nil,{team = localPlayer.Team})
						end
					end
				end
			end
		end
		if(#fill == 0) then
			fill = nil
		end
		return gsub,fill,callback
	end

	localPlayer.Changed:Connect(function()
		if(localPlayer.Team == nil and localPlayer.Neutral) then
			if(env and env:getExtraData()) then
				if(env:getExtraData().team) then
					env:setChannel(nil)
				end
			end
		end
	end)

	return autofill
end]]></ProtectedString>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a81</UniqueId>
											</Properties>
										</Item>
										<Item class="ModuleScript" referent="RBXe9ca77535a454baea226acb1fee5fa3f">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<Content name="LinkedSource"><null></null></Content>
												<string name="Name">emoji</string>
												<string name="ScriptGuid">{D4DFE69E-48CC-49B7-BBD8-7E3036BEB5F7}</string>
												<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: emoji.lua
-- Description: Emoji autofill system

local list = require(script.list)
local autofill = {}
autofill.beginsWith = ":"
autofill.endsWith = ":"

autofill.onCapture = function(matches)
	local gsub = {}
	local fill = {}
	for _,match in pairs(matches) do
		if(match.hasClosing) then
			local replacement = list:findDirect(match.text)
			if(replacement) then
				gsub[(":%s:"):format(match.text)] = replacement
			end
		else
			for _,emojiMatch in pairs(list.search(match.text)) do
				table.insert(fill,{
					text = (":%s: %s"):format(unpack(emojiMatch)),
					autofillBar = match.before .. ":" .. emojiMatch[1] .. ":",
					gsub = {(":%s"):format(match.text),emojiMatch[2].." "}
				})
			end
		end
	end
	return gsub,fill
end

return autofill]]></ProtectedString>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a82</UniqueId>
											</Properties>
											<Item class="ModuleScript" referent="RBXcc2293a076114114ae9e4fb72aaafc36">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<Content name="LinkedSource"><null></null></Content>
													<string name="Name">list</string>
													<string name="ScriptGuid">{9B8F91D6-19D6-4B5F-AA72-43B4FBE8B082}</string>
													<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: emojis.lua
-- Description: Emojis list (with a search function)
-- Base: (https://gist.githubusercontent.com/rigwild/1b509bf69e2a2391f44aa5de3f05b006/raw/e4b5bfa81ea3e7e51af1f5585964666115934631/discord_emojis.json)
-- Note: Ran every emoji through the chat filter system to ensure that they're safe to use and alphabetized them to hopefully speed up searching speeds

local list = {
	["a"] = {
		["a"] = "\240\159\133\176",
		["arrow_forward"] = "\226\150\182",
		["anger_right"] = "\240\159\151\175",
		["arrow_lower_right"] = "\226\134\152",
		["angel_tone1"] = "\240\159\145\188\240\159\143\187",
		["athletic_shoe"] = "\240\159\145\159",
		["anchor"] = "\226\154\147",
		["arrow_down_small"] = "\240\159\148\189",
		["adult_tone1"] = "\240\159\167\145\240\159\143\187",
		["atom"] = "\226\154\155",
		["astonished"] = "\240\159\152\178",
		["angel_tone2"] = "\240\159\145\188\240\159\143\188",
		["arrow_double_up"] = "\226\143\171",
		["adult_tone5"] = "\240\159\167\145\240\159\143\191",
		["airplane_small"] = "\240\159\155\169",
		["angel"] = "\240\159\145\188",
		["aries"] = "\226\153\136",
		["adult"] = "\240\159\167\145",
		["aquarius"] = "\226\153\146",
		["asterisk_symbol"] = "\42",
		["anguished"] = "\240\159\152\167",
		["ambulance"] = "\240\159\154\145",
		["airplane_departure"] = "\240\159\155\171",
		["arrows_clockwise"] = "\240\159\148\131",
		["ant"] = "\240\159\144\156",
		["avocado"] = "\240\159\165\145",
		["arrow_backward"] = "\226\151\128",
		["arrow_upper_left"] = "\226\134\150",
		["arrow_up_down"] = "\226\134\149",
		["abc"] = "\240\159\148\164",
		["adult_tone4"] = "\240\159\167\145\240\159\143\190",
		["arrow_down"] = "\226\172\135",
		["angel_tone5"] = "\240\159\145\188\240\159\143\191",
		["arrow_up"] = "\226\172\134",
		["apple"] = "\240\159\141\142",
		["arrow_right"] = "\226\158\161",
		["arrow_left"] = "\226\172\133",
		["aerial_tramway"] = "\240\159\154\161",
		["angel_tone3"] = "\240\159\145\188\240\159\143\189",
		["arrow_up_small"] = "\240\159\148\188",
		["arrow_double_down"] = "\226\143\172",
		["airplane_arriving"] = "\240\159\155\172",
		["airplane"] = "\226\156\136",
		["accept"] = "\240\159\137\145",
		["adult_tone2"] = "\240\159\167\145\240\159\143\188",
		["alien"] = "\240\159\145\189",
		["anger"] = "\240\159\146\162",
		["arrows_counterclockwise"] = "\240\159\148\132",
		["arrow_lower_left"] = "\226\134\153",
		["articulated_lorry"] = "\240\159\154\155",
		["arrow_right_hook"] = "\226\134\170",
		["art"] = "\240\159\142\168",
		["adult_tone3"] = "\240\159\167\145\240\159\143\189",
		["angry"] = "\240\159\152\160"
	},
	["c"] = {
		["crazy_face"] = "\240\159\164\170",
		["construction_worker"] = "\240\159\145\183",
		["chestnut"] = "\240\159\140\176",
		["child_tone1"] = "\240\159\167\146\240\159\143\187",
		["child_tone2"] = "\240\159\167\146\240\159\143\188",
		["cloud_snow"] = "\240\159\140\168",
		["cherry_blossom"] = "\240\159\140\184",
		["convenience_store"] = "\240\159\143\170",
		["cinema"] = "\240\159\142\166",
		["clock"] = "\240\159\149\176",
		["congratulations"] = "\227\138\151",
		["canned_food"] = "\240\159\165\171",
		["currency_exchange"] = "\240\159\146\177",
		["cloud_rain"] = "\240\159\140\167",
		["calendar_spiral"] = "\240\159\151\147",
		["customs"] = "\240\159\155\131",
		["cross"] = "\226\156\157",
		["crying_cat_face"] = "\240\159\152\191",
		["card_index"] = "\240\159\147\135",
		["clap_tone2"] = "\240\159\145\143\240\159\143\188",
		["cherries"] = "\240\159\141\146",
		["chart_with_downwards_trend"] = "\240\159\147\137",
		["cloud_tornado"] = "\240\159\140\170",
		["cup_with_straw"] = "\240\159\165\164",
		["crown"] = "\240\159\145\145",
		["cruise_ship"] = "\240\159\155\179",
		["chipmunk"] = "\240\159\144\191",
		["cat2"] = "\240\159\144\136",
		["cowboy"] = "\240\159\164\160",
		["crocodile"] = "\240\159\144\138",
		["clap_tone5"] = "\240\159\145\143\240\159\143\191",
		["crossed_swords"] = "\226\154\148",
		["coconut"] = "\240\159\165\165",
		["call_me_tone2"] = "\240\159\164\153\240\159\143\188",
		["coffin"] = "\226\154\176",
		["cold_sweat"] = "\240\159\152\176",
		["clown"] = "\240\159\164\161",
		["christmas_tree"] = "\240\159\142\132",
		["capricorn"] = "\226\153\145",
		["confused"] = "\240\159\152\149",
		["clap_tone1"] = "\240\159\145\143\240\159\143\187",
		["chains"] = "\226\155\147",
		["clock5"] = "\240\159\149\148",
		["construction_site"] = "\240\159\143\151",
		["cow"] = "\240\159\144\174",
		["calendar"] = "\240\159\147\134",
		["call_me_tone1"] = "\240\159\164\153\240\159\143\187",
		["cloud_lightning"] = "\240\159\140\169",
		["clapper"] = "\240\159\142\172",
		["copyright"] = "\194\169",
		["construction"] = "\240\159\154\167",
		["child_tone4"] = "\240\159\167\146\240\159\143\190",
		["cloud"] = "\226\152\129",
		["construction_worker_tone2"] = "\240\159\145\183\240\159\143\188",
		["curling_stone"] = "\240\159\165\140",
		["crystal_ball"] = "\240\159\148\174",
		["compression"] = "\240\159\151\156",
		["circus_tent"] = "\240\159\142\170",
		["computer"] = "\240\159\146\187",
		["coffee"] = "\226\152\149",
		["construction_worker_tone5"] = "\240\159\145\183\240\159\143\191",
		["cricket"] = "\240\159\166\151",
		["confounded"] = "\240\159\152\150",
		["crescent_moon"] = "\240\159\140\153",
		["cake"] = "\240\159\141\176",
		["call_me_tone4"] = "\240\159\164\153\240\159\143\190",
		["city_dusk"] = "\240\159\140\134",
		["church"] = "\226\155\170",
		["comet"] = "\226\152\132",
		["cooking"] = "\240\159\141\179",
		["call_me"] = "\240\159\164\153",
		["child_tone3"] = "\240\159\167\146\240\159\143\189",
		["clipboard"] = "\240\159\147\139",
		["construction_worker_tone3"] = "\240\159\145\183\240\159\143\189",
		["construction_worker_tone4"] = "\240\159\145\183\240\159\143\190",
		["camel"] = "\240\159\144\171",
		["call_me_tone5"] = "\240\159\164\153\240\159\143\191",
		["chicken"] = "\240\159\144\148",
		["camera_with_flash"] = "\240\159\147\184",
		["city_sunset"] = "\240\159\140\135",
		["custard"] = "\240\159\141\174",
		["child"] = "\240\159\167\146",
		["candy"] = "\240\159\141\172",
		["cat"] = "\240\159\144\177",
		["carousel_horse"] = "\240\159\142\160",
		["coat"] = "\240\159\167\165",
		["croissant"] = "\240\159\165\144",
		["cactus"] = "\240\159\140\181",
		["crayon"] = "\240\159\150\141",
		["carrot"] = "\240\159\165\149",
		["cry"] = "\240\159\152\162",
		["cheese"] = "\240\159\167\128",
		["canoe"] = "\240\159\155\182",
		["call_me_tone3"] = "\240\159\164\153\240\159\143\189",
		["clap_tone4"] = "\240\159\145\143\240\159\143\190",
		["chart_with_upwards_trend"] = "\240\159\147\136",
		["control_knobs"] = "\240\159\142\155",
		["closed_book"] = "\240\159\147\149",
		["cow2"] = "\240\159\144\132",
		["curry"] = "\240\159\141\155",
		["cut_of_meat"] = "\240\159\165\169",
		["camping"] = "\240\159\143\149",
		["child_tone5"] = "\240\159\167\146\240\159\143\191",
		["cd"] = "\240\159\146\191",
		["chocolate_bar"] = "\240\159\141\171",
		["curly_loop"] = "\226\158\176",
		["clap"] = "\240\159\145\143",
		["construction_worker_tone1"] = "\240\159\145\183\240\159\143\187",
		["closed_umbrella"] = "\240\159\140\130",
		["clubs"] = "\226\153\163",
		["candle"] = "\240\159\149\175",
		["classical_building"] = "\240\159\143\155",
		["confetti_ball"] = "\240\159\142\138",
		["crossed_flags"] = "\240\159\142\140",
		["cricket_game"] = "\240\159\143\143",
		["cookie"] = "\240\159\141\170",
		["clap_tone3"] = "\240\159\145\143\240\159\143\189",
		["crab"] = "\240\159\166\128",
		["camera"] = "\240\159\147\183",
		["card_box"] = "\240\159\151\131",
		["checkered_flag"] = "\240\159\143\129",
		["chopsticks"] = "\240\159\165\162",
		["chart"] = "\240\159\146\185",
		["couch"] = "\240\159\155\139",
		["cyclone"] = "\240\159\140\128"
	},
	["b"] = {
		["b"] = "\240\159\133\177",
		["boot"] = "\240\159\145\162",
		["blossom"] = "\240\159\140\188",
		["baby"] = "\240\159\145\182",
		["bread"] = "\240\159\141\158",
		["billed_cap"] = "\240\159\167\162",
		["ballot_box_with_check"] = "\226\152\145",
		["blond-haired_woman_tone4"] = "\240\159\145\177\240\159\143\190\226\153\128",
		["bowl_with_spoon"] = "\240\159\165\163",
		["beginner"] = "\240\159\148\176",
		["bangbang"] = "\226\128\188",
		["bearded_person_tone4"] = "\240\159\167\148\240\159\143\190",
		["baby_tone2"] = "\240\159\145\182\240\159\143\188",
		["bowling"] = "\240\159\142\179",
		["baggage_claim"] = "\240\159\155\132",
		["bearded_person_tone1"] = "\240\159\167\148\240\159\143\187",
		["bullettrain_front"] = "\240\159\154\133",
		["blond_haired_person_tone3"] = "\240\159\145\177\240\159\143\189",
		["bearded_person_tone5"] = "\240\159\167\148\240\159\143\191",
		["baby_tone1"] = "\240\159\145\182\240\159\143\187",
		["beach_umbrella"] = "\226\155\177",
		["boar"] = "\240\159\144\151",
		["baby_symbol"] = "\240\159\154\188",
		["blond-haired_woman_tone1"] = "\240\159\145\177\240\159\143\187\226\153\128",
		["boy"] = "\240\159\145\166",
		["blond_haired_person_tone5"] = "\240\159\145\177\240\159\143\191",
		["blond-haired_woman_tone3"] = "\240\159\145\177\240\159\143\189\226\153\128",
		["bar_chart"] = "\240\159\147\138",
		["bamboo"] = "\240\159\142\141",
		["bear"] = "\240\159\144\187",
		["beetle"] = "\240\159\144\158",
		["bearded_person_tone2"] = "\240\159\167\148\240\159\143\188",
		["bee"] = "\240\159\144\157",
		["bow_and_arrow"] = "\240\159\143\185",
		["blond_haired_person_tone2"] = "\240\159\145\177\240\159\143\188",
		["blond_haired_person_tone1"] = "\240\159\145\177\240\159\143\187",
		["birthday"] = "\240\159\142\130",
		["baseball"] = "\226\154\190",
		["blond-haired_woman_tone5"] = "\240\159\145\177\240\159\143\191\226\153\128",
		["black_nib"] = "\226\156\146",
		["blond-haired_man_tone4"] = "\240\159\145\177\240\159\143\190\226\153\130",
		["blowfish"] = "\240\159\144\161",
		["books"] = "\240\159\147\154",
		["bearded_person_tone3"] = "\240\159\167\148\240\159\143\189",
		["ballot_box"] = "\240\159\151\179",
		["bacon"] = "\240\159\165\147",
		["bookmark"] = "\240\159\148\150",
		["bomb"] = "\240\159\146\163",
		["brain"] = "\240\159\167\160",
		["baby_bottle"] = "\240\159\141\188",
		["blond-haired_man_tone3"] = "\240\159\145\177\240\159\143\189\226\153\130",
		["boy_tone1"] = "\240\159\145\166\240\159\143\187",
		["bento"] = "\240\159\141\177",
		["bat"] = "\240\159\166\135",
		["bike"] = "\240\159\154\178",
		["baby_tone3"] = "\240\159\145\182\240\159\143\189",
		["boy_tone3"] = "\240\159\145\166\240\159\143\189",
		["bank"] = "\240\159\143\166",
		["boom"] = "\240\159\146\165",
		["black_joker"] = "\240\159\131\143",
		["bell"] = "\240\159\148\148",
		["boy_tone5"] = "\240\159\145\166\240\159\143\191",
		["black_small_square"] = "\226\150\170",
		["black_medium_square"] = "\226\151\188",
		["blond-haired_man_tone2"] = "\240\159\145\177\240\159\143\188\226\153\130",
		["book"] = "\240\159\147\150",
		["bird"] = "\240\159\144\166",
		["bus"] = "\240\159\154\140",
		["barber"] = "\240\159\146\136",
		["blond-haired_man_tone1"] = "\240\159\145\177\240\159\143\187\226\153\130",
		["black_large_square"] = "\226\172\155",
		["bust_in_silhouette"] = "\240\159\145\164",
		["bearded_person"] = "\240\159\167\148",
		["busts_in_silhouette"] = "\240\159\145\165",
		["blond-haired_man_tone5"] = "\240\159\145\177\240\159\143\191\226\153\130",
		["blue_book"] = "\240\159\147\152",
		["basketball"] = "\240\159\143\128",
		["black_medium_small_square"] = "\226\151\190",
		["baby_tone4"] = "\240\159\145\182\240\159\143\190",
		["blond-haired_man"] = "\240\159\145\177\226\153\130",
		["battery"] = "\240\159\148\139",
		["bullettrain_side"] = "\240\159\154\132",
		["bellhop"] = "\240\159\155\142",
		["briefcase"] = "\240\159\146\188",
		["biohazard"] = "\226\152\163",
		["blond_haired_person_tone4"] = "\240\159\145\177\240\159\143\190",
		["broccoli"] = "\240\159\165\166",
		["boxing_glove"] = "\240\159\165\138",
		["badminton"] = "\240\159\143\184",
		["bouquet"] = "\240\159\146\144",
		["baby_tone5"] = "\240\159\145\182\240\159\143\191",
		["blush"] = "\240\159\152\138",
		["bulb"] = "\240\159\146\161",
		["blue_car"] = "\240\159\154\153",
		["blond-haired_woman"] = "\240\159\145\177\226\153\128",
		["boy_tone2"] = "\240\159\145\166\240\159\143\188",
		["butterfly"] = "\240\159\166\139",
		["boy_tone4"] = "\240\159\145\166\240\159\143\190",
		["bug"] = "\240\159\144\155",
		["baby_chick"] = "\240\159\144\164",
		["black_square_button"] = "\240\159\148\178",
		["bookmark_tabs"] = "\240\159\147\145",
		["balloon"] = "\240\159\142\136",
		["burrito"] = "\240\159\140\175",
		["blond-haired_woman_tone2"] = "\240\159\145\177\240\159\143\188\226\153\128",
		["blond_haired_person"] = "\240\159\145\177"
	},
	["e"] = {
		["egg"] = "\240\159\165\154",
		["earth_asia"] = "\240\159\140\143",
		["elf_tone5"] = "\240\159\167\157\240\159\143\191",
		["ear_of_rice"] = "\240\159\140\190",
		["ear_tone3"] = "\240\159\145\130\240\159\143\189",
		["elf_tone4"] = "\240\159\167\157\240\159\143\190",
		["exclamation"] = "\226\157\151",
		["ear_tone4"] = "\240\159\145\130\240\159\143\190",
		["elf"] = "\240\159\167\157",
		["elf_tone1"] = "\240\159\167\157\240\159\143\187",
		["envelope_with_arrow"] = "\240\159\147\169",
		["eight_pointed_black_star"] = "\226\156\180",
		["elf_tone3"] = "\240\159\167\157\240\159\143\189",
		["eight_spoked_asterisk"] = "\226\156\179",
		["exploding_head"] = "\240\159\164\175",
		["ear_tone1"] = "\240\159\145\130\240\159\143\187",
		["evergreen_tree"] = "\240\159\140\178",
		["earth_americas"] = "\240\159\140\142",
		["earth_africa"] = "\240\159\140\141",
		["eagle"] = "\240\159\166\133",
		["ear_tone2"] = "\240\159\145\130\240\159\143\188",
		["european_post_office"] = "\240\159\143\164",
		["elephant"] = "\240\159\144\152",
		["eye_in_speech_bubble"] = "\240\159\145\129\240\159\151\168",
		["eject"] = "\226\143\143",
		["expressionless"] = "\240\159\152\145",
		["elf_tone2"] = "\240\159\167\157\240\159\143\188",
		["eyes"] = "\240\159\145\128",
		["euro"] = "\240\159\146\182",
		["ear_tone5"] = "\240\159\145\130\240\159\143\191",
		["ear"] = "\240\159\145\130",
		["eye"] = "\240\159\145\129",
		["european_castle"] = "\240\159\143\176",
		["eyeglasses"] = "\240\159\145\147",
		["electric_plug"] = "\240\159\148\140"
	},
	["d"] = {
		["dolphin"] = "\240\159\144\172",
		["digit_nine"] = "\57",
		["dizzy"] = "\240\159\146\171",
		["date"] = "\240\159\147\133",
		["dumpling"] = "\240\159\165\159",
		["dress"] = "\240\159\145\151",
		["dragon"] = "\240\159\144\137",
		["diamond_shape_with_a_dot_inside"] = "\240\159\146\160",
		["disappointed_relieved"] = "\240\159\152\165",
		["detective_tone2"] = "\240\159\149\181\240\159\143\188",
		["dark_sunglasses"] = "\240\159\149\182",
		["dart"] = "\240\159\142\175",
		["do_not_litter"] = "\240\159\154\175",
		["dancer_tone3"] = "\240\159\146\131\240\159\143\189",
		["dancer_tone5"] = "\240\159\146\131\240\159\143\191",
		["dollar"] = "\240\159\146\181",
		["digit_four"] = "\52",
		["diamonds"] = "\226\153\166",
		["deciduous_tree"] = "\240\159\140\179",
		["dove"] = "\240\159\149\138",
		["dancer"] = "\240\159\146\131",
		["dividers"] = "\240\159\151\130",
		["duck"] = "\240\159\166\134",
		["dancer_tone1"] = "\240\159\146\131\240\159\143\187",
		["digit_three"] = "\51",
		["digit_eight"] = "\56",
		["desert"] = "\240\159\143\156",
		["detective_tone1"] = "\240\159\149\181\240\159\143\187",
		["dancer_tone4"] = "\240\159\146\131\240\159\143\190",
		["door"] = "\240\159\154\170",
		["detective_tone3"] = "\240\159\149\181\240\159\143\189",
		["digit_six"] = "\54",
		["disappointed"] = "\240\159\152\158",
		["doughnut"] = "\240\159\141\169",
		["digit_zero"] = "\48",
		["desktop"] = "\240\159\150\165",
		["department_store"] = "\240\159\143\172",
		["detective_tone5"] = "\240\159\149\181\240\159\143\191",
		["drum"] = "\240\159\165\129",
		["digit_five"] = "\53",
		["dolls"] = "\240\159\142\142",
		["dvd"] = "\240\159\147\128",
		["digit_two"] = "\50",
		["dash"] = "\240\159\146\168",
		["detective"] = "\240\159\149\181",
		["dizzy_face"] = "\240\159\152\181",
		["dog"] = "\240\159\144\182",
		["droplet"] = "\240\159\146\167",
		["dancer_tone2"] = "\240\159\146\131\240\159\143\188",
		["drooling_face"] = "\240\159\164\164",
		["dragon_face"] = "\240\159\144\178",
		["deer"] = "\240\159\166\140",
		["detective_tone4"] = "\240\159\149\181\240\159\143\190"
	},
	["g"] = {
		["gloves"] = "\240\159\167\164",
		["ghost"] = "\240\159\145\187",
		["grinning"] = "\240\159\152\128",
		["girl_tone5"] = "\240\159\145\167\240\159\143\191",
		["game_die"] = "\240\159\142\178",
		["grimacing"] = "\240\159\152\172",
		["grey_exclamation"] = "\226\157\149",
		["goal"] = "\240\159\165\133",
		["grapes"] = "\240\159\141\135",
		["gear"] = "\226\154\153",
		["grey_question"] = "\226\157\148",
		["guard"] = "\240\159\146\130",
		["guitar"] = "\240\159\142\184",
		["gemini"] = "\226\153\138",
		["green_apple"] = "\240\159\141\143",
		["girl_tone3"] = "\240\159\145\167\240\159\143\189",
		["girl"] = "\240\159\145\167",
		["goat"] = "\240\159\144\144",
		["girl_tone2"] = "\240\159\145\167\240\159\143\188",
		["girl_tone1"] = "\240\159\145\167\240\159\143\187",
		["green_book"] = "\240\159\147\151",
		["genie"] = "\240\159\167\158",
		["gorilla"] = "\240\159\166\141",
		["gem"] = "\240\159\146\142",
		["giraffe"] = "\240\159\166\146",
		["grin"] = "\240\159\152\129",
		["golf"] = "\226\155\179",
		["gift"] = "\240\159\142\129",
		["girl_tone4"] = "\240\159\145\167\240\159\143\190"
	},
	["f"] = {
		["fist"] = "\226\156\138",
		["fist_tone5"] = "\226\156\138\240\159\143\191",
		["flag_sc"] = "\240\159\135\184\240\159\135\168",
		["family_man_girl"] = "\240\159\145\168\240\159\145\167",
		["flag_gm"] = "\240\159\135\172\240\159\135\178",
		["flag_cf"] = "\240\159\135\168\240\159\135\171",
		["family_wwb"] = "\240\159\145\169\240\159\145\169\240\159\145\166",
		["flag_mq"] = "\240\159\135\178\240\159\135\182",
		["flag_tr"] = "\240\159\135\185\240\159\135\183",
		["flag_ar"] = "\240\159\135\166\240\159\135\183",
		["flag_yt"] = "\240\159\135\190\240\159\135\185",
		["flag_black"] = "\240\159\143\180",
		["flag_gd"] = "\240\159\135\172\240\159\135\169",
		["flag_vi"] = "\240\159\135\187\240\159\135\174",
		["flag_mf"] = "\240\159\135\178\240\159\135\171",
		["fairy_tone1"] = "\240\159\167\154\240\159\143\187",
		["flag_by"] = "\240\159\135\167\240\159\135\190",
		["fingers_crossed_tone1"] = "\240\159\164\158\240\159\143\187",
		["flag_za"] = "\240\159\135\191\240\159\135\166",
		["floppy_disk"] = "\240\159\146\190",
		["flag_pl"] = "\240\159\135\181\240\159\135\177",
		["flag_fr"] = "\240\159\135\171\240\159\135\183",
		["flag_ni"] = "\240\159\135\179\240\159\135\174",
		["family_woman_girl_girl"] = "\240\159\145\169\240\159\145\167\240\159\145\167",
		["family_man_girl_boy"] = "\240\159\145\168\240\159\145\167\240\159\145\166",
		["flag_us"] = "\240\159\135\186\240\159\135\184",
		["fingers_crossed_tone5"] = "\240\159\164\158\240\159\143\191",
		["flag_gn"] = "\240\159\135\172\240\159\135\179",
		["flag_eh"] = "\240\159\135\170\240\159\135\173",
		["flag_je"] = "\240\159\135\175\240\159\135\170",
		["flag_bd"] = "\240\159\135\167\240\159\135\169",
		["flag_ke"] = "\240\159\135\176\240\159\135\170",
		["flag_mh"] = "\240\159\135\178\240\159\135\173",
		["flag_xk"] = "\240\159\135\189\240\159\135\176",
		["flag_sb"] = "\240\159\135\184\240\159\135\167",
		["flag_pr"] = "\240\159\135\181\240\159\135\183",
		["fingers_crossed_tone4"] = "\240\159\164\158\240\159\143\190",
		["flag_ir"] = "\240\159\135\174\240\159\135\183",
		["flag_ag"] = "\240\159\135\166\240\159\135\172",
		["fairy_tone4"] = "\240\159\167\154\240\159\143\190",
		["family_man_woman_boy"] = "\240\159\145\168\240\159\145\169\240\159\145\166",
		["flag_la"] = "\240\159\135\177\240\159\135\166",
		["flag_to"] = "\240\159\135\185\240\159\135\180",
		["ferry"] = "\226\155\180",
		["fork_and_knife"] = "\240\159\141\180",
		["flag_cg"] = "\240\159\135\168\240\159\135\172",
		["flag_si"] = "\240\159\135\184\240\159\135\174",
		["family_woman_boy_boy"] = "\240\159\145\169\240\159\145\166\240\159\145\166",
		["flag_ls"] = "\240\159\135\177\240\159\135\184",
		["flag_as"] = "\240\159\135\166\240\159\135\184",
		["flag_pf"] = "\240\159\135\181\240\159\135\171",
		["flag_lu"] = "\240\159\135\177\240\159\135\186",
		["flag_tw"] = "\240\159\135\185\240\159\135\188",
		["flag_nz"] = "\240\159\135\179\240\159\135\191",
		["flag_gi"] = "\240\159\135\172\240\159\135\174",
		["flying_saucer"] = "\240\159\155\184",
		["flag_es"] = "\240\159\135\170\240\159\135\184",
		["fearful"] = "\240\159\152\168",
		["flag_cw"] = "\240\159\135\168\240\159\135\188",
		["flag_gt"] = "\240\159\135\172\240\159\135\185",
		["flag_cv"] = "\240\159\135\168\240\159\135\187",
		["flag_id"] = "\240\159\135\174\240\159\135\169",
		["flag_cy"] = "\240\159\135\168\240\159\135\190",
		["flag_vc"] = "\240\159\135\187\240\159\135\168",
		["fist_tone4"] = "\226\156\138\240\159\143\190",
		["flag_cm"] = "\240\159\135\168\240\159\135\178",
		["flag_ly"] = "\240\159\135\177\240\159\135\190",
		["flag_sg"] = "\240\159\135\184\240\159\135\172",
		["flag_ma"] = "\240\159\135\178\240\159\135\166",
		["flag_jo"] = "\240\159\135\175\240\159\135\180",
		["fingers_crossed_tone2"] = "\240\159\164\158\240\159\143\188",
		["flag_fo"] = "\240\159\135\171\240\159\135\180",
		["flag_py"] = "\240\159\135\181\240\159\135\190",
		["flag_au"] = "\240\159\135\166\240\159\135\186",
		["flag_er"] = "\240\159\135\170\240\159\135\183",
		["foggy"] = "\240\159\140\129",
		["flag_ms"] = "\240\159\135\178\240\159\135\184",
		["fries"] = "\240\159\141\159",
		["flag_bo"] = "\240\159\135\167\240\159\135\180",
		["flag_iq"] = "\240\159\135\174\240\159\135\182",
		["frog"] = "\240\159\144\184",
		["flag_lt"] = "\240\159\135\177\240\159\135\185",
		["fireworks"] = "\240\159\142\134",
		["flag_cz"] = "\240\159\135\168\240\159\135\191",
		["flag_sm"] = "\240\159\135\184\240\159\135\178",
		["fog"] = "\240\159\140\171",
		["flag_mr"] = "\240\159\135\178\240\159\135\183",
		["fleur-de-lis"] = "\226\154\156",
		["flag_hk"] = "\240\159\135\173\240\159\135\176",
		["flag_br"] = "\240\159\135\167\240\159\135\183",
		["flag_be"] = "\240\159\135\167\240\159\135\170",
		["flag_bl"] = "\240\159\135\167\240\159\135\177",
		["field_hockey"] = "\240\159\143\145",
		["flag_et"] = "\240\159\135\170\240\159\135\185",
		["flag_sv"] = "\240\159\135\184\240\159\135\187",
		["flag_ck"] = "\240\159\135\168\240\159\135\176",
		["family_man_girl_girl"] = "\240\159\145\168\240\159\145\167\240\159\145\167",
		["flag_sa"] = "\240\159\135\184\240\159\135\166",
		["flag_lc"] = "\240\159\135\177\240\159\135\168",
		["flag_bi"] = "\240\159\135\167\240\159\135\174",
		["flag_ws"] = "\240\159\135\188\240\159\135\184",
		["flag_eg"] = "\240\159\135\170\240\159\135\172",
		["full_moon_with_face"] = "\240\159\140\157",
		["flag_tg"] = "\240\159\135\185\240\159\135\172",
		["fairy_tone2"] = "\240\159\167\154\240\159\143\188",
		["flag_tc"] = "\240\159\135\185\240\159\135\168",
		["file_cabinet"] = "\240\159\151\132",
		["flag_ru"] = "\240\159\135\183\240\159\135\186",
		["flag_mt"] = "\240\159\135\178\240\159\135\185",
		["ferris_wheel"] = "\240\159\142\161",
		["flag_so"] = "\240\159\135\184\240\159\135\180",
		["flag_va"] = "\240\159\135\187\240\159\135\166",
		["flag_de"] = "\240\159\135\169\240\159\135\170",
		["flag_gr"] = "\240\159\135\172\240\159\135\183",
		["flag_cn"] = "\240\159\135\168\240\159\135\179",
		["flag_gh"] = "\240\159\135\172\240\159\135\173",
		["flag_li"] = "\240\159\135\177\240\159\135\174",
		["flag_co"] = "\240\159\135\168\240\159\135\180",
		["flag_mk"] = "\240\159\135\178\240\159\135\176",
		["fallen_leaf"] = "\240\159\141\130",
		["flag_bq"] = "\240\159\135\167\240\159\135\182",
		["flag_cc"] = "\240\159\135\168\240\159\135\168",
		["flag_no"] = "\240\159\135\179\240\159\135\180",
		["flag_mm"] = "\240\159\135\178\240\159\135\178",
		["flag_ve"] = "\240\159\135\187\240\159\135\170",
		["first_quarter_moon"] = "\240\159\140\147",
		["family_woman_girl"] = "\240\159\145\169\240\159\145\167",
		["footprints"] = "\240\159\145\163",
		["flag_hm"] = "\240\159\135\173\240\159\135\178",
		["flag_re"] = "\240\159\135\183\240\159\135\170",
		["flag_dj"] = "\240\159\135\169\240\159\135\175",
		["face_vomiting"] = "\240\159\164\174",
		["football"] = "\240\159\143\136",
		["flag_ua"] = "\240\159\135\186\240\159\135\166",
		["frowning"] = "\240\159\152\166",
		["flushed"] = "\240\159\152\179",
		["flag_is"] = "\240\159\135\174\240\159\135\184",
		["family_woman_boy"] = "\240\159\145\169\240\159\145\166",
		["frame_photo"] = "\240\159\150\188",
		["flag_sk"] = "\240\159\135\184\240\159\135\176",
		["flag_pn"] = "\240\159\135\181\240\159\135\179",
		["flag_ml"] = "\240\159\135\178\240\159\135\177",
		["fairy_tone5"] = "\240\159\167\154\240\159\143\191",
		["flag_gb"] = "\240\159\135\172\240\159\135\167",
		["flag_eu"] = "\240\159\135\170\240\159\135\186",
		["flag_ta"] = "\240\159\135\185\240\159\135\166",
		["flag_om"] = "\240\159\135\180\240\159\135\178",
		["flag_do"] = "\240\159\135\169\240\159\135\180",
		["flower_playing_cards"] = "\240\159\142\180",
		["file_folder"] = "\240\159\147\129",
		["flag_mn"] = "\240\159\135\178\240\159\135\179",
		["family_man_boy_boy"] = "\240\159\145\168\240\159\145\166\240\159\145\166",
		["flag_pm"] = "\240\159\135\181\240\159\135\178",
		["flag_tt"] = "\240\159\135\185\240\159\135\185",
		["face_with_monocle"] = "\240\159\167\144",
		["flag_ao"] = "\240\159\135\166\240\159\135\180",
		["face_with_hand_over_mouth"] = "\240\159\164\173",
		["flag_kg"] = "\240\159\135\176\240\159\135\172",
		["flag_lr"] = "\240\159\135\177\240\159\135\183",
		["full_moon"] = "\240\159\140\149",
		["flag_bn"] = "\240\159\135\167\240\159\135\179",
		["fortune_cookie"] = "\240\159\165\160",
		["flag_uz"] = "\240\159\135\186\240\159\135\191",
		["flag_ky"] = "\240\159\135\176\240\159\135\190",
		["fingers_crossed_tone3"] = "\240\159\164\158\240\159\143\189",
		["flag_at"] = "\240\159\135\166\240\159\135\185",
		["flag_mp"] = "\240\159\135\178\240\159\135\181",
		["family_mmg"] = "\240\159\145\168\240\159\145\168\240\159\145\167",
		["flag_mw"] = "\240\159\135\178\240\159\135\188",
		["fountain"] = "\226\155\178",
		["flag_bw"] = "\240\159\135\167\240\159\135\188",
		["flag_io"] = "\240\159\135\174\240\159\135\180",
		["flag_sd"] = "\240\159\135\184\240\159\135\169",
		["factory"] = "\240\159\143\173",
		["flag_az"] = "\240\159\135\166\240\159\135\191",
		["flag_ci"] = "\240\159\135\168\240\159\135\174",
		["flag_mu"] = "\240\159\135\178\240\159\135\186",
		["fox"] = "\240\159\166\138",
		["flag_my"] = "\240\159\135\178\240\159\135\190",
		["flag_dk"] = "\240\159\135\169\240\159\135\176",
		["flag_tj"] = "\240\159\135\185\240\159\135\175",
		["flag_tz"] = "\240\159\135\185\240\159\135\191",
		["fish"] = "\240\159\144\159",
		["flag_rs"] = "\240\159\135\183\240\159\135\184",
		["face_with_raised_eyebrow"] = "\240\159\164\168",
		["flag_ps"] = "\240\159\135\181\240\159\135\184",
		["flags"] = "\240\159\142\143",
		["fax"] = "\240\159\147\160",
		["flag_gw"] = "\240\159\135\172\240\159\135\188",
		["fairy_tone3"] = "\240\159\167\154\240\159\143\189",
		["family_man_boy"] = "\240\159\145\168\240\159\145\166",
		["flag_ac"] = "\240\159\135\166\240\159\135\168",
		["flag_mc"] = "\240\159\135\178\240\159\135\168",
		["fork_knife_plate"] = "\240\159\141\189",
		["flag_gg"] = "\240\159\135\172\240\159\135\172",
		["flag_ai"] = "\240\159\135\166\240\159\135\174",
		["fried_shrimp"] = "\240\159\141\164",
		["flag_jp"] = "\240\159\135\175\240\159\135\181",
		["flag_gl"] = "\240\159\135\172\240\159\135\177",
		["flag_ne"] = "\240\159\135\179\240\159\135\170",
		["flag_gp"] = "\240\159\135\172\240\159\135\181",
		["flag_qa"] = "\240\159\135\182\240\159\135\166",
		["flag_pa"] = "\240\159\135\181\240\159\135\166",
		["flag_km"] = "\240\159\135\176\240\159\135\178",
		["fist_tone3"] = "\226\156\138\240\159\143\189",
		["flag_tl"] = "\240\159\135\185\240\159\135\177",
		["flag_am"] = "\240\159\135\166\240\159\135\178",
		["flag_ae"] = "\240\159\135\166\240\159\135\170",
		["flag_in"] = "\240\159\135\174\240\159\135\179",
		["flag_il"] = "\240\159\135\174\240\159\135\177",
		["flag_rw"] = "\240\159\135\183\240\159\135\188",
		["flag_pg"] = "\240\159\135\181\240\159\135\172",
		["flashlight"] = "\240\159\148\166",
		["flag_tv"] = "\240\159\135\185\240\159\135\187",
		["fishing_pole_and_fish"] = "\240\159\142\163",
		["flag_nl"] = "\240\159\135\179\240\159\135\177",
		["flag_ug"] = "\240\159\135\186\240\159\135\172",
		["flag_th"] = "\240\159\135\185\240\159\135\173",
		["flag_tn"] = "\240\159\135\185\240\159\135\179",
		["flag_uy"] = "\240\159\135\186\240\159\135\190",
		["flag_mz"] = "\240\159\135\178\240\159\135\191",
		["flag_ss"] = "\240\159\135\184\240\159\135\184",
		["flag_nc"] = "\240\159\135\179\240\159\135\168",
		["flag_ye"] = "\240\159\135\190\240\159\135\170",
		["flag_it"] = "\240\159\135\174\240\159\135\185",
		["fire_engine"] = "\240\159\154\146",
		["flag_bt"] = "\240\159\135\167\240\159\135\185",
		["film_frames"] = "\240\159\142\158",
		["flag_al"] = "\240\159\135\166\240\159\135\177",
		["flag_na"] = "\240\159\135\179\240\159\135\166",
		["fairy"] = "\240\159\167\154",
		["flag_aw"] = "\240\159\135\166\240\159\135\188",
		["feet"] = "\240\159\144\190",
		["family"] = "\240\159\145\170",
		["flag_cl"] = "\240\159\135\168\240\159\135\177",
		["fire"] = "\240\159\148\165",
		["flag_zw"] = "\240\159\135\191\240\159\135\188",
		["four_leaf_clover"] = "\240\159\141\128",
		["flag_ca"] = "\240\159\135\168\240\159\135\166",
		["flag_ga"] = "\240\159\135\172\240\159\135\166",
		["flag_ro"] = "\240\159\135\183\240\159\135\180",
		["flag_cp"] = "\240\159\135\168\240\159\135\181",
		["flag_mo"] = "\240\159\135\178\240\159\135\180",
		["flag_tm"] = "\240\159\135\185\240\159\135\178",
		["flag_st"] = "\240\159\135\184\240\159\135\185",
		["fist_tone1"] = "\226\156\138\240\159\143\187",
		["flag_ie"] = "\240\159\135\174\240\159\135\170",
		["flag_tk"] = "\240\159\135\185\240\159\135\176",
		["frowning2"] = "\226\152\185",
		["flag_lk"] = "\240\159\135\177\240\159\135\176",
		["flag_bm"] = "\240\159\135\167\240\159\135\178",
		["female_sign"] = "\226\153\128",
		["fast_forward"] = "\226\143\169",
		["flag_im"] = "\240\159\135\174\240\159\135\178",
		["flag_cd"] = "\240\159\135\168\240\159\135\169",
		["fish_cake"] = "\240\159\141\165",
		["flag_fi"] = "\240\159\135\171\240\159\135\174",
		["flag_white"] = "\240\159\143\179",
		["flag_gq"] = "\240\159\135\172\240\159\135\182",
		["flag_se"] = "\240\159\135\184\240\159\135\170",
		["fingers_crossed"] = "\240\159\164\158",
		["flag_fm"] = "\240\159\135\171\240\159\135\178",
		["fist_tone2"] = "\226\156\138\240\159\143\188",
		["flag_zm"] = "\240\159\135\191\240\159\135\178",
		["first_place"] = "\240\159\165\135",
		["flag_lb"] = "\240\159\135\177\240\159\135\167",
		["flag_aq"] = "\240\159\135\166\240\159\135\182",
		["flag_md"] = "\240\159\135\178\240\159\135\169",
		["flag_ea"] = "\240\159\135\170\240\159\135\166",
		["flag_ht"] = "\240\159\135\173\240\159\135\185",
		["flag_lv"] = "\240\159\135\177\240\159\135\187",
		["flag_ch"] = "\240\159\135\168\240\159\135\173",
		["flag_bv"] = "\240\159\135\167\240\159\135\187",
		["flag_ge"] = "\240\159\135\172\240\159\135\170",
		["flag_ax"] = "\240\159\135\166\240\159\135\189",
		["flag_cr"] = "\240\159\135\168\240\159\135\183",
		["flag_ic"] = "\240\159\135\174\240\159\135\168",
		["flag_ad"] = "\240\159\135\166\240\159\135\169",
		["flag_mx"] = "\240\159\135\178\240\159\135\189",
		["flag_sl"] = "\240\159\135\184\240\159\135\177",
		["flag_mg"] = "\240\159\135\178\240\159\135\172",
		["flag_me"] = "\240\159\135\178\240\159\135\170",
		["family_woman_girl_boy"] = "\240\159\145\169\240\159\145\167\240\159\145\166",
		["flag_dz"] = "\240\159\135\169\240\159\135\191",
		["flag_ee"] = "\240\159\135\170\240\159\135\170",
		["flag_pt"] = "\240\159\135\181\240\159\135\185",
		["flag_dm"] = "\240\159\135\169\240\159\135\178",
		["flag_sy"] = "\240\159\135\184\240\159\135\190",
		["flag_pk"] = "\240\159\135\181\240\159\135\176",
		["flag_bb"] = "\240\159\135\167\240\159\135\167",
		["flag_hr"] = "\240\159\135\173\240\159\135\183",
		["flag_sh"] = "\240\159\135\184\240\159\135\173",
		["flag_sr"] = "\240\159\135\184\240\159\135\183",
		["flag_sj"] = "\240\159\135\184\240\159\135\175",
		["flag_pe"] = "\240\159\135\181\240\159\135\170",
		["flag_ph"] = "\240\159\135\181\240\159\135\173",
		["flag_td"] = "\240\159\135\185\240\159\135\169",
		["flag_np"] = "\240\159\135\179\240\159\135\181",
		["first_quarter_moon_with_face"] = "\240\159\140\155",
		["flag_cx"] = "\240\159\135\168\240\159\135\189",
		["flag_gy"] = "\240\159\135\172\240\159\135\190",
		["flag_dg"] = "\240\159\135\169\240\159\135\172"
	},
	["i"] = {
		["icecream"] = "\240\159\141\166",
		["information_source"] = "\226\132\185",
		["innocent"] = "\240\159\152\135",
		["island"] = "\240\159\143\157",
		["ice_cream"] = "\240\159\141\168",
		["inbox_tray"] = "\240\159\147\165",
		["ice_skate"] = "\226\155\184",
		["incoming_envelope"] = "\240\159\147\168",
		["imp"] = "\240\159\145\191"
	},
	["h"] = {
		["heavy_multiplication_x"] = "\226\156\150",
		["hand_splayed_tone4"] = "\240\159\150\144\240\159\143\190",
		["hand_splayed_tone1"] = "\240\159\150\144\240\159\143\187",
		["helmet_with_cross"] = "\226\155\145",
		["hugging"] = "\240\159\164\151",
		["hotdog"] = "\240\159\140\173",
		["heavy_check_mark"] = "\226\156\148",
		["house_abandoned"] = "\240\159\143\154",
		["heavy_plus_sign"] = "\226\158\149",
		["high_heel"] = "\240\159\145\160",
		["hatched_chick"] = "\240\159\144\165",
		["hibiscus"] = "\240\159\140\186",
		["hourglass_flowing_sand"] = "\226\143\179",
		["headphones"] = "\240\159\142\167",
		["honey_pot"] = "\240\159\141\175",
		["handbag"] = "\240\159\145\156",
		["hamburger"] = "\240\159\141\148",
		["handshake"] = "\240\159\164\157",
		["herb"] = "\240\159\140\191",
		["high_brightness"] = "\240\159\148\134",
		["hourglass"] = "\226\140\155",
		["hand_splayed_tone3"] = "\240\159\150\144\240\159\143\189",
		["hospital"] = "\240\159\143\165",
		["hotsprings"] = "\226\153\168",
		["hushed"] = "\240\159\152\175",
		["hockey"] = "\240\159\143\146",
		["horse_racing_tone3"] = "\240\159\143\135\240\159\143\189",
		["hedgehog"] = "\240\159\166\148",
		["horse_racing_tone1"] = "\240\159\143\135\240\159\143\187",
		["heavy_minus_sign"] = "\226\158\150",
		["hand_splayed_tone5"] = "\240\159\150\144\240\159\143\191",
		["head_bandage"] = "\240\159\164\149",
		["horse_racing_tone2"] = "\240\159\143\135\240\159\143\188",
		["heavy_division_sign"] = "\226\158\151",
		["homes"] = "\240\159\143\152",
		["hamster"] = "\240\159\144\185",
		["hear_no_evil"] = "\240\159\153\137",
		["hot_pepper"] = "\240\159\140\182",
		["hatching_chick"] = "\240\159\144\163",
		["horse_racing_tone5"] = "\240\159\143\135\240\159\143\191",
		["horse_racing"] = "\240\159\143\135",
		["house_with_garden"] = "\240\159\143\161",
		["hotel"] = "\240\159\143\168",
		["house"] = "\240\159\143\160",
		["hammer_pick"] = "\226\154\146",
		["helicopter"] = "\240\159\154\129",
		["hand_splayed_tone2"] = "\240\159\150\144\240\159\143\188",
		["hand_splayed"] = "\240\159\150\144",
		["horse"] = "\240\159\144\180",
		["hammer"] = "\240\159\148\168",
		["horse_racing_tone4"] = "\240\159\143\135\240\159\143\190"
	},
	["k"] = {
		["kaaba"] = "\240\159\149\139",
		["kiwi"] = "\240\159\165\157",
		["koko"] = "\240\159\136\129",
		["kimono"] = "\240\159\145\152",
		["koala"] = "\240\159\144\168",
		["key2"] = "\240\159\151\157",
		["keyboard"] = "\226\140\168"
	},
	["j"] = {
		["joystick"] = "\240\159\149\185",
		["japanese_goblin"] = "\240\159\145\186",
		["jeans"] = "\240\159\145\150",
		["joy"] = "\240\159\152\130",
		["jack_o_lantern"] = "\240\159\142\131",
		["japan"] = "\240\159\151\190",
		["japanese_castle"] = "\240\159\143\175",
		["joy_cat"] = "\240\159\152\185",
		["japanese_ogre"] = "\240\159\145\185"
	},
	["m"] = {
		["man_firefighter"] = "\240\159\145\168\240\159\154\146",
		["man_getting_haircut_tone3"] = "\240\159\146\135\240\159\143\189\226\153\130",
		["man_playing_water_polo"] = "\240\159\164\189\226\153\130",
		["man_student_tone1"] = "\240\159\145\168\240\159\143\187\240\159\142\147",
		["man_gesturing_no_tone2"] = "\240\159\153\133\240\159\143\188\226\153\130",
		["man_factory_worker"] = "\240\159\145\168\240\159\143\173",
		["man_teacher"] = "\240\159\145\168\240\159\143\171",
		["man_with_chinese_cap_tone1"] = "\240\159\145\178\240\159\143\187",
		["man_scientist_tone4"] = "\240\159\145\168\240\159\143\190\240\159\148\172",
		["man_pouting_tone3"] = "\240\159\153\142\240\159\143\189\226\153\130",
		["man_farmer_tone3"] = "\240\159\145\168\240\159\143\189\240\159\140\190",
		["man_biking_tone4"] = "\240\159\154\180\240\159\143\190\226\153\130",
		["man_mountain_biking_tone5"] = "\240\159\154\181\240\159\143\191\226\153\130",
		["man_teacher_tone4"] = "\240\159\145\168\240\159\143\190\240\159\143\171",
		["man_biking"] = "\240\159\154\180\226\153\130",
		["man_office_worker"] = "\240\159\145\168\240\159\146\188",
		["man_surfing_tone4"] = "\240\159\143\132\240\159\143\190\226\153\130",
		["man_cartwheeling_tone1"] = "\240\159\164\184\240\159\143\187\226\153\130",
		["man_frowning_tone2"] = "\240\159\153\141\240\159\143\188\226\153\130",
		["man_playing_water_polo_tone2"] = "\240\159\164\189\240\159\143\188\226\153\130",
		["man_getting_face_massage_tone4"] = "\240\159\146\134\240\159\143\190\226\153\130",
		["man_bowing_tone3"] = "\240\159\153\135\240\159\143\189\226\153\130",
		["metal_tone2"] = "\240\159\164\152\240\159\143\188",
		["man_health_worker"] = "\240\159\145\168\226\154\149",
		["man_mage_tone1"] = "\240\159\167\153\240\159\143\187\226\153\130",
		["man_bouncing_ball_tone4"] = "\226\155\185\240\159\143\190\226\153\130",
		["man_judge_tone3"] = "\240\159\145\168\240\159\143\189\226\154\150",
		["man_farmer_tone2"] = "\240\159\145\168\240\159\143\188\240\159\140\190",
		["man_office_worker_tone2"] = "\240\159\145\168\240\159\143\188\240\159\146\188",
		["man_swimming"] = "\240\159\143\138\226\153\130",
		["man_facepalming_tone5"] = "\240\159\164\166\240\159\143\191\226\153\130",
		["man_detective_tone5"] = "\240\159\149\181\240\159\143\191\226\153\130",
		["man_biking_tone5"] = "\240\159\154\180\240\159\143\191\226\153\130",
		["mrs_claus_tone3"] = "\240\159\164\182\240\159\143\189",
		["man_police_officer"] = "\240\159\145\174\226\153\130",
		["man_swimming_tone3"] = "\240\159\143\138\240\159\143\189\226\153\130",
		["mrs_claus_tone4"] = "\240\159\164\182\240\159\143\190",
		["man_fairy_tone3"] = "\240\159\167\154\240\159\143\189\226\153\130",
		["man_artist_tone3"] = "\240\159\145\168\240\159\143\189\240\159\142\168",
		["mag_right"] = "\240\159\148\142",
		["mermaid_tone3"] = "\240\159\167\156\240\159\143\189\226\153\128",
		["melon"] = "\240\159\141\136",
		["man_singer_tone5"] = "\240\159\145\168\240\159\143\191\240\159\142\164",
		["man_gesturing_no_tone5"] = "\240\159\153\133\240\159\143\191\226\153\130",
		["man_mage_tone4"] = "\240\159\167\153\240\159\143\190\226\153\130",
		["man_swimming_tone5"] = "\240\159\143\138\240\159\143\191\226\153\130",
		["man_gesturing_no"] = "\240\159\153\133\226\153\130",
		["man_singer_tone3"] = "\240\159\145\168\240\159\143\189\240\159\142\164",
		["man_biking_tone3"] = "\240\159\154\180\240\159\143\189\226\153\130",
		["man_rowing_boat_tone5"] = "\240\159\154\163\240\159\143\191\226\153\130",
		["movie_camera"] = "\240\159\142\165",
		["man_shrugging"] = "\240\159\164\183\226\153\130",
		["man_dancing_tone4"] = "\240\159\149\186\240\159\143\190",
		["man_mechanic_tone5"] = "\240\159\145\168\240\159\143\191\240\159\148\167",
		["musical_note"] = "\240\159\142\181",
		["man_vampire_tone3"] = "\240\159\167\155\240\159\143\189\226\153\130",
		["man_swimming_tone4"] = "\240\159\143\138\240\159\143\190\226\153\130",
		["man_farmer_tone5"] = "\240\159\145\168\240\159\143\191\240\159\140\190",
		["mailbox_with_no_mail"] = "\240\159\147\173",
		["man_bouncing_ball_tone5"] = "\226\155\185\240\159\143\191\226\153\130",
		["man_dancing_tone3"] = "\240\159\149\186\240\159\143\189",
		["man_health_worker_tone5"] = "\240\159\145\168\240\159\143\191\226\154\149",
		["man_in_lotus_position"] = "\240\159\167\152\226\153\130",
		["man_with_chinese_cap"] = "\240\159\145\178",
		["man_bouncing_ball_tone3"] = "\226\155\185\240\159\143\189\226\153\130",
		["man_police_officer_tone4"] = "\240\159\145\174\240\159\143\190\226\153\130",
		["man_singer"] = "\240\159\145\168\240\159\142\164",
		["man_farmer_tone4"] = "\240\159\145\168\240\159\143\190\240\159\140\190",
		["man_mechanic_tone2"] = "\240\159\145\168\240\159\143\188\240\159\148\167",
		["man_cook"] = "\240\159\145\168\240\159\141\179",
		["man_pouting_tone4"] = "\240\159\153\142\240\159\143\190\226\153\130",
		["man_lifting_weights_tone1"] = "\240\159\143\139\240\159\143\187\226\153\130",
		["man_bouncing_ball"] = "\226\155\185\226\153\130",
		["man_shrugging_tone5"] = "\240\159\164\183\240\159\143\191\226\153\130",
		["motor_scooter"] = "\240\159\155\181",
		["man_pouting_tone1"] = "\240\159\153\142\240\159\143\187\226\153\130",
		["man_lifting_weights_tone2"] = "\240\159\143\139\240\159\143\188\226\153\130",
		["man_cartwheeling"] = "\240\159\164\184\226\153\130",
		["man_mechanic_tone3"] = "\240\159\145\168\240\159\143\189\240\159\148\167",
		["man_elf"] = "\240\159\167\157\226\153\130",
		["mens"] = "\240\159\154\185",
		["man_gesturing_ok_tone2"] = "\240\159\153\134\240\159\143\188\226\153\130",
		["man_pilot_tone3"] = "\240\159\145\168\240\159\143\189\226\156\136",
		["merman"] = "\240\159\167\156\226\153\130",
		["m"] = "\226\147\130",
		["man_lifting_weights"] = "\240\159\143\139\226\153\130",
		["man_shrugging_tone2"] = "\240\159\164\183\240\159\143\188\226\153\130",
		["man_juggling"] = "\240\159\164\185\226\153\130",
		["man_factory_worker_tone4"] = "\240\159\145\168\240\159\143\190\240\159\143\173",
		["man_biking_tone2"] = "\240\159\154\180\240\159\143\188\226\153\130",
		["man_juggling_tone2"] = "\240\159\164\185\240\159\143\188\226\153\130",
		["man_rowing_boat_tone1"] = "\240\159\154\163\240\159\143\187\226\153\130",
		["man_detective_tone2"] = "\240\159\149\181\240\159\143\188\226\153\130",
		["man_bowing_tone2"] = "\240\159\153\135\240\159\143\188\226\153\130",
		["man_raising_hand_tone1"] = "\240\159\153\139\240\159\143\187\226\153\130",
		["man_gesturing_ok_tone5"] = "\240\159\153\134\240\159\143\191\226\153\130",
		["metal_tone4"] = "\240\159\164\152\240\159\143\190",
		["man_in_lotus_position_tone3"] = "\240\159\167\152\240\159\143\189\226\153\130",
		["man_pouting_tone5"] = "\240\159\153\142\240\159\143\191\226\153\130",
		["man_playing_water_polo_tone4"] = "\240\159\164\189\240\159\143\190\226\153\130",
		["microscope"] = "\240\159\148\172",
		["muscle_tone1"] = "\240\159\146\170\240\159\143\187",
		["man_getting_face_massage_tone3"] = "\240\159\146\134\240\159\143\189\226\153\130",
		["man_zombie"] = "\240\159\167\159\226\153\130",
		["man_vampire_tone4"] = "\240\159\167\155\240\159\143\190\226\153\130",
		["man_cartwheeling_tone5"] = "\240\159\164\184\240\159\143\191\226\153\130",
		["man_police_officer_tone5"] = "\240\159\145\174\240\159\143\191\226\153\130",
		["man_lifting_weights_tone4"] = "\240\159\143\139\240\159\143\190\226\153\130",
		["man_cook_tone1"] = "\240\159\145\168\240\159\143\187\240\159\141\179",
		["mage_tone3"] = "\240\159\167\153\240\159\143\189",
		["man_fairy_tone5"] = "\240\159\167\154\240\159\143\191\226\153\130",
		["man_technologist_tone5"] = "\240\159\145\168\240\159\143\191\240\159\146\187",
		["man_mage"] = "\240\159\167\153\226\153\130",
		["mouse"] = "\240\159\144\173",
		["man_dancing"] = "\240\159\149\186",
		["metro"] = "\240\159\154\135",
		["man_facepalming_tone2"] = "\240\159\164\166\240\159\143\188\226\153\130",
		["man_construction_worker_tone5"] = "\240\159\145\183\240\159\143\191\226\153\130",
		["man_running_tone4"] = "\240\159\143\131\240\159\143\190\226\153\130",
		["man_gesturing_no_tone3"] = "\240\159\153\133\240\159\143\189\226\153\130",
		["man_cartwheeling_tone2"] = "\240\159\164\184\240\159\143\188\226\153\130",
		["man_construction_worker"] = "\240\159\145\183\226\153\130",
		["man_rowing_boat"] = "\240\159\154\163\226\153\130",
		["man_in_lotus_position_tone4"] = "\240\159\167\152\240\159\143\190\226\153\130",
		["man_in_lotus_position_tone1"] = "\240\159\167\152\240\159\143\187\226\153\130",
		["man_juggling_tone3"] = "\240\159\164\185\240\159\143\189\226\153\130",
		["man_mage_tone5"] = "\240\159\167\153\240\159\143\191\226\153\130",
		["man_bouncing_ball_tone2"] = "\226\155\185\240\159\143\188\226\153\130",
		["man_cook_tone4"] = "\240\159\145\168\240\159\143\190\240\159\141\179",
		["man_scientist_tone2"] = "\240\159\145\168\240\159\143\188\240\159\148\172",
		["man_mage_tone3"] = "\240\159\167\153\240\159\143\189\226\153\130",
		["man_detective_tone1"] = "\240\159\149\181\240\159\143\187\226\153\130",
		["man_facepalming_tone3"] = "\240\159\164\166\240\159\143\189\226\153\130",
		["man_judge_tone1"] = "\240\159\145\168\240\159\143\187\226\154\150",
		["man_pilot"] = "\240\159\145\168\226\156\136",
		["man_with_chinese_cap_tone3"] = "\240\159\145\178\240\159\143\189",
		["man_construction_worker_tone1"] = "\240\159\145\183\240\159\143\187\226\153\130",
		["man_playing_handball_tone4"] = "\240\159\164\190\240\159\143\190\226\153\130",
		["man_singer_tone4"] = "\240\159\145\168\240\159\143\190\240\159\142\164",
		["merman_tone5"] = "\240\159\167\156\240\159\143\191\226\153\130",
		["motorcycle"] = "\240\159\143\141",
		["man_farmer_tone1"] = "\240\159\145\168\240\159\143\187\240\159\140\190",
		["motorboat"] = "\240\159\155\165",
		["man_police_officer_tone2"] = "\240\159\145\174\240\159\143\188\226\153\130",
		["man_gesturing_no_tone4"] = "\240\159\153\133\240\159\143\190\226\153\130",
		["man_tipping_hand_tone2"] = "\240\159\146\129\240\159\143\188\226\153\130",
		["mouse2"] = "\240\159\144\129",
		["man_cook_tone2"] = "\240\159\145\168\240\159\143\188\240\159\141\179",
		["medal"] = "\240\159\143\133",
		["man_juggling_tone4"] = "\240\159\164\185\240\159\143\190\226\153\130",
		["monkey"] = "\240\159\144\146",
		["man_construction_worker_tone4"] = "\240\159\145\183\240\159\143\190\226\153\130",
		["man_gesturing_ok_tone3"] = "\240\159\153\134\240\159\143\189\226\153\130",
		["man_running_tone1"] = "\240\159\143\131\240\159\143\187\226\153\130",
		["man_getting_haircut"] = "\240\159\146\135\226\153\130",
		["man_office_worker_tone5"] = "\240\159\145\168\240\159\143\191\240\159\146\188",
		["man_facepalming_tone4"] = "\240\159\164\166\240\159\143\190\226\153\130",
		["man_getting_haircut_tone4"] = "\240\159\146\135\240\159\143\190\226\153\130",
		["man_wearing_turban_tone4"] = "\240\159\145\179\240\159\143\190\226\153\130",
		["man_playing_handball_tone3"] = "\240\159\164\190\240\159\143\189\226\153\130",
		["maple_leaf"] = "\240\159\141\129",
		["man_pilot_tone5"] = "\240\159\145\168\240\159\143\191\226\156\136",
		["metal"] = "\240\159\164\152",
		["man_climbing_tone2"] = "\240\159\167\151\240\159\143\188\226\153\130",
		["menorah"] = "\240\159\149\142",
		["man_lifting_weights_tone5"] = "\240\159\143\139\240\159\143\191\226\153\130",
		["medical_symbol"] = "\226\154\149",
		["money_mouth"] = "\240\159\164\145",
		["man_walking_tone5"] = "\240\159\154\182\240\159\143\191\226\153\130",
		["man_factory_worker_tone5"] = "\240\159\145\168\240\159\143\191\240\159\143\173",
		["microphone2"] = "\240\159\142\153",
		["man_elf_tone4"] = "\240\159\167\157\240\159\143\190\226\153\130",
		["man_raising_hand_tone3"] = "\240\159\153\139\240\159\143\189\226\153\130",
		["man_gesturing_no_tone1"] = "\240\159\153\133\240\159\143\187\226\153\130",
		["merman_tone1"] = "\240\159\167\156\240\159\143\187\226\153\130",
		["metal_tone3"] = "\240\159\164\152\240\159\143\189",
		["man_student_tone2"] = "\240\159\145\168\240\159\143\188\240\159\142\147",
		["men_with_bunny_ears_partying"] = "\240\159\145\175\226\153\130",
		["man_getting_face_massage"] = "\240\159\146\134\226\153\130",
		["man_walking"] = "\240\159\154\182\226\153\130",
		["man_firefighter_tone3"] = "\240\159\145\168\240\159\143\189\240\159\154\146",
		["man_factory_worker_tone3"] = "\240\159\145\168\240\159\143\189\240\159\143\173",
		["man_guard"] = "\240\159\146\130\226\153\130",
		["martial_arts_uniform"] = "\240\159\165\139",
		["man_bowing_tone4"] = "\240\159\153\135\240\159\143\190\226\153\130",
		["man_raising_hand"] = "\240\159\153\139\226\153\130",
		["mermaid_tone2"] = "\240\159\167\156\240\159\143\188\226\153\128",
		["man_police_officer_tone3"] = "\240\159\145\174\240\159\143\189\226\153\130",
		["man_bowing_tone1"] = "\240\159\153\135\240\159\143\187\226\153\130",
		["man_judge"] = "\240\159\145\168\226\154\150",
		["man_police_officer_tone1"] = "\240\159\145\174\240\159\143\187\226\153\130",
		["man_wearing_turban_tone1"] = "\240\159\145\179\240\159\143\187\226\153\130",
		["mrs_claus_tone5"] = "\240\159\164\182\240\159\143\191",
		["man_pilot_tone4"] = "\240\159\145\168\240\159\143\190\226\156\136",
		["man_surfing_tone2"] = "\240\159\143\132\240\159\143\188\226\153\130",
		["man_bouncing_ball_tone1"] = "\226\155\185\240\159\143\187\226\153\130",
		["man_dancing_tone1"] = "\240\159\149\186\240\159\143\187",
		["man_wearing_turban_tone3"] = "\240\159\145\179\240\159\143\189\226\153\130",
		["man_mage_tone2"] = "\240\159\167\153\240\159\143\188\226\153\130",
		["man_walking_tone2"] = "\240\159\154\182\240\159\143\188\226\153\130",
		["man_technologist_tone2"] = "\240\159\145\168\240\159\143\188\240\159\146\187",
		["mage_tone2"] = "\240\159\167\153\240\159\143\188",
		["man_fairy_tone2"] = "\240\159\167\154\240\159\143\188\226\153\130",
		["man_bowing"] = "\240\159\153\135\226\153\130",
		["man_bowing_tone5"] = "\240\159\153\135\240\159\143\191\226\153\130",
		["man_teacher_tone3"] = "\240\159\145\168\240\159\143\189\240\159\143\171",
		["mailbox_with_mail"] = "\240\159\147\172",
		["mute"] = "\240\159\148\135",
		["man_office_worker_tone3"] = "\240\159\145\168\240\159\143\189\240\159\146\188",
		["mortar_board"] = "\240\159\142\147",
		["man_vampire_tone1"] = "\240\159\167\155\240\159\143\187\226\153\130",
		["man_playing_water_polo_tone5"] = "\240\159\164\189\240\159\143\191\226\153\130",
		["mrs_claus"] = "\240\159\164\182",
		["man_artist_tone1"] = "\240\159\145\168\240\159\143\187\240\159\142\168",
		["man_playing_handball"] = "\240\159\164\190\226\153\130",
		["man_firefighter_tone4"] = "\240\159\145\168\240\159\143\190\240\159\154\146",
		["mouse_three_button"] = "\240\159\150\177",
		["man_in_steamy_room"] = "\240\159\167\150\226\153\130",
		["man_singer_tone1"] = "\240\159\145\168\240\159\143\187\240\159\142\164",
		["male_sign"] = "\226\153\130",
		["man_running_tone3"] = "\240\159\143\131\240\159\143\189\226\153\130",
		["man_fairy_tone1"] = "\240\159\167\154\240\159\143\187\226\153\130",
		["man_rowing_boat_tone2"] = "\240\159\154\163\240\159\143\188\226\153\130",
		["man_surfing_tone1"] = "\240\159\143\132\240\159\143\187\226\153\130",
		["man_vampire_tone2"] = "\240\159\167\155\240\159\143\188\226\153\130",
		["man_technologist"] = "\240\159\145\168\240\159\146\187",
		["man_firefighter_tone1"] = "\240\159\145\168\240\159\143\187\240\159\154\146",
		["man_tipping_hand_tone4"] = "\240\159\146\129\240\159\143\190\226\153\130",
		["man_elf_tone3"] = "\240\159\167\157\240\159\143\189\226\153\130",
		["man_scientist_tone5"] = "\240\159\145\168\240\159\143\191\240\159\148\172",
		["man_walking_tone4"] = "\240\159\154\182\240\159\143\190\226\153\130",
		["man_cartwheeling_tone3"] = "\240\159\164\184\240\159\143\189\226\153\130",
		["man_detective_tone3"] = "\240\159\149\181\240\159\143\189\226\153\130",
		["mag"] = "\240\159\148\141",
		["mrs_claus_tone2"] = "\240\159\164\182\240\159\143\188",
		["man_in_tuxedo"] = "\240\159\164\181",
		["man_running_tone5"] = "\240\159\143\131\240\159\143\191\226\153\130",
		["man_getting_haircut_tone2"] = "\240\159\146\135\240\159\143\188\226\153\130",
		["man_playing_water_polo_tone3"] = "\240\159\164\189\240\159\143\189\226\153\130",
		["man_gesturing_ok_tone1"] = "\240\159\153\134\240\159\143\187\226\153\130",
		["mage_tone5"] = "\240\159\167\153\240\159\143\191",
		["man_rowing_boat_tone3"] = "\240\159\154\163\240\159\143\189\226\153\130",
		["man_pilot_tone2"] = "\240\159\145\168\240\159\143\188\226\156\136",
		["man_walking_tone1"] = "\240\159\154\182\240\159\143\187\226\153\130",
		["man_climbing_tone5"] = "\240\159\167\151\240\159\143\191\226\153\130",
		["man_teacher_tone1"] = "\240\159\145\168\240\159\143\187\240\159\143\171",
		["man_facepalming_tone1"] = "\240\159\164\166\240\159\143\187\226\153\130",
		["man_health_worker_tone4"] = "\240\159\145\168\240\159\143\190\226\154\149",
		["man_shrugging_tone3"] = "\240\159\164\183\240\159\143\189\226\153\130",
		["muscle_tone2"] = "\240\159\146\170\240\159\143\188",
		["man_artist_tone2"] = "\240\159\145\168\240\159\143\188\240\159\142\168",
		["man_biking_tone1"] = "\240\159\154\180\240\159\143\187\226\153\130",
		["man_getting_face_massage_tone1"] = "\240\159\146\134\240\159\143\187\226\153\130",
		["man_mechanic"] = "\240\159\145\168\240\159\148\167",
		["muscle_tone5"] = "\240\159\146\170\240\159\143\191",
		["man_elf_tone1"] = "\240\159\167\157\240\159\143\187\226\153\130",
		["man_astronaut"] = "\240\159\145\168\240\159\154\128",
		["man_detective"] = "\240\159\149\181\226\153\130",
		["man_teacher_tone5"] = "\240\159\145\168\240\159\143\191\240\159\143\171",
		["muscle_tone4"] = "\240\159\146\170\240\159\143\190",
		["man_artist_tone4"] = "\240\159\145\168\240\159\143\190\240\159\142\168",
		["man_shrugging_tone1"] = "\240\159\164\183\240\159\143\187\226\153\130",
		["man_tipping_hand_tone5"] = "\240\159\146\129\240\159\143\191\226\153\130",
		["mushroom"] = "\240\159\141\132",
		["mask"] = "\240\159\152\183",
		["man_with_chinese_cap_tone2"] = "\240\159\145\178\240\159\143\188",
		["money_with_wings"] = "\240\159\146\184",
		["mega"] = "\240\159\147\163",
		["monkey_face"] = "\240\159\144\181",
		["man_office_worker_tone1"] = "\240\159\145\168\240\159\143\187\240\159\146\188",
		["milk"] = "\240\159\165\155",
		["man_detective_tone4"] = "\240\159\149\181\240\159\143\190\226\153\130",
		["man_wearing_turban_tone5"] = "\240\159\145\179\240\159\143\191\226\153\130",
		["man_health_worker_tone3"] = "\240\159\145\168\240\159\143\189\226\154\149",
		["man_wearing_turban_tone2"] = "\240\159\145\179\240\159\143\188\226\153\130",
		["map"] = "\240\159\151\186",
		["man_farmer"] = "\240\159\145\168\240\159\140\190",
		["man_judge_tone5"] = "\240\159\145\168\240\159\143\191\226\154\150",
		["man_climbing_tone3"] = "\240\159\167\151\240\159\143\189\226\153\130",
		["man_frowning_tone3"] = "\240\159\153\141\240\159\143\189\226\153\130",
		["man_dancing_tone5"] = "\240\159\149\186\240\159\143\191",
		["man_in_lotus_position_tone5"] = "\240\159\167\152\240\159\143\191\226\153\130",
		["man_judge_tone2"] = "\240\159\145\168\240\159\143\188\226\154\150",
		["man_raising_hand_tone4"] = "\240\159\153\139\240\159\143\190\226\153\130",
		["mage_tone1"] = "\240\159\167\153\240\159\143\187",
		["metal_tone1"] = "\240\159\164\152\240\159\143\187",
		["man_student_tone5"] = "\240\159\145\168\240\159\143\191\240\159\142\147",
		["man_student_tone4"] = "\240\159\145\168\240\159\143\190\240\159\142\147",
		["man_scientist"] = "\240\159\145\168\240\159\148\172",
		["mermaid_tone4"] = "\240\159\167\156\240\159\143\190\226\153\128",
		["man_cook_tone5"] = "\240\159\145\168\240\159\143\191\240\159\141\179",
		["man_fairy_tone4"] = "\240\159\167\154\240\159\143\190\226\153\130",
		["man_juggling_tone1"] = "\240\159\164\185\240\159\143\187\226\153\130",
		["man_climbing"] = "\240\159\167\151\226\153\130",
		["man_factory_worker_tone2"] = "\240\159\145\168\240\159\143\188\240\159\143\173",
		["muscle_tone3"] = "\240\159\146\170\240\159\143\189",
		["moneybag"] = "\240\159\146\176",
		["man_frowning"] = "\240\159\153\141\226\153\130",
		["man_firefighter_tone5"] = "\240\159\145\168\240\159\143\191\240\159\154\146",
		["man_climbing_tone4"] = "\240\159\167\151\240\159\143\190\226\153\130",
		["man_juggling_tone5"] = "\240\159\164\185\240\159\143\191\226\153\130",
		["man_tipping_hand_tone1"] = "\240\159\146\129\240\159\143\187\226\153\130",
		["man_genie"] = "\240\159\167\158\226\153\130",
		["man_rowing_boat_tone4"] = "\240\159\154\163\240\159\143\190\226\153\130",
		["man_artist"] = "\240\159\145\168\240\159\142\168",
		["man_artist_tone5"] = "\240\159\145\168\240\159\143\191\240\159\142\168",
		["merman_tone2"] = "\240\159\167\156\240\159\143\188\226\153\130",
		["man_mechanic_tone4"] = "\240\159\145\168\240\159\143\190\240\159\148\167",
		["mosque"] = "\240\159\149\140",
		["man_student_tone3"] = "\240\159\145\168\240\159\143\189\240\159\142\147",
		["meat_on_bone"] = "\240\159\141\150",
		["man_running"] = "\240\159\143\131\226\153\130",
		["man_frowning_tone1"] = "\240\159\153\141\240\159\143\187\226\153\130",
		["man_teacher_tone2"] = "\240\159\145\168\240\159\143\188\240\159\143\171",
		["man_surfing_tone3"] = "\240\159\143\132\240\159\143\189\226\153\130",
		["man_gesturing_ok_tone4"] = "\240\159\153\134\240\159\143\190\226\153\130",
		["man_vampire_tone5"] = "\240\159\167\155\240\159\143\191\226\153\130",
		["man_firefighter_tone2"] = "\240\159\145\168\240\159\143\188\240\159\154\146",
		["man_scientist_tone1"] = "\240\159\145\168\240\159\143\187\240\159\148\172",
		["man_health_worker_tone2"] = "\240\159\145\168\240\159\143\188\226\154\149",
		["man_golfing"] = "\240\159\143\140\226\153\130",
		["man_walking_tone3"] = "\240\159\154\182\240\159\143\189\226\153\130",
		["metal_tone5"] = "\240\159\164\152\240\159\143\191",
		["man_gesturing_ok"] = "\240\159\153\134\226\153\130",
		["man_facepalming"] = "\240\159\164\166\226\153\130",
		["man_with_chinese_cap_tone5"] = "\240\159\145\178\240\159\143\191",
		["man_raising_hand_tone5"] = "\240\159\153\139\240\159\143\191\226\153\130",
		["man_cook_tone3"] = "\240\159\145\168\240\159\143\189\240\159\141\179",
		["man_mechanic_tone1"] = "\240\159\145\168\240\159\143\187\240\159\148\167",
		["muscle"] = "\240\159\146\170",
		["mailbox_closed"] = "\240\159\147\170",
		["mahjong"] = "\240\159\128\132",
		["man_elf_tone5"] = "\240\159\167\157\240\159\143\191\226\153\130",
		["man_tipping_hand_tone3"] = "\240\159\146\129\240\159\143\189\226\153\130",
		["man_judge_tone4"] = "\240\159\145\168\240\159\143\190\226\154\150",
		["man_raising_hand_tone2"] = "\240\159\153\139\240\159\143\188\226\153\130",
		["man_surfing_tone5"] = "\240\159\143\132\240\159\143\191\226\153\130",
		["man_frowning_tone4"] = "\240\159\153\141\240\159\143\190\226\153\130",
		["man_office_worker_tone4"] = "\240\159\145\168\240\159\143\190\240\159\146\188",
		["musical_keyboard"] = "\240\159\142\185",
		["mage_tone4"] = "\240\159\167\153\240\159\143\190",
		["mans_shoe"] = "\240\159\145\158",
		["man_fairy"] = "\240\159\167\154\226\153\130",
		["man_student"] = "\240\159\145\168\240\159\142\147",
		["man_dancing_tone2"] = "\240\159\149\186\240\159\143\188",
		["man_wearing_turban"] = "\240\159\145\179\226\153\130",
		["man_in_lotus_position_tone2"] = "\240\159\167\152\240\159\143\188\226\153\130",
		["man_swimming_tone1"] = "\240\159\143\138\240\159\143\187\226\153\130",
		["military_medal"] = "\240\159\142\150",
		["man_vampire"] = "\240\159\167\155\226\153\130",
		["man_technologist_tone3"] = "\240\159\145\168\240\159\143\189\240\159\146\187",
		["man_pilot_tone1"] = "\240\159\145\168\240\159\143\187\226\156\136",
		["man_swimming_tone2"] = "\240\159\143\138\240\159\143\188\226\153\130",
		["merman_tone3"] = "\240\159\167\156\240\159\143\189\226\153\130",
		["man_playing_handball_tone1"] = "\240\159\164\190\240\159\143\187\226\153\130",
		["milky_way"] = "\240\159\140\140",
		["man_surfing"] = "\240\159\143\132\226\153\130",
		["man_getting_haircut_tone5"] = "\240\159\146\135\240\159\143\191\226\153\130",
		["man_getting_face_massage_tone5"] = "\240\159\146\134\240\159\143\191\226\153\130",
		["man_climbing_tone1"] = "\240\159\167\151\240\159\143\187\226\153\130",
		["man_with_chinese_cap_tone4"] = "\240\159\145\178\240\159\143\190",
		["men_wrestling"] = "\240\159\164\188\226\153\130",
		["man_technologist_tone1"] = "\240\159\145\168\240\159\143\187\240\159\146\187",
		["man_playing_water_polo_tone1"] = "\240\159\164\189\240\159\143\187\226\153\130",
		["merman_tone4"] = "\240\159\167\156\240\159\143\190\226\153\130",
		["microphone"] = "\240\159\142\164",
		["man_playing_handball_tone2"] = "\240\159\164\190\240\159\143\188\226\153\130",
		["mailbox"] = "\240\159\147\171",
		["man_construction_worker_tone3"] = "\240\159\145\183\240\159\143\189\226\153\130",
		["man_pouting"] = "\240\159\153\142\226\153\130",
		["man_construction_worker_tone2"] = "\240\159\145\183\240\159\143\188\226\153\130",
		["mrs_claus_tone1"] = "\240\159\164\182\240\159\143\187",
		["man_running_tone2"] = "\240\159\143\131\240\159\143\188\226\153\130",
		["man_pouting_tone2"] = "\240\159\153\142\240\159\143\188\226\153\130",
		["man_lifting_weights_tone3"] = "\240\159\143\139\240\159\143\189\226\153\130",
		["man_getting_haircut_tone1"] = "\240\159\146\135\240\159\143\187\226\153\130",
		["mage"] = "\240\159\167\153",
		["mermaid_tone1"] = "\240\159\167\156\240\159\143\187\226\153\128",
		["man_technologist_tone4"] = "\240\159\145\168\240\159\143\190\240\159\146\187",
		["man_health_worker_tone1"] = "\240\159\145\168\240\159\143\187\226\154\149",
		["man_frowning_tone5"] = "\240\159\153\141\240\159\143\191\226\153\130",
		["mermaid_tone5"] = "\240\159\167\156\240\159\143\191\226\153\128",
		["mermaid"] = "\240\159\167\156\226\153\128",
		["musical_score"] = "\240\159\142\188",
		["man_tipping_hand"] = "\240\159\146\129\226\153\130",
		["man_elf_tone2"] = "\240\159\167\157\240\159\143\188\226\153\130",
		["man_singer_tone2"] = "\240\159\145\168\240\159\143\188\240\159\142\164"
	},
	["l"] = {
		["laughing"] = "\240\159\152\134",
		["left_facing_fist_tone5"] = "\240\159\164\155\240\159\143\191",
		["left_luggage"] = "\240\159\155\133",
		["last_quarter_moon_with_face"] = "\240\159\140\156",
		["lollipop"] = "\240\159\141\173",
		["libra"] = "\226\153\142",
		["large_orange_diamond"] = "\240\159\148\182",
		["large_blue_diamond"] = "\240\159\148\183",
		["label"] = "\240\159\143\183",
		["left_facing_fist_tone3"] = "\240\159\164\155\240\159\143\189",
		["lying_face"] = "\240\159\164\165",
		["lizard"] = "\240\159\166\142",
		["left_facing_fist"] = "\240\159\164\155",
		["left_facing_fist_tone2"] = "\240\159\164\155\240\159\143\188",
		["light_rail"] = "\240\159\154\136",
		["link"] = "\240\159\148\151",
		["lion_face"] = "\240\159\166\129",
		["lemon"] = "\240\159\141\139",
		["left_right_arrow"] = "\226\134\148",
		["level_slider"] = "\240\159\142\154",
		["left_facing_fist_tone1"] = "\240\159\164\155\240\159\143\187",
		["leo"] = "\226\153\140",
		["loud_sound"] = "\240\159\148\138",
		["leaves"] = "\240\159\141\131",
		["lipstick"] = "\240\159\146\132",
		["loop"] = "\226\158\191",
		["left_facing_fist_tone4"] = "\240\159\164\155\240\159\143\190",
		["last_quarter_moon"] = "\240\159\140\151",
		["leopard"] = "\240\159\144\134",
		["low_brightness"] = "\240\159\148\133",
		["ledger"] = "\240\159\147\146",
		["loudspeaker"] = "\240\159\147\162"
	},
	["o"] = {
		["older_adult"] = "\240\159\167\147",
		["ok_hand_tone3"] = "\240\159\145\140\240\159\143\189",
		["octagonal_sign"] = "\240\159\155\145",
		["older_man_tone1"] = "\240\159\145\180\240\159\143\187",
		["open_file_folder"] = "\240\159\147\130",
		["older_man_tone3"] = "\240\159\145\180\240\159\143\189",
		["orange_book"] = "\240\159\147\153",
		["oncoming_bus"] = "\240\159\154\141",
		["ok_hand_tone1"] = "\240\159\145\140\240\159\143\187",
		["o"] = "\226\173\149",
		["ok_hand_tone2"] = "\240\159\145\140\240\159\143\188",
		["office"] = "\240\159\143\162",
		["older_adult_tone2"] = "\240\159\167\147\240\159\143\188",
		["older_woman_tone2"] = "\240\159\145\181\240\159\143\188",
		["oil"] = "\240\159\155\162",
		["oncoming_automobile"] = "\240\159\154\152",
		["open_hands_tone2"] = "\240\159\145\144\240\159\143\188",
		["older_man_tone2"] = "\240\159\145\180\240\159\143\188",
		["older_adult_tone3"] = "\240\159\167\147\240\159\143\189",
		["open_hands_tone1"] = "\240\159\145\144\240\159\143\187",
		["owl"] = "\240\159\166\137",
		["older_woman_tone3"] = "\240\159\145\181\240\159\143\189",
		["ox"] = "\240\159\144\130",
		["ok_hand_tone5"] = "\240\159\145\140\240\159\143\191",
		["older_woman_tone4"] = "\240\159\145\181\240\159\143\190",
		["ok_hand_tone4"] = "\240\159\145\140\240\159\143\190",
		["octopus"] = "\240\159\144\153",
		["oncoming_taxi"] = "\240\159\154\150",
		["open_hands"] = "\240\159\145\144",
		["open_hands_tone3"] = "\240\159\145\144\240\159\143\189",
		["ocean"] = "\240\159\140\138",
		["open_hands_tone4"] = "\240\159\145\144\240\159\143\190",
		["orthodox_cross"] = "\226\152\166",
		["older_adult_tone5"] = "\240\159\167\147\240\159\143\191",
		["om_symbol"] = "\240\159\149\137",
		["oncoming_police_car"] = "\240\159\154\148",
		["older_adult_tone1"] = "\240\159\167\147\240\159\143\187",
		["outbox_tray"] = "\240\159\147\164",
		["older_woman"] = "\240\159\145\181",
		["ok_hand"] = "\240\159\145\140",
		["older_woman_tone5"] = "\240\159\145\181\240\159\143\191",
		["older_man_tone4"] = "\240\159\145\180\240\159\143\190",
		["older_man_tone5"] = "\240\159\145\180\240\159\143\191",
		["older_adult_tone4"] = "\240\159\167\147\240\159\143\190",
		["open_mouth"] = "\240\159\152\174",
		["older_woman_tone1"] = "\240\159\145\181\240\159\143\187",
		["open_hands_tone5"] = "\240\159\145\144\240\159\143\191"
	},
	["n"] = {
		["no_mouth"] = "\240\159\152\182",
		["no_entry_sign"] = "\240\159\154\171",
		["nauseated_face"] = "\240\159\164\162",
		["no_pedestrians"] = "\240\159\154\183",
		["no_entry"] = "\226\155\148",
		["newspaper"] = "\240\159\147\176",
		["nose"] = "\240\159\145\131",
		["no_bicycles"] = "\240\159\154\179",
		["newspaper2"] = "\240\159\151\158",
		["night_with_stars"] = "\240\159\140\131",
		["neutral_face"] = "\240\159\152\144",
		["nail_care"] = "\240\159\146\133",
		["notepad_spiral"] = "\240\159\151\146",
		["notebook_with_decorative_cover"] = "\240\159\147\148",
		["nail_care_tone3"] = "\240\159\146\133\240\159\143\189",
		["nose_tone3"] = "\240\159\145\131\240\159\143\189",
		["nose_tone1"] = "\240\159\145\131\240\159\143\187",
		["new_moon"] = "\240\159\140\145",
		["nail_care_tone4"] = "\240\159\146\133\240\159\143\190",
		["non-potable_water"] = "\240\159\154\177",
		["no_bell"] = "\240\159\148\149",
		["necktie"] = "\240\159\145\148",
		["new_moon_with_face"] = "\240\159\140\154",
		["nail_care_tone5"] = "\240\159\146\133\240\159\143\191",
		["nose_tone5"] = "\240\159\145\131\240\159\143\191",
		["notebook"] = "\240\159\147\147",
		["nose_tone2"] = "\240\159\145\131\240\159\143\188",
		["nut_and_bolt"] = "\240\159\148\169",
		["nail_care_tone2"] = "\240\159\146\133\240\159\143\188",
		["nose_tone4"] = "\240\159\145\131\240\159\143\190",
		["nail_care_tone1"] = "\240\159\146\133\240\159\143\187",
		["name_badge"] = "\240\159\147\155",
		["notes"] = "\240\159\142\182"
	},
	["1"] = {
		["1234"] = "\240\159\148\162",
		["100"] = "\240\159\146\175"
	},
	["p"] = {
		["person_bowing_tone5"] = "\240\159\153\135\240\159\143\191",
		["person_rowing_boat_tone3"] = "\240\159\154\163\240\159\143\189",
		["person_in_steamy_room_tone4"] = "\240\159\167\150\240\159\143\190",
		["parking"] = "\240\159\133\191",
		["popcorn"] = "\240\159\141\191",
		["post_office"] = "\240\159\143\163",
		["person_frowning_tone2"] = "\240\159\153\141\240\159\143\188",
		["person_pouting_tone1"] = "\240\159\153\142\240\159\143\187",
		["point_up"] = "\226\152\157",
		["postbox"] = "\240\159\147\174",
		["person_getting_massage_tone2"] = "\240\159\146\134\240\159\143\188",
		["pig_nose"] = "\240\159\144\189",
		["police_officer_tone5"] = "\240\159\145\174\240\159\143\191",
		["person_swimming_tone2"] = "\240\159\143\138\240\159\143\188",
		["person_walking_tone1"] = "\240\159\154\182\240\159\143\187",
		["police_officer_tone4"] = "\240\159\145\174\240\159\143\190",
		["person_surfing_tone3"] = "\240\159\143\132\240\159\143\189",
		["person_playing_handball_tone1"] = "\240\159\164\190\240\159\143\187",
		["person_shrugging_tone2"] = "\240\159\164\183\240\159\143\188",
		["person_tipping_hand_tone1"] = "\240\159\146\129\240\159\143\187",
		["palms_up_together"] = "\240\159\164\178",
		["pray"] = "\240\159\153\143",
		["person_surfing_tone2"] = "\240\159\143\132\240\159\143\188",
		["person_bouncing_ball_tone3"] = "\226\155\185\240\159\143\189",
		["panda_face"] = "\240\159\144\188",
		["postal_horn"] = "\240\159\147\175",
		["poultry_leg"] = "\240\159\141\151",
		["person_in_lotus_position_tone5"] = "\240\159\167\152\240\159\143\191",
		["part_alternation_mark"] = "\227\128\189",
		["person_raising_hand_tone1"] = "\240\159\153\139\240\159\143\187",
		["person_running_tone2"] = "\240\159\143\131\240\159\143\188",
		["person_gesturing_no_tone1"] = "\240\159\153\133\240\159\143\187",
		["person_swimming_tone4"] = "\240\159\143\138\240\159\143\190",
		["person_juggling_tone1"] = "\240\159\164\185\240\159\143\187",
		["police_officer_tone1"] = "\240\159\145\174\240\159\143\187",
		["person_biking_tone3"] = "\240\159\154\180\240\159\143\189",
		["person_facepalming_tone5"] = "\240\159\164\166\240\159\143\191",
		["person_tipping_hand_tone5"] = "\240\159\146\129\240\159\143\191",
		["punch_tone1"] = "\240\159\145\138\240\159\143\187",
		["person_playing_water_polo_tone2"] = "\240\159\164\189\240\159\143\188",
		["person_bowing"] = "\240\159\153\135",
		["person_running_tone5"] = "\240\159\143\131\240\159\143\191",
		["person_gesturing_ok"] = "\240\159\153\134",
		["pizza"] = "\240\159\141\149",
		["punch_tone4"] = "\240\159\145\138\240\159\143\190",
		["pouting_cat"] = "\240\159\152\190",
		["punch_tone2"] = "\240\159\145\138\240\159\143\188",
		["person_lifting_weights_tone3"] = "\240\159\143\139\240\159\143\189",
		["person_gesturing_ok_tone1"] = "\240\159\153\134\240\159\143\187",
		["person_surfing"] = "\240\159\143\132",
		["person_running_tone1"] = "\240\159\143\131\240\159\143\187",
		["person_facepalming_tone4"] = "\240\159\164\166\240\159\143\190",
		["person_wearing_turban_tone4"] = "\240\159\145\179\240\159\143\190",
		["person_running_tone3"] = "\240\159\143\131\240\159\143\189",
		["person_wearing_turban_tone1"] = "\240\159\145\179\240\159\143\187",
		["punch_tone5"] = "\240\159\145\138\240\159\143\191",
		["person_shrugging_tone5"] = "\240\159\164\183\240\159\143\191",
		["person_swimming_tone1"] = "\240\159\143\138\240\159\143\187",
		["pager"] = "\240\159\147\159",
		["person_golfing_tone1"] = "\240\159\143\140\240\159\143\187",
		["person_raising_hand_tone5"] = "\240\159\153\139\240\159\143\191",
		["person_biking_tone2"] = "\240\159\154\180\240\159\143\188",
		["person_juggling_tone4"] = "\240\159\164\185\240\159\143\190",
		["person_doing_cartwheel_tone1"] = "\240\159\164\184\240\159\143\187",
		["person_getting_haircut_tone1"] = "\240\159\146\135\240\159\143\187",
		["person_in_lotus_position_tone1"] = "\240\159\167\152\240\159\143\187",
		["person_getting_massage"] = "\240\159\146\134",
		["place_of_worship"] = "\240\159\155\144",
		["point_up_tone2"] = "\226\152\157\240\159\143\188",
		["palms_up_together_tone5"] = "\240\159\164\178\240\159\143\191",
		["people_wrestling"] = "\240\159\164\188",
		["prince_tone4"] = "\240\159\164\180\240\159\143\190",
		["person_golfing_tone5"] = "\240\159\143\140\240\159\143\191",
		["point_right_tone3"] = "\240\159\145\137\240\159\143\189",
		["person_surfing_tone5"] = "\240\159\143\132\240\159\143\191",
		["person_golfing_tone2"] = "\240\159\143\140\240\159\143\188",
		["person_juggling"] = "\240\159\164\185",
		["person_gesturing_ok_tone4"] = "\240\159\153\134\240\159\143\190",
		["package"] = "\240\159\147\166",
		["paperclips"] = "\240\159\150\135",
		["person_raising_hand"] = "\240\159\153\139",
		["person_walking_tone3"] = "\240\159\154\182\240\159\143\189",
		["person_facepalming"] = "\240\159\164\166",
		["person_pouting_tone4"] = "\240\159\153\142\240\159\143\190",
		["persevere"] = "\240\159\152\163",
		["princess_tone2"] = "\240\159\145\184\240\159\143\188",
		["person_doing_cartwheel_tone4"] = "\240\159\164\184\240\159\143\190",
		["person_juggling_tone5"] = "\240\159\164\185\240\159\143\191",
		["person_in_steamy_room_tone1"] = "\240\159\167\150\240\159\143\187",
		["person_bouncing_ball_tone4"] = "\226\155\185\240\159\143\190",
		["police_officer"] = "\240\159\145\174",
		["potable_water"] = "\240\159\154\176",
		["person_facepalming_tone1"] = "\240\159\164\166\240\159\143\187",
		["person_walking_tone2"] = "\240\159\154\182\240\159\143\188",
		["person_bowing_tone1"] = "\240\159\153\135\240\159\143\187",
		["person_frowning_tone4"] = "\240\159\153\141\240\159\143\190",
		["palms_up_together_tone2"] = "\240\159\164\178\240\159\143\188",
		["person_playing_handball_tone3"] = "\240\159\164\190\240\159\143\189",
		["person_lifting_weights_tone5"] = "\240\159\143\139\240\159\143\191",
		["princess_tone4"] = "\240\159\145\184\240\159\143\190",
		["pineapple"] = "\240\159\141\141",
		["person_swimming_tone3"] = "\240\159\143\138\240\159\143\189",
		["person_getting_haircut"] = "\240\159\146\135",
		["person_climbing_tone4"] = "\240\159\167\151\240\159\143\190",
		["pear"] = "\240\159\141\144",
		["point_down_tone4"] = "\240\159\145\135\240\159\143\190",
		["person_gesturing_no"] = "\240\159\153\133",
		["person_lifting_weights"] = "\240\159\143\139",
		["point_up_2"] = "\240\159\145\134",
		["person_rowing_boat_tone5"] = "\240\159\154\163\240\159\143\191",
		["person_doing_cartwheel_tone2"] = "\240\159\164\184\240\159\143\188",
		["person_getting_haircut_tone2"] = "\240\159\146\135\240\159\143\188",
		["printer"] = "\240\159\150\168",
		["penguin"] = "\240\159\144\167",
		["prince_tone2"] = "\240\159\164\180\240\159\143\188",
		["person_playing_water_polo_tone3"] = "\240\159\164\189\240\159\143\189",
		["person_getting_haircut_tone5"] = "\240\159\146\135\240\159\143\191",
		["person_golfing"] = "\240\159\143\140",
		["person_tipping_hand_tone2"] = "\240\159\146\129\240\159\143\188",
		["person_getting_massage_tone4"] = "\240\159\146\134\240\159\143\190",
		["pause_button"] = "\226\143\184",
		["person_biking"] = "\240\159\154\180",
		["person_running_tone4"] = "\240\159\143\131\240\159\143\190",
		["person_walking_tone4"] = "\240\159\154\182\240\159\143\190",
		["person_doing_cartwheel_tone5"] = "\240\159\164\184\240\159\143\191",
		["person_playing_water_polo_tone5"] = "\240\159\164\189\240\159\143\191",
		["person_facepalming_tone3"] = "\240\159\164\166\240\159\143\189",
		["person_raising_hand_tone3"] = "\240\159\153\139\240\159\143\189",
		["person_in_lotus_position_tone2"] = "\240\159\167\152\240\159\143\188",
		["person_frowning_tone3"] = "\240\159\153\141\240\159\143\189",
		["person_rowing_boat_tone2"] = "\240\159\154\163\240\159\143\188",
		["person_shrugging"] = "\240\159\164\183",
		["person_in_lotus_position_tone3"] = "\240\159\167\152\240\159\143\189",
		["person_gesturing_no_tone5"] = "\240\159\153\133\240\159\143\191",
		["poodle"] = "\240\159\144\169",
		["performing_arts"] = "\240\159\142\173",
		["pound"] = "\240\159\146\183",
		["person_bouncing_ball"] = "\226\155\185",
		["person_biking_tone1"] = "\240\159\154\180\240\159\143\187",
		["point_left_tone4"] = "\240\159\145\136\240\159\143\190",
		["play_pause"] = "\226\143\175",
		["princess"] = "\240\159\145\184",
		["person_doing_cartwheel_tone3"] = "\240\159\164\184\240\159\143\189",
		["person_walking"] = "\240\159\154\182",
		["person_golfing_tone3"] = "\240\159\143\140\240\159\143\189",
		["person_climbing_tone5"] = "\240\159\167\151\240\159\143\191",
		["pray_tone3"] = "\240\159\153\143\240\159\143\189",
		["person_swimming"] = "\240\159\143\138",
		["princess_tone5"] = "\240\159\145\184\240\159\143\191",
		["princess_tone1"] = "\240\159\145\184\240\159\143\187",
		["purse"] = "\240\159\145\155",
		["person_climbing_tone3"] = "\240\159\167\151\240\159\143\189",
		["person_raising_hand_tone2"] = "\240\159\153\139\240\159\143\188",
		["pig"] = "\240\159\144\183",
		["pray_tone2"] = "\240\159\153\143\240\159\143\188",
		["person_getting_massage_tone3"] = "\240\159\146\134\240\159\143\189",
		["person_lifting_weights_tone2"] = "\240\159\143\139\240\159\143\188",
		["punch_tone3"] = "\240\159\145\138\240\159\143\189",
		["person_juggling_tone3"] = "\240\159\164\185\240\159\143\189",
		["person_gesturing_ok_tone5"] = "\240\159\153\134\240\159\143\191",
		["person_lifting_weights_tone4"] = "\240\159\143\139\240\159\143\190",
		["person_bouncing_ball_tone5"] = "\226\155\185\240\159\143\191",
		["police_officer_tone2"] = "\240\159\145\174\240\159\143\188",
		["person_playing_water_polo_tone1"] = "\240\159\164\189\240\159\143\187",
		["person_getting_massage_tone5"] = "\240\159\146\134\240\159\143\191",
		["pouch"] = "\240\159\145\157",
		["person_tipping_hand_tone4"] = "\240\159\146\129\240\159\143\190",
		["person_rowing_boat"] = "\240\159\154\163",
		["page_facing_up"] = "\240\159\147\132",
		["person_in_steamy_room_tone2"] = "\240\159\167\150\240\159\143\188",
		["pick"] = "\226\155\143",
		["police_car"] = "\240\159\154\147",
		["pretzel"] = "\240\159\165\168",
		["person_bowing_tone4"] = "\240\159\153\135\240\159\143\190",
		["person_surfing_tone4"] = "\240\159\143\132\240\159\143\190",
		["person_in_steamy_room_tone5"] = "\240\159\167\150\240\159\143\191",
		["point_up_2_tone2"] = "\240\159\145\134\240\159\143\188",
		["person_shrugging_tone4"] = "\240\159\164\183\240\159\143\190",
		["palms_up_together_tone3"] = "\240\159\164\178\240\159\143\189",
		["person_walking_tone5"] = "\240\159\154\182\240\159\143\191",
		["person_in_steamy_room_tone3"] = "\240\159\167\150\240\159\143\189",
		["prince_tone1"] = "\240\159\164\180\240\159\143\187",
		["person_pouting"] = "\240\159\153\142",
		["person_rowing_boat_tone1"] = "\240\159\154\163\240\159\143\187",
		["person_climbing"] = "\240\159\167\151",
		["person_in_lotus_position_tone4"] = "\240\159\167\152\240\159\143\190",
		["person_pouting_tone3"] = "\240\159\153\142\240\159\143\189",
		["person_running"] = "\240\159\143\131",
		["prince_tone5"] = "\240\159\164\180\240\159\143\191",
		["person_getting_haircut_tone4"] = "\240\159\146\135\240\159\143\190",
		["police_officer_tone3"] = "\240\159\145\174\240\159\143\189",
		["palm_tree"] = "\240\159\140\180",
		["person_gesturing_no_tone4"] = "\240\159\153\133\240\159\143\190",
		["person_lifting_weights_tone1"] = "\240\159\143\139\240\159\143\187",
		["pencil"] = "\240\159\147\157",
		["person_playing_handball_tone2"] = "\240\159\164\190\240\159\143\188",
		["person_bouncing_ball_tone2"] = "\226\155\185\240\159\143\188",
		["person_wearing_turban_tone5"] = "\240\159\145\179\240\159\143\191",
		["person_frowning_tone5"] = "\240\159\153\141\240\159\143\191",
		["person_raising_hand_tone4"] = "\240\159\153\139\240\159\143\190",
		["point_right_tone5"] = "\240\159\145\137\240\159\143\191",
		["person_doing_cartwheel"] = "\240\159\164\184",
		["pencil2"] = "\226\156\143",
		["person_gesturing_no_tone2"] = "\240\159\153\133\240\159\143\188",
		["person_getting_haircut_tone3"] = "\240\159\146\135\240\159\143\189",
		["person_wearing_turban"] = "\240\159\145\179",
		["palms_up_together_tone4"] = "\240\159\164\178\240\159\143\190",
		["pisces"] = "\226\153\147",
		["person_fencing"] = "\240\159\164\186",
		["person_biking_tone4"] = "\240\159\154\180\240\159\143\190",
		["person_in_lotus_position"] = "\240\159\167\152",
		["person_bowing_tone3"] = "\240\159\153\135\240\159\143\189",
		["person_gesturing_ok_tone2"] = "\240\159\153\134\240\159\143\188",
		["person_in_steamy_room"] = "\240\159\167\150",
		["person_mountain_biking_tone3"] = "\240\159\154\181\240\159\143\189",
		["pie"] = "\240\159\165\167",
		["ping_pong"] = "\240\159\143\147",
		["person_frowning"] = "\240\159\153\141",
		["person_golfing_tone4"] = "\240\159\143\140\240\159\143\190",
		["person_pouting_tone5"] = "\240\159\153\142\240\159\143\191",
		["person_getting_massage_tone1"] = "\240\159\146\134\240\159\143\187",
		["palms_up_together_tone1"] = "\240\159\164\178\240\159\143\187",
		["person_swimming_tone5"] = "\240\159\143\138\240\159\143\191",
		["prince"] = "\240\159\164\180",
		["person_juggling_tone2"] = "\240\159\164\185\240\159\143\188",
		["projector"] = "\240\159\147\189",
		["pray_tone4"] = "\240\159\153\143\240\159\143\190",
		["pen_fountain"] = "\240\159\150\139",
		["peace"] = "\226\152\174",
		["person_tipping_hand_tone3"] = "\240\159\146\129\240\159\143\189",
		["person_bouncing_ball_tone1"] = "\226\155\185\240\159\143\187",
		["pensive"] = "\240\159\152\148",
		["pray_tone5"] = "\240\159\153\143\240\159\143\191",
		["person_gesturing_no_tone3"] = "\240\159\153\133\240\159\143\189",
		["person_playing_handball"] = "\240\159\164\190",
		["person_facepalming_tone2"] = "\240\159\164\166\240\159\143\188",
		["person_pouting_tone2"] = "\240\159\153\142\240\159\143\188",
		["person_rowing_boat_tone4"] = "\240\159\154\163\240\159\143\190",
		["partly_sunny"] = "\226\155\133",
		["person_playing_water_polo"] = "\240\159\164\189",
		["person_playing_handball_tone4"] = "\240\159\164\190\240\159\143\190",
		["poop"] = "\240\159\146\169",
		["pray_tone1"] = "\240\159\153\143\240\159\143\187",
		["person_surfing_tone1"] = "\240\159\143\132\240\159\143\187",
		["pancakes"] = "\240\159\165\158",
		["person_shrugging_tone1"] = "\240\159\164\183\240\159\143\187",
		["paintbrush"] = "\240\159\150\140",
		["put_litter_in_its_place"] = "\240\159\154\174",
		["paperclip"] = "\240\159\147\142",
		["point_down_tone2"] = "\240\159\145\135\240\159\143\188",
		["prayer_beads"] = "\240\159\147\191",
		["person_wearing_turban_tone2"] = "\240\159\145\179\240\159\143\188",
		["person_gesturing_ok_tone3"] = "\240\159\153\134\240\159\143\189",
		["people_with_bunny_ears_partying"] = "\240\159\145\175",
		["princess_tone3"] = "\240\159\145\184\240\159\143\189",
		["person_wearing_turban_tone3"] = "\240\159\145\179\240\159\143\189",
		["prince_tone3"] = "\240\159\164\180\240\159\143\189",
		["person_frowning_tone1"] = "\240\159\153\141\240\159\143\187",
		["person_playing_handball_tone5"] = "\240\159\164\190\240\159\143\191",
		["person_climbing_tone1"] = "\240\159\167\151\240\159\143\187",
		["page_with_curl"] = "\240\159\147\131",
		["person_tipping_hand"] = "\240\159\146\129",
		["person_playing_water_polo_tone4"] = "\240\159\164\189\240\159\143\190",
		["passport_control"] = "\240\159\155\130",
		["person_biking_tone5"] = "\240\159\154\180\240\159\143\191",
		["punch"] = "\240\159\145\138",
		["potato"] = "\240\159\165\148",
		["person_bowing_tone2"] = "\240\159\153\135\240\159\143\188"
	},
	["s"] = {
		["shaved_ice"] = "\240\159\141\167",
		["smiling_imp"] = "\240\159\152\136",
		["symbols"] = "\240\159\148\163",
		["snowflake"] = "\226\157\132",
		["sleeping"] = "\240\159\152\180",
		["space_invader"] = "\240\159\145\190",
		["straight_ruler"] = "\240\159\147\143",
		["speaking_head"] = "\240\159\151\163",
		["soccer"] = "\226\154\189",
		["ski"] = "\240\159\142\191",
		["salad"] = "\240\159\165\151",
		["steam_locomotive"] = "\240\159\154\130",
		["slight_smile"] = "\240\159\153\130",
		["sun_with_face"] = "\240\159\140\158",
		["see_no_evil"] = "\240\159\153\136",
		["spades"] = "\226\153\160",
		["skier"] = "\226\155\183",
		["sandwich"] = "\240\159\165\170",
		["stadium"] = "\240\159\143\159",
		["scream_cat"] = "\240\159\153\128",
		["sled"] = "\240\159\155\183",
		["sparkler"] = "\240\159\142\135",
		["smiley"] = "\240\159\152\131",
		["speedboat"] = "\240\159\154\164",
		["ship"] = "\240\159\154\162",
		["stuck_out_tongue_closed_eyes"] = "\240\159\152\157",
		["snowboarder_tone2"] = "\240\159\143\130\240\159\143\188",
		["snowboarder_tone5"] = "\240\159\143\130\240\159\143\191",
		["spoon"] = "\240\159\165\132",
		["sheep"] = "\240\159\144\145",
		["scream"] = "\240\159\152\177",
		["snowboarder_tone1"] = "\240\159\143\130\240\159\143\187",
		["snowboarder"] = "\240\159\143\130",
		["smirk_cat"] = "\240\159\152\188",
		["stopwatch"] = "\226\143\177",
		["sunrise"] = "\240\159\140\133",
		["sneezing_face"] = "\240\159\164\167",
		["smiley_cat"] = "\240\159\152\186",
		["sob"] = "\240\159\152\173",
		["snowman"] = "\226\155\132",
		["speak_no_evil"] = "\240\159\153\138",
		["stars"] = "\240\159\140\160",
		["sushi"] = "\240\159\141\163",
		["selfie"] = "\240\159\164\179",
		["sagittarius"] = "\226\153\144",
		["satellite_orbital"] = "\240\159\155\176",
		["smile_cat"] = "\240\159\152\184",
		["sleepy"] = "\240\159\152\170",
		["slight_frown"] = "\240\159\153\129",
		["sunglasses"] = "\240\159\152\142",
		["shark"] = "\240\159\166\136",
		["small_blue_diamond"] = "\240\159\148\185",
		["satellite"] = "\240\159\147\161",
		["strawberry"] = "\240\159\141\147",
		["sunflower"] = "\240\159\140\187",
		["scarf"] = "\240\159\167\163",
		["scroll"] = "\240\159\147\156",
		["star_of_david"] = "\226\156\161",
		["star_struck"] = "\240\159\164\169",
		["shopping_bags"] = "\240\159\155\141",
		["sunny"] = "\226\152\128",
		["sandal"] = "\240\159\145\161",
		["shield"] = "\240\159\155\161",
		["scorpion"] = "\240\159\166\130",
		["skull"] = "\240\159\146\128",
		["school_satchel"] = "\240\159\142\146",
		["shrimp"] = "\240\159\166\144",
		["suspension_railway"] = "\240\159\154\159",
		["sunrise_over_mountains"] = "\240\159\140\132",
		["secret"] = "\227\138\153",
		["santa"] = "\240\159\142\133",
		["small_red_triangle_down"] = "\240\159\148\187",
		["sound"] = "\240\159\148\137",
		["stop_button"] = "\226\143\185",
		["stuffed_flatbread"] = "\240\159\165\153",
		["stew"] = "\240\159\141\178",
		["scooter"] = "\240\159\155\180",
		["sake"] = "\240\159\141\182",
		["smirk"] = "\240\159\152\143",
		["small_orange_diamond"] = "\240\159\148\184",
		["snowboarder_tone4"] = "\240\159\143\130\240\159\143\190",
		["synagogue"] = "\240\159\149\141",
		["sa"] = "\240\159\136\130",
		["scales"] = "\226\154\150",
		["small_red_triangle"] = "\240\159\148\186",
		["sweat_smile"] = "\240\159\152\133",
		["sailboat"] = "\226\155\181",
		["stuck_out_tongue"] = "\240\159\152\155",
		["sparkle"] = "\226\157\135",
		["snail"] = "\240\159\144\140",
		["snake"] = "\240\159\144\141",
		["smile"] = "\240\159\152\132",
		["signal_strength"] = "\240\159\147\182",
		["second_place"] = "\240\159\165\136",
		["shamrock"] = "\226\152\152",
		["shopping_cart"] = "\240\159\155\146",
		["statue_of_liberty"] = "\240\159\151\189",
		["squid"] = "\240\159\166\145",
		["socks"] = "\240\159\167\166",
		["star_and_crescent"] = "\226\152\170",
		["shirt"] = "\240\159\145\149",
		["seedling"] = "\240\159\140\177",
		["spider"] = "\240\159\149\183",
		["star"] = "\226\173\144",
		["skull_crossbones"] = "\226\152\160",
		["speech_balloon"] = "\240\159\146\172",
		["speaker"] = "\240\159\148\136",
		["sweat"] = "\240\159\152\147",
		["speech_left"] = "\240\159\151\168",
		["shallow_pan_of_food"] = "\240\159\165\152",
		["seat"] = "\240\159\146\186",
		["snowman2"] = "\226\152\131",
		["shushing_face"] = "\240\159\164\171",
		["snowboarder_tone3"] = "\240\159\143\130\240\159\143\189",
		["sweet_potato"] = "\240\159\141\160",
		["spaghetti"] = "\240\159\141\157",
		["stuck_out_tongue_winking_eye"] = "\240\159\152\156",
		["scissors"] = "\226\156\130",
		["school"] = "\240\159\143\171",
		["sparkles"] = "\226\156\168",
		["saxophone"] = "\240\159\142\183",
		["shell"] = "\240\159\144\154"
	},
	["r"] = {
		["rose"] = "\240\159\140\185",
		["rainbow_flag"] = "\240\159\143\179\240\159\140\136",
		["rhino"] = "\240\159\166\143",
		["raised_hands_tone5"] = "\240\159\153\140\240\159\143\191",
		["relieved"] = "\240\159\152\140",
		["regional_indicator_u"] = "\240\159\135\186",
		["rice_ball"] = "\240\159\141\153",
		["rabbit2"] = "\240\159\144\135",
		["regional_indicator_g"] = "\240\159\135\172",
		["regional_indicator_y"] = "\240\159\135\190",
		["regional_indicator_d"] = "\240\159\135\169",
		["rainbow"] = "\240\159\140\136",
		["raised_hand_tone1"] = "\226\156\139\240\159\143\187",
		["right_facing_fist_tone1"] = "\240\159\164\156\240\159\143\187",
		["right_facing_fist_tone5"] = "\240\159\164\156\240\159\143\191",
		["roller_coaster"] = "\240\159\142\162",
		["rofl"] = "\240\159\164\163",
		["ribbon"] = "\240\159\142\128",
		["rocket"] = "\240\159\154\128",
		["regional_indicator_z"] = "\240\159\135\191",
		["regional_indicator_l"] = "\240\159\135\177",
		["rotating_light"] = "\240\159\154\168",
		["rice_scene"] = "\240\159\142\145",
		["regional_indicator_k"] = "\240\159\135\176",
		["record_button"] = "\226\143\186",
		["regional_indicator_m"] = "\240\159\135\178",
		["regional_indicator_h"] = "\240\159\135\173",
		["raised_back_of_hand_tone5"] = "\240\159\164\154\240\159\143\191",
		["regional_indicator_n"] = "\240\159\135\179",
		["regional_indicator_c"] = "\240\159\135\168",
		["regional_indicator_b"] = "\240\159\135\167",
		["raised_back_of_hand_tone4"] = "\240\159\164\154\240\159\143\190",
		["rice_cracker"] = "\240\159\141\152",
		["regional_indicator_t"] = "\240\159\135\185",
		["regional_indicator_a"] = "\240\159\135\166",
		["ram"] = "\240\159\144\143",
		["rolling_eyes"] = "\240\159\153\132",
		["rooster"] = "\240\159\144\147",
		["red_car"] = "\240\159\154\151",
		["raised_hand_tone3"] = "\226\156\139\240\159\143\189",
		["radio_button"] = "\240\159\148\152",
		["right_facing_fist"] = "\240\159\164\156",
		["right_facing_fist_tone2"] = "\240\159\164\156\240\159\143\188",
		["raised_hand_tone2"] = "\226\156\139\240\159\143\188",
		["regional_indicator_x"] = "\240\159\135\189",
		["regional_indicator_j"] = "\240\159\135\175",
		["regional_indicator_v"] = "\240\159\135\187",
		["raised_hand"] = "\226\156\139",
		["restroom"] = "\240\159\154\187",
		["raised_back_of_hand"] = "\240\159\164\154",
		["rugby_football"] = "\240\159\143\137",
		["raised_hand_tone4"] = "\226\156\139\240\159\143\190",
		["recycle"] = "\226\153\187",
		["repeat_one"] = "\240\159\148\130",
		["ramen"] = "\240\159\141\156",
		["relaxed"] = "\226\152\186",
		["regional_indicator_p"] = "\240\159\135\181",
		["repeat"] = "\240\159\148\129",
		["regional_indicator_i"] = "\240\159\135\174",
		["regional_indicator_r"] = "\240\159\135\183",
		["reminder_ribbon"] = "\240\159\142\151",
		["registered"] = "\194\174",
		["radioactive"] = "\226\152\162",
		["raised_hands_tone3"] = "\240\159\153\140\240\159\143\189",
		["rat"] = "\240\159\144\128",
		["raised_hands_tone1"] = "\240\159\153\140\240\159\143\187",
		["rice"] = "\240\159\141\154",
		["red_circle"] = "\240\159\148\180",
		["regional_indicator_f"] = "\240\159\135\171",
		["rewind"] = "\226\143\170",
		["raised_hands"] = "\240\159\153\140",
		["raised_hands_tone2"] = "\240\159\153\140\240\159\143\188",
		["raised_back_of_hand_tone2"] = "\240\159\164\154\240\159\143\188",
		["regional_indicator_e"] = "\240\159\135\170",
		["raised_hand_tone5"] = "\226\156\139\240\159\143\191",
		["railway_car"] = "\240\159\154\131",
		["rage"] = "\240\159\152\161",
		["raised_back_of_hand_tone3"] = "\240\159\164\154\240\159\143\189",
		["radio"] = "\240\159\147\187",
		["railway_track"] = "\240\159\155\164",
		["regional_indicator_w"] = "\240\159\135\188",
		["regional_indicator_o"] = "\240\159\135\180",
		["running_shirt_with_sash"] = "\240\159\142\189",
		["raised_hands_tone4"] = "\240\159\153\140\240\159\143\190",
		["right_facing_fist_tone4"] = "\240\159\164\156\240\159\143\190",
		["rabbit"] = "\240\159\144\176",
		["race_car"] = "\240\159\143\142",
		["robot"] = "\240\159\164\150",
		["right_facing_fist_tone3"] = "\240\159\164\156\240\159\143\189",
		["regional_indicator_q"] = "\240\159\135\182",
		["raised_back_of_hand_tone1"] = "\240\159\164\154\240\159\143\187",
		["regional_indicator_s"] = "\240\159\135\184"
	},
	["u"] = {
		["unicorn"] = "\240\159\166\132",
		["unlock"] = "\240\159\148\147",
		["umbrella2"] = "\226\152\130",
		["united_nations"] = "\240\159\135\186\240\159\135\179",
		["up"] = "\240\159\134\153",
		["upside_down"] = "\240\159\153\131",
		["umbrella"] = "\226\152\148",
		["unamused"] = "\240\159\152\146",
		["underage"] = "\240\159\148\158",
		["urn"] = "\226\154\177"
	},
	["t"] = {
		["tiger2"] = "\240\159\144\133",
		["thermometer"] = "\240\159\140\161",
		["tone4"] = "\240\159\143\190",
		["tickets"] = "\240\159\142\159",
		["tophat"] = "\240\159\142\169",
		["tone1"] = "\240\159\143\187",
		["track_next"] = "\226\143\173",
		["tokyo_tower"] = "\240\159\151\188",
		["t_rex"] = "\240\159\166\150",
		["triumph"] = "\240\159\152\164",
		["tada"] = "\240\159\142\137",
		["turkey"] = "\240\159\166\131",
		["tangerine"] = "\240\159\141\138",
		["tm"] = "\226\132\162",
		["train2"] = "\240\159\154\134",
		["taxi"] = "\240\159\154\149",
		["tv"] = "\240\159\147\186",
		["tired_face"] = "\240\159\152\171",
		["traffic_light"] = "\240\159\154\165",
		["taurus"] = "\226\153\137",
		["thumbsup_tone4"] = "\240\159\145\141\240\159\143\190",
		["tone3"] = "\240\159\143\189",
		["tone5"] = "\240\159\143\191",
		["timer"] = "\226\143\178",
		["thinking"] = "\240\159\164\148",
		["tomato"] = "\240\159\141\133",
		["triangular_ruler"] = "\240\159\147\144",
		["tram"] = "\240\159\154\138",
		["takeout_box"] = "\240\159\165\161",
		["turtle"] = "\240\159\144\162",
		["thought_balloon"] = "\240\159\146\173",
		["tulip"] = "\240\159\140\183",
		["tea"] = "\240\159\141\181",
		["tent"] = "\226\155\186",
		["thumbsup_tone2"] = "\240\159\145\141\240\159\143\188",
		["truck"] = "\240\159\154\154",
		["thunder_cloud_rain"] = "\226\155\136",
		["tractor"] = "\240\159\154\156",
		["trumpet"] = "\240\159\142\186",
		["tools"] = "\240\159\155\160",
		["thumbsup"] = "\240\159\145\141",
		["trackball"] = "\240\159\150\178",
		["tropical_fish"] = "\240\159\144\160",
		["toilet"] = "\240\159\154\189",
		["tennis"] = "\240\159\142\190",
		["ticket"] = "\240\159\142\171",
		["thermometer_face"] = "\240\159\164\146",
		["trident"] = "\240\159\148\177",
		["triangular_flag_on_post"] = "\240\159\154\169",
		["taco"] = "\240\159\140\174",
		["third_place"] = "\240\159\165\137",
		["train"] = "\240\159\154\139",
		["telescope"] = "\240\159\148\173",
		["trophy"] = "\240\159\143\134",
		["tiger"] = "\240\159\144\175",
		["thumbsup_tone1"] = "\240\159\145\141\240\159\143\187",
		["thumbsup_tone5"] = "\240\159\145\141\240\159\143\191",
		["tone2"] = "\240\159\143\188",
		["thumbsup_tone3"] = "\240\159\145\141\240\159\143\189"
	},
	["w"] = {
		["woman_fairy_tone5"] = "\240\159\167\154\240\159\143\191\226\153\128",
		["woman_cook_tone3"] = "\240\159\145\169\240\159\143\189\240\159\141\179",
		["writing_hand"] = "\226\156\141",
		["whale"] = "\240\159\144\179",
		["woman_running_tone5"] = "\240\159\143\131\240\159\143\191\226\153\128",
		["woman_gesturing_ok_tone3"] = "\240\159\153\134\240\159\143\189\226\153\128",
		["woman_swimming_tone2"] = "\240\159\143\138\240\159\143\188\226\153\128",
		["woman_judge_tone2"] = "\240\159\145\169\240\159\143\188\226\154\150",
		["woman_getting_face_massage_tone2"] = "\240\159\146\134\240\159\143\188\226\153\128",
		["woman_student"] = "\240\159\145\169\240\159\142\147",
		["woman_pilot_tone2"] = "\240\159\145\169\240\159\143\188\226\156\136",
		["woman_raising_hand_tone5"] = "\240\159\153\139\240\159\143\191\226\153\128",
		["woman_gesturing_no_tone4"] = "\240\159\153\133\240\159\143\190\226\153\128",
		["woman_gesturing_no_tone3"] = "\240\159\153\133\240\159\143\189\226\153\128",
		["woman_factory_worker"] = "\240\159\145\169\240\159\143\173",
		["woman_firefighter_tone4"] = "\240\159\145\169\240\159\143\190\240\159\154\146",
		["worried"] = "\240\159\152\159",
		["woman_pouting_tone3"] = "\240\159\153\142\240\159\143\189\226\153\128",
		["woman_singer_tone4"] = "\240\159\145\169\240\159\143\190\240\159\142\164",
		["woman_tipping_hand_tone1"] = "\240\159\146\129\240\159\143\187\226\153\128",
		["woman_technologist_tone2"] = "\240\159\145\169\240\159\143\188\240\159\146\187",
		["woman_police_officer"] = "\240\159\145\174\226\153\128",
		["woman_pouting_tone2"] = "\240\159\153\142\240\159\143\188\226\153\128",
		["woman_scientist_tone3"] = "\240\159\145\169\240\159\143\189\240\159\148\172",
		["woman_judge"] = "\240\159\145\169\226\154\150",
		["woman_vampire_tone2"] = "\240\159\167\155\240\159\143\188\226\153\128",
		["warning"] = "\226\154\160",
		["woman_running_tone1"] = "\240\159\143\131\240\159\143\187\226\153\128",
		["woman_teacher_tone5"] = "\240\159\145\169\240\159\143\191\240\159\143\171",
		["woman_climbing"] = "\240\159\167\151\226\153\128",
		["woman_lifting_weights_tone1"] = "\240\159\143\139\240\159\143\187\226\153\128",
		["woman_getting_face_massage"] = "\240\159\146\134\226\153\128",
		["woman_swimming"] = "\240\159\143\138\226\153\128",
		["woman_farmer_tone2"] = "\240\159\145\169\240\159\143\188\240\159\140\190",
		["woman_singer_tone1"] = "\240\159\145\169\240\159\143\187\240\159\142\164",
		["woman_teacher_tone4"] = "\240\159\145\169\240\159\143\190\240\159\143\171",
		["woman_getting_face_massage_tone1"] = "\240\159\146\134\240\159\143\187\226\153\128",
		["woman_frowning_tone1"] = "\240\159\153\141\240\159\143\187\226\153\128",
		["woman_wearing_turban_tone5"] = "\240\159\145\179\240\159\143\191\226\153\128",
		["woman_teacher"] = "\240\159\145\169\240\159\143\171",
		["woman_in_lotus_position_tone2"] = "\240\159\167\152\240\159\143\188\226\153\128",
		["woman_bouncing_ball_tone4"] = "\226\155\185\240\159\143\190\226\153\128",
		["woman_getting_haircut_tone2"] = "\240\159\146\135\240\159\143\188\226\153\128",
		["woman_artist_tone3"] = "\240\159\145\169\240\159\143\189\240\159\142\168",
		["woman_playing_handball"] = "\240\159\164\190\226\153\128",
		["woman_astronaut_tone4"] = "\240\159\145\169\240\159\143\190\240\159\154\128",
		["wave"] = "\240\159\145\139",
		["woman_walking_tone2"] = "\240\159\154\182\240\159\143\188\226\153\128",
		["woman_elf_tone1"] = "\240\159\167\157\240\159\143\187\226\153\128",
		["woman_teacher_tone1"] = "\240\159\145\169\240\159\143\187\240\159\143\171",
		["woman_frowning_tone3"] = "\240\159\153\141\240\159\143\189\226\153\128",
		["woman_shrugging_tone3"] = "\240\159\164\183\240\159\143\189\226\153\128",
		["woman_gesturing_no_tone1"] = "\240\159\153\133\240\159\143\187\226\153\128",
		["woman_technologist_tone5"] = "\240\159\145\169\240\159\143\191\240\159\146\187",
		["woman_singer_tone3"] = "\240\159\145\169\240\159\143\189\240\159\142\164",
		["woman_vampire_tone5"] = "\240\159\167\155\240\159\143\191\226\153\128",
		["woman_singer_tone5"] = "\240\159\145\169\240\159\143\191\240\159\142\164",
		["woman_student_tone4"] = "\240\159\145\169\240\159\143\190\240\159\142\147",
		["woman_genie"] = "\240\159\167\158\226\153\128",
		["woman_mage_tone3"] = "\240\159\167\153\240\159\143\189\226\153\128",
		["woman_mage"] = "\240\159\167\153\226\153\128",
		["woman_construction_worker_tone1"] = "\240\159\145\183\240\159\143\187\226\153\128",
		["woman_health_worker"] = "\240\159\145\169\226\154\149",
		["woman_astronaut"] = "\240\159\145\169\240\159\154\128",
		["woman_getting_haircut_tone5"] = "\240\159\146\135\240\159\143\191\226\153\128",
		["woman_cartwheeling_tone1"] = "\240\159\164\184\240\159\143\187\226\153\128",
		["woman_wearing_turban_tone2"] = "\240\159\145\179\240\159\143\188\226\153\128",
		["woman_scientist_tone5"] = "\240\159\145\169\240\159\143\191\240\159\148\172",
		["woman_scientist"] = "\240\159\145\169\240\159\148\172",
		["woman_firefighter"] = "\240\159\145\169\240\159\154\146",
		["woman_health_worker_tone1"] = "\240\159\145\169\240\159\143\187\226\154\149",
		["woman_vampire_tone1"] = "\240\159\167\155\240\159\143\187\226\153\128",
		["woman_rowing_boat_tone5"] = "\240\159\154\163\240\159\143\191\226\153\128",
		["woman_pilot_tone4"] = "\240\159\145\169\240\159\143\190\226\156\136",
		["watermelon"] = "\240\159\141\137",
		["woman_technologist_tone4"] = "\240\159\145\169\240\159\143\190\240\159\146\187",
		["woman_technologist_tone1"] = "\240\159\145\169\240\159\143\187\240\159\146\187",
		["wind_blowing_face"] = "\240\159\140\172",
		["woman_tipping_hand_tone4"] = "\240\159\146\129\240\159\143\190\226\153\128",
		["woman_guard"] = "\240\159\146\130\226\153\128",
		["wave_tone1"] = "\240\159\145\139\240\159\143\187",
		["woman_vampire_tone3"] = "\240\159\167\155\240\159\143\189\226\153\128",
		["woman_factory_worker_tone2"] = "\240\159\145\169\240\159\143\188\240\159\143\173",
		["woman_bouncing_ball"] = "\226\155\185\226\153\128",
		["woman_police_officer_tone3"] = "\240\159\145\174\240\159\143\189\226\153\128",
		["woman_juggling_tone3"] = "\240\159\164\185\240\159\143\189\226\153\128",
		["woman_juggling_tone4"] = "\240\159\164\185\240\159\143\190\226\153\128",
		["woman_running"] = "\240\159\143\131\226\153\128",
		["woman_factory_worker_tone3"] = "\240\159\145\169\240\159\143\189\240\159\143\173",
		["woman_artist_tone5"] = "\240\159\145\169\240\159\143\191\240\159\142\168",
		["woman_biking_tone2"] = "\240\159\154\180\240\159\143\188\226\153\128",
		["woman_getting_haircut_tone3"] = "\240\159\146\135\240\159\143\189\226\153\128",
		["woman_health_worker_tone5"] = "\240\159\145\169\240\159\143\191\226\154\149",
		["wheel_of_dharma"] = "\226\152\184",
		["woman_with_headscarf"] = "\240\159\167\149",
		["woman_walking_tone3"] = "\240\159\154\182\240\159\143\189\226\153\128",
		["woman_walking_tone4"] = "\240\159\154\182\240\159\143\190\226\153\128",
		["woman_office_worker_tone4"] = "\240\159\145\169\240\159\143\190\240\159\146\188",
		["wave_tone4"] = "\240\159\145\139\240\159\143\190",
		["woman_elf_tone2"] = "\240\159\167\157\240\159\143\188\226\153\128",
		["woman_juggling"] = "\240\159\164\185\226\153\128",
		["woman_surfing_tone4"] = "\240\159\143\132\240\159\143\190\226\153\128",
		["wrench"] = "\240\159\148\167",
		["woman_fairy"] = "\240\159\167\154\226\153\128",
		["woman_raising_hand"] = "\240\159\153\139\226\153\128",
		["woman_firefighter_tone2"] = "\240\159\145\169\240\159\143\188\240\159\154\146",
		["woman_raising_hand_tone1"] = "\240\159\153\139\240\159\143\187\226\153\128",
		["woman_detective_tone5"] = "\240\159\149\181\240\159\143\191\226\153\128",
		["woman_student_tone2"] = "\240\159\145\169\240\159\143\188\240\159\142\147",
		["women_wrestling"] = "\240\159\164\188\226\153\128",
		["woman_pilot_tone5"] = "\240\159\145\169\240\159\143\191\226\156\136",
		["woman_pouting_tone4"] = "\240\159\153\142\240\159\143\190\226\153\128",
		["woman_pilot_tone3"] = "\240\159\145\169\240\159\143\189\226\156\136",
		["woman_singer_tone2"] = "\240\159\145\169\240\159\143\188\240\159\142\164",
		["woman_scientist_tone2"] = "\240\159\145\169\240\159\143\188\240\159\148\172",
		["woman_swimming_tone1"] = "\240\159\143\138\240\159\143\187\226\153\128",
		["woman_facepalming"] = "\240\159\164\166\226\153\128",
		["woman_construction_worker_tone4"] = "\240\159\145\183\240\159\143\190\226\153\128",
		["woman_running_tone2"] = "\240\159\143\131\240\159\143\188\226\153\128",
		["woman_tone5"] = "\240\159\145\169\240\159\143\191",
		["woman_walking_tone5"] = "\240\159\154\182\240\159\143\191\226\153\128",
		["woman_bowing_tone5"] = "\240\159\153\135\240\159\143\191\226\153\128",
		["woman_lifting_weights_tone5"] = "\240\159\143\139\240\159\143\191\226\153\128",
		["woman_scientist_tone4"] = "\240\159\145\169\240\159\143\190\240\159\148\172",
		["woman_shrugging_tone5"] = "\240\159\164\183\240\159\143\191\226\153\128",
		["woman_fairy_tone4"] = "\240\159\167\154\240\159\143\190\226\153\128",
		["woman_detective_tone1"] = "\240\159\149\181\240\159\143\187\226\153\128",
		["woman_facepalming_tone2"] = "\240\159\164\166\240\159\143\188\226\153\128",
		["woman_tipping_hand"] = "\240\159\146\129\226\153\128",
		["woman_mechanic_tone1"] = "\240\159\145\169\240\159\143\187\240\159\148\167",
		["woman_wearing_turban_tone4"] = "\240\159\145\179\240\159\143\190\226\153\128",
		["woman_guard_tone4"] = "\240\159\146\130\240\159\143\190\226\153\128",
		["woman_in_lotus_position_tone5"] = "\240\159\167\152\240\159\143\191\226\153\128",
		["woman_astronaut_tone5"] = "\240\159\145\169\240\159\143\191\240\159\154\128",
		["woman_raising_hand_tone3"] = "\240\159\153\139\240\159\143\189\226\153\128",
		["woman_bouncing_ball_tone2"] = "\226\155\185\240\159\143\188\226\153\128",
		["woman_office_worker_tone3"] = "\240\159\145\169\240\159\143\189\240\159\146\188",
		["woman_getting_face_massage_tone4"] = "\240\159\146\134\240\159\143\190\226\153\128",
		["woman_playing_handball_tone2"] = "\240\159\164\190\240\159\143\188\226\153\128",
		["woman_surfing_tone1"] = "\240\159\143\132\240\159\143\187\226\153\128",
		["woman_guard_tone5"] = "\240\159\146\130\240\159\143\191\226\153\128",
		["woman_playing_water_polo_tone5"] = "\240\159\164\189\240\159\143\191\226\153\128",
		["woman_gesturing_ok_tone5"] = "\240\159\153\134\240\159\143\191\226\153\128",
		["woman_raising_hand_tone2"] = "\240\159\153\139\240\159\143\188\226\153\128",
		["woman_golfing"] = "\240\159\143\140\226\153\128",
		["woman_police_officer_tone1"] = "\240\159\145\174\240\159\143\187\226\153\128",
		["woman_playing_handball_tone3"] = "\240\159\164\190\240\159\143\189\226\153\128",
		["woman_fairy_tone3"] = "\240\159\167\154\240\159\143\189\226\153\128",
		["woman_tipping_hand_tone5"] = "\240\159\146\129\240\159\143\191\226\153\128",
		["woman_pouting_tone1"] = "\240\159\153\142\240\159\143\187\226\153\128",
		["woman_bowing_tone3"] = "\240\159\153\135\240\159\143\189\226\153\128",
		["woman_frowning"] = "\240\159\153\141\226\153\128",
		["woman_in_steamy_room"] = "\240\159\167\150\226\153\128",
		["woman_shrugging_tone1"] = "\240\159\164\183\240\159\143\187\226\153\128",
		["woman_golfing_tone5"] = "\240\159\143\140\240\159\143\191\226\153\128",
		["woman_guard_tone3"] = "\240\159\146\130\240\159\143\189\226\153\128",
		["woman_office_worker_tone5"] = "\240\159\145\169\240\159\143\191\240\159\146\188",
		["woman_swimming_tone4"] = "\240\159\143\138\240\159\143\190\226\153\128",
		["writing_hand_tone2"] = "\226\156\141\240\159\143\188",
		["woman_facepalming_tone5"] = "\240\159\164\166\240\159\143\191\226\153\128",
		["woman_judge_tone4"] = "\240\159\145\169\240\159\143\190\226\154\150",
		["woman_with_headscarf_tone3"] = "\240\159\167\149\240\159\143\189",
		["woman_lifting_weights_tone3"] = "\240\159\143\139\240\159\143\189\226\153\128",
		["woman_health_worker_tone3"] = "\240\159\145\169\240\159\143\189\226\154\149",
		["woman_astronaut_tone3"] = "\240\159\145\169\240\159\143\189\240\159\154\128",
		["woman_bowing"] = "\240\159\153\135\226\153\128",
		["wind_chime"] = "\240\159\142\144",
		["woman_walking"] = "\240\159\154\182\226\153\128",
		["woman_artist_tone1"] = "\240\159\145\169\240\159\143\187\240\159\142\168",
		["woman_biking_tone1"] = "\240\159\154\180\240\159\143\187\226\153\128",
		["waxing_gibbous_moon"] = "\240\159\140\148",
		["woman_office_worker"] = "\240\159\145\169\240\159\146\188",
		["woman_mage_tone4"] = "\240\159\167\153\240\159\143\190\226\153\128",
		["woman_artist"] = "\240\159\145\169\240\159\142\168",
		["woman_gesturing_ok_tone1"] = "\240\159\153\134\240\159\143\187\226\153\128",
		["woman_rowing_boat_tone1"] = "\240\159\154\163\240\159\143\187\226\153\128",
		["woman_judge_tone1"] = "\240\159\145\169\240\159\143\187\226\154\150",
		["woman_in_lotus_position_tone3"] = "\240\159\167\152\240\159\143\189\226\153\128",
		["woman_shrugging_tone2"] = "\240\159\164\183\240\159\143\188\226\153\128",
		["woman_bouncing_ball_tone5"] = "\226\155\185\240\159\143\191\226\153\128",
		["woman_farmer_tone5"] = "\240\159\145\169\240\159\143\191\240\159\140\190",
		["woman_shrugging"] = "\240\159\164\183\226\153\128",
		["woman_firefighter_tone3"] = "\240\159\145\169\240\159\143\189\240\159\154\146",
		["woman_getting_face_massage_tone3"] = "\240\159\146\134\240\159\143\189\226\153\128",
		["woman_lifting_weights_tone4"] = "\240\159\143\139\240\159\143\190\226\153\128",
		["woman_farmer_tone1"] = "\240\159\145\169\240\159\143\187\240\159\140\190",
		["woman_mechanic"] = "\240\159\145\169\240\159\148\167",
		["woman_playing_water_polo_tone4"] = "\240\159\164\189\240\159\143\190\226\153\128",
		["woman_gesturing_ok_tone2"] = "\240\159\153\134\240\159\143\188\226\153\128",
		["white_sun_rain_cloud"] = "\240\159\140\166",
		["woman_wearing_turban_tone3"] = "\240\159\145\179\240\159\143\189\226\153\128",
		["woman_wearing_turban_tone1"] = "\240\159\145\179\240\159\143\187\226\153\128",
		["whale2"] = "\240\159\144\139",
		["woman_astronaut_tone1"] = "\240\159\145\169\240\159\143\187\240\159\154\128",
		["woman_cartwheeling"] = "\240\159\164\184\226\153\128",
		["writing_hand_tone5"] = "\226\156\141\240\159\143\191",
		["woman_in_lotus_position_tone4"] = "\240\159\167\152\240\159\143\190\226\153\128",
		["woman_mechanic_tone2"] = "\240\159\145\169\240\159\143\188\240\159\148\167",
		["woman_biking_tone5"] = "\240\159\154\180\240\159\143\191\226\153\128",
		["woman_getting_haircut_tone1"] = "\240\159\146\135\240\159\143\187\226\153\128",
		["woman_tone3"] = "\240\159\145\169\240\159\143\189",
		["woman_factory_worker_tone4"] = "\240\159\145\169\240\159\143\190\240\159\143\173",
		["woman_surfing_tone3"] = "\240\159\143\132\240\159\143\189\226\153\128",
		["woman_climbing_tone4"] = "\240\159\167\151\240\159\143\190\226\153\128",
		["woman_vampire_tone4"] = "\240\159\167\155\240\159\143\190\226\153\128",
		["woman_surfing"] = "\240\159\143\132\226\153\128",
		["woman_juggling_tone2"] = "\240\159\164\185\240\159\143\188\226\153\128",
		["writing_hand_tone4"] = "\226\156\141\240\159\143\190",
		["woman_playing_handball_tone1"] = "\240\159\164\190\240\159\143\187\226\153\128",
		["wavy_dash"] = "\227\128\176",
		["woman_frowning_tone4"] = "\240\159\153\141\240\159\143\190\226\153\128",
		["woman_frowning_tone5"] = "\240\159\153\141\240\159\143\191\226\153\128",
		["woman_detective_tone2"] = "\240\159\149\181\240\159\143\188\226\153\128",
		["woman_tone4"] = "\240\159\145\169\240\159\143\190",
		["woman_fairy_tone1"] = "\240\159\167\154\240\159\143\187\226\153\128",
		["weary"] = "\240\159\152\169",
		["woman_bouncing_ball_tone1"] = "\226\155\185\240\159\143\187\226\153\128",
		["white_medium_small_square"] = "\226\151\189",
		["woman_office_worker_tone1"] = "\240\159\145\169\240\159\143\187\240\159\146\188",
		["woman_juggling_tone5"] = "\240\159\164\185\240\159\143\191\226\153\128",
		["woman_running_tone3"] = "\240\159\143\131\240\159\143\189\226\153\128",
		["woman_cartwheeling_tone2"] = "\240\159\164\184\240\159\143\188\226\153\128",
		["woman_juggling_tone1"] = "\240\159\164\185\240\159\143\187\226\153\128",
		["woman_climbing_tone5"] = "\240\159\167\151\240\159\143\191\226\153\128",
		["woman_mechanic_tone5"] = "\240\159\145\169\240\159\143\191\240\159\148\167",
		["woman_detective"] = "\240\159\149\181\226\153\128",
		["woman_artist_tone2"] = "\240\159\145\169\240\159\143\188\240\159\142\168",
		["woman_cook_tone4"] = "\240\159\145\169\240\159\143\190\240\159\141\179",
		["woman_gesturing_ok"] = "\240\159\153\134\226\153\128",
		["woman_guard_tone1"] = "\240\159\146\130\240\159\143\187\226\153\128",
		["woman_guard_tone2"] = "\240\159\146\130\240\159\143\188\226\153\128",
		["woman_with_headscarf_tone1"] = "\240\159\167\149\240\159\143\187",
		["woman"] = "\240\159\145\169",
		["woman_rowing_boat_tone4"] = "\240\159\154\163\240\159\143\190\226\153\128",
		["woman_walking_tone1"] = "\240\159\154\182\240\159\143\187\226\153\128",
		["watch"] = "\226\140\154",
		["woman_elf_tone4"] = "\240\159\167\157\240\159\143\190\226\153\128",
		["woman_farmer"] = "\240\159\145\169\240\159\140\190",
		["woman_playing_water_polo"] = "\240\159\164\189\226\153\128",
		["woman_firefighter_tone5"] = "\240\159\145\169\240\159\143\191\240\159\154\146",
		["woman_vampire"] = "\240\159\167\155\226\153\128",
		["woman_tipping_hand_tone3"] = "\240\159\146\129\240\159\143\189\226\153\128",
		["woman_construction_worker_tone2"] = "\240\159\145\183\240\159\143\188\226\153\128",
		["womans_clothes"] = "\240\159\145\154",
		["woman_tipping_hand_tone2"] = "\240\159\146\129\240\159\143\188\226\153\128",
		["woman_playing_handball_tone4"] = "\240\159\164\190\240\159\143\190\226\153\128",
		["woman_fairy_tone2"] = "\240\159\167\154\240\159\143\188\226\153\128",
		["woman_in_lotus_position_tone1"] = "\240\159\167\152\240\159\143\187\226\153\128",
		["wink"] = "\240\159\152\137",
		["woman_lifting_weights"] = "\240\159\143\139\226\153\128",
		["woman_cook_tone5"] = "\240\159\145\169\240\159\143\191\240\159\141\179",
		["woman_cook_tone2"] = "\240\159\145\169\240\159\143\188\240\159\141\179",
		["woman_pilot"] = "\240\159\145\169\226\156\136",
		["woman_construction_worker"] = "\240\159\145\183\226\153\128",
		["woman_firefighter_tone1"] = "\240\159\145\169\240\159\143\187\240\159\154\146",
		["woman_raising_hand_tone4"] = "\240\159\153\139\240\159\143\190\226\153\128",
		["woman_rowing_boat_tone3"] = "\240\159\154\163\240\159\143\189\226\153\128",
		["woman_cartwheeling_tone5"] = "\240\159\164\184\240\159\143\191\226\153\128",
		["woman_health_worker_tone4"] = "\240\159\145\169\240\159\143\190\226\154\149",
		["woman_mage_tone1"] = "\240\159\167\153\240\159\143\187\226\153\128",
		["woman_climbing_tone1"] = "\240\159\167\151\240\159\143\187\226\153\128",
		["white_sun_small_cloud"] = "\240\159\140\164",
		["woman_gesturing_ok_tone4"] = "\240\159\153\134\240\159\143\190\226\153\128",
		["woman_with_headscarf_tone2"] = "\240\159\167\149\240\159\143\188",
		["woman_police_officer_tone5"] = "\240\159\145\174\240\159\143\191\226\153\128",
		["woman_judge_tone5"] = "\240\159\145\169\240\159\143\191\226\154\150",
		["woman_playing_water_polo_tone3"] = "\240\159\164\189\240\159\143\189\226\153\128",
		["woman_biking_tone4"] = "\240\159\154\180\240\159\143\190\226\153\128",
		["woman_rowing_boat_tone2"] = "\240\159\154\163\240\159\143\188\226\153\128",
		["woman_gesturing_no_tone2"] = "\240\159\153\133\240\159\143\188\226\153\128",
		["woman_police_officer_tone2"] = "\240\159\145\174\240\159\143\188\226\153\128",
		["woman_running_tone4"] = "\240\159\143\131\240\159\143\190\226\153\128",
		["woman_in_lotus_position"] = "\240\159\167\152\226\153\128",
		["woman_factory_worker_tone1"] = "\240\159\145\169\240\159\143\187\240\159\143\173",
		["woman_teacher_tone3"] = "\240\159\145\169\240\159\143\189\240\159\143\171",
		["woman_farmer_tone3"] = "\240\159\145\169\240\159\143\189\240\159\140\190",
		["waning_gibbous_moon"] = "\240\159\140\150",
		["woman_student_tone5"] = "\240\159\145\169\240\159\143\191\240\159\142\147",
		["woman_teacher_tone2"] = "\240\159\145\169\240\159\143\188\240\159\143\171",
		["woman_cartwheeling_tone4"] = "\240\159\164\184\240\159\143\190\226\153\128",
		["woman_gesturing_no_tone5"] = "\240\159\153\133\240\159\143\191\226\153\128",
		["woman_swimming_tone5"] = "\240\159\143\138\240\159\143\191\226\153\128",
		["white_sun_cloud"] = "\240\159\140\165",
		["woman_tone1"] = "\240\159\145\169\240\159\143\187",
		["wave_tone3"] = "\240\159\145\139\240\159\143\189",
		["woman_golfing_tone3"] = "\240\159\143\140\240\159\143\189\226\153\128",
		["woman_playing_water_polo_tone2"] = "\240\159\164\189\240\159\143\188\226\153\128",
		["woman_getting_haircut_tone4"] = "\240\159\146\135\240\159\143\190\226\153\128",
		["woman_climbing_tone3"] = "\240\159\167\151\240\159\143\189\226\153\128",
		["woman_pilot_tone1"] = "\240\159\145\169\240\159\143\187\226\156\136",
		["woman_judge_tone3"] = "\240\159\145\169\240\159\143\189\226\154\150",
		["woman_artist_tone4"] = "\240\159\145\169\240\159\143\190\240\159\142\168",
		["woman_with_headscarf_tone5"] = "\240\159\167\149\240\159\143\191",
		["woman_wearing_turban"] = "\240\159\145\179\226\153\128",
		["wheelchair"] = "\226\153\191",
		["woman_detective_tone4"] = "\240\159\149\181\240\159\143\190\226\153\128",
		["water_buffalo"] = "\240\159\144\131",
		["woman_technologist_tone3"] = "\240\159\145\169\240\159\143\189\240\159\146\187",
		["woman_bowing_tone2"] = "\240\159\153\135\240\159\143\188\226\153\128",
		["woman_gesturing_no"] = "\240\159\153\133\226\153\128",
		["woman_factory_worker_tone5"] = "\240\159\145\169\240\159\143\191\240\159\143\173",
		["woman_surfing_tone2"] = "\240\159\143\132\240\159\143\188\226\153\128",
		["woman_getting_face_massage_tone5"] = "\240\159\146\134\240\159\143\191\226\153\128",
		["woman_pouting"] = "\240\159\153\142\226\153\128",
		["white_check_mark"] = "\226\156\133",
		["woman_mechanic_tone4"] = "\240\159\145\169\240\159\143\190\240\159\148\167",
		["woman_frowning_tone2"] = "\240\159\153\141\240\159\143\188\226\153\128",
		["woman_astronaut_tone2"] = "\240\159\145\169\240\159\143\188\240\159\154\128",
		["woman_rowing_boat"] = "\240\159\154\163\226\153\128",
		["wilted_rose"] = "\240\159\165\128",
		["woman_swimming_tone3"] = "\240\159\143\138\240\159\143\189\226\153\128",
		["woman_pouting_tone5"] = "\240\159\153\142\240\159\143\191\226\153\128",
		["woman_shrugging_tone4"] = "\240\159\164\183\240\159\143\190\226\153\128",
		["wave_tone2"] = "\240\159\145\139\240\159\143\188",
		["woman_biking"] = "\240\159\154\180\226\153\128",
		["white_flower"] = "\240\159\146\174",
		["woman_climbing_tone2"] = "\240\159\167\151\240\159\143\188\226\153\128",
		["woman_bowing_tone4"] = "\240\159\153\135\240\159\143\190\226\153\128",
		["woman_bouncing_ball_tone3"] = "\226\155\185\240\159\143\189\226\153\128",
		["woman_elf_tone3"] = "\240\159\167\157\240\159\143\189\226\153\128",
		["woman_scientist_tone1"] = "\240\159\145\169\240\159\143\187\240\159\148\172",
		["woman_golfing_tone1"] = "\240\159\143\140\240\159\143\187\226\153\128",
		["woman_farmer_tone4"] = "\240\159\145\169\240\159\143\190\240\159\140\190",
		["woman_cook_tone1"] = "\240\159\145\169\240\159\143\187\240\159\141\179",
		["woman_construction_worker_tone3"] = "\240\159\145\183\240\159\143\189\226\153\128",
		["woman_student_tone1"] = "\240\159\145\169\240\159\143\187\240\159\142\147",
		["woman_facepalming_tone3"] = "\240\159\164\166\240\159\143\189\226\153\128",
		["woman_lifting_weights_tone2"] = "\240\159\143\139\240\159\143\188\226\153\128",
		["woman_mage_tone2"] = "\240\159\167\153\240\159\143\188\226\153\128",
		["wastebasket"] = "\240\159\151\145",
		["woman_bowing_tone1"] = "\240\159\153\135\240\159\143\187\226\153\128",
		["woman_office_worker_tone2"] = "\240\159\145\169\240\159\143\188\240\159\146\188",
		["writing_hand_tone3"] = "\226\156\141\240\159\143\189",
		["wave_tone5"] = "\240\159\145\139\240\159\143\191",
		["woman_playing_water_polo_tone1"] = "\240\159\164\189\240\159\143\187\226\153\128",
		["writing_hand_tone1"] = "\226\156\141\240\159\143\187",
		["woman_detective_tone3"] = "\240\159\149\181\240\159\143\189\226\153\128",
		["woman_technologist"] = "\240\159\145\169\240\159\146\187",
		["woman_zombie"] = "\240\159\167\159\226\153\128",
		["woman_playing_handball_tone5"] = "\240\159\164\190\240\159\143\191\226\153\128",
		["woman_getting_haircut"] = "\240\159\146\135\226\153\128",
		["woman_mage_tone5"] = "\240\159\167\153\240\159\143\191\226\153\128",
		["woman_student_tone3"] = "\240\159\145\169\240\159\143\189\240\159\142\147",
		["woman_tone2"] = "\240\159\145\169\240\159\143\188",
		["woman_elf"] = "\240\159\167\157\226\153\128",
		["woman_with_headscarf_tone4"] = "\240\159\167\149\240\159\143\190",
		["woman_mechanic_tone3"] = "\240\159\145\169\240\159\143\189\240\159\148\167",
		["woman_facepalming_tone1"] = "\240\159\164\166\240\159\143\187\226\153\128",
		["wolf"] = "\240\159\144\186",
		["woman_golfing_tone2"] = "\240\159\143\140\240\159\143\188\226\153\128",
		["woman_biking_tone3"] = "\240\159\154\180\240\159\143\189\226\153\128",
		["woman_surfing_tone5"] = "\240\159\143\132\240\159\143\191\226\153\128",
		["woman_golfing_tone4"] = "\240\159\143\140\240\159\143\190\226\153\128",
		["woman_singer"] = "\240\159\145\169\240\159\142\164",
		["woman_cartwheeling_tone3"] = "\240\159\164\184\240\159\143\189\226\153\128",
		["woman_construction_worker_tone5"] = "\240\159\145\183\240\159\143\191\226\153\128",
		["women_with_bunny_ears_partying"] = "\240\159\145\175\226\153\128",
		["woman_facepalming_tone4"] = "\240\159\164\166\240\159\143\190\226\153\128",
		["womens"] = "\240\159\154\186",
		["woman_police_officer_tone4"] = "\240\159\145\174\240\159\143\190\226\153\128",
		["womans_hat"] = "\240\159\145\146"
	},
	["v"] = {
		["v_tone3"] = "\226\156\140\240\159\143\189",
		["vampire_tone3"] = "\240\159\167\155\240\159\143\189",
		["vhs"] = "\240\159\147\188",
		["vibration_mode"] = "\240\159\147\179",
		["volleyball"] = "\240\159\143\144",
		["vampire"] = "\240\159\167\155",
		["v_tone4"] = "\226\156\140\240\159\143\190",
		["virgo"] = "\226\153\141",
		["v_tone5"] = "\226\156\140\240\159\143\191",
		["video_camera"] = "\240\159\147\185",
		["vampire_tone2"] = "\240\159\167\155\240\159\143\188",
		["vampire_tone5"] = "\240\159\167\155\240\159\143\191",
		["v"] = "\226\156\140",
		["video_game"] = "\240\159\142\174",
		["v_tone2"] = "\226\156\140\240\159\143\188",
		["violin"] = "\240\159\142\187",
		["vampire_tone1"] = "\240\159\167\155\240\159\143\187",
		["volcano"] = "\240\159\140\139",
		["v_tone1"] = "\226\156\140\240\159\143\187",
		["vampire_tone4"] = "\240\159\167\155\240\159\143\190",
		["vulcan"] = "\240\159\150\150"
	},
	["y"] = {
		["yum"] = "\240\159\152\139",
		["yin_yang"] = "\226\152\175",
		["yen"] = "\240\159\146\180"
	},
	["8"] = {
		["8ball"] = "\240\159\142\177"
	},
	["z"] = {
		["zipper_mouth"] = "\240\159\164\144",
		["zzz"] = "\240\159\146\164",
		["zebra"] = "\240\159\166\147",
		["zombie"] = "\240\159\167\159"
	},
	["q"] = {
		["question"] = "\226\157\147"
	}
}

-- Module:

local keys
return {
	search = function(query)
		local matches = {}
		for key,emoji in pairs(list[query:sub(1,1):lower()] or {}) do
			if(key:sub(1,#query) == query) then
				table.insert(matches,{key,emoji})
			end
		end
		keys = {}
		local ret = {}
		for _,match in pairs(matches) do
			table.insert(keys,match[1])
		end
		table.sort(keys)
		for idx,key in pairs(keys) do
			for _,data in pairs(matches) do
				if(data[1] == key) then
					ret[idx] = data
				end
			end
		end
		return ret
	end,
	list = list,
	findDirect = function(self,query)
		local begin = query:sub(1,1)
		if(list[begin]) then
			return list[begin][query]
		end
	end,
}]]></ProtectedString>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a83</UniqueId>
												</Properties>
											</Item>
										</Item>
									</Item>
									<Item class="ModuleScript" referent="RBX76569c8724da4381921de050ab1ea9b9">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">autofill</string>
											<string name="ScriptGuid">{61046322-A2F3-4E05-8DF4-87E09BC0DA7C}</string>
											<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: autofill.lua
-- Description: Autofilling scripting-end system

local userInput = game:GetService("UserInputService")

return function(environment,chatbox)
	environment.utility.childAdded(environment.addons:WaitForChild("Autofills"),function(child)
		child.Parent = script.Parent:WaitForChild("autofills")
	end)
	
	local mainUi = environment.mainUi
	local autofillContainer,scroller,chatboxAutofill,selected = nil,nil,nil,nil
	local buttons,fills,options,pointers,held,heldGeneral = {},{},{},{},{},{}
	local pointer = 0
	
	local inBounds = function(gui1,gui2) 
		local gui1_topLeft = gui1.AbsolutePosition
		local gui1_bottomRight = gui1_topLeft + gui1.AbsoluteSize
		local gui2_topLeft = gui2.AbsolutePosition
		local gui2_bottomRight = gui2_topLeft + gui2.AbsoluteSize
		return ((gui1_topLeft.x < gui2_bottomRight.x and gui1_bottomRight.x > gui2_topLeft.x) and (gui1_topLeft.y < gui2_bottomRight.y and gui1_bottomRight.y > gui2_topLeft.y))
	end
	
	local returnTrue = function()
		return true
	end

	local new_button = function(text,order)
		local template = script:WaitForChild("Object"):Clone()
		template.LayoutOrder = order
		template.Label.Text = text
		return template
	end

	local clearAutofill = function()
		for _,obj in pairs(scroller:GetChildren()) do
			if(obj:IsA("TextButton")) then
				obj:Destroy()
			end
		end
	end
	
	local moveToCanvas = function(button)
		local s = button.AbsoluteSize.Y
		local currentPos = scroller.CanvasPosition.Y
		local base = (scroller.AbsoluteSize.Y + (scroller.AbsolutePosition.Y))
		environment.utility:tween({scroller,0.1,{
			CanvasPosition =  Vector2.new(0,((
				currentPos + (button.AbsolutePosition.Y - base)
			)+s))
		}})
	end

	local hovering = function(button)
		chatboxAutofill.Text = fills[button]
		selected = options[button]
		if(not inBounds(scroller,button)) then
			moveToCanvas(button)
		end
	end

	local handleMouseInput = function(button,inFrame)
		if(inFrame) then
			hovering(button)
			for _,btn in pairs(buttons) do
				environment.utility:tween({btn,0.01,{
					["BackgroundTransparency"] = ((inFrame and (btn == button)) and 0.5 or 1)
				}})
			end
		end
	end

	if(not mainUi) then
		local conn
		conn = game:GetService("RunService").Heartbeat:Connect(function()
			mainUi = environment.mainUi
			if(mainUi) then
				conn:Disconnect()
				autofillContainer = mainUi.autofillContainer
				scroller = autofillContainer.Container:WaitForChild("Scroller")
				chatboxAutofill = chatbox:WaitForChild("Bar")
			end
		end)
	end

	local picked = function(option)
		if(option.gsub) then
			chatbox.Text = chatbox.Text:gsub(unpack(option.gsub))
		end
		chatbox:CaptureFocus()
		chatbox.CursorPosition = 10000
	end

	local api,last = {},nil

	function api:fill(main)
		environment.autofillOpen = #main >= 1
		clearAutofill()
		buttons = {}
		fills = {}
		options = {}
		chatboxAutofill.Text = ""
		selected = nil
		pointer = 0
		pointers = {}
		last = tick()
				
		for key,option in pairs(main) do
			local button = new_button(option.text,key)
			button.Name = option.text
			button.Parent = scroller
			pointers[key] = button
			options[button] = option
			local changed,clicked = nil,nil
			changed = button.Changed:Connect(function()
				if(button:GetFullName() == button.Name) then
					clicked:Disconnect()
					changed:Disconnect()
				end
			end)
			clicked = button.MouseButton1Click:Connect(function()
				picked(option)
			end)
			table.insert(buttons,button)
			fills[button] = option.autofillBar
			local lastState
			environment.mouseMoved[button] = function(position)
				local inBounds = false
				if(position.X <= (button.AbsolutePosition.X + button.AbsoluteSize.X)) then
					if(position.X >= (button.AbsolutePosition.X)) then
						if(position.Y >= (button.AbsolutePosition.Y - button.AbsoluteSize.Y/2)) then
							if(position.Y <= (button.AbsolutePosition.Y + button.AbsoluteSize.Y/2)) then
								inBounds = true
							end
						end
					end
				end
				if(inBounds ~= lastState) then
					lastState = inBounds
					handleMouseInput(button,inBounds)
				end
			end
			if(key == 1) then
				lastState = true
				handleMouseInput(button,true)
			end
		end
		
		local contentSize = scroller.Layout.AbsoluteContentSize.Y
		local buttonLimit = 8
		local ySize = math.clamp(contentSize,0,(20 * buttonLimit) + (2 * buttonLimit))
		scroller.Size = UDim2.new(1,-10,0,ySize)
		scroller.CanvasSize = UDim2.new(1,0,0,contentSize)
		
		local baseSize = UDim2.new(1,0,0,ySize + (#main >= 1 and 8 or 0))
		scroller.Parent.Size = baseSize
		scroller.Parent.Parent.Size = baseSize
	end
	
	local lapse = function(input,callback,otherCondition)
		held[input] = true
		heldGeneral[input.KeyCode] = true
		otherCondition = otherCondition or returnTrue
		local began = tick()
		while(held[input] and otherCondition()) do
			local elapsed = tick() - began
			callback()
			task.wait(math.clamp((0.5 - (elapsed / 4)),0.1,math.huge))
		end
	end
	
	userInput.InputEnded:Connect(function(input)
		held[input] = nil
		heldGeneral[input.KeyCode] = nil
	end)
	
	userInput.InputBegan:Connect(function(input,gameProcessed)
		if(chatbox:IsFocused()) then
			local current = last
			if(input.KeyCode == Enum.KeyCode.Right or input.KeyCode == Enum.KeyCode.Tab) then
				if(selected ~= nil) then
					picked(selected)
				end
			elseif(input.KeyCode == Enum.KeyCode.Down and not heldGeneral[input.KeyCode]) then
				if(#pointers >= 1) then
					lapse(input,function()
						pointer = math.clamp(pointer + 1,1,#pointers)
						handleMouseInput(pointers[pointer],true)
					end,function()
						return(#pointers >= 1 and last == current)
					end)
				end
			elseif(input.KeyCode == Enum.KeyCode.Up and not heldGeneral[input.KeyCode]) then
				if(#pointers >= 1) then
					lapse(input,function()
						pointer = math.clamp(pointer - 1,1,#pointers)
						handleMouseInput(pointers[pointer],true)
					end,function()
						return(#pointers >= 1 and last == current)
					end)
				end
			end
		end
	end)

	return api
end]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a84</UniqueId>
										</Properties>
										<Item class="TextButton" referent="RBX8d22c3aa44a941c3be3b8bf7d16223bf">
											<Properties>
												<bool name="Active">false</bool>
												<Vector2 name="AnchorPoint">
													<X>0</X>
													<Y>0</Y>
												</Vector2>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<bool name="AutoButtonColor">false</bool>
												<bool name="AutoLocalize">true</bool>
												<token name="AutomaticSize">0</token>
												<Color3 name="BackgroundColor3">
													<R>0.117647059</R>
													<G>0.117647059</G>
													<B>0.117647059</B>
												</Color3>
												<float name="BackgroundTransparency">1</float>
												<Color3 name="BorderColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<token name="BorderMode">0</token>
												<int name="BorderSizePixel">1</int>
												<bool name="ClipsDescendants">false</bool>
												<bool name="Draggable">false</bool>
												<token name="Font">0</token>
												<Font name="FontFace"></Font>
												<int name="LayoutOrder">0</int>
												<float name="LineHeight">1</float>
												<int name="MaxVisibleGraphemes">-1</int>
												<bool name="Modal">false</bool>
												<string name="Name">Object</string>
												<Ref name="NextSelectionDown">null</Ref>
												<Ref name="NextSelectionLeft">null</Ref>
												<Ref name="NextSelectionRight">null</Ref>
												<Ref name="NextSelectionUp">null</Ref>
												<UDim2 name="Position">
													<XS>0</XS>
													<XO>0</XO>
													<YS>0</YS>
													<YO>0</YO>
												</UDim2>
												<bool name="RichText">false</bool>
												<Ref name="RootLocalizationTable">null</Ref>
												<float name="Rotation">0</float>
												<bool name="Selectable">false</bool>
												<bool name="Selected">false</bool>
												<Ref name="SelectionImageObject">null</Ref>
												<UDim2 name="Size">
													<XS>1</XS>
													<XO>-10</XO>
													<YS>0</YS>
													<YO>20</YO>
												</UDim2>
												<token name="SizeConstraint">0</token>
												<int64 name="SourceAssetId">-1</int64>
												<token name="Style">0</token>
												<BinaryString name="Tags"></BinaryString>
												<string name="Text"></string>
												<Color3 name="TextColor3">
													<R>0.105882362</R>
													<G>0.164705887</G>
													<B>0.207843155</B>
												</Color3>
												<bool name="TextScaled">false</bool>
												<float name="TextSize">8</float>
												<Color3 name="TextStrokeColor3">
													<R>0</R>
													<G>0</G>
													<B>0</B>
												</Color3>
												<float name="TextStrokeTransparency">1</float>
												<float name="TextTransparency">0.75</float>
												<token name="TextTruncate">0</token>
												<bool name="TextWrapped">false</bool>
												<token name="TextXAlignment">2</token>
												<token name="TextYAlignment">1</token>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025acb</UniqueId>
												<bool name="Visible">true</bool>
												<int name="ZIndex">1</int>
											</Properties>
											<Item class="UICorner" referent="RBX9c2473fd19094f01b9a903d592a32e69">
												<Properties>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<UDim name="CornerRadius">
														<S>0</S>
														<O>8</O>
													</UDim>
													<string name="Name">Corner</string>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b20</UniqueId>
												</Properties>
											</Item>
											<Item class="TextLabel" referent="RBX3bdd0719d9404481adde587115977c80">
												<Properties>
													<bool name="Active">false</bool>
													<Vector2 name="AnchorPoint">
														<X>0.5</X>
														<Y>0</Y>
													</Vector2>
													<BinaryString name="AttributesSerialize"></BinaryString>
													<bool name="AutoLocalize">true</bool>
													<token name="AutomaticSize">0</token>
													<Color3 name="BackgroundColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<float name="BackgroundTransparency">1</float>
													<Color3 name="BorderColor3">
														<R>0.105882362</R>
														<G>0.164705887</G>
														<B>0.207843155</B>
													</Color3>
													<token name="BorderMode">0</token>
													<int name="BorderSizePixel">1</int>
													<bool name="ClipsDescendants">false</bool>
													<bool name="Draggable">false</bool>
													<token name="Font">18</token>
													<Font name="FontFace"></Font>
													<int name="LayoutOrder">0</int>
													<float name="LineHeight">1</float>
													<int name="MaxVisibleGraphemes">-1</int>
													<string name="Name">Label</string>
													<Ref name="NextSelectionDown">null</Ref>
													<Ref name="NextSelectionLeft">null</Ref>
													<Ref name="NextSelectionRight">null</Ref>
													<Ref name="NextSelectionUp">null</Ref>
													<UDim2 name="Position">
														<XS>0.5</XS>
														<XO>0</XO>
														<YS>0</YS>
														<YO>0</YO>
													</UDim2>
													<bool name="RichText">false</bool>
													<Ref name="RootLocalizationTable">null</Ref>
													<float name="Rotation">0</float>
													<bool name="Selectable">false</bool>
													<Ref name="SelectionImageObject">null</Ref>
													<UDim2 name="Size">
														<XS>1</XS>
														<XO>-15</XO>
														<YS>0</YS>
														<YO>20</YO>
													</UDim2>
													<token name="SizeConstraint">0</token>
													<int64 name="SourceAssetId">-1</int64>
													<BinaryString name="Tags"></BinaryString>
													<string name="Text">Label</string>
													<Color3 name="TextColor3">
														<R>1</R>
														<G>1</G>
														<B>1</B>
													</Color3>
													<bool name="TextScaled">false</bool>
													<float name="TextSize">14</float>
													<Color3 name="TextStrokeColor3">
														<R>0</R>
														<G>0</G>
														<B>0</B>
													</Color3>
													<float name="TextStrokeTransparency">1</float>
													<float name="TextTransparency">0</float>
													<token name="TextTruncate">0</token>
													<bool name="TextWrapped">true</bool>
													<token name="TextXAlignment">0</token>
													<token name="TextYAlignment">1</token>
													<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ae3</UniqueId>
													<bool name="Visible">true</bool>
													<int name="ZIndex">1</int>
												</Properties>
											</Item>
										</Item>
									</Item>
									<Item class="ModuleScript" referent="RBXc32b9e3477bb4945aa9f4d81695e124c">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<Content name="LinkedSource"><null></null></Content>
											<string name="Name">manager</string>
											<string name="ScriptGuid">{48F8B901-1FCA-4251-A700-2136CD54600D}</string>
											<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: manager.lua
-- Description: Autofill manager

local runService = game:GetService("RunService")
local heartbeat = runService.Heartbeat

return function(api,autofills,box,environment)
	local justReplaced
	
	local security = function(fill)
		if(fill.security == "internal") then -- external autofills can also use this, 
			-- I just keep it on the low because it gives them internal API access and it
			-- is unstable if you don't know what you're doing.
			return environment
		end
	end

	local capture = function(text,fill,matches,...)
		local wasReplaced = false
		local gsub,toFill,callback = fill.onCapture(matches,...)
		if(gsub) then
			for pattern,replace in pairs(gsub) do
				text = text:gsub(pattern,replace)
				wasReplaced = true
			end
			justReplaced = text
			if(wasReplaced) then
				heartbeat:Wait() --> fixes some weird bug on mobile somehow :shrug:
				box.Text = text
			end
		end
		if(toFill) then
			api:fill(toFill)
		end
		if(callback) then
			callback()
		end
	end
	
	box:GetPropertyChangedSignal("Text"):Connect(function()
		api:fill({})
		local length = utf8.len(utf8.nfcnormalize(box.Text))
		if(length <= environment.config.Messages.MaximumLength and (box.Text ~= justReplaced)) then
			local text = box.Text
			for _,fill in pairs(autofills) do
				if(fill.beginsWith ~= "") then
					if(text:find(fill.beginsWith)) then
						local matches = {}
						local found,beginAt = 1,1
						repeat
							local startIdx,endIdx = text:find(fill.beginsWith,beginAt)
							if(endIdx and (endIdx < #text)) then
								local ending = fill.endsWith
								local split = text:sub(endIdx+1,#text):split(((ending ~= "" and ending) or nil))
								local between = split[1]
								if(#between:gsub(" ","") >= 1 or (fill.ignoreSpaces)) then
									table.insert(matches,{
										text = between,
										before = text:sub(1,startIdx-1),
										hasClosing = (#split >= 2)
									})
								end
							end
							found = (endIdx and 1 or 0)
							beginAt = (endIdx and endIdx + 1 or beginAt)
						until(found == 0)
						if(#matches >= 1) then
							capture(text,fill,matches,security(fill))
						end
					end
				else
					capture(text,fill,text,security(fill))
				end
			end
		end
	end)
end]]></ProtectedString>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a85</UniqueId>
										</Properties>
									</Item>
								</Item>
							</Item>
							<Item class="ModuleScript" referent="RBXee3eef75e3cc42a0bf5a9b521ed663d0">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">channelBar</string>
									<string name="ScriptGuid">{32335B77-3CC6-463C-A36E-3A6EF658A38C}</string>
									<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: channelBar.lua
-- Description: Set up the main channel bar

local players = game:GetService("Players")
local localPlayer = players.LocalPlayer

return function(environment)
	local channelBar = {}
	local defaultChannel = "Main"
	local teamPrefix = environment.localization:getMessagePrefix("Team")
	local whisperPrefix = environment.localization:getMessagePrefix("To")
	local ui = environment.channelBarUi

	local getById = function(id)
		for _,plr in pairs(players:GetPlayers()) do
			if(math.abs(plr.UserId) == id) then
				return plr
			end
		end
	end

	local parseChannelName = function(name)
		if(name:sub(1,5) == "team_") then
			return teamPrefix
		elseif(name:sub(1,8) == "whisper_") then
			local list = name:split("_")
			local ids = {tonumber(list[2]),tonumber(list[3])}
			local target,user =  nil,""
			for _,v in pairs(ids) do
				target = getById(v)
				if(target and (target ~= localPlayer) and (target ~= nil)) then
					user = target:GetAttribute("DisplayName")
					break
				end
			end
			return whisperPrefix .. " " .. user
		else
			return name
		end
	end

	function environment:getChannelName(name)
		return parseChannelName(name)
	end

	local connections = {}

	local clear = function()
		for _,child in pairs(ui:GetChildren()) do
			if(child:IsA("TextButton")) then
				child:Destroy()
			end
		end
		for _,connection in pairs(connections) do
			connection:Disconnect()
		end
		connections = {}
	end

	local getButton = function(text)
		local button = script:WaitForChild("Button"):Clone()
		button.Text = text
		return button
	end

	local currentlySelected
	local last
	local baseSize
	local cb

	local notificationCounts = {}
	local buttons = {}

	local handleNotifications = function(channel)
		local button = buttons[channel]
		if(button ~= nil) then
			if(notificationCounts[channel] ~= nil and (notificationCounts[channel] ~= 0)) then
				button.Notifs.Visible = true
				button.Notifs.Text = notificationCounts[channel]
			else
				button.Notifs.Visible = false
			end
		end
	end

	local clicked = function(channel)
		environment:clearChannelNotifications(channel)
		currentlySelected = channel
		environment:fetchChannelHistory(channel)
	end

	local update = function(channels,size)
		size = size or environment:getTextSize() - 1
		clear()
		local last = baseSize

		local found = false
		for _,channel in pairs(channels) do
			if(currentlySelected ~= nil and (channel == currentlySelected)) then
				found = true
			end

			local parsed = parseChannelName(channel)
			local button = getButton(parsed)
			button.Parent = ui
			button.UIPadding.PaddingLeft = UDim.new(0,math.ceil(size * (5/14)))
			button.UIPadding.PaddingRight = button.UIPadding.PaddingLeft
			button.Size = UDim2.fromOffset(0,(size * (25/14)))
			button.Visible = environment.config.UI.ChannelBarEnabled

			cb = cb or button.Parent.Parent.Parent.Parent
			baseSize = (button.Size.Y.Offset * 1.4)
			cb.Size = UDim2.new(1,0,0,baseSize)

			table.insert(connections,button.MouseButton1Click:Connect(function()
				clicked(channel)
			end))

			buttons[channel] = button
			handleNotifications(channel)
		end
		if(currentlySelected) then
			if(not found) then
				environment:fetchChannelHistory(channels[1])
			end
		end
		if(last ~= baseSize) then
			if(cb.Visible) then
				cb.Visible = false
				cb.Visible = true
			end
		end
	end

	function environment:getChannelBarSize()
		return baseSize
	end

	function environment:clearChannelNotifications(channelName)
		notificationCounts[channelName] = 0
		handleNotifications(channelName)
	end

	function environment:addNotificationToChannel(channelName)
		notificationCounts[channelName] = notificationCounts[channelName] or 0
		notificationCounts[channelName] += 1
		handleNotifications(channelName)
	end

	function environment:openChannelFromBar(channel)
		clicked(channel)
	end

	environment.network.onClientEvent("receiveChannelUpdate",function(channels)
		last = channels
		update(channels)
	end)

	environment.refreshChannelSizes = function(size)
		update(last,size)
	end

	return channelBar
end]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a86</UniqueId>
								</Properties>
								<Item class="TextButton" referent="RBX152d8c1ce972459999dd26bae6040c65">
									<Properties>
										<bool name="Active">true</bool>
										<Vector2 name="AnchorPoint">
											<X>0</X>
											<Y>0</Y>
										</Vector2>
										<BinaryString name="AttributesSerialize"></BinaryString>
										<bool name="AutoButtonColor">true</bool>
										<bool name="AutoLocalize">true</bool>
										<token name="AutomaticSize">1</token>
										<Color3 name="BackgroundColor3">
											<R>0</R>
											<G>0</G>
											<B>0</B>
										</Color3>
										<float name="BackgroundTransparency">0.5</float>
										<Color3 name="BorderColor3">
											<R>0.105882354</R>
											<G>0.164705887</G>
											<B>0.20784314</B>
										</Color3>
										<token name="BorderMode">0</token>
										<int name="BorderSizePixel">0</int>
										<bool name="ClipsDescendants">false</bool>
										<bool name="Draggable">false</bool>
										<token name="Font">18</token>
										<Font name="FontFace"></Font>
										<int name="LayoutOrder">0</int>
										<float name="LineHeight">1</float>
										<int name="MaxVisibleGraphemes">-1</int>
										<bool name="Modal">false</bool>
										<string name="Name">Button</string>
										<Ref name="NextSelectionDown">null</Ref>
										<Ref name="NextSelectionLeft">null</Ref>
										<Ref name="NextSelectionRight">null</Ref>
										<Ref name="NextSelectionUp">null</Ref>
										<UDim2 name="Position">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>0</YO>
										</UDim2>
										<bool name="RichText">false</bool>
										<Ref name="RootLocalizationTable">null</Ref>
										<float name="Rotation">0</float>
										<bool name="Selectable">true</bool>
										<bool name="Selected">false</bool>
										<Ref name="SelectionImageObject">null</Ref>
										<UDim2 name="Size">
											<XS>0</XS>
											<XO>0</XO>
											<YS>0</YS>
											<YO>25</YO>
										</UDim2>
										<token name="SizeConstraint">0</token>
										<int64 name="SourceAssetId">-1</int64>
										<token name="Style">0</token>
										<BinaryString name="Tags"></BinaryString>
										<string name="Text">Main</string>
										<Color3 name="TextColor3">
											<R>1</R>
											<G>1</G>
											<B>1</B>
										</Color3>
										<bool name="TextScaled">false</bool>
										<float name="TextSize">14</float>
										<Color3 name="TextStrokeColor3">
											<R>0</R>
											<G>0</G>
											<B>0</B>
										</Color3>
										<float name="TextStrokeTransparency">1</float>
										<float name="TextTransparency">0</float>
										<token name="TextTruncate">0</token>
										<bool name="TextWrapped">false</bool>
										<token name="TextXAlignment">2</token>
										<token name="TextYAlignment">1</token>
										<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025acc</UniqueId>
										<bool name="Visible">true</bool>
										<int name="ZIndex">2</int>
									</Properties>
									<Item class="UIPadding" referent="RBX4bf48c257dfd4d448d3a381614a76459">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<string name="Name">UIPadding</string>
											<UDim name="PaddingBottom">
												<S>0</S>
												<O>0</O>
											</UDim>
											<UDim name="PaddingLeft">
												<S>0</S>
												<O>5</O>
											</UDim>
											<UDim name="PaddingRight">
												<S>0</S>
												<O>5</O>
											</UDim>
											<UDim name="PaddingTop">
												<S>0</S>
												<O>0</O>
											</UDim>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b40</UniqueId>
										</Properties>
									</Item>
									<Item class="TextLabel" referent="RBX32283f25e6e348c5bdf20864891e3aa3">
										<Properties>
											<bool name="Active">true</bool>
											<Vector2 name="AnchorPoint">
												<X>0</X>
												<Y>0</Y>
											</Vector2>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<bool name="AutoLocalize">true</bool>
											<token name="AutomaticSize">0</token>
											<Color3 name="BackgroundColor3">
												<R>1</R>
												<G>0</G>
												<B>0.0431372561</B>
											</Color3>
											<float name="BackgroundTransparency">0</float>
											<Color3 name="BorderColor3">
												<R>0.105882362</R>
												<G>0.164705887</G>
												<B>0.207843155</B>
											</Color3>
											<token name="BorderMode">0</token>
											<int name="BorderSizePixel">0</int>
											<bool name="ClipsDescendants">false</bool>
											<bool name="Draggable">false</bool>
											<token name="Font">18</token>
											<Font name="FontFace"></Font>
											<int name="LayoutOrder">0</int>
											<float name="LineHeight">1</float>
											<int name="MaxVisibleGraphemes">-1</int>
											<string name="Name">Notifs</string>
											<Ref name="NextSelectionDown">null</Ref>
											<Ref name="NextSelectionLeft">null</Ref>
											<Ref name="NextSelectionRight">null</Ref>
											<Ref name="NextSelectionUp">null</Ref>
											<UDim2 name="Position">
												<XS>1</XS>
												<XO>0</XO>
												<YS>0</YS>
												<YO>0</YO>
											</UDim2>
											<bool name="RichText">false</bool>
											<Ref name="RootLocalizationTable">null</Ref>
											<float name="Rotation">0</float>
											<bool name="Selectable">true</bool>
											<Ref name="SelectionImageObject">null</Ref>
											<UDim2 name="Size">
												<XS>0</XS>
												<XO>12</XO>
												<YS>0</YS>
												<YO>12</YO>
											</UDim2>
											<token name="SizeConstraint">0</token>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<string name="Text">11</string>
											<Color3 name="TextColor3">
												<R>1</R>
												<G>1</G>
												<B>1</B>
											</Color3>
											<bool name="TextScaled">true</bool>
											<float name="TextSize">14</float>
											<Color3 name="TextStrokeColor3">
												<R>0</R>
												<G>0</G>
												<B>0</B>
											</Color3>
											<float name="TextStrokeTransparency">1</float>
											<float name="TextTransparency">0</float>
											<token name="TextTruncate">0</token>
											<bool name="TextWrapped">true</bool>
											<token name="TextXAlignment">2</token>
											<token name="TextYAlignment">1</token>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025ae4</UniqueId>
											<bool name="Visible">false</bool>
											<int name="ZIndex">4</int>
										</Properties>
										<Item class="UICorner" referent="RBXb54c63c726b941ddb740948ee471715a">
											<Properties>
												<BinaryString name="AttributesSerialize"></BinaryString>
												<UDim name="CornerRadius">
													<S>1</S>
													<O>0</O>
												</UDim>
												<string name="Name">Ignore</string>
												<int64 name="SourceAssetId">-1</int64>
												<BinaryString name="Tags"></BinaryString>
												<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b21</UniqueId>
											</Properties>
										</Item>
									</Item>
									<Item class="UICorner" referent="RBX59b50233ff024a1d8423756ade518458">
										<Properties>
											<BinaryString name="AttributesSerialize"></BinaryString>
											<UDim name="CornerRadius">
												<S>0</S>
												<O>8</O>
											</UDim>
											<string name="Name">UICorner</string>
											<int64 name="SourceAssetId">-1</int64>
											<BinaryString name="Tags"></BinaryString>
											<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025b22</UniqueId>
										</Properties>
									</Item>
								</Item>
							</Item>
						</Item>
						<Item class="ModuleScript" referent="RBXc6d9b6bede614d56904a4ebef4b4446c">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">api</string>
								<string name="ScriptGuid">{70B7B52B-2BD3-4B19-B7AC-51E10B1C6413}</string>
								<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: api.lua
-- Description: Client api module

return function(environment)
	local quickChatEnabled = environment.config.Messages.QuickChat

	local api = {}
	
	function api:getSetting(container,settingName)
		return environment.apis[container][settingName]
	end
	
	function api:getTopbarButton()
		return environment.settingIcon
	end
	
	if(quickChatEnabled) then
		function api:getQuickChatSlot(number)
			return environment:getQuickChatSlot(number)
		end
		
		function api:saveToQuickChatSlot(number,text)
			return environment:saveToSlot(number,text)
		end
	end
	
	function api:systemMessage(message)
		environment.message_senders.makeSm(message)
	end
	
	return api
end]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a87</UniqueId>
							</Properties>
						</Item>
					</Item>
					<Item class="ModuleScript" referent="RBX3f28b1302dcd4c1ca4338c880911a63a">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">privacy</string>
							<string name="ScriptGuid">{EE9D216F-BCD1-4D62-AF37-7E9FD444D219}</string>
							<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: privacy.lua
-- Description: Make sure user privacy settings are kept in check

local privacy = {}
local players = game:GetService("Players")
local guiService = game:GetService("GuiService")
local runService = game:GetService("RunService")
local chatService = game:GetService("Chat")

privacy.isXbox = guiService:IsTenFootInterface()

local success,canClientChat = pcall(function()
	return chatService:CanUserChatAsync(players.LocalPlayer.UserId)
end)
local canChat = success and (runService:IsStudio() or canClientChat)
if(canChat == false) then
	privacy.chatDisabled = true
elseif(privacy.isXbox) then
	privacy.chatDisabled = true
end

return privacy]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a88</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX6dfa68d3e9cf40a2a51c26a938e6183a">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">bubbleChat</string>
							<string name="ScriptGuid">{40048FF3-62F2-4CF6-B610-1E2455733625}</string>
							<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: bubbleChat.lua
-- Description: Bubble chat bc yes

local players = game:GetService("Players")
local localPlayer = players.LocalPlayer
local playerGui = localPlayer.PlayerGui

local bubbleChat = {}
local billboard = require(script:WaitForChild("billboard"))

function bubbleChat.init(config,network,environment)
	billboard.init(config,network,environment)
	local newBillboard = function(player)
		billboard:holster(player)
	end
	players.PlayerAdded:Connect(newBillboard)
	for _,player in pairs(players:GetPlayers()) do
		task.spawn(newBillboard,player)
	end
end

return bubbleChat]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a89</UniqueId>
						</Properties>
						<Item class="ModuleScript" referent="RBX1e5d5520efee4e409722db4b4e035755">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">billboard</string>
								<string name="ScriptGuid">{1B5ADB4C-5EA8-4423-B6BC-D0FBDDE03732}</string>
								<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: billboard.lua
-- Description: Billboard gui for bubble chat lol
-- Small credits:
-- @McThor2 - [Math help](https://devforum.roblox.com/t/raycast-between-2-attachments/976915/8)
-- @sleitnick - [Raycasting help](https://devforum.roblox.com/t/detect-if-player-is-looking-at-object/1479746/5)

local billboard = {}

function billboard.init(config,network,environment)
	local ui = require(script.Parent:WaitForChild("ui")).init(config)
	local stackModule = require(script:WaitForChild("stack"))(environment).init(config)

	local players = game:GetService("Players")
	local localPlayer = players.LocalPlayer

	local containerGui = Instance.new("ScreenGui")
	containerGui.Name = "bubbleChat"
	containerGui.Parent = localPlayer.PlayerGui
	containerGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
	containerGui.ResetOnSpawn = false
	environment.bubbleChatContainer = containerGui

	function billboard:holster(player)
		local isLocalPlayer = (player == localPlayer)
		local connections = {}
		local linked = {}
		local typingIndicator,gui,stack,lastState = nil,nil,nil,nil
		local link = function(signal)
			table.insert(connections,signal)
		end
		link(player.Changed:Connect(function()
			if(player:GetFullName() == player.Name) then
				for _,connection in pairs(connections) do
					connection:Disconnect()
				end
				connections = nil
				linked = nil
			end
		end))
		local linkAlwaysOnTop = function(gui,adornee)
			local camera = workspace.CurrentCamera
			local raycastParams = RaycastParams.new()
			raycastParams.IgnoreWater = true
			raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
			raycastParams.FilterDescendantsInstances = {adornee.Parent}
			link(camera.Changed:Connect(function()
				local vector,inViewport = camera:WorldToViewportPoint(adornee.Position)
				local onScreen = inViewport and vector.Z > 0
				if(onScreen) then
					local raycastResult = workspace:Raycast(camera.CFrame.Position,(adornee.Position - camera.CFrame.Position),raycastParams)
					local isVisible = not raycastResult
					gui.AlwaysOnTop = isVisible
				else
					gui.AlwaysOnTop = false
				end
			end))
		end
		local onCharacter = function(character)
			gui = ui.billboard.new(tostring(player.UserId))
			gui.Parent = containerGui
			gui.Adornee = character:WaitForChild("Head")
			gui.StudsOffset = Vector3.new(0,isLocalPlayer and 3.5 or 4,isLocalPlayer and 2 or 0.1)
			typingIndicator = ui.typingIndicator.new(gui.Container)
			typingIndicator.Visible = false
			stack = stackModule.new(gui)
			linked[character] = gui
			linkAlwaysOnTop(gui,gui.Adornee)
		end
		local onRemoving = function(character)
			if(linked[character]) then
				linked[character]:Destroy()
				linked[character] = nil
				stack:Destroy()
				lastState = nil
			end
		end
		link(player.CharacterAdded:Connect(onCharacter))
		link(player.CharacterRemoving:Connect(onRemoving))
		if(player.Character) then
			task.spawn(onCharacter,player.Character)
		end
		if(config.Config.TypingIndicator) then
			link(network.onClientEvent("typingIndicator",function(p,state) 
				if(p == player) then
					typingIndicator.Visible = state
					if(lastState ~= state) then
						lastState = state
						if(state) then
							stack:push(typingIndicator,true)
						else
							stack:remove(typingIndicator)
						end
					end
				end 
			end))
		end
		link(network.onClientEvent("receiveMessage",function(data)
			if(data.is_singular and data.messages[1].player == player and (environment.bubbleChatEnabled)) then
				local markdownEnabled = data.messages[1]["markdownEnabled"]
				local msg = data.messages[1]["message"]
				if(not environment.mutelist[player.UserId]) then
					stack:push(
						ui.bubble.new(
							markdownEnabled and environment.richText:markdown(msg) or environment.richText:escape(msg)
						,gui.Container)
					)
				end
			end
		end))
	end
end

return billboard]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a8a</UniqueId>
							</Properties>
							<Item class="ModuleScript" referent="RBXe5d4d943ee854f018a666a8b9b784dde">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Content name="LinkedSource"><null></null></Content>
									<string name="Name">stack</string>
									<string name="ScriptGuid">{26FF92B2-89F5-4ACE-9ED5-8ED3903D2A32}</string>
									<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: stack.lua
-- Description: Bubble chat 'stacks'

return function(environment)
	local stack = {}
	local tweenService = game:GetService("TweenService")

	local tween = function(object,properties)
		local tweenInfo = TweenInfo.new(0.1,environment.bubbleChatAnimationStyle,Enum.EasingDirection.Out)
		tweenService:Create(object,tweenInfo,properties):Play()
	end

	local fade = function(object)
		if(object:IsA("Frame")) then
			tween(object,{
				["BackgroundTransparency"] = 1
			})
		elseif(object:IsA("ImageLabel")) then
			tween(object,{
				["ImageTransparency"] = 1
			})
		elseif(object:IsA("TextLabel")) then
			tween(object,{
				["TextTransparency"] = 1
			})
		end
	end

	function stack.init(c)
		local config = c.Config
		local constructor = {}

		function constructor.new(gui)
			local stack = {
				queue = {}
			}

			function stack:update()
				local basePosition,yHeight = UDim2.fromScale(0.5,0.9),0
				for key,object in pairs(stack.queue) do
					object:TweenPosition(basePosition - UDim2.fromOffset(0,yHeight),Enum.EasingDirection.Out,config.EasingStyle,config.Length,true)
					object.caret.Visible = (key == 1)
					yHeight += (object.AbsoluteSize.Y + 4)
				end
			end

			function stack:remove(ui)
				local key = table.find(stack.queue,ui)
				if(key) then
					table.remove(stack.queue,key)
					local newQueue = {}
					for _,v in pairs(stack.queue) do
						table.insert(newQueue,v)
					end
					stack.queue = newQueue
					stack:update()
				end
			end

			function stack:fade(ui)
				for _,obj in pairs(ui:GetDescendants()) do
					fade(obj)
				end
				fade(ui)
				task.delay(0.15,function()
					ui:Destroy()
				end)
			end

			function stack:push(ui,exception)
				table.insert(stack.queue,1,ui)
				stack:update()
				if(#stack.queue > config.MaxMessages) then
					while(#stack.queue > config.MaxMessages) do
						local gui = stack.queue[#stack.queue]
						stack:fade(gui)
						stack:remove(gui)
					end
				end
				if(not exception) then
					task.delay(config.FadeoutTime,function()
						if(ui:GetFullName() ~= ui.Name) then
							stack:fade(ui)
							stack:remove(ui)
						end
					end)
				end
			end

			function stack:Destroy()
				for _,obj in pairs(stack.queue) do
					obj:Destroy()
				end
				for k,v in pairs(stack) do
					stack[k] = nil
				end
				stack = nil
			end

			return stack
		end

		return constructor
	end

	return stack
end]]></ProtectedString>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a8b</UniqueId>
								</Properties>
							</Item>
						</Item>
						<Item class="ModuleScript" referent="RBXe76f4a7853544996b5e97a1cbfa0706a">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">ui</string>
								<string name="ScriptGuid">{C546928E-0E19-44CF-8982-DC1D2B67CCEA}</string>
								<ProtectedString name="Source"><![CDATA[-- Author: @Jumpathy
-- Name: ui.lua
-- Description: Making ui work :sunglo:

return {
	init = function(c)
		local config = c.Config
		local textService = game:GetService("TextService")
		local tweenService = game:GetService("TweenService")
		local padding = config.Padding
		local tweenInfo = TweenInfo.new(0.3,config.EasingStyle,Enum.EasingDirection.Out,0,true,0.3)
		local label = Instance.new("TextLabel")
		label.RichText = true
		
		local getTextContent = function(text)
			label.Text = text
			return label.ContentText
		end
		
		local getBounds = function(text,font)
			return textService:GetTextSize(getTextContent(text),config.TextSize,(font or config.Font),Vector2.new(250,math.huge))
		end

		local pad = function(x,y)
			x += padding * 2
			y += padding * 2
			return x,y
		end

		local create = function(text,parent,font)
			local bounds = getBounds(text,font)
			local bubble,edge,label,caret = Instance.new("Frame"),Instance.new("UICorner"),Instance.new("TextLabel"),Instance.new("ImageLabel")

			bubble.Name = "bubble"
			bubble.AnchorPoint = Vector2.new(0.5,1)
			bubble.BackgroundColor3 = config.BubbleBackgroundColor
			bubble.Position = UDim2.new(0.5,0,0.9,0)
			bubble.Size = UDim2.fromOffset(pad(bounds.X,bounds.Y))

			edge.CornerRadius = UDim.new(0,5)
			edge.Name = "edge"
			edge.Parent = bubble

			label.Name = "Label"
			label.Parent = bubble
			label.AnchorPoint = Vector2.new(0.5,0.5)
			label.BackgroundColor3 = Color3.fromRGB(0,0,0)
			label.BackgroundTransparency = 1
			label.Position = UDim2.new(0.5,0,0.5,0)
			label.Size = UDim2.new(1,0,1,0)
			label.Font = (font or config.BubbleFont)
			label.Text = text
			label.TextColor3 = config.BubbleTextColor
			label.TextSize = config.TextSize
			label.TextWrapped = true
			label.RichText = true
			
			caret.Name = "caret"
			caret.Parent = bubble
			caret.AnchorPoint = Vector2.new(0.5,0)
			caret.BackgroundTransparency = 1
			caret.Position = UDim2.new(0.5,0,0.99,0)
			caret.Size = UDim2.new(0,5,0,5)
			caret.Image = "rbxasset://textures/ui/InGameChat/Caret.png"
			caret.ImageColor3 = config.BubbleBackgroundColor
			if(parent) then
				bubble.Parent = parent
			end
			
			return bubble
		end

		local newDot = function(x)
			local dot = Instance.new("Frame")
			local corner = Instance.new("UICorner")

			dot.Size = UDim2.fromOffset(x/4,x/4)
			dot.BackgroundColor3 = config.TypingIndicatorColor

			corner.Parent = dot
			corner.CornerRadius = UDim.new(1,0)

			return dot
		end

		local animateIndicator = function(dots)
			-- recursive tweening bc the inf loop has undesirable behavior for me (after like 5 minutes of tweening they all line up for some reason)
			task.spawn(function()
				local tweens = {}
				for key,dot in pairs(dots) do
					if(dot:GetFullName() ~= dot.Name) then
						task.wait(0.3)
						local newPos = dot.Position - UDim2.fromOffset(0,5)
						local new
						local loops = 0
						new = function()
							if(dot:GetFullName() ~= dot.Name) then
								local tween = tweenService:Create(dot,tweenInfo,{["Position"] = newPos,["BackgroundTransparency"] = 0.6})
								tween:Play()
								local completed
								completed = tween.Completed:Connect(function()
									completed:Disconnect()
									tween = nil
									new()
								end)
							else
								new = nil
							end
						end
						new()
					end
				end
			end)
		end

		local typingIndicator = function(parent)
			local bubble = create("......",nil,Enum.Font.GothamSemibold)
			local dots = {}

			local xSize = bubble.AbsoluteSize.X
			bubble.Size += UDim2.fromOffset(15,0)
			bubble.Label:Destroy()

			local container = Instance.new("Frame")
			container.Parent = bubble
			container.Size = UDim2.fromScale(1,0.5)
			container.Position = UDim2.fromScale(0.5,0.5)
			container.AnchorPoint = Vector2.new(0.5,0.5)
			container.BackgroundTransparency = 1

			local layout = Instance.new("UIListLayout")
			layout.Parent = container
			layout.Padding = UDim.new(0,5)
			layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
			layout.VerticalAlignment = Enum.VerticalAlignment.Center
			layout.FillDirection = Enum.FillDirection.Horizontal

			for i = 1,3 do
				local dot = newDot(xSize)
				dot.Parent = container
				dot.Name = i
				dots[i] = dot
			end

			for _,dot in pairs(dots) do
				dot.AnchorPoint = Vector2.new(0,0.5)
				dot.Position = UDim2.new(0,dot.AbsolutePosition.X,0.5,0)
			end

			layout:Destroy()
			animateIndicator(dots)
			
			bubble.Parent = parent
			return bubble
		end

		local billboard = function(name)
			local billboard = Instance.new("BillboardGui")
			local container = Instance.new("Frame")

			billboard.Name = name
			billboard.Active = true
			billboard.MaxDistance = 40
			billboard.Size = UDim2.new(5, 0, 5, 0)
			billboard.StudsOffset = Vector3.new(0, 3.5, 2)

			container.Name = "Container"
			container.Parent = billboard
			container.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			container.BackgroundTransparency = 1.000
			container.Size = UDim2.new(1, 0, 1, 0)
			return billboard
		end

		return {
			bubble = {
				new = create
			},
			typingIndicator = {
				new = typingIndicator
			},
			billboard = {
				new = billboard
			}
		}
	end,
}]]></ProtectedString>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f300025a8c</UniqueId>
							</Properties>
						</Item>
					</Item>
				</Item>
			</Item>
		</Item>
	</Item>
	<Item class="ServerStorage" referent="RBX33bd50ac0a5b4307a7f454a3f5f26abe">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ServerStorage</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b5b6</UniqueId>
		</Properties>
	</Item>
	<Item class="ReplicatedStorage" referent="RBXd674ca9ca28e4633b037b80c99f19b1d">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ReplicatedStorage</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b5b7</UniqueId>
		</Properties>
	</Item>
	<Item class="LuaWebService" referent="RBXb9d65728f58949448eee121ae049d23d">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b5c3</UniqueId>
		</Properties>
	</Item>
	<Item class="ProcessInstancePhysicsService" referent="RBX0e0fec15c9b04ee7a239f17fb2abb15c">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ProcessInstancePhysicsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b5c6</UniqueId>
		</Properties>
	</Item>
	<Item class="Lighting" referent="RBX897859488a974745a493e116565a4aa9">
		<Properties>
			<Color3 name="Ambient">
				<R>0.274509817</R>
				<G>0.274509817</G>
				<B>0.274509817</B>
			</Color3>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<float name="Brightness">3</float>
			<Color3 name="ColorShift_Bottom">
				<R>0</R>
				<G>0</G>
				<B>0</B>
			</Color3>
			<Color3 name="ColorShift_Top">
				<R>0</R>
				<G>0</G>
				<B>0</B>
			</Color3>
			<float name="EnvironmentDiffuseScale">1</float>
			<float name="EnvironmentSpecularScale">1</float>
			<float name="ExposureCompensation">0</float>
			<Color3 name="FogColor">
				<R>0.752941251</R>
				<G>0.752941251</G>
				<B>0.752941251</B>
			</Color3>
			<float name="FogEnd">100000</float>
			<float name="FogStart">0</float>
			<float name="GeographicLatitude">0</float>
			<bool name="GlobalShadows">true</bool>
			<string name="Name">Lighting</string>
			<Color3 name="OutdoorAmbient">
				<R>0.274509817</R>
				<G>0.274509817</G>
				<B>0.274509817</B>
			</Color3>
			<bool name="Outlines">false</bool>
			<float name="ShadowSoftness">0.200000003</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<token name="Technology">3</token>
			<string name="TimeOfDay">14:30:00</string>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b5e9</UniqueId>
		</Properties>
		<Item class="Sky" referent="RBX87ec8ceeb55b4b1f8a214a1cd3297445">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="CelestialBodiesShown">true</bool>
				<float name="MoonAngularSize">11</float>
				<Content name="MoonTextureId"><url>rbxassetid://6444320592</url></Content>
				<string name="Name">Sky</string>
				<Content name="SkyboxBk"><url>rbxassetid://6444884337</url></Content>
				<Content name="SkyboxDn"><url>rbxassetid://6444884785</url></Content>
				<Content name="SkyboxFt"><url>rbxassetid://6444884337</url></Content>
				<Content name="SkyboxLf"><url>rbxassetid://6444884337</url></Content>
				<Content name="SkyboxRt"><url>rbxassetid://6444884337</url></Content>
				<Content name="SkyboxUp"><url>rbxassetid://6412503613</url></Content>
				<int64 name="SourceAssetId">332039975</int64>
				<int name="StarCount">3000</int>
				<float name="SunAngularSize">11</float>
				<Content name="SunTextureId"><url>rbxassetid://6196665106</url></Content>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b789</UniqueId>
			</Properties>
		</Item>
		<Item class="SunRaysEffect" referent="RBXd2285c1d62aa49239e457790ae3ec879">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="Enabled">true</bool>
				<float name="Intensity">0.00999999978</float>
				<string name="Name">SunRays</string>
				<int64 name="SourceAssetId">-1</int64>
				<float name="Spread">0.100000001</float>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b78e</UniqueId>
			</Properties>
		</Item>
		<Item class="Atmosphere" referent="RBX0c2990521eaa4a26b53db6ee9b5df5d9">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Color3 name="Color">
					<R>0.78039217</R>
					<G>0.78039217</G>
					<B>0.78039217</B>
				</Color3>
				<Color3 name="Decay">
					<R>0.41568628</R>
					<G>0.43921569</G>
					<B>0.490196079</B>
				</Color3>
				<float name="Density">0.300000012</float>
				<float name="Glare">0</float>
				<float name="Haze">0</float>
				<string name="Name">Atmosphere</string>
				<float name="Offset">0.25</float>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b781</UniqueId>
			</Properties>
		</Item>
		<Item class="BloomEffect" referent="RBX2d00446bf9844db08a31f86ad0a59e00">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="Enabled">true</bool>
				<float name="Intensity">1</float>
				<string name="Name">Bloom</string>
				<float name="Size">24</float>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<float name="Threshold">2</float>
				<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b782</UniqueId>
			</Properties>
		</Item>
		<Item class="DepthOfFieldEffect" referent="RBX302b5b174706427f9bebf550674c3cd7">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="Enabled">false</bool>
				<float name="FarIntensity">0.100000001</float>
				<float name="FocusDistance">0.0500000007</float>
				<float name="InFocusRadius">30</float>
				<string name="Name">DepthOfField</string>
				<float name="NearIntensity">0.75</float>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b786</UniqueId>
			</Properties>
		</Item>
	</Item>
	<Item class="LodDataService" referent="RBXa7690a5022e84b39b9515eb47baf3fa3">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b5ed</UniqueId>
		</Properties>
	</Item>
	<Item class="DataStoreService" referent="RBX1b8c3187d5644abba5d91a667682a0b6">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="AutomaticRetry">true</bool>
			<bool name="LegacyNamingScheme">false</bool>
			<string name="Name">DataStoreService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b784</UniqueId>
		</Properties>
	</Item>
	<Item class="HttpService" referent="RBXbc90bc0ffa10412c9aba1d18c08c7dfd">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="HttpEnabled">false</bool>
			<string name="Name">HttpService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b787</UniqueId>
		</Properties>
	</Item>
	<Item class="LanguageService" referent="RBX05d5898da6c043b1aab458f195b06570">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">LanguageService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b77e</UniqueId>
		</Properties>
	</Item>
	<Item class="ProximityPromptService" referent="RBXb538adac2ce54c2399886b154f6ef33c">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="Enabled">true</bool>
			<int name="MaxPromptsVisible">16</int>
			<string name="Name">ProximityPromptService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f3000252dd</UniqueId>
		</Properties>
	</Item>
	<Item class="Teams" referent="RBX39b99b6aec32401a84cf2747f104b4b0">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Teams</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b78f</UniqueId>
		</Properties>
	</Item>
	<Item class="TestService" referent="RBXa90bd40feb064071a8c8540f6e7058d0">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="AutoRuns">true</bool>
			<string name="Description"></string>
			<bool name="ExecuteWithStudioRun">false</bool>
			<bool name="Is30FpsThrottleEnabled">true</bool>
			<bool name="IsPhysicsEnvironmentalThrottled">true</bool>
			<bool name="IsSleepAllowed">true</bool>
			<string name="Name">TestService</string>
			<int name="NumberOfPlayers">0</int>
			<double name="SimulateSecondsLag">0</double>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<double name="Timeout">10</double>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b791</UniqueId>
		</Properties>
	</Item>
	<Item class="VirtualInputManager" referent="RBXd48801bffd6443288711ac0b54a7d706">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">VirtualInputManager</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">7c0d8ec970d5a2d3026e39f30001b793</UniqueId>
		</Properties>
	</Item>
	<SharedStrings>
		<SharedString md5="yuZpQdnvvUBOTYh1jqZ2cA=="></SharedString>
		<SharedString md5="+qv2o0HSW+htH+ALwYQpiw==">Q1NHUEhTAAAAAEJMT0NL</SharedString>
	</SharedStrings>
</roblox>